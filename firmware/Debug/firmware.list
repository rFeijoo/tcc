
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a654  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800a838  0800a838  0001a838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae0c  0800ae0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae0c  0800ae0c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae0c  0800ae0c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae0c  0800ae0c  0001ae0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae10  0800ae10  0001ae10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ae14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e0  0800aff4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800aff4  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002452f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d4b  00000000  00000000  0004473f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00048490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  00049b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b266  00000000  00000000  0004b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4f1  00000000  00000000  0007626e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f123  00000000  00000000  0009175f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a0882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007200  00000000  00000000  001a08d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a81c 	.word	0x0800a81c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800a81c 	.word	0x0800a81c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2220      	movs	r2, #32
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f006 fd4d 	bl	8007750 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cb6:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cbe:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ce4:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d20:	4819      	ldr	r0, [pc, #100]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d22:	f002 fa55 	bl	80031d0 <HAL_ADC_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d2c:	f000 fec0 	bl	8001ab0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000d30:	2306      	movs	r3, #6
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d44:	f003 feca 	bl	8004adc <HAL_ADCEx_MultiModeConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000d4e:	f000 feaf 	bl	8001ab0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_ADC1_Init+0xf4>)
 8000d54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d56:	2306      	movs	r3, #6
 8000d58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d5e:	237f      	movs	r3, #127	; 0x7f
 8000d60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d62:	2304      	movs	r3, #4
 8000d64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d70:	f003 f8ac 	bl	8003ecc <HAL_ADC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d7a:	f000 fe99 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3730      	adds	r7, #48	; 0x30
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200002ec 	.word	0x200002ec
 8000d8c:	21800100 	.word	0x21800100

08000d90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2220      	movs	r2, #32
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fcd7 	bl	8007750 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000da4:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <MX_ADC2_Init+0xb8>)
 8000da6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dfe:	4811      	ldr	r0, [pc, #68]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000e00:	f002 f9e6 	bl	80031d0 <HAL_ADC_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000e0a:	f000 fe51 	bl	8001ab0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_ADC2_Init+0xbc>)
 8000e10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e12:	2306      	movs	r3, #6
 8000e14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1a:	237f      	movs	r3, #127	; 0x7f
 8000e1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000e2c:	f003 f84e 	bl	8003ecc <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e36:	f000 fe3b 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000214 	.word	0x20000214
 8000e48:	50000100 	.word	0x50000100
 8000e4c:	25b00200 	.word	0x25b00200

08000e50 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2220      	movs	r2, #32
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 fc77 	bl	8007750 <memset>
  /* USER CODE BEGIN ADC5_Init 1 */

  /* USER CODE END ADC5_Init 1 */
  /** Common config
  */
  hadc5.Instance = ADC5;
 8000e62:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e64:	4a2b      	ldr	r2, [pc, #172]	; (8000f14 <MX_ADC5_Init+0xc4>)
 8000e66:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e6e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ecc:	f002 f980 	bl	80031d0 <HAL_ADC_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000ed6:	f000 fdeb 	bl	8001ab0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_ADC5_Init+0xc8>)
 8000edc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ede:	2306      	movs	r3, #6
 8000ee0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee6:	237f      	movs	r3, #127	; 0x7f
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eea:	2304      	movs	r3, #4
 8000eec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ef8:	f002 ffe8 	bl	8003ecc <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000f02:	f000 fdd5 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000280 	.word	0x20000280
 8000f14:	50000600 	.word	0x50000600
 8000f18:	90c00010 	.word	0x90c00010

08000f1c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3c:	d135      	bne.n	8000faa <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f3e:	4b47      	ldr	r3, [pc, #284]	; (800105c <HAL_ADC_MspInit+0x140>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a45      	ldr	r2, [pc, #276]	; (800105c <HAL_ADC_MspInit+0x140>)
 8000f46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <HAL_ADC_MspInit+0x140>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d10b      	bne.n	8000f68 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f50:	4b43      	ldr	r3, [pc, #268]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a42      	ldr	r2, [pc, #264]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b40      	ldr	r3, [pc, #256]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f68:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6c:	4a3c      	ldr	r2, [pc, #240]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f74:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = CELL_1_VOLTAGE_Pin;
 8000f80:	2304      	movs	r3, #4
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f84:	2303      	movs	r3, #3
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CELL_1_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4834      	ldr	r0, [pc, #208]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000f94:	f003 ffba 	bl	8004f0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2012      	movs	r0, #18
 8000f9e:	f003 ff80 	bl	8004ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fa2:	2012      	movs	r0, #18
 8000fa4:	f003 ff97 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000fa8:	e053      	b.n	8001052 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a2e      	ldr	r2, [pc, #184]	; (8001068 <HAL_ADC_MspInit+0x14c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d135      	bne.n	8001020 <HAL_ADC_MspInit+0x104>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <HAL_ADC_MspInit+0x140>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a28      	ldr	r2, [pc, #160]	; (800105c <HAL_ADC_MspInit+0x140>)
 8000fbc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_ADC_MspInit+0x140>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d10b      	bne.n	8000fde <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a25      	ldr	r2, [pc, #148]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000fcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CELL_1_CURRENT_Pin;
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CELL_1_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4816      	ldr	r0, [pc, #88]	; (8001064 <HAL_ADC_MspInit+0x148>)
 800100a:	f003 ff7f 	bl	8004f0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2012      	movs	r0, #18
 8001014:	f003 ff45 	bl	8004ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001018:	2012      	movs	r0, #18
 800101a:	f003 ff5c 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
}
 800101e:	e018      	b.n	8001052 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC5)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a11      	ldr	r2, [pc, #68]	; (800106c <HAL_ADC_MspInit+0x150>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d113      	bne.n	8001052 <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_ADC_MspInit+0x144>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a0c      	ldr	r2, [pc, #48]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	203e      	movs	r0, #62	; 0x3e
 8001048:	f003 ff2b 	bl	8004ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 800104c:	203e      	movs	r0, #62	; 0x3e
 800104e:	f003 ff42 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3730      	adds	r7, #48	; 0x30
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001fc 	.word	0x200001fc
 8001060:	40021000 	.word	0x40021000
 8001064:	48000800 	.word	0x48000800
 8001068:	50000100 	.word	0x50000100
 800106c:	50000600 	.word	0x50000600

08001070 <events_initialize_debug_mod>:
#include "events.h"

debug_mod *events_initialize_debug_mod(char *tag, GPIO_TypeDef *Port, uint16_t Probe_1, uint16_t Probe_2, uint16_t Probe_3)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	460b      	mov	r3, r1
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	4613      	mov	r3, r2
 8001084:	80bb      	strh	r3, [r7, #4]
	debug_mod *dbg_struct = (debug_mod *)malloc(sizeof(debug_mod));
 8001086:	2010      	movs	r0, #16
 8001088:	f006 fb5a 	bl	8007740 <malloc>
 800108c:	4603      	mov	r3, r0
 800108e:	617b      	str	r3, [r7, #20]

	if (dbg_struct == NULL)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <events_initialize_debug_mod+0x2a>
		return (NULL);
 8001096:	2300      	movs	r3, #0
 8001098:	e030      	b.n	80010fc <events_initialize_debug_mod+0x8c>

	dbg_struct->tag = tag;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	601a      	str	r2, [r3, #0]

	printf("Initializing %s:\n", dbg_struct->tag);
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <events_initialize_debug_mod+0x94>)
 80010a8:	f007 f86e 	bl	8008188 <iprintf>

	printf("\t- ");
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <events_initialize_debug_mod+0x98>)
 80010ae:	f007 f86b 	bl	8008188 <iprintf>
	dbg_struct->probe_1 = events_initialize_digital_ios("probe 1", Port, Probe_1, 0);
 80010b2:	88fa      	ldrh	r2, [r7, #6]
 80010b4:	2300      	movs	r3, #0
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <events_initialize_debug_mod+0x9c>)
 80010ba:	f000 f82d 	bl	8001118 <events_initialize_digital_ios>
 80010be:	4602      	mov	r2, r0
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	605a      	str	r2, [r3, #4]

	printf("\t- ");
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <events_initialize_debug_mod+0x98>)
 80010c6:	f007 f85f 	bl	8008188 <iprintf>
	dbg_struct->probe_2 = events_initialize_digital_ios("probe 2", Port, Probe_2, 0);
 80010ca:	88ba      	ldrh	r2, [r7, #4]
 80010cc:	2300      	movs	r3, #0
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <events_initialize_debug_mod+0xa0>)
 80010d2:	f000 f821 	bl	8001118 <events_initialize_digital_ios>
 80010d6:	4602      	mov	r2, r0
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	609a      	str	r2, [r3, #8]

	printf("\t- ");
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <events_initialize_debug_mod+0x98>)
 80010de:	f007 f853 	bl	8008188 <iprintf>
	dbg_struct->probe_3 = events_initialize_digital_ios("probe 3", Port, Probe_3, 0);
 80010e2:	8c3a      	ldrh	r2, [r7, #32]
 80010e4:	2300      	movs	r3, #0
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <events_initialize_debug_mod+0xa4>)
 80010ea:	f000 f815 	bl	8001118 <events_initialize_digital_ios>
 80010ee:	4602      	mov	r2, r0
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	60da      	str	r2, [r3, #12]

	printf("\n");
 80010f4:	200a      	movs	r0, #10
 80010f6:	f007 f85f 	bl	80081b8 <putchar>

	return(dbg_struct);
 80010fa:	697b      	ldr	r3, [r7, #20]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0800a838 	.word	0x0800a838
 8001108:	0800a84c 	.word	0x0800a84c
 800110c:	0800a850 	.word	0x0800a850
 8001110:	0800a858 	.word	0x0800a858
 8001114:	0800a860 	.word	0x0800a860

08001118 <events_initialize_digital_ios>:

digital_IOs *events_initialize_digital_ios(char *tag, GPIO_TypeDef *Port, uint16_t Pin, uint8_t invert_output)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	4611      	mov	r1, r2
 8001124:	461a      	mov	r2, r3
 8001126:	460b      	mov	r3, r1
 8001128:	80fb      	strh	r3, [r7, #6]
 800112a:	4613      	mov	r3, r2
 800112c:	717b      	strb	r3, [r7, #5]
	digital_IOs *dig_ios_struct = (digital_IOs *)malloc(sizeof(digital_IOs));
 800112e:	200c      	movs	r0, #12
 8001130:	f006 fb06 	bl	8007740 <malloc>
 8001134:	4603      	mov	r3, r0
 8001136:	617b      	str	r3, [r7, #20]

	if (dig_ios_struct == NULL)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <events_initialize_digital_ios+0x2a>
		return (NULL);
 800113e:	2300      	movs	r3, #0
 8001140:	e012      	b.n	8001168 <events_initialize_digital_ios+0x50>

	dig_ios_struct->tag = tag;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	601a      	str	r2, [r3, #0]

	dig_ios_struct->Port = Port;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	605a      	str	r2, [r3, #4]

	dig_ios_struct->Pin = Pin;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	811a      	strh	r2, [r3, #8]

	dig_ios_struct->invert = invert_output;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	797a      	ldrb	r2, [r7, #5]
 8001158:	729a      	strb	r2, [r3, #10]

	printf("Initializing %s\n", dig_ios_struct->tag);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <events_initialize_digital_ios+0x58>)
 8001162:	f007 f811 	bl	8008188 <iprintf>

	return (dig_ios_struct);
 8001166:	697b      	ldr	r3, [r7, #20]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	0800a868 	.word	0x0800a868

08001174 <events_handler>:

void events_handler(photovoltaic *ptr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	// Seccionamento do circuito
	if ((ptr->events_handler & EVENT_USER_BREAK) == EVENT_USER_BREAK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d008      	beq.n	800119c <events_handler+0x28>
	{
		events_output_relays(ptr, 0);
 800118a:	2100      	movs	r1, #0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f861 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x1);
 8001192:	2101      	movs	r1, #1
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f8bb 	bl	8001310 <events_output_debugger>
	else
	{
		events_output_relays(ptr, 1);
		events_output_debugger(ptr, 0x0);
	}
}
 800119a:	e057      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_OVERVOLTAGE) == EVENT_OVERVOLTAGE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d008      	beq.n	80011bc <events_handler+0x48>
		events_output_relays(ptr, 0);
 80011aa:	2100      	movs	r1, #0
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f851 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x2);
 80011b2:	2102      	movs	r1, #2
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f8ab 	bl	8001310 <events_output_debugger>
}
 80011ba:	e047      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_OVERCURRENT) == EVENT_OVERCURRENT)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d008      	beq.n	80011dc <events_handler+0x68>
		events_output_relays(ptr, 0);
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f841 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x3);
 80011d2:	2103      	movs	r1, #3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f89b 	bl	8001310 <events_output_debugger>
}
 80011da:	e037      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == EVENT_UNDERVOLTAGE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d008      	beq.n	80011fc <events_handler+0x88>
		events_output_relays(ptr, 0);
 80011ea:	2100      	movs	r1, #0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f831 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x4);
 80011f2:	2104      	movs	r1, #4
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f88b 	bl	8001310 <events_output_debugger>
}
 80011fa:	e027      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_OVERHEAT) == EVENT_OVERHEAT)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <events_handler+0xa8>
		events_output_relays(ptr, 1);
 800120a:	2101      	movs	r1, #1
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f821 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x5);
 8001212:	2105      	movs	r1, #5
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f87b 	bl	8001310 <events_output_debugger>
}
 800121a:	e017      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_DPS_LIFESPAN) == EVENT_DPS_LIFESPAN)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d008      	beq.n	800123c <events_handler+0xc8>
		events_output_relays(ptr, 0);
 800122a:	2100      	movs	r1, #0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f811 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x6);
 8001232:	2106      	movs	r1, #6
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f86b 	bl	8001310 <events_output_debugger>
}
 800123a:	e007      	b.n	800124c <events_handler+0xd8>
		events_output_relays(ptr, 1);
 800123c:	2101      	movs	r1, #1
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f808 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x0);
 8001244:	2100      	movs	r1, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f862 	bl	8001310 <events_output_debugger>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <events_output_relays>:

void events_output_relays(photovoltaic *ptr, uint8_t value)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
	// Relé (-)
	if (ptr->neg_out->invert)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	7a9b      	ldrb	r3, [r3, #10]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00c      	beq.n	8001284 <events_output_relays+0x30>
		HAL_GPIO_WritePin(ptr->neg_out->Port, ptr->neg_out->Pin, ~value);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	6858      	ldr	r0, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	8919      	ldrh	r1, [r3, #8]
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	43db      	mvns	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	f003 ffc7 	bl	8005210 <HAL_GPIO_WritePin>
 8001282:	e009      	b.n	8001298 <events_output_relays+0x44>
	else
		HAL_GPIO_WritePin(ptr->neg_out->Port, ptr->neg_out->Pin, value);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	6858      	ldr	r0, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	4619      	mov	r1, r3
 8001294:	f003 ffbc 	bl	8005210 <HAL_GPIO_WritePin>

	// Relé (+)
	if (ptr->pos_out->invert)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	7a9b      	ldrb	r3, [r3, #10]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00c      	beq.n	80012bc <events_output_relays+0x68>
		HAL_GPIO_WritePin(ptr->pos_out->Port, ptr->pos_out->Pin, ~value);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	6858      	ldr	r0, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	8919      	ldrh	r1, [r3, #8]
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	f003 ffab 	bl	8005210 <HAL_GPIO_WritePin>
 80012ba:	e009      	b.n	80012d0 <events_output_relays+0x7c>
	else
		HAL_GPIO_WritePin(ptr->pos_out->Port, ptr->pos_out->Pin, value);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	6858      	ldr	r0, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	891b      	ldrh	r3, [r3, #8]
 80012c8:	78fa      	ldrb	r2, [r7, #3]
 80012ca:	4619      	mov	r1, r3
 80012cc:	f003 ffa0 	bl	8005210 <HAL_GPIO_WritePin>

	// LED integrado
	if (ptr->led_out->invert)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	7a9b      	ldrb	r3, [r3, #10]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <events_output_relays+0xa0>
		HAL_GPIO_WritePin(ptr->led_out->Port, ptr->led_out->Pin, ~value);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	6858      	ldr	r0, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	8919      	ldrh	r1, [r3, #8]
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	f003 ff8f 	bl	8005210 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ptr->led_out->Port, ptr->led_out->Pin, value);

}
 80012f2:	e009      	b.n	8001308 <events_output_relays+0xb4>
		HAL_GPIO_WritePin(ptr->led_out->Port, ptr->led_out->Pin, value);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	6858      	ldr	r0, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	891b      	ldrh	r3, [r3, #8]
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	4619      	mov	r1, r3
 8001304:	f003 ff84 	bl	8005210 <HAL_GPIO_WritePin>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <events_output_debugger>:

void events_output_debugger(photovoltaic *ptr, uint8_t value)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	if (ptr->debugger == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d02d      	beq.n	8001380 <events_output_debugger+0x70>
		return;

	// LSB
	HAL_GPIO_WritePin(ptr->debugger->probe_3->Port, ptr->debugger->probe_3->Pin, 0x1 & value);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	6858      	ldr	r0, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	8919      	ldrh	r1, [r3, #8]
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	f003 ff67 	bl	8005210 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ptr->debugger->probe_2->Port, ptr->debugger->probe_2->Pin, 0x2 & value);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	6858      	ldr	r0, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	8919      	ldrh	r1, [r3, #8]
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	f003 ff58 	bl	8005210 <HAL_GPIO_WritePin>

	// MSB
	HAL_GPIO_WritePin(ptr->debugger->probe_1->Port, ptr->debugger->probe_1->Pin, 0x4 & value);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	6858      	ldr	r0, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	8919      	ldrh	r1, [r3, #8]
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	f003 ff49 	bl	8005210 <HAL_GPIO_WritePin>
 800137e:	e000      	b.n	8001382 <events_output_debugger+0x72>
		return;
 8001380:	bf00      	nop
}
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b6:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a43      	ldr	r2, [pc, #268]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013bc:	f043 0320 	orr.w	r3, r3, #32
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0320 	and.w	r3, r3, #32
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a3d      	ldr	r2, [pc, #244]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a37      	ldr	r2, [pc, #220]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <MX_GPIO_Init+0x140>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL_1_OUT_NEG_GPIO_Port, CELL_1_OUT_NEG_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2101      	movs	r1, #1
 8001402:	4832      	ldr	r0, [pc, #200]	; (80014cc <MX_GPIO_Init+0x144>)
 8001404:	f003 ff04 	bl	8005210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CELL_1_OUT_LED_Pin|CELL_1_OUT_POS_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 7108 	mov.w	r1, #544	; 0x220
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f003 fefd 	bl	8005210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL_1_DBG3_Pin|CELL_1_DBG2_Pin|CELL_1_DBG1_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800141c:	482c      	ldr	r0, [pc, #176]	; (80014d0 <MX_GPIO_Init+0x148>)
 800141e:	f003 fef7 	bl	8005210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_BTN_Pin;
 8001422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <MX_GPIO_Init+0x14c>)
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_BTN_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4825      	ldr	r0, [pc, #148]	; (80014cc <MX_GPIO_Init+0x144>)
 8001438:	f003 fd68 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_OUT_NEG_Pin;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CELL_1_OUT_NEG_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	481e      	ldr	r0, [pc, #120]	; (80014cc <MX_GPIO_Init+0x144>)
 8001454:	f003 fd5a 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_DPS_Pin;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_DPS_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146e:	f003 fd4d 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CELL_1_OUT_LED_Pin|CELL_1_OUT_POS_Pin;
 8001472:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f003 fd3d 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CELL_1_DBG3_Pin|CELL_1_DBG2_Pin|CELL_1_DBG1_Pin;
 8001492:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4809      	ldr	r0, [pc, #36]	; (80014d0 <MX_GPIO_Init+0x148>)
 80014ac:	f003 fd2e 	bl	8004f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2028      	movs	r0, #40	; 0x28
 80014b6:	f003 fcf4 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ba:	2028      	movs	r0, #40	; 0x28
 80014bc:	f003 fd0b 	bl	8004ed6 <HAL_NVIC_EnableIRQ>

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000400 	.word	0x48000400
 80014d4:	10110000 	.word	0x10110000

080014d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
	objects_def_exti_gpio(GPIO_Pin);
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 f8ed 	bl	80026c4 <objects_def_exti_gpio>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_I2C1_Init+0x74>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <MX_I2C1_Init+0x78>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_I2C1_Init+0x74>)
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <MX_I2C1_Init+0x7c>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_I2C1_Init+0x74>)
 800150c:	2201      	movs	r2, #1
 800150e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_I2C1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <MX_I2C1_Init+0x74>)
 8001530:	f003 fe9e 	bl	8005270 <HAL_I2C_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800153a:	f000 fab9 	bl	8001ab0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153e:	2100      	movs	r1, #0
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <MX_I2C1_Init+0x74>)
 8001542:	f004 fa95 	bl	8005a70 <HAL_I2CEx_ConfigAnalogFilter>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800154c:	f000 fab0 	bl	8001ab0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_I2C1_Init+0x74>)
 8001554:	f004 fad7 	bl	8005b06 <HAL_I2CEx_ConfigDigitalFilter>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155e:	f000 faa7 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000358 	.word	0x20000358
 800156c:	40005400 	.word	0x40005400
 8001570:	307075b1 	.word	0x307075b1

08001574 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_I2C_MspInit+0x7c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d128      	bne.n	80015e8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <HAL_I2C_MspInit+0x84>)
 80015cc:	f003 fc9e 	bl	8004f0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 80015d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015da:	6593      	str	r3, [r2, #88]	; 0x58
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40005400 	.word	0x40005400
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48000400 	.word	0x48000400

080015fc <lcd16x2_i2c_sendCommand>:

static I2C_HandleTypeDef* lcd16x2_i2cHandle;
static uint8_t LCD_I2C_SLAVE_ADDRESS = 0;

static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af02      	add	r7, sp, #8
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command << 4));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f023 030f 	bic.w	r3, r3, #15
 8001612:	73bb      	strb	r3, [r7, #14]

  uint8_t i2cData[4] =
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	f043 030c 	orr.w	r3, r3, #12
 800161a:	b2db      	uxtb	r3, r3
 800161c:	723b      	strb	r3, [r7, #8]
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	b2db      	uxtb	r3, r3
 8001626:	727b      	strb	r3, [r7, #9]
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	f043 030c 	orr.w	r3, r3, #12
 800162e:	b2db      	uxtb	r3, r3
 8001630:	72bb      	strb	r3, [r7, #10]
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	b2db      	uxtb	r3, r3
 800163a:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };

  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <lcd16x2_i2c_sendCommand+0x60>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <lcd16x2_i2c_sendCommand+0x64>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b299      	uxth	r1, r3
 8001646:	f107 0208 	add.w	r2, r7, #8
 800164a:	23c8      	movs	r3, #200	; 0xc8
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2304      	movs	r3, #4
 8001650:	f003 fe9e 	bl	8005390 <HAL_I2C_Master_Transmit>
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000200 	.word	0x20000200
 8001660:	20000204 	.word	0x20000204

08001664 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data << 4));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f023 030f 	bic.w	r3, r3, #15
 800167a:	73bb      	strb	r3, [r7, #14]

  uint8_t i2cData[4] =
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	f043 030d 	orr.w	r3, r3, #13
 8001682:	b2db      	uxtb	r3, r3
 8001684:	723b      	strb	r3, [r7, #8]
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	f043 0309 	orr.w	r3, r3, #9
 800168c:	b2db      	uxtb	r3, r3
 800168e:	727b      	strb	r3, [r7, #9]
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f043 030d 	orr.w	r3, r3, #13
 8001696:	b2db      	uxtb	r3, r3
 8001698:	72bb      	strb	r3, [r7, #10]
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	f043 0309 	orr.w	r3, r3, #9
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };

  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <lcd16x2_i2c_sendData+0x60>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <lcd16x2_i2c_sendData+0x64>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b299      	uxth	r1, r3
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	23c8      	movs	r3, #200	; 0xc8
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2304      	movs	r3, #4
 80016b8:	f003 fe6a 	bl	8005390 <HAL_I2C_Master_Transmit>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000200 	.word	0x20000200
 80016c8:	20000204 	.word	0x20000204

080016cc <lcd16x2_i2c_init>:

int lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 80016d4:	2032      	movs	r0, #50	; 0x32
 80016d6:	f001 faf3 	bl	8002cc0 <HAL_Delay>

  lcd16x2_i2cHandle = pI2cHandle;
 80016da:	4a30      	ldr	r2, [pc, #192]	; (800179c <lcd16x2_i2c_init+0xd0>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6013      	str	r3, [r2, #0]

  if (HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <lcd16x2_i2c_init+0xd0>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016e8:	2205      	movs	r2, #5
 80016ea:	214e      	movs	r1, #78	; 0x4e
 80016ec:	f003 ff44 	bl	8005578 <HAL_I2C_IsDeviceReady>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d010      	beq.n	8001718 <lcd16x2_i2c_init+0x4c>
  {
    if (HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <lcd16x2_i2c_init+0xd0>)
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016fe:	2205      	movs	r2, #5
 8001700:	217e      	movs	r1, #126	; 0x7e
 8001702:	f003 ff39 	bl	8005578 <HAL_I2C_IsDeviceReady>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <lcd16x2_i2c_init+0x44>
    {
      return (0);
 800170c:	2300      	movs	r3, #0
 800170e:	e040      	b.n	8001792 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <lcd16x2_i2c_init+0xd4>)
 8001712:	227e      	movs	r2, #126	; 0x7e
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e002      	b.n	800171e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <lcd16x2_i2c_init+0xd4>)
 800171a:	224e      	movs	r2, #78	; 0x4e
 800171c:	701a      	strb	r2, [r3, #0]
  }

  //1. Wait at least 15ms
  HAL_Delay(45);
 800171e:	202d      	movs	r0, #45	; 0x2d
 8001720:	f001 face 	bl	8002cc0 <HAL_Delay>

  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8001724:	2030      	movs	r0, #48	; 0x30
 8001726:	f7ff ff69 	bl	80015fc <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 800172a:	2005      	movs	r0, #5
 800172c:	f001 fac8 	bl	8002cc0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001730:	2030      	movs	r0, #48	; 0x30
 8001732:	f7ff ff63 	bl	80015fc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f001 fac2 	bl	8002cc0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 800173c:	2030      	movs	r0, #48	; 0x30
 800173e:	f7ff ff5d 	bl	80015fc <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001742:	2008      	movs	r0, #8
 8001744:	f001 fabc 	bl	8002cc0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8001748:	2020      	movs	r0, #32
 800174a:	f7ff ff57 	bl	80015fc <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 800174e:	2008      	movs	r0, #8
 8001750:	f001 fab6 	bl	8002cc0 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001754:	2028      	movs	r0, #40	; 0x28
 8001756:	f7ff ff51 	bl	80015fc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f001 fab0 	bl	8002cc0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001760:	2008      	movs	r0, #8
 8001762:	f7ff ff4b 	bl	80015fc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001766:	2001      	movs	r0, #1
 8001768:	f001 faaa 	bl	8002cc0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff ff45 	bl	80015fc <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001772:	2003      	movs	r0, #3
 8001774:	f001 faa4 	bl	8002cc0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8001778:	2006      	movs	r0, #6
 800177a:	f7ff ff3f 	bl	80015fc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f001 fa9e 	bl	8002cc0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001784:	200c      	movs	r0, #12
 8001786:	f7ff ff39 	bl	80015fc <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800178a:	2003      	movs	r0, #3
 800178c:	f001 fa98 	bl	8002cc0 <HAL_Delay>

  return (1);
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000200 	.word	0x20000200
 80017a0:	20000204 	.word	0x20000204

080017a4 <lcd16x2_i2c_setCursor>:

void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;

  maskData = (col) & 0x0F;
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	73fb      	strb	r3, [r7, #15]

  if (row==0)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d108      	bne.n	80017d4 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017c8:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff15 	bl	80015fc <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 80017d2:	e007      	b.n	80017e4 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80017da:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff0c 	bl	80015fc <lcd16x2_i2c_sendCommand>
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <lcd16x2_i2c_printf>:
    lcd16x2_i2c_sendCommand(0x18);
  }
}

void lcd16x2_i2c_printf(const char* str, ...)
{
 80017ec:	b40f      	push	{r0, r1, r2, r3}
 80017ee:	b590      	push	{r4, r7, lr}
 80017f0:	b089      	sub	sp, #36	; 0x24
 80017f2:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;

  va_start(args, str);
 80017f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f8:	607b      	str	r3, [r7, #4]

  vsprintf(stringArray, str, args);
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001802:	4618      	mov	r0, r3
 8001804:	f006 fd8a 	bl	800831c <vsiprintf>

  va_end(args);

  for (uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001808:	2300      	movs	r3, #0
 800180a:	77fb      	strb	r3, [r7, #31]
 800180c:	e00b      	b.n	8001826 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 800180e:	7ffb      	ldrb	r3, [r7, #31]
 8001810:	f107 0220 	add.w	r2, r7, #32
 8001814:	4413      	add	r3, r2
 8001816:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff22 	bl	8001664 <lcd16x2_i2c_sendData>
  for (uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001820:	7ffb      	ldrb	r3, [r7, #31]
 8001822:	3301      	adds	r3, #1
 8001824:	77fb      	strb	r3, [r7, #31]
 8001826:	7ffc      	ldrb	r4, [r7, #31]
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fcf7 	bl	8000220 <strlen>
 8001832:	4603      	mov	r3, r0
 8001834:	429c      	cmp	r4, r3
 8001836:	d202      	bcs.n	800183e <lcd16x2_i2c_printf+0x52>
 8001838:	7ffb      	ldrb	r3, [r7, #31]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d9e7      	bls.n	800180e <lcd16x2_i2c_printf+0x22>
  }
}
 800183e:	bf00      	nop
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001848:	b004      	add	sp, #16
 800184a:	4770      	bx	lr

0800184c <lcd16x2_i2c_update>:

void lcd16x2_i2c_update(photovoltaic *ptr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	// Tensão
	lcd16x2_i2c_setCursor(0,0);
 8001854:	2100      	movs	r1, #0
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff ffa4 	bl	80017a4 <lcd16x2_i2c_setCursor>
	lcd16x2_i2c_printf("V:%.2f [V]                ", ptr->voltage->scnd_level_value);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe96 	bl	8000598 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	480b      	ldr	r0, [pc, #44]	; (80018a0 <lcd16x2_i2c_update+0x54>)
 8001872:	f7ff ffbb 	bl	80017ec <lcd16x2_i2c_printf>

	// Corrente
	lcd16x2_i2c_setCursor(1,0);
 8001876:	2100      	movs	r1, #0
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff ff93 	bl	80017a4 <lcd16x2_i2c_setCursor>
	lcd16x2_i2c_printf("I:%.2f [A]                ", ptr->current->scnd_level_value);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe85 	bl	8000598 <__aeabi_f2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4804      	ldr	r0, [pc, #16]	; (80018a4 <lcd16x2_i2c_update+0x58>)
 8001894:	f7ff ffaa 	bl	80017ec <lcd16x2_i2c_printf>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	0800a87c 	.word	0x0800a87c
 80018a4:	0800a898 	.word	0x0800a898

080018a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d013      	beq.n	80018e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80018c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80018c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80018d0:	e000      	b.n	80018d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80018d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80018d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f9      	beq.n	80018d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80018de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
	for (int i=0 ; i<len ; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e009      	b.n	800191c <_write+0x26>
		ITM_SendChar((*ptr++));
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ffc9 	bl	80018a8 <ITM_SendChar>
	for (int i=0 ; i<len ; i++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf1      	blt.n	8001908 <_write+0x12>

	return (len);
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f001 f953 	bl	8002bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f84a 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f7ff fd24 	bl	8001388 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001940:	f001 f81e 	bl	8002980 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001944:	f7ff f9a8 	bl	8000c98 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001948:	f7ff fa22 	bl	8000d90 <MX_ADC2_Init>
  MX_ADC5_Init();
 800194c:	f7ff fa80 	bl	8000e50 <MX_ADC5_Init>
  MX_TIM2_Init();
 8001950:	f001 f86a 	bl	8002a28 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001954:	f7ff fdce 	bl	80014f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("-- Starting System's Configuration\n\n");
 8001958:	4815      	ldr	r0, [pc, #84]	; (80019b0 <main+0x80>)
 800195a:	f006 fcb1 	bl	80082c0 <puts>

  objects_def_init();
 800195e:	f000 fe2f 	bl	80025c0 <objects_def_init>

  HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 8001962:	217f      	movs	r1, #127	; 0x7f
 8001964:	4813      	ldr	r0, [pc, #76]	; (80019b4 <main+0x84>)
 8001966:	f003 f805 	bl	8004974 <HAL_ADCEx_Calibration_Start>

  if (lcd16x2_i2c_init(&hi2c1))
 800196a:	4813      	ldr	r0, [pc, #76]	; (80019b8 <main+0x88>)
 800196c:	f7ff feae 	bl	80016cc <lcd16x2_i2c_init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00e      	beq.n	8001994 <main+0x64>
  {
	  printf("Display LCD 16x2 initialized\n");
 8001976:	4811      	ldr	r0, [pc, #68]	; (80019bc <main+0x8c>)
 8001978:	f006 fca2 	bl	80082c0 <puts>

	  lcd16x2_i2c_setCursor(0, 6);
 800197c:	2106      	movs	r1, #6
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff ff10 	bl	80017a4 <lcd16x2_i2c_setCursor>
	  lcd16x2_i2c_printf("TCC2");
 8001984:	480e      	ldr	r0, [pc, #56]	; (80019c0 <main+0x90>)
 8001986:	f7ff ff31 	bl	80017ec <lcd16x2_i2c_printf>
	  HAL_Delay(2000);
 800198a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800198e:	f001 f997 	bl	8002cc0 <HAL_Delay>
 8001992:	e001      	b.n	8001998 <main+0x68>
  	 }
  else
	  Error_Handler();
 8001994:	f000 f88c 	bl	8001ab0 <Error_Handler>

  HAL_TIM_Base_Start_IT(&htim1);
 8001998:	480a      	ldr	r0, [pc, #40]	; (80019c4 <main+0x94>)
 800199a:	f005 f955 	bl	8006c48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800199e:	480a      	ldr	r0, [pc, #40]	; (80019c8 <main+0x98>)
 80019a0:	f005 f952 	bl	8006c48 <HAL_TIM_Base_Start_IT>

  printf("-- End of System's Configuration\n");
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <main+0x9c>)
 80019a6:	f006 fc8b 	bl	80082c0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	objects_def_loop();
 80019aa:	f000 fe9f 	bl	80026ec <objects_def_loop>
 80019ae:	e7fc      	b.n	80019aa <main+0x7a>
 80019b0:	0800a8b4 	.word	0x0800a8b4
 80019b4:	20000280 	.word	0x20000280
 80019b8:	20000358 	.word	0x20000358
 80019bc:	0800a8d8 	.word	0x0800a8d8
 80019c0:	0800a8f8 	.word	0x0800a8f8
 80019c4:	200003b8 	.word	0x200003b8
 80019c8:	20000404 	.word	0x20000404
 80019cc:	0800a900 	.word	0x0800a900

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0a8      	sub	sp, #160	; 0xa0
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019da:	2238      	movs	r2, #56	; 0x38
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f005 feb6 	bl	8007750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2254      	movs	r2, #84	; 0x54
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 fea8 	bl	8007750 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a04:	f004 f8cc 	bl	8005ba0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a16:	2302      	movs	r3, #2
 8001a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001a28:	230f      	movs	r3, #15
 8001a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 f95f 	bl	8005d08 <HAL_RCC_OscConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a50:	f000 f82e 	bl	8001ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a54:	230f      	movs	r3, #15
 8001a56:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a6c:	2103      	movs	r1, #3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 fc62 	bl	8006338 <HAL_RCC_ClockConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a7a:	f000 f819 	bl	8001ab0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <SystemClock_Config+0xdc>)
 8001a80:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a86:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a8a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001a8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	4618      	mov	r0, r3
 8001a96:	f004 fe33 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001aa0:	f000 f806 	bl	8001ab0 <Error_Handler>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	37a0      	adds	r7, #160	; 0xa0
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	00018040 	.word	0x00018040

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <Error_Handler+0x8>
	...

08001abc <meas_initialize_objects>:
#include "meas.h"

photovoltaic *meas_initialize_objects(char *tag, ADC_HandleTypeDef *ADC_master, ADC_HandleTypeDef *ADC_slave, digital_IOs *pos_out, digital_IOs *neg_out, digital_IOs *led_out, debug_mod *debug_mod)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
	photovoltaic *ph_struct = (photovoltaic *)malloc(sizeof(photovoltaic));
 8001aca:	2028      	movs	r0, #40	; 0x28
 8001acc:	f005 fe38 	bl	8007740 <malloc>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	617b      	str	r3, [r7, #20]

	if (ph_struct == NULL)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <meas_initialize_objects+0x22>
		return (NULL);
 8001ada:	2300      	movs	r3, #0
 8001adc:	e03c      	b.n	8001b58 <meas_initialize_objects+0x9c>

	ph_struct->tag = tag;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	601a      	str	r2, [r3, #0]

	ph_struct->pe_interval_cnt = 0;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	849a      	strh	r2, [r3, #36]	; 0x24

	ph_struct->events_handler = 0;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	printf("Initializing %s:\n", ph_struct->tag);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4819      	ldr	r0, [pc, #100]	; (8001b60 <meas_initialize_objects+0xa4>)
 8001afa:	f006 fb45 	bl	8008188 <iprintf>

	ph_struct->voltage = meas_initialize_rms_objects("Voltage", ADC_master);
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	4818      	ldr	r0, [pc, #96]	; (8001b64 <meas_initialize_objects+0xa8>)
 8001b02:	f000 f837 	bl	8001b74 <meas_initialize_rms_objects>
 8001b06:	4602      	mov	r2, r0
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	605a      	str	r2, [r3, #4]
	ph_struct->current = meas_initialize_rms_objects("Current", ADC_slave);
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4816      	ldr	r0, [pc, #88]	; (8001b68 <meas_initialize_objects+0xac>)
 8001b10:	f000 f830 	bl	8001b74 <meas_initialize_rms_objects>
 8001b14:	4602      	mov	r2, r0
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	609a      	str	r2, [r3, #8]

	ph_struct->power_energy = meas_initialize_power_and_energy_objects();
 8001b1a:	f000 f863 	bl	8001be4 <meas_initialize_power_and_energy_objects>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	611a      	str	r2, [r3, #16]

	ph_struct->pos_out = pos_out;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	615a      	str	r2, [r3, #20]
	ph_struct->neg_out = neg_out;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	619a      	str	r2, [r3, #24]
	ph_struct->led_out = led_out;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	61da      	str	r2, [r3, #28]

	if (debug_mod == NULL)
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <meas_initialize_objects+0x8e>
	{
		ph_struct->debugger = NULL;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]

		printf("\t- Debugger not attached\n\n");
 8001b42:	480a      	ldr	r0, [pc, #40]	; (8001b6c <meas_initialize_objects+0xb0>)
 8001b44:	f006 fbbc 	bl	80082c0 <puts>
 8001b48:	e005      	b.n	8001b56 <meas_initialize_objects+0x9a>
	}
	else
	{
		ph_struct->debugger = debug_mod;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b4e:	621a      	str	r2, [r3, #32]

		printf("\t- Debugger attached\n\n");
 8001b50:	4807      	ldr	r0, [pc, #28]	; (8001b70 <meas_initialize_objects+0xb4>)
 8001b52:	f006 fbb5 	bl	80082c0 <puts>
	}

	return(ph_struct);
 8001b56:	697b      	ldr	r3, [r7, #20]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	0800a924 	.word	0x0800a924
 8001b64:	0800a938 	.word	0x0800a938
 8001b68:	0800a940 	.word	0x0800a940
 8001b6c:	0800a948 	.word	0x0800a948
 8001b70:	0800a964 	.word	0x0800a964

08001b74 <meas_initialize_rms_objects>:

rms_measurement *meas_initialize_rms_objects(char *tag, ADC_HandleTypeDef *ADC)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	rms_measurement *rms_struct = (rms_measurement *)malloc(sizeof(rms_measurement));
 8001b7e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8001b82:	f005 fddd 	bl	8007740 <malloc>
 8001b86:	4603      	mov	r3, r0
 8001b88:	60fb      	str	r3, [r7, #12]

	if (rms_struct == NULL)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <meas_initialize_rms_objects+0x20>
		return (NULL);
 8001b90:	2300      	movs	r3, #0
 8001b92:	e021      	b.n	8001bd8 <meas_initialize_rms_objects+0x64>

	rms_struct->ADC = ADC;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	601a      	str	r2, [r3, #0]

	rms_struct->frst_level_index = 0;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
	rms_struct->scnd_level_index = 0;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
	rms_struct->thrd_level_index = 0;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
	rms_struct->frth_level_index = 0;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
	rms_struct->ffth_level_index = 0;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0

	HAL_ADCEx_Calibration_Start(rms_struct->ADC, ADC_SINGLE_ENDED);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	217f      	movs	r1, #127	; 0x7f
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 fed3 	bl	8004974 <HAL_ADCEx_Calibration_Start>

	printf("\t- %s measurement initialized\n", tag);
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <meas_initialize_rms_objects+0x6c>)
 8001bd2:	f006 fad9 	bl	8008188 <iprintf>

	return (rms_struct);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	0800a97c 	.word	0x0800a97c

08001be4 <meas_initialize_power_and_energy_objects>:

power_and_energy *meas_initialize_power_and_energy_objects(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	power_and_energy *pe_struct = (power_and_energy *)malloc(sizeof(power_and_energy));
 8001bea:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 8001bee:	f005 fda7 	bl	8007740 <malloc>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	607b      	str	r3, [r7, #4]

	if (pe_struct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <meas_initialize_power_and_energy_objects+0x1c>
		return (NULL);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e013      	b.n	8001c28 <meas_initialize_power_and_energy_objects+0x44>

	pe_struct->energy = 0.0;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

	pe_struct->frst_level_index = 0;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c
	pe_struct->scnd_level_index = 0;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 239d 	strb.w	r2, [r3, #925]	; 0x39d
	pe_struct->thrd_level_index = 0;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e

	printf("\t- Power & Energy measurement initialized\n");
 8001c20:	4803      	ldr	r0, [pc, #12]	; (8001c30 <meas_initialize_power_and_energy_objects+0x4c>)
 8001c22:	f006 fb4d 	bl	80082c0 <puts>

	return (pe_struct);
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	0800a99c 	.word	0x0800a99c

08001c34 <meas_decouple_system>:

void meas_decouple_system(photovoltaic *ptr)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	if ((ptr->events_handler & 0x01) == 1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <meas_decouple_system+0x2a>
		ptr->events_handler &= ~0x01;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	else
		ptr->events_handler |= 0x01;
}
 8001c5c:	e008      	b.n	8001c70 <meas_decouple_system+0x3c>
		ptr->events_handler |= 0x01;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	0000      	movs	r0, r0
	...

08001c80 <meas_temperature>:

void meas_temperature(photovoltaic *ptr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	// Obtém a leitura do módulo ADC, em bits
	uint32_t raw = HAL_ADC_GetValue(&hadc5);
 8001c88:	4841      	ldr	r0, [pc, #260]	; (8001d90 <meas_temperature+0x110>)
 8001c8a:	f001 fea3 	bl	80039d4 <HAL_ADC_GetValue>
 8001c8e:	60f8      	str	r0, [r7, #12]

	// Converte a leitura do módulo ADC em tensão
	float voltage = (float)raw * (SYSTEM_VCC / ADC_RESOLUTION);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9a:	ee17 0a90 	vmov	r0, s15
 8001c9e:	f7fe fc7b 	bl	8000598 <__aeabi_f2d>
 8001ca2:	a335      	add	r3, pc, #212	; (adr r3, 8001d78 <meas_temperature+0xf8>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fcce 	bl	8000648 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe ffa0 	bl	8000bf8 <__aeabi_d2f>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60bb      	str	r3, [r7, #8]

	// Converte a tensão em temperatura (ºC)
	ptr->temperature = ((voltage - TEMP_SENSOR_VREF) / TEMP_SENSOR_SLOPE) + TEMP_SENSOR_TREF;
 8001cbc:	68b8      	ldr	r0, [r7, #8]
 8001cbe:	f7fe fc6b 	bl	8000598 <__aeabi_f2d>
 8001cc2:	a32f      	add	r3, pc, #188	; (adr r3, 8001d80 <meas_temperature+0x100>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	f7fe fb06 	bl	80002d8 <__aeabi_dsub>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	a32c      	add	r3, pc, #176	; (adr r3, 8001d88 <meas_temperature+0x108>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fddf 	bl	800089c <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <meas_temperature+0x114>)
 8001cec:	f7fe faf6 	bl	80002dc <__adddf3>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe ff7e 	bl	8000bf8 <__aeabi_d2f>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60da      	str	r2, [r3, #12]

	// Verifica se o evento de superaquecimento está iniciado, para resetá-lo
	if ((ptr->events_handler & EVENT_OVERHEAT) == EVENT_OVERHEAT &&
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d012      	beq.n	8001d36 <meas_temperature+0xb6>
			ptr->temperature <= OVERHEAT_RELEASE_LIMIT)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	edd3 7a03 	vldr	s15, [r3, #12]
	if ((ptr->events_handler & EVENT_OVERHEAT) == EVENT_OVERHEAT &&
 8001d16:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001d98 <meas_temperature+0x118>
 8001d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	d808      	bhi.n	8001d36 <meas_temperature+0xb6>
	{
		ptr->events_handler &= ~EVENT_OVERHEAT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d2a:	f023 0310 	bic.w	r3, r3, #16
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}
	// Verifica se o evento de superaquecimento está resetado, para iniciá-lo
	if ((ptr->events_handler & EVENT_OVERHEAT) == 0x00 &&
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d113      	bne.n	8001d6c <meas_temperature+0xec>
			ptr->temperature >= OVERHEAT_HOLD_LIMIT)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edd3 7a03 	vldr	s15, [r3, #12]
	if ((ptr->events_handler & EVENT_OVERHEAT) == 0x00 &&
 8001d4a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d9c <meas_temperature+0x11c>
 8001d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	da00      	bge.n	8001d5a <meas_temperature+0xda>
	{
		ptr->events_handler |= EVENT_OVERHEAT;
	}
}
 8001d58:	e008      	b.n	8001d6c <meas_temperature+0xec>
		ptr->events_handler |= EVENT_OVERHEAT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d60:	f043 0310 	orr.w	r3, r3, #16
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	f3af 8000 	nop.w
 8001d78:	e734d9b4 	.word	0xe734d9b4
 8001d7c:	3f4a680c 	.word	0x3f4a680c
 8001d80:	851eb852 	.word	0x851eb852
 8001d84:	3fe851eb 	.word	0x3fe851eb
 8001d88:	47ae147b 	.word	0x47ae147b
 8001d8c:	3f647ae1 	.word	0x3f647ae1
 8001d90:	20000280 	.word	0x20000280
 8001d94:	403e0000 	.word	0x403e0000
 8001d98:	42480000 	.word	0x42480000
 8001d9c:	42960000 	.word	0x42960000

08001da0 <meas_sample>:

void meas_sample(photovoltaic *ptr)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	// Obtém a leitura simultânea dos módulos ADC
	uint32_t raw  = HAL_ADCEx_MultiModeGetValue(ptr->voltage->ADC);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fe42 	bl	8004a38 <HAL_ADCEx_MultiModeGetValue>
 8001db4:	60f8      	str	r0, [r7, #12]

	// Extrai a tensão a partir da leitura simultanea dos módulos ADC (16 bits LSB)
	ptr->voltage->sample = (raw & LSB_WORD_BIT_MASK) * (VCC / ADC_RES_BITS) * VOLTAGE_GAIN;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbca 	bl	8000554 <__aeabi_ui2d>
 8001dc0:	a31d      	add	r3, pc, #116	; (adr r3, 8001e38 <meas_sample+0x98>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fc3f 	bl	8000648 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	a31b      	add	r3, pc, #108	; (adr r3, 8001e40 <meas_sample+0xa0>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fc36 	bl	8000648 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685c      	ldr	r4, [r3, #4]
 8001de8:	f7fe ff06 	bl	8000bf8 <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	6063      	str	r3, [r4, #4]

	// Extrai a corrente a partir da leitura simultanea dos módulos ADC (16 bits MSB)
	ptr->current->sample = (raw >> HALF_WORD_LENGTH) * (VCC / ADC_RES_BITS) * CURRENT_GAIN;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fbad 	bl	8000554 <__aeabi_ui2d>
 8001dfa:	a30f      	add	r3, pc, #60	; (adr r3, 8001e38 <meas_sample+0x98>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fc22 	bl	8000648 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	a30e      	add	r3, pc, #56	; (adr r3, 8001e48 <meas_sample+0xa8>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fc19 	bl	8000648 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689c      	ldr	r4, [r3, #8]
 8001e22:	f7fe fee9 	bl	8000bf8 <__aeabi_d2f>
 8001e26:	4603      	mov	r3, r0
 8001e28:	6063      	str	r3, [r4, #4]

	// Inicia o processamento das medições de tensão e corrente
	meas_objects_handler(ptr);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f810 	bl	8001e50 <meas_objects_handler>
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	e734d9b4 	.word	0xe734d9b4
 8001e3c:	3f4a680c 	.word	0x3f4a680c
 8001e40:	d70a3d71 	.word	0xd70a3d71
 8001e44:	4062f0a3 	.word	0x4062f0a3
 8001e48:	5a1cac08 	.word	0x5a1cac08
 8001e4c:	4031db64 	.word	0x4031db64

08001e50 <meas_objects_handler>:

void meas_objects_handler(photovoltaic *ptr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	// Gerencia o protocolo de agregação em multi-camadas para medição de tensão
	meas_voltage_aggregation_handler(ptr);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f80a 	bl	8001e72 <meas_voltage_aggregation_handler>

	// Gerencia o protocolo de agregação em multi-camadas para medição de corrente
	meas_current_aggregation_handler(ptr);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8de 	bl	8002020 <meas_current_aggregation_handler>

	// Gerencia o protocolo de medição de potência e energia produzidas
	meas_compute_power_and_energy(ptr);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fa83 	bl	8002370 <meas_compute_power_and_energy>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <meas_voltage_aggregation_handler>:

void meas_voltage_aggregation_handler(photovoltaic *ptr)
{
 8001e72:	b5b0      	push	{r4, r5, r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	ptr->voltage->frst_level[ptr->voltage->frst_level_index++] = ptr->voltage->sample;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6858      	ldr	r0, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f893 26dc 	ldrb.w	r2, [r3, #1756]	; 0x6dc
 8001e8a:	1c54      	adds	r4, r2, #1
 8001e8c:	b2e4      	uxtb	r4, r4
 8001e8e:	f883 46dc 	strb.w	r4, [r3, #1756]	; 0x6dc
 8001e92:	4613      	mov	r3, r2
 8001e94:	6842      	ldr	r2, [r0, #4]
 8001e96:	3302      	adds	r3, #2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	601a      	str	r2, [r3, #0]

	if (ptr->voltage->frst_level_index == RMS_FRST_LEVEL_LENGTH)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 8001ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8001ea8:	f040 80b6 	bne.w	8002018 <meas_voltage_aggregation_handler+0x1a6>
	{
		ptr->voltage->scnd_level_value = meas_quadratic_average(ptr->voltage->frst_level, RMS_FRST_LEVEL_LENGTH);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f103 0208 	add.w	r2, r3, #8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685c      	ldr	r4, [r3, #4]
 8001eb8:	21c0      	movs	r1, #192	; 0xc0
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f000 fb39 	bl	8002532 <meas_quadratic_average>
 8001ec0:	eef0 7a40 	vmov.f32	s15, s0
 8001ec4:	f204 63e4 	addw	r3, r4, #1764	; 0x6e4
 8001ec8:	edc3 7a00 	vstr	s15, [r3]

		ptr->voltage->scnd_level[ptr->voltage->scnd_level_index++] = ptr->voltage->scnd_level_value;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6858      	ldr	r0, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f893 26dd 	ldrb.w	r2, [r3, #1757]	; 0x6dd
 8001edc:	1c54      	adds	r4, r2, #1
 8001ede:	b2e4      	uxtb	r4, r4
 8001ee0:	f883 46dd 	strb.w	r4, [r3, #1757]	; 0x6dd
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	f200 63e4 	addw	r3, r0, #1764	; 0x6e4
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	f104 03c2 	add.w	r3, r4, #194	; 0xc2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	601a      	str	r2, [r3, #0]

		if (ptr->voltage->scnd_level_index == RMS_SCND_LEVEL_LENGTH)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f893 36dd 	ldrb.w	r3, [r3, #1757]	; 0x6dd
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	f040 8085 	bne.w	800200e <meas_voltage_aggregation_handler+0x19c>
		{
			ptr->voltage->thrd_level_value = meas_quadratic_average(ptr->voltage->scnd_level, RMS_SCND_LEVEL_LENGTH);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f503 7242 	add.w	r2, r3, #776	; 0x308
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685c      	ldr	r4, [r3, #4]
 8001f10:	210f      	movs	r1, #15
 8001f12:	4610      	mov	r0, r2
 8001f14:	f000 fb0d 	bl	8002532 <meas_quadratic_average>
 8001f18:	eef0 7a40 	vmov.f32	s15, s0
 8001f1c:	f504 63dd 	add.w	r3, r4, #1768	; 0x6e8
 8001f20:	edc3 7a00 	vstr	s15, [r3]

			meas_verify_voltage_triggers(ptr);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f953 	bl	80021d0 <meas_verify_voltage_triggers>

			ptr->voltage->thrd_level[ptr->voltage->thrd_level_index++] = ptr->voltage->thrd_level_value;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6858      	ldr	r0, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6859      	ldr	r1, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f893 26de 	ldrb.w	r2, [r3, #1758]	; 0x6de
 8001f3a:	1c54      	adds	r4, r2, #1
 8001f3c:	b2e4      	uxtb	r4, r4
 8001f3e:	f883 46de 	strb.w	r4, [r3, #1758]	; 0x6de
 8001f42:	4614      	mov	r4, r2
 8001f44:	f500 63dd 	add.w	r3, r0, #1768	; 0x6e8
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3304      	adds	r3, #4
 8001f54:	601a      	str	r2, [r3, #0]

			if (ptr->voltage->thrd_level_index == RMS_THRD_LEVEL_LENGTH)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f893 36de 	ldrb.w	r3, [r3, #1758]	; 0x6de
 8001f5e:	2bc8      	cmp	r3, #200	; 0xc8
 8001f60:	d150      	bne.n	8002004 <meas_voltage_aggregation_handler+0x192>
			{
				ptr->voltage->frth_level[ptr->voltage->frth_level_index++] = meas_quadratic_average(ptr->voltage->thrd_level, RMS_THRD_LEVEL_LENGTH);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685c      	ldr	r4, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f893 26df 	ldrb.w	r2, [r3, #1759]	; 0x6df
 8001f76:	1c51      	adds	r1, r2, #1
 8001f78:	b2c9      	uxtb	r1, r1
 8001f7a:	f883 16df 	strb.w	r1, [r3, #1759]	; 0x6df
 8001f7e:	4615      	mov	r5, r2
 8001f80:	21c8      	movs	r1, #200	; 0xc8
 8001f82:	f000 fad6 	bl	8002532 <meas_quadratic_average>
 8001f86:	eef0 7a40 	vmov.f32	s15, s0
 8001f8a:	f505 73cc 	add.w	r3, r5, #408	; 0x198
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4423      	add	r3, r4
 8001f92:	3304      	adds	r3, #4
 8001f94:	edc3 7a00 	vstr	s15, [r3]

				if (ptr->voltage->frth_level_index == RMS_FRTH_LEVEL_LENGTH)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f893 36df 	ldrb.w	r3, [r3, #1759]	; 0x6df
 8001fa0:	2b06      	cmp	r3, #6
 8001fa2:	d12a      	bne.n	8001ffa <meas_voltage_aggregation_handler+0x188>
				{
					ptr->voltage->ffth_level[ptr->voltage->ffth_level_index++] = meas_quadratic_average(ptr->voltage->frth_level, RMS_FRTH_LEVEL_LENGTH);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f203 6064 	addw	r0, r3, #1636	; 0x664
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685c      	ldr	r4, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f893 26e0 	ldrb.w	r2, [r3, #1760]	; 0x6e0
 8001fb8:	1c51      	adds	r1, r2, #1
 8001fba:	b2c9      	uxtb	r1, r1
 8001fbc:	f883 16e0 	strb.w	r1, [r3, #1760]	; 0x6e0
 8001fc0:	4615      	mov	r5, r2
 8001fc2:	2106      	movs	r1, #6
 8001fc4:	f000 fab5 	bl	8002532 <meas_quadratic_average>
 8001fc8:	eef0 7a40 	vmov.f32	s15, s0
 8001fcc:	f505 73cf 	add.w	r3, r5, #414	; 0x19e
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4423      	add	r3, r4
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	edc3 7a00 	vstr	s15, [r3]

					if (ptr->voltage->ffth_level_index == RMS_FFTH_LEVEL_LENGTH)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f893 36e0 	ldrb.w	r3, [r3, #1760]	; 0x6e0
 8001fe2:	2b18      	cmp	r3, #24
 8001fe4:	d104      	bne.n	8001ff0 <meas_voltage_aggregation_handler+0x17e>
						ptr->voltage->ffth_level_index = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0

					ptr->voltage->frth_level_index = 0;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
				}

				ptr->voltage->thrd_level_index = 0;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
			}

			ptr->voltage->scnd_level_index = 0;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
		}

		ptr->voltage->frst_level_index = 0;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
	}
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bdb0      	pop	{r4, r5, r7, pc}

08002020 <meas_current_aggregation_handler>:

void meas_current_aggregation_handler(photovoltaic *ptr)
{
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	ptr->current->frst_level[ptr->current->frst_level_index++] = ptr->current->sample;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6898      	ldr	r0, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f893 26dc 	ldrb.w	r2, [r3, #1756]	; 0x6dc
 8002038:	1c54      	adds	r4, r2, #1
 800203a:	b2e4      	uxtb	r4, r4
 800203c:	f883 46dc 	strb.w	r4, [r3, #1756]	; 0x6dc
 8002040:	4613      	mov	r3, r2
 8002042:	6842      	ldr	r2, [r0, #4]
 8002044:	3302      	adds	r3, #2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	601a      	str	r2, [r3, #0]

	if (ptr->current->frst_level_index == RMS_FRST_LEVEL_LENGTH)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 8002054:	2bc0      	cmp	r3, #192	; 0xc0
 8002056:	f040 80b6 	bne.w	80021c6 <meas_current_aggregation_handler+0x1a6>
	{
		ptr->current->scnd_level_value = meas_quadratic_average(ptr->current->frst_level, RMS_FRST_LEVEL_LENGTH);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f103 0208 	add.w	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689c      	ldr	r4, [r3, #8]
 8002066:	21c0      	movs	r1, #192	; 0xc0
 8002068:	4610      	mov	r0, r2
 800206a:	f000 fa62 	bl	8002532 <meas_quadratic_average>
 800206e:	eef0 7a40 	vmov.f32	s15, s0
 8002072:	f204 63e4 	addw	r3, r4, #1764	; 0x6e4
 8002076:	edc3 7a00 	vstr	s15, [r3]

		ptr->current->scnd_level[ptr->current->scnd_level_index++] = ptr->current->scnd_level_value;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6898      	ldr	r0, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f893 26dd 	ldrb.w	r2, [r3, #1757]	; 0x6dd
 800208a:	1c54      	adds	r4, r2, #1
 800208c:	b2e4      	uxtb	r4, r4
 800208e:	f883 46dd 	strb.w	r4, [r3, #1757]	; 0x6dd
 8002092:	4614      	mov	r4, r2
 8002094:	f200 63e4 	addw	r3, r0, #1764	; 0x6e4
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	f104 03c2 	add.w	r3, r4, #194	; 0xc2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	601a      	str	r2, [r3, #0]

		if (ptr->current->scnd_level_index == RMS_SCND_LEVEL_LENGTH)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f893 36dd 	ldrb.w	r3, [r3, #1757]	; 0x6dd
 80020ac:	2b0f      	cmp	r3, #15
 80020ae:	f040 8085 	bne.w	80021bc <meas_current_aggregation_handler+0x19c>
		{
			ptr->current->thrd_level_value = meas_quadratic_average(ptr->current->scnd_level, RMS_SCND_LEVEL_LENGTH);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f503 7242 	add.w	r2, r3, #776	; 0x308
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689c      	ldr	r4, [r3, #8]
 80020be:	210f      	movs	r1, #15
 80020c0:	4610      	mov	r0, r2
 80020c2:	f000 fa36 	bl	8002532 <meas_quadratic_average>
 80020c6:	eef0 7a40 	vmov.f32	s15, s0
 80020ca:	f504 63dd 	add.w	r3, r4, #1768	; 0x6e8
 80020ce:	edc3 7a00 	vstr	s15, [r3]

			meas_verify_current_triggers(ptr);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f904 	bl	80022e0 <meas_verify_current_triggers>

			ptr->current->thrd_level[ptr->current->thrd_level_index++] = ptr->current->thrd_level_value;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6898      	ldr	r0, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6899      	ldr	r1, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f893 26de 	ldrb.w	r2, [r3, #1758]	; 0x6de
 80020e8:	1c54      	adds	r4, r2, #1
 80020ea:	b2e4      	uxtb	r4, r4
 80020ec:	f883 46de 	strb.w	r4, [r3, #1758]	; 0x6de
 80020f0:	4614      	mov	r4, r2
 80020f2:	f500 63dd 	add.w	r3, r0, #1768	; 0x6e8
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3304      	adds	r3, #4
 8002102:	601a      	str	r2, [r3, #0]

			if (ptr->current->thrd_level_index == RMS_THRD_LEVEL_LENGTH)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f893 36de 	ldrb.w	r3, [r3, #1758]	; 0x6de
 800210c:	2bc8      	cmp	r3, #200	; 0xc8
 800210e:	d150      	bne.n	80021b2 <meas_current_aggregation_handler+0x192>
			{
				ptr->current->frth_level[ptr->current->frth_level_index++] = meas_quadratic_average(ptr->current->thrd_level, RMS_THRD_LEVEL_LENGTH);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689c      	ldr	r4, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f893 26df 	ldrb.w	r2, [r3, #1759]	; 0x6df
 8002124:	1c51      	adds	r1, r2, #1
 8002126:	b2c9      	uxtb	r1, r1
 8002128:	f883 16df 	strb.w	r1, [r3, #1759]	; 0x6df
 800212c:	4615      	mov	r5, r2
 800212e:	21c8      	movs	r1, #200	; 0xc8
 8002130:	f000 f9ff 	bl	8002532 <meas_quadratic_average>
 8002134:	eef0 7a40 	vmov.f32	s15, s0
 8002138:	f505 73cc 	add.w	r3, r5, #408	; 0x198
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4423      	add	r3, r4
 8002140:	3304      	adds	r3, #4
 8002142:	edc3 7a00 	vstr	s15, [r3]

				if (ptr->current->frth_level_index == RMS_FRTH_LEVEL_LENGTH)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f893 36df 	ldrb.w	r3, [r3, #1759]	; 0x6df
 800214e:	2b06      	cmp	r3, #6
 8002150:	d12a      	bne.n	80021a8 <meas_current_aggregation_handler+0x188>
				{
					ptr->current->ffth_level[ptr->current->ffth_level_index++] = meas_quadratic_average(ptr->current->frth_level, RMS_FRTH_LEVEL_LENGTH);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f203 6064 	addw	r0, r3, #1636	; 0x664
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689c      	ldr	r4, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f893 26e0 	ldrb.w	r2, [r3, #1760]	; 0x6e0
 8002166:	1c51      	adds	r1, r2, #1
 8002168:	b2c9      	uxtb	r1, r1
 800216a:	f883 16e0 	strb.w	r1, [r3, #1760]	; 0x6e0
 800216e:	4615      	mov	r5, r2
 8002170:	2106      	movs	r1, #6
 8002172:	f000 f9de 	bl	8002532 <meas_quadratic_average>
 8002176:	eef0 7a40 	vmov.f32	s15, s0
 800217a:	f505 73cf 	add.w	r3, r5, #414	; 0x19e
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4423      	add	r3, r4
 8002182:	3304      	adds	r3, #4
 8002184:	edc3 7a00 	vstr	s15, [r3]

					if (ptr->current->ffth_level_index == RMS_FFTH_LEVEL_LENGTH)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f893 36e0 	ldrb.w	r3, [r3, #1760]	; 0x6e0
 8002190:	2b18      	cmp	r3, #24
 8002192:	d104      	bne.n	800219e <meas_current_aggregation_handler+0x17e>
						ptr->current->ffth_level_index = 0;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0

					ptr->current->frth_level_index = 0;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
				}

				ptr->current->thrd_level_index = 0;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
			}

			ptr->current->scnd_level_index = 0;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
		}

		ptr->current->frst_level_index = 0;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
	}
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021d0 <meas_verify_voltage_triggers>:

void meas_verify_voltage_triggers(photovoltaic *ptr)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	// Verifica se o evento de sobretensão está iniciado, para resetá-lo
	if ((ptr->events_handler & EVENT_OVERVOLTAGE) == EVENT_OVERVOLTAGE &&
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <meas_verify_voltage_triggers+0x44>
			ptr->voltage->thrd_level_value <= OVERVOLTAGE_RELEASE_LIMIT)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80021ee:	edd3 7a00 	vldr	s15, [r3]
	if ((ptr->events_handler & EVENT_OVERVOLTAGE) == EVENT_OVERVOLTAGE &&
 80021f2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80022d4 <meas_verify_voltage_triggers+0x104>
 80021f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	d809      	bhi.n	8002214 <meas_verify_voltage_triggers+0x44>
	{
		ptr->events_handler &= ~EVENT_OVERVOLTAGE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002206:	f023 0302 	bic.w	r3, r3, #2
 800220a:	b2da      	uxtb	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8002212:	e01c      	b.n	800224e <meas_verify_voltage_triggers+0x7e>
	}
	// Verifica se o evento de sobretensão está resetado, para iniciá-lo
	else if ((ptr->events_handler & EVENT_OVERVOLTAGE) == 0x00 &&
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <meas_verify_voltage_triggers+0x7e>
				ptr->voltage->thrd_level_value >= OVERVOLTAGE_HOLD_LIMIT)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800222a:	edd3 7a00 	vldr	s15, [r3]
	else if ((ptr->events_handler & EVENT_OVERVOLTAGE) == 0x00 &&
 800222e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80022d8 <meas_verify_voltage_triggers+0x108>
 8002232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	db08      	blt.n	800224e <meas_verify_voltage_triggers+0x7e>
	{
		ptr->events_handler |= EVENT_OVERVOLTAGE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	b2da      	uxtb	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}

	// Verifica se o evento de subtensão está iniciado, para resetá-lo
	if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == EVENT_UNDERVOLTAGE &&
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d016      	beq.n	800228a <meas_verify_voltage_triggers+0xba>
			ptr->voltage->thrd_level_value >= UNDERVOLTAGE_RELEASE_LIMIT)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8002264:	edd3 7a00 	vldr	s15, [r3]
	if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == EVENT_UNDERVOLTAGE &&
 8002268:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80022dc <meas_verify_voltage_triggers+0x10c>
 800226c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002274:	db09      	blt.n	800228a <meas_verify_voltage_triggers+0xba>
	{
		ptr->events_handler &= ~EVENT_UNDERVOLTAGE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800227c:	f023 0308 	bic.w	r3, r3, #8
 8002280:	b2da      	uxtb	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	else if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == 0x00 &&
				ptr->voltage->thrd_level_value <= UNDERVOLTAGE_HOLD_LIMIT)
	{
		ptr->events_handler |= EVENT_UNDERVOLTAGE;
	}
}
 8002288:	e01d      	b.n	80022c6 <meas_verify_voltage_triggers+0xf6>
	else if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == 0x00 &&
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <meas_verify_voltage_triggers+0xf6>
				ptr->voltage->thrd_level_value <= UNDERVOLTAGE_HOLD_LIMIT)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80022a0:	edd3 7a00 	vldr	s15, [r3]
	else if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == 0x00 &&
 80022a4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80022a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	d900      	bls.n	80022b4 <meas_verify_voltage_triggers+0xe4>
}
 80022b2:	e008      	b.n	80022c6 <meas_verify_voltage_triggers+0xf6>
		ptr->events_handler |= EVENT_UNDERVOLTAGE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	43e10000 	.word	0x43e10000
 80022d8:	43ed8000 	.word	0x43ed8000
 80022dc:	42480000 	.word	0x42480000

080022e0 <meas_verify_current_triggers>:

void meas_verify_current_triggers(photovoltaic *ptr)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	// Verifica se o evento de sobrecorrente está iniciado, para resetá-lo
	if ((ptr->events_handler & EVENT_OVERCURRENT) == EVENT_OVERCURRENT &&
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <meas_verify_current_triggers+0x44>
			ptr->current->thrd_level_value <= OVERCURRENT_RELEASE_LIMIT)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80022fe:	edd3 7a00 	vldr	s15, [r3]
	if ((ptr->events_handler & EVENT_OVERCURRENT) == EVENT_OVERCURRENT &&
 8002302:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8002306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	d809      	bhi.n	8002324 <meas_verify_current_triggers+0x44>
	{
		ptr->events_handler &= 0xFB;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002316:	f023 0304 	bic.w	r3, r3, #4
 800231a:	b2da      	uxtb	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	else if ((ptr->events_handler & EVENT_OVERCURRENT) == 0x00 &&
			ptr->current->thrd_level_value >= OVERCURRENT_HOLD_LIMIT)
	{
		ptr->events_handler |= 0x04;
	}
}
 8002322:	e01d      	b.n	8002360 <meas_verify_current_triggers+0x80>
	else if ((ptr->events_handler & EVENT_OVERCURRENT) == 0x00 &&
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	d116      	bne.n	8002360 <meas_verify_current_triggers+0x80>
			ptr->current->thrd_level_value >= OVERCURRENT_HOLD_LIMIT)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800233a:	edd3 7a00 	vldr	s15, [r3]
	else if ((ptr->events_handler & EVENT_OVERCURRENT) == 0x00 &&
 800233e:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8002342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234a:	da00      	bge.n	800234e <meas_verify_current_triggers+0x6e>
}
 800234c:	e008      	b.n	8002360 <meas_verify_current_triggers+0x80>
		ptr->events_handler |= 0x04;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	b2da      	uxtb	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	0000      	movs	r0, r0
	...

08002370 <meas_compute_power_and_energy>:

void meas_compute_power_and_energy(photovoltaic *ptr)
{
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	// Divisor de clock [3 segundos]
	if (!meas_power_energy_interval(ptr))
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f8bf 	bl	80024fc <meas_power_energy_interval>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80ae 	beq.w	80024e2 <meas_compute_power_and_energy+0x172>
		return;

	float voltage = ptr->voltage->thrd_level[ptr->power_energy->frst_level_index];
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8002392:	33d0      	adds	r3, #208	; 0xd0
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3304      	adds	r3, #4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	617b      	str	r3, [r7, #20]
	float current = ptr->current->thrd_level[ptr->power_energy->frst_level_index];
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 80023aa:	33d0      	adds	r3, #208	; 0xd0
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	3304      	adds	r3, #4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	613b      	str	r3, [r7, #16]

	// Conversão W -> KW
	float power_3s = (voltage * current) / 1000.0;
 80023b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80023ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80023be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c2:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80024f8 <meas_compute_power_and_energy+0x188>
 80023c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ca:	edc7 7a03 	vstr	s15, [r7, #12]

	// Conversão KW -> (KW / h)
	ptr->power_energy->energy += (power_3s / 3600.0);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f8df 	bl	8000598 <__aeabi_f2d>
 80023da:	4604      	mov	r4, r0
 80023dc:	460d      	mov	r5, r1
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f7fe f8da 	bl	8000598 <__aeabi_f2d>
 80023e4:	a342      	add	r3, pc, #264	; (adr r3, 80024f0 <meas_compute_power_and_energy+0x180>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fe fa57 	bl	800089c <__aeabi_ddiv>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4620      	mov	r0, r4
 80023f4:	4629      	mov	r1, r5
 80023f6:	f7fd ff71 	bl	80002dc <__adddf3>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691c      	ldr	r4, [r3, #16]
 8002406:	f7fe fbf7 	bl	8000bf8 <__aeabi_d2f>
 800240a:	4603      	mov	r3, r0
 800240c:	6023      	str	r3, [r4, #0]

	// Atualiza o Display LCD 16X2
	lcd16x2_i2c_update(ptr);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fa1c 	bl	800184c <lcd16x2_i2c_update>

	// Protocolo de agregação em multi-camadas da potência produzida
	ptr->power_energy->frst_level[ptr->power_energy->frst_level_index++] = power_3s;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6919      	ldr	r1, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f893 239c 	ldrb.w	r2, [r3, #924]	; 0x39c
 8002420:	1c50      	adds	r0, r2, #1
 8002422:	b2c0      	uxtb	r0, r0
 8002424:	f883 039c 	strb.w	r0, [r3, #924]	; 0x39c
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3304      	adds	r3, #4
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	601a      	str	r2, [r3, #0]

	if (ptr->power_energy->frst_level_index == RMS_THRD_LEVEL_LENGTH)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 800243c:	2bc8      	cmp	r3, #200	; 0xc8
 800243e:	d151      	bne.n	80024e4 <meas_compute_power_and_energy+0x174>
	{
		ptr->power_energy->scnd_level[ptr->power_energy->scnd_level_index++] = meas_quadratic_average(ptr->power_energy->frst_level, RMS_THRD_LEVEL_LENGTH);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	1d18      	adds	r0, r3, #4
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691c      	ldr	r4, [r3, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f893 239d 	ldrb.w	r2, [r3, #925]	; 0x39d
 8002452:	1c51      	adds	r1, r2, #1
 8002454:	b2c9      	uxtb	r1, r1
 8002456:	f883 139d 	strb.w	r1, [r3, #925]	; 0x39d
 800245a:	4615      	mov	r5, r2
 800245c:	21c8      	movs	r1, #200	; 0xc8
 800245e:	f000 f868 	bl	8002532 <meas_quadratic_average>
 8002462:	eef0 7a40 	vmov.f32	s15, s0
 8002466:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4423      	add	r3, r4
 800246e:	3304      	adds	r3, #4
 8002470:	edc3 7a00 	vstr	s15, [r3]

		if (ptr->power_energy->scnd_level_index == RMS_FRTH_LEVEL_LENGTH)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f893 339d 	ldrb.w	r3, [r3, #925]	; 0x39d
 800247c:	2b06      	cmp	r3, #6
 800247e:	d12a      	bne.n	80024d6 <meas_compute_power_and_energy+0x166>
		{
			ptr->power_energy->thrd_level[ptr->power_energy->thrd_level_index++] = meas_quadratic_average(ptr->power_energy->scnd_level, RMS_FRTH_LEVEL_LENGTH);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691c      	ldr	r4, [r3, #16]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f893 239e 	ldrb.w	r2, [r3, #926]	; 0x39e
 8002494:	1c51      	adds	r1, r2, #1
 8002496:	b2c9      	uxtb	r1, r1
 8002498:	f883 139e 	strb.w	r1, [r3, #926]	; 0x39e
 800249c:	4615      	mov	r5, r2
 800249e:	2106      	movs	r1, #6
 80024a0:	f000 f847 	bl	8002532 <meas_quadratic_average>
 80024a4:	eef0 7a40 	vmov.f32	s15, s0
 80024a8:	f105 03ce 	add.w	r3, r5, #206	; 0xce
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4423      	add	r3, r4
 80024b0:	3304      	adds	r3, #4
 80024b2:	edc3 7a00 	vstr	s15, [r3]

			if (ptr->power_energy->thrd_level_index == RMS_FFTH_LEVEL_LENGTH)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f893 339e 	ldrb.w	r3, [r3, #926]	; 0x39e
 80024be:	2b18      	cmp	r3, #24
 80024c0:	d104      	bne.n	80024cc <meas_compute_power_and_energy+0x15c>
				ptr->power_energy->thrd_level_index = 0;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e

			ptr->power_energy->scnd_level_index = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 239d 	strb.w	r2, [r3, #925]	; 0x39d
		}

		ptr->power_energy->frst_level_index = 0;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c
 80024e0:	e000      	b.n	80024e4 <meas_compute_power_and_energy+0x174>
		return;
 80024e2:	bf00      	nop
	}
}
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ea:	bf00      	nop
 80024ec:	f3af 8000 	nop.w
 80024f0:	00000000 	.word	0x00000000
 80024f4:	40ac2000 	.word	0x40ac2000
 80024f8:	447a0000 	.word	0x447a0000

080024fc <meas_power_energy_interval>:

int meas_power_energy_interval(photovoltaic *ptr)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	ptr->pe_interval_cnt++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	849a      	strh	r2, [r3, #36]	; 0x24

	if (ptr->pe_interval_cnt == POWER_ENERGY_INTERVAL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002514:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
 8002518:	d104      	bne.n	8002524 <meas_power_energy_interval+0x28>
	{
		ptr->pe_interval_cnt = 0;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	849a      	strh	r2, [r3, #36]	; 0x24

		return (1);
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <meas_power_energy_interval+0x2a>
	}

	return (0);
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <meas_quadratic_average>:

float meas_quadratic_average(float *ptr, int length)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
    float rms = 0.00;
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]

    for (int i=0; i<length; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	e016      	b.n	8002576 <meas_quadratic_average+0x44>
    	rms += ptr[i] * ptr[i];
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	ed93 7a00 	vldr	s14, [r3]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	ed97 7a03 	vldr	s14, [r7, #12]
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256c:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i=0; i<length; i++)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	3301      	adds	r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	dbe4      	blt.n	8002548 <meas_quadratic_average+0x16>

    return (sqrt(rms / length));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002588:	ed97 7a03 	vldr	s14, [r7, #12]
 800258c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002590:	ee16 0a90 	vmov	r0, s13
 8002594:	f7fe f800 	bl	8000598 <__aeabi_f2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	ec43 2b10 	vmov	d0, r2, r3
 80025a0:	f008 f854 	bl	800a64c <sqrt>
 80025a4:	ec53 2b10 	vmov	r2, r3, d0
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7fe fb24 	bl	8000bf8 <__aeabi_d2f>
 80025b0:	4603      	mov	r3, r0
 80025b2:	ee07 3a90 	vmov	s15, r3
}
 80025b6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <objects_def_init>:
photovoltaic *cell;
digital_IOs  *relay_pos, *relay_neg, *led_output;
debug_mod	 *dbg;

void objects_def_init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af04      	add	r7, sp, #16
	dbg  = events_initialize_debug_mod("Debug Mod 1", GPIOB, CELL_1_DBG1_Pin, CELL_1_DBG2_Pin, CELL_1_DBG3_Pin);
 80025c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2310      	movs	r3, #16
 80025ce:	2220      	movs	r2, #32
 80025d0:	491d      	ldr	r1, [pc, #116]	; (8002648 <objects_def_init+0x88>)
 80025d2:	481e      	ldr	r0, [pc, #120]	; (800264c <objects_def_init+0x8c>)
 80025d4:	f7fe fd4c 	bl	8001070 <events_initialize_debug_mod>
 80025d8:	4603      	mov	r3, r0
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <objects_def_init+0x90>)
 80025dc:	6013      	str	r3, [r2, #0]

	relay_pos  = events_initialize_digital_ios("Output Relay (+)", GPIOA, CELL_1_OUT_POS_Pin, 0);
 80025de:	2300      	movs	r3, #0
 80025e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80025e8:	481a      	ldr	r0, [pc, #104]	; (8002654 <objects_def_init+0x94>)
 80025ea:	f7fe fd95 	bl	8001118 <events_initialize_digital_ios>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4a19      	ldr	r2, [pc, #100]	; (8002658 <objects_def_init+0x98>)
 80025f2:	6013      	str	r3, [r2, #0]
	relay_neg  = events_initialize_digital_ios("Output Relay (-)", GPIOC, CELL_1_OUT_NEG_Pin, 0);
 80025f4:	2300      	movs	r3, #0
 80025f6:	2201      	movs	r2, #1
 80025f8:	4918      	ldr	r1, [pc, #96]	; (800265c <objects_def_init+0x9c>)
 80025fa:	4819      	ldr	r0, [pc, #100]	; (8002660 <objects_def_init+0xa0>)
 80025fc:	f7fe fd8c 	bl	8001118 <events_initialize_digital_ios>
 8002600:	4603      	mov	r3, r0
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <objects_def_init+0xa4>)
 8002604:	6013      	str	r3, [r2, #0]
	led_output = events_initialize_digital_ios("Output LED", GPIOA, CELL_1_OUT_LED_Pin, 0);
 8002606:	2300      	movs	r3, #0
 8002608:	2220      	movs	r2, #32
 800260a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800260e:	4816      	ldr	r0, [pc, #88]	; (8002668 <objects_def_init+0xa8>)
 8002610:	f7fe fd82 	bl	8001118 <events_initialize_digital_ios>
 8002614:	4603      	mov	r3, r0
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <objects_def_init+0xac>)
 8002618:	6013      	str	r3, [r2, #0]

	cell = meas_initialize_objects("Photovoltaic Cell 1", &hadc1, &hadc2, relay_pos, relay_neg, led_output, dbg);
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <objects_def_init+0x98>)
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <objects_def_init+0xa4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <objects_def_init+0xac>)
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	490a      	ldr	r1, [pc, #40]	; (8002650 <objects_def_init+0x90>)
 8002628:	6809      	ldr	r1, [r1, #0]
 800262a:	9102      	str	r1, [sp, #8]
 800262c:	9201      	str	r2, [sp, #4]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4603      	mov	r3, r0
 8002632:	4a0f      	ldr	r2, [pc, #60]	; (8002670 <objects_def_init+0xb0>)
 8002634:	490f      	ldr	r1, [pc, #60]	; (8002674 <objects_def_init+0xb4>)
 8002636:	4810      	ldr	r0, [pc, #64]	; (8002678 <objects_def_init+0xb8>)
 8002638:	f7ff fa40 	bl	8001abc <meas_initialize_objects>
 800263c:	4603      	mov	r3, r0
 800263e:	4a0f      	ldr	r2, [pc, #60]	; (800267c <objects_def_init+0xbc>)
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	48000400 	.word	0x48000400
 800264c:	0800a9c8 	.word	0x0800a9c8
 8002650:	200003a4 	.word	0x200003a4
 8002654:	0800a9d4 	.word	0x0800a9d4
 8002658:	200003a8 	.word	0x200003a8
 800265c:	48000800 	.word	0x48000800
 8002660:	0800a9e8 	.word	0x0800a9e8
 8002664:	200003b0 	.word	0x200003b0
 8002668:	0800a9fc 	.word	0x0800a9fc
 800266c:	200003ac 	.word	0x200003ac
 8002670:	20000214 	.word	0x20000214
 8002674:	200002ec 	.word	0x200002ec
 8002678:	0800aa08 	.word	0x0800aa08
 800267c:	200003b4 	.word	0x200003b4

08002680 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002690:	d105      	bne.n	800269e <HAL_ADC_ConvCpltCallback+0x1e>
		meas_sample(cell);
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_ADC_ConvCpltCallback+0x3c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fb82 	bl	8001da0 <meas_sample>
	else if (hadc->Instance == ADC5)
		meas_temperature(cell);
}
 800269c:	e009      	b.n	80026b2 <HAL_ADC_ConvCpltCallback+0x32>
	else if (hadc->Instance == ADC5)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_ADC_ConvCpltCallback+0x40>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d104      	bne.n	80026b2 <HAL_ADC_ConvCpltCallback+0x32>
		meas_temperature(cell);
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <HAL_ADC_ConvCpltCallback+0x3c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fae7 	bl	8001c80 <meas_temperature>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200003b4 	.word	0x200003b4
 80026c0:	50000600 	.word	0x50000600

080026c4 <objects_def_exti_gpio>:

void objects_def_exti_gpio(uint16_t GPIO_Pin)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == CELL_1_BTN_Pin)
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d4:	d104      	bne.n	80026e0 <objects_def_exti_gpio+0x1c>
		meas_decouple_system(cell);
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <objects_def_exti_gpio+0x24>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff faaa 	bl	8001c34 <meas_decouple_system>
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200003b4 	.word	0x200003b4

080026ec <objects_def_loop>:

void objects_def_loop(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	events_handler(cell);
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <objects_def_loop+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fd3d 	bl	8001174 <events_handler>
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200003b4 	.word	0x200003b4

08002704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_MspInit+0x44>)
 800270c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <HAL_MspInit+0x44>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6613      	str	r3, [r2, #96]	; 0x60
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <HAL_MspInit+0x44>)
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_MspInit+0x44>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_MspInit+0x44>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_MspInit+0x44>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800273a:	f003 fad5 	bl	8005ce8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000

0800274c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <NMI_Handler+0x4>

08002752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <MemManage_Handler+0x4>

0800275e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <UsageFault_Handler+0x4>

0800276a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002798:	f000 fa74 	bl	8002c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027a4:	4803      	ldr	r0, [pc, #12]	; (80027b4 <ADC1_2_IRQHandler+0x14>)
 80027a6:	f001 f923 	bl	80039f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80027aa:	4803      	ldr	r0, [pc, #12]	; (80027b8 <ADC1_2_IRQHandler+0x18>)
 80027ac:	f001 f920 	bl	80039f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200002ec 	.word	0x200002ec
 80027b8:	20000214 	.word	0x20000214

080027bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80027c2:	f004 fab9 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200003b8 	.word	0x200003b8

080027d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <TIM2_IRQHandler+0x10>)
 80027d6:	f004 faaf 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000404 	.word	0x20000404

080027e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027ec:	f002 fd28 	bl	8005240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <ADC5_IRQHandler+0x10>)
 80027fa:	f001 f8f9 	bl	80039f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000280 	.word	0x20000280

08002808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_kill>:

int _kill(int pid, int sig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002822:	f004 ff63 	bl	80076ec <__errno>
 8002826:	4603      	mov	r3, r0
 8002828:	2216      	movs	r2, #22
 800282a:	601a      	str	r2, [r3, #0]
	return -1;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_exit>:

void _exit (int status)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe7 	bl	8002818 <_kill>
	while (1) {}		/* Make sure we hang here */
 800284a:	e7fe      	b.n	800284a <_exit+0x12>

0800284c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e00a      	b.n	8002874 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800285e:	f3af 8000 	nop.w
 8002862:	4601      	mov	r1, r0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	60ba      	str	r2, [r7, #8]
 800286a:	b2ca      	uxtb	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	dbf0      	blt.n	800285e <_read+0x12>
	}

return len;
 800287c:	687b      	ldr	r3, [r7, #4]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
	return -1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ae:	605a      	str	r2, [r3, #4]
	return 0;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <_isatty>:

int _isatty(int file)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	return 1;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
	return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <_sbrk+0x5c>)
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <_sbrk+0x60>)
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <_sbrk+0x64>)
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <_sbrk+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002920:	f004 fee4 	bl	80076ec <__errno>
 8002924:	4603      	mov	r3, r0
 8002926:	220c      	movs	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800292e:	e009      	b.n	8002944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	4a05      	ldr	r2, [pc, #20]	; (8002954 <_sbrk+0x64>)
 8002940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20020000 	.word	0x20020000
 8002950:	00000400 	.word	0x00000400
 8002954:	20000208 	.word	0x20000208
 8002958:	20000468 	.word	0x20000468

0800295c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <SystemInit+0x20>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <SystemInit+0x20>)
 8002968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800296c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <MX_TIM1_Init+0xa0>)
 80029a0:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <MX_TIM1_Init+0xa4>)
 80029a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <MX_TIM1_Init+0xa0>)
 80029a6:	2277      	movs	r2, #119	; 0x77
 80029a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <MX_TIM1_Init+0xa0>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1041;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MX_TIM1_Init+0xa0>)
 80029b2:	f240 4211 	movw	r2, #1041	; 0x411
 80029b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <MX_TIM1_Init+0xa0>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <MX_TIM1_Init+0xa0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <MX_TIM1_Init+0xa0>)
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029ca:	4815      	ldr	r0, [pc, #84]	; (8002a20 <MX_TIM1_Init+0xa0>)
 80029cc:	f004 f8e4 	bl	8006b98 <HAL_TIM_Base_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80029d6:	f7ff f86b 	bl	8001ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	4619      	mov	r1, r3
 80029e6:	480e      	ldr	r0, [pc, #56]	; (8002a20 <MX_TIM1_Init+0xa0>)
 80029e8:	f004 fb26 	bl	8007038 <HAL_TIM_ConfigClockSource>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80029f2:	f7ff f85d 	bl	8001ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4806      	ldr	r0, [pc, #24]	; (8002a20 <MX_TIM1_Init+0xa0>)
 8002a08:	f004 fd94 	bl	8007534 <HAL_TIMEx_MasterConfigSynchronization>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a12:	f7ff f84d 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a16:	bf00      	nop
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200003b8 	.word	0x200003b8
 8002a24:	40012c00 	.word	0x40012c00

08002a28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <MX_TIM2_Init+0x98>)
 8002a48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11999;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <MX_TIM2_Init+0x98>)
 8002a50:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002a54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <MX_TIM2_Init+0x98>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <MX_TIM2_Init+0x98>)
 8002a5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <MX_TIM2_Init+0x98>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <MX_TIM2_Init+0x98>)
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a70:	4813      	ldr	r0, [pc, #76]	; (8002ac0 <MX_TIM2_Init+0x98>)
 8002a72:	f004 f891 	bl	8006b98 <HAL_TIM_Base_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002a7c:	f7ff f818 	bl	8001ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <MX_TIM2_Init+0x98>)
 8002a8e:	f004 fad3 	bl	8007038 <HAL_TIM_ConfigClockSource>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002a98:	f7ff f80a 	bl	8001ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <MX_TIM2_Init+0x98>)
 8002aaa:	f004 fd43 	bl	8007534 <HAL_TIMEx_MasterConfigSynchronization>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002ab4:	f7fe fffc 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000404 	.word	0x20000404

08002ac4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <HAL_TIM_Base_MspInit+0x78>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d114      	bne.n	8002b00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_TIM_Base_MspInit+0x7c>)
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <HAL_TIM_Base_MspInit+0x7c>)
 8002adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ae2:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_TIM_Base_MspInit+0x7c>)
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	2019      	movs	r0, #25
 8002af4:	f002 f9d5 	bl	8004ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002af8:	2019      	movs	r0, #25
 8002afa:	f002 f9ec 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002afe:	e018      	b.n	8002b32 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d113      	bne.n	8002b32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_TIM_Base_MspInit+0x7c>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <HAL_TIM_Base_MspInit+0x7c>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6593      	str	r3, [r2, #88]	; 0x58
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_TIM_Base_MspInit+0x7c>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	201c      	movs	r0, #28
 8002b28:	f002 f9bb 	bl	8004ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b2c:	201c      	movs	r0, #28
 8002b2e:	f002 f9d2 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d106      	bne.n	8002b64 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_ADC_Start(&hadc2);
 8002b56:	480a      	ldr	r0, [pc, #40]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002b58:	f000 fcfc 	bl	8003554 <HAL_ADC_Start>
		HAL_ADC_Start_IT(&hadc1);
 8002b5c:	4809      	ldr	r0, [pc, #36]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002b5e:	f000 fddd 	bl	800371c <HAL_ADC_Start_IT>
	}
	else if (htim->Instance == TIM2)
	{
		HAL_ADC_Start_IT(&hadc5);
	}
}
 8002b62:	e007      	b.n	8002b74 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if (htim->Instance == TIM2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6c:	d102      	bne.n	8002b74 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ADC_Start_IT(&hadc5);
 8002b6e:	4806      	ldr	r0, [pc, #24]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002b70:	f000 fdd4 	bl	800371c <HAL_ADC_Start_IT>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	20000214 	.word	0x20000214
 8002b84:	200002ec 	.word	0x200002ec
 8002b88:	20000280 	.word	0x20000280

08002b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b90:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b92:	490e      	ldr	r1, [pc, #56]	; (8002bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b94:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <LoopForever+0xe>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b98:	e002      	b.n	8002ba0 <LoopCopyDataInit>

08002b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9e:	3304      	adds	r3, #4

08002ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba4:	d3f9      	bcc.n	8002b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ba8:	4c0b      	ldr	r4, [pc, #44]	; (8002bd8 <LoopForever+0x16>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bac:	e001      	b.n	8002bb2 <LoopFillZerobss>

08002bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb0:	3204      	adds	r2, #4

08002bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb4:	d3fb      	bcc.n	8002bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bb6:	f7ff fed1 	bl	800295c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bba:	f004 fd9d 	bl	80076f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bbe:	f7fe feb7 	bl	8001930 <main>

08002bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8002bc2:	e7fe      	b.n	8002bc2 <LoopForever>
  ldr   r0, =_estack
 8002bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bcc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bd0:	0800ae14 	.word	0x0800ae14
  ldr r2, =_sbss
 8002bd4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002bd8:	20000464 	.word	0x20000464

08002bdc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bdc:	e7fe      	b.n	8002bdc <ADC3_IRQHandler>

08002bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be8:	2003      	movs	r0, #3
 8002bea:	f002 f94f 	bl	8004e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f000 f80e 	bl	8002c10 <HAL_InitTick>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	71fb      	strb	r3, [r7, #7]
 8002bfe:	e001      	b.n	8002c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c00:	f7ff fd80 	bl	8002704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c04:	79fb      	ldrb	r3, [r7, #7]

}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c1c:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <HAL_InitTick+0x68>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d022      	beq.n	8002c6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_InitTick+0x6c>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_InitTick+0x68>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 f95a 	bl	8004ef2 <HAL_SYSTICK_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10f      	bne.n	8002c64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b0f      	cmp	r3, #15
 8002c48:	d809      	bhi.n	8002c5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c52:	f002 f926 	bl	8004ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_InitTick+0x70>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e007      	b.n	8002c6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	e004      	b.n	8002c6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	e001      	b.n	8002c6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000008 	.word	0x20000008
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000004 	.word	0x20000004

08002c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_IncTick+0x1c>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_IncTick+0x1c>)
 8002c94:	6013      	str	r3, [r2, #0]
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	20000450 	.word	0x20000450
 8002ca4:	20000008 	.word	0x20000008

08002ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_GetTick+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000450 	.word	0x20000450

08002cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff ffee 	bl	8002ca8 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd8:	d004      	beq.n	8002ce4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_Delay+0x40>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ce4:	bf00      	nop
 8002ce6:	f7ff ffdf 	bl	8002ca8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d8f7      	bhi.n	8002ce6 <HAL_Delay+0x26>
  {
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000008 	.word	0x20000008

08002d04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3360      	adds	r3, #96	; 0x60
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <LL_ADC_SetOffset+0x44>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	03fff000 	.word	0x03fff000

08002db4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3360      	adds	r3, #96	; 0x60
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3360      	adds	r3, #96	; 0x60
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b087      	sub	sp, #28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3360      	adds	r3, #96	; 0x60
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3360      	adds	r3, #96	; 0x60
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	615a      	str	r2, [r3, #20]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b087      	sub	sp, #28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3330      	adds	r3, #48	; 0x30
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	4413      	add	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	211f      	movs	r1, #31
 8002efa:	fa01 f303 	lsl.w	r3, r1, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	401a      	ands	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	0e9b      	lsrs	r3, r3, #26
 8002f06:	f003 011f 	and.w	r1, r3, #31
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	0e5b      	lsrs	r3, r3, #25
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	4413      	add	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0d1b      	lsrs	r3, r3, #20
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2107      	movs	r1, #7
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	401a      	ands	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	0d1b      	lsrs	r3, r3, #20
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	431a      	orrs	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f003 0318 	and.w	r3, r3, #24
 8002fc6:	4908      	ldr	r1, [pc, #32]	; (8002fe8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fc8:	40d9      	lsrs	r1, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	400b      	ands	r3, r1
 8002fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	0007ffff 	.word	0x0007ffff

08002fec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003034:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6093      	str	r3, [r2, #8]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305c:	d101      	bne.n	8003062 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003084:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ac:	d101      	bne.n	80030b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030fc:	f043 0202 	orr.w	r2, r3, #2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <LL_ADC_IsEnabled+0x18>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <LL_ADC_IsEnabled+0x1a>
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d101      	bne.n	800314e <LL_ADC_IsDisableOngoing+0x18>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <LL_ADC_IsDisableOngoing+0x1a>
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800316c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003170:	f043 0204 	orr.w	r2, r3, #4
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d101      	bne.n	800319c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d101      	bne.n	80031c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1af      	b.n	800354a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fd fe8f 	bl	8000f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff19 	bl	8003048 <LL_ADC_IsDeepPowerDownEnabled>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff feff 	bl	8003024 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff34 	bl	8003098 <LL_ADC_IsInternalRegulatorEnabled>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d115      	bne.n	8003262 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff18 	bl	8003070 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003240:	4b9f      	ldr	r3, [pc, #636]	; (80034c0 <HAL_ADC_Init+0x2f0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	4a9f      	ldr	r2, [pc, #636]	; (80034c4 <HAL_ADC_Init+0x2f4>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	3301      	adds	r3, #1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003254:	e002      	b.n	800325c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	3b01      	subs	r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f9      	bne.n	8003256 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff16 	bl	8003098 <LL_ADC_IsInternalRegulatorEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10d      	bne.n	800328e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff76 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003298:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 8148 	bne.w	8003538 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 8144 	bne.w	8003538 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032b8:	f043 0202 	orr.w	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff23 	bl	8003110 <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d141      	bne.n	8003354 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d8:	d004      	beq.n	80032e4 <HAL_ADC_Init+0x114>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7a      	ldr	r2, [pc, #488]	; (80034c8 <HAL_ADC_Init+0x2f8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10f      	bne.n	8003304 <HAL_ADC_Init+0x134>
 80032e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032e8:	f7ff ff12 	bl	8003110 <LL_ADC_IsEnabled>
 80032ec:	4604      	mov	r4, r0
 80032ee:	4876      	ldr	r0, [pc, #472]	; (80034c8 <HAL_ADC_Init+0x2f8>)
 80032f0:	f7ff ff0e 	bl	8003110 <LL_ADC_IsEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4323      	orrs	r3, r4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e012      	b.n	800332a <HAL_ADC_Init+0x15a>
 8003304:	4871      	ldr	r0, [pc, #452]	; (80034cc <HAL_ADC_Init+0x2fc>)
 8003306:	f7ff ff03 	bl	8003110 <LL_ADC_IsEnabled>
 800330a:	4604      	mov	r4, r0
 800330c:	4870      	ldr	r0, [pc, #448]	; (80034d0 <HAL_ADC_Init+0x300>)
 800330e:	f7ff feff 	bl	8003110 <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	431c      	orrs	r4, r3
 8003316:	486f      	ldr	r0, [pc, #444]	; (80034d4 <HAL_ADC_Init+0x304>)
 8003318:	f7ff fefa 	bl	8003110 <LL_ADC_IsEnabled>
 800331c:	4603      	mov	r3, r0
 800331e:	4323      	orrs	r3, r4
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003336:	d004      	beq.n	8003342 <HAL_ADC_Init+0x172>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a62      	ldr	r2, [pc, #392]	; (80034c8 <HAL_ADC_Init+0x2f8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d101      	bne.n	8003346 <HAL_ADC_Init+0x176>
 8003342:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <HAL_ADC_Init+0x308>)
 8003344:	e000      	b.n	8003348 <HAL_ADC_Init+0x178>
 8003346:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_ADC_Init+0x30c>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f7ff fcd8 	bl	8002d04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7f5b      	ldrb	r3, [r3, #29]
 8003358:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800335e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003364:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800336a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003372:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337e:	2b01      	cmp	r3, #1
 8003380:	d106      	bne.n	8003390 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	045b      	lsls	r3, r3, #17
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <HAL_ADC_Init+0x310>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	69b9      	ldr	r1, [r7, #24]
 80033bc:	430b      	orrs	r3, r1
 80033be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fed2 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 80033e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fedf 	bl	80031aa <LL_ADC_INJ_IsConversionOngoing>
 80033ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d17f      	bne.n	80034f4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d17c      	bne.n	80034f4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003406:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003416:	f023 0302 	bic.w	r3, r3, #2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	430b      	orrs	r3, r1
 8003422:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d017      	beq.n	800345c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800343a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003444:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6911      	ldr	r1, [r2, #16]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	430b      	orrs	r3, r1
 8003456:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800345a:	e013      	b.n	8003484 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800346a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800347c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003480:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800348a:	2b01      	cmp	r3, #1
 800348c:	d12a      	bne.n	80034e4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034a4:	4311      	orrs	r1, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034b0:	430a      	orrs	r2, r1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	e019      	b.n	80034f4 <HAL_ADC_Init+0x324>
 80034c0:	20000000 	.word	0x20000000
 80034c4:	053e2d63 	.word	0x053e2d63
 80034c8:	50000100 	.word	0x50000100
 80034cc:	50000400 	.word	0x50000400
 80034d0:	50000500 	.word	0x50000500
 80034d4:	50000600 	.word	0x50000600
 80034d8:	50000300 	.word	0x50000300
 80034dc:	50000700 	.word	0x50000700
 80034e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10c      	bne.n	8003516 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f023 010f 	bic.w	r1, r3, #15
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	1e5a      	subs	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
 8003514:	e007      	b.n	8003526 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 020f 	bic.w	r2, r2, #15
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	65da      	str	r2, [r3, #92]	; 0x5c
 8003536:	e007      	b.n	8003548 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353c:	f043 0210 	orr.w	r2, r3, #16
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003548:	7ffb      	ldrb	r3, [r7, #31]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd90      	pop	{r4, r7, pc}
 8003552:	bf00      	nop

08003554 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003564:	d004      	beq.n	8003570 <HAL_ADC_Start+0x1c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a67      	ldr	r2, [pc, #412]	; (8003708 <HAL_ADC_Start+0x1b4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_ADC_Start+0x20>
 8003570:	4b66      	ldr	r3, [pc, #408]	; (800370c <HAL_ADC_Start+0x1b8>)
 8003572:	e000      	b.n	8003576 <HAL_ADC_Start+0x22>
 8003574:	4b66      	ldr	r3, [pc, #408]	; (8003710 <HAL_ADC_Start+0x1bc>)
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fd38 	bl	8002fec <LL_ADC_GetMultimode>
 800357c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fdfe 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 80b4 	bne.w	80036f8 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_ADC_Start+0x4a>
 800359a:	2302      	movs	r3, #2
 800359c:	e0af      	b.n	80036fe <HAL_ADC_Start+0x1aa>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f001 f8d0 	bl	800474c <ADC_Enable>
 80035ac:	4603      	mov	r3, r0
 80035ae:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 809b 	bne.w	80036ee <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a4d      	ldr	r2, [pc, #308]	; (8003708 <HAL_ADC_Start+0x1b4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_ADC_Start+0x96>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4e      	ldr	r2, [pc, #312]	; (8003714 <HAL_ADC_Start+0x1c0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d002      	beq.n	80035e6 <HAL_ADC_Start+0x92>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	e003      	b.n	80035ee <HAL_ADC_Start+0x9a>
 80035e6:	4b4c      	ldr	r3, [pc, #304]	; (8003718 <HAL_ADC_Start+0x1c4>)
 80035e8:	e001      	b.n	80035ee <HAL_ADC_Start+0x9a>
 80035ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d002      	beq.n	80035fc <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d106      	bne.n	8003624 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361a:	f023 0206 	bic.w	r2, r3, #6
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	661a      	str	r2, [r3, #96]	; 0x60
 8003622:	e002      	b.n	800362a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	221c      	movs	r2, #28
 8003630:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a32      	ldr	r2, [pc, #200]	; (8003708 <HAL_ADC_Start+0x1b4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_ADC_Start+0x104>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a32      	ldr	r2, [pc, #200]	; (8003714 <HAL_ADC_Start+0x1c0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d002      	beq.n	8003654 <HAL_ADC_Start+0x100>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	e003      	b.n	800365c <HAL_ADC_Start+0x108>
 8003654:	4b30      	ldr	r3, [pc, #192]	; (8003718 <HAL_ADC_Start+0x1c4>)
 8003656:	e001      	b.n	800365c <HAL_ADC_Start+0x108>
 8003658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	4293      	cmp	r3, r2
 8003662:	d008      	beq.n	8003676 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d002      	beq.n	8003676 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b09      	cmp	r3, #9
 8003674:	d114      	bne.n	80036a0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800368c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fd5f 	bl	800315c <LL_ADC_REG_StartConversion>
 800369e:	e02d      	b.n	80036fc <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a15      	ldr	r2, [pc, #84]	; (8003708 <HAL_ADC_Start+0x1b4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_ADC_Start+0x176>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_ADC_Start+0x1c0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d002      	beq.n	80036c6 <HAL_ADC_Start+0x172>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	e003      	b.n	80036ce <HAL_ADC_Start+0x17a>
 80036c6:	4b14      	ldr	r3, [pc, #80]	; (8003718 <HAL_ADC_Start+0x1c4>)
 80036c8:	e001      	b.n	80036ce <HAL_ADC_Start+0x17a>
 80036ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036ce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00f      	beq.n	80036fc <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80036ec:	e006      	b.n	80036fc <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80036f6:	e001      	b.n	80036fc <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
 80036fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	50000100 	.word	0x50000100
 800370c:	50000300 	.word	0x50000300
 8003710:	50000700 	.word	0x50000700
 8003714:	50000500 	.word	0x50000500
 8003718:	50000400 	.word	0x50000400

0800371c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800372c:	d004      	beq.n	8003738 <HAL_ADC_Start_IT+0x1c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a93      	ldr	r2, [pc, #588]	; (8003980 <HAL_ADC_Start_IT+0x264>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_ADC_Start_IT+0x20>
 8003738:	4b92      	ldr	r3, [pc, #584]	; (8003984 <HAL_ADC_Start_IT+0x268>)
 800373a:	e000      	b.n	800373e <HAL_ADC_Start_IT+0x22>
 800373c:	4b92      	ldr	r3, [pc, #584]	; (8003988 <HAL_ADC_Start_IT+0x26c>)
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fc54 	bl	8002fec <LL_ADC_GetMultimode>
 8003744:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fd1a 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 8134 	bne.w	80039c0 <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_ADC_Start_IT+0x4a>
 8003762:	2302      	movs	r3, #2
 8003764:	e131      	b.n	80039ca <HAL_ADC_Start_IT+0x2ae>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 ffec 	bl	800474c <ADC_Enable>
 8003774:	4603      	mov	r3, r0
 8003776:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 811b 	bne.w	80039b6 <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a79      	ldr	r2, [pc, #484]	; (8003980 <HAL_ADC_Start_IT+0x264>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_ADC_Start_IT+0x96>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7a      	ldr	r2, [pc, #488]	; (800398c <HAL_ADC_Start_IT+0x270>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d002      	beq.n	80037ae <HAL_ADC_Start_IT+0x92>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	e003      	b.n	80037b6 <HAL_ADC_Start_IT+0x9a>
 80037ae:	4b78      	ldr	r3, [pc, #480]	; (8003990 <HAL_ADC_Start_IT+0x274>)
 80037b0:	e001      	b.n	80037b6 <HAL_ADC_Start_IT+0x9a>
 80037b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d002      	beq.n	80037c4 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d006      	beq.n	80037ea <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	f023 0206 	bic.w	r2, r3, #6
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	661a      	str	r2, [r3, #96]	; 0x60
 80037e8:	e002      	b.n	80037f0 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	221c      	movs	r2, #28
 80037f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 021c 	bic.w	r2, r2, #28
 800380e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d108      	bne.n	800382a <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0208 	orr.w	r2, r2, #8
 8003826:	605a      	str	r2, [r3, #4]
          break;
 8003828:	e008      	b.n	800383c <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0204 	orr.w	r2, r2, #4
 8003838:	605a      	str	r2, [r3, #4]
          break;
 800383a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d107      	bne.n	8003854 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0210 	orr.w	r2, r2, #16
 8003852:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a49      	ldr	r2, [pc, #292]	; (8003980 <HAL_ADC_Start_IT+0x264>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_ADC_Start_IT+0x156>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_ADC_Start_IT+0x270>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d002      	beq.n	800386e <HAL_ADC_Start_IT+0x152>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	e003      	b.n	8003876 <HAL_ADC_Start_IT+0x15a>
 800386e:	4b48      	ldr	r3, [pc, #288]	; (8003990 <HAL_ADC_Start_IT+0x274>)
 8003870:	e001      	b.n	8003876 <HAL_ADC_Start_IT+0x15a>
 8003872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	4293      	cmp	r3, r2
 800387c:	d008      	beq.n	8003890 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d002      	beq.n	8003890 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b09      	cmp	r3, #9
 800388e:	d13b      	bne.n	8003908 <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02d      	beq.n	80038fa <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d110      	bne.n	80038d8 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0220 	bic.w	r2, r2, #32
 80038c4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d4:	605a      	str	r2, [r3, #4]
              break;
 80038d6:	e011      	b.n	80038fc <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0220 	orr.w	r2, r2, #32
 80038f6:	605a      	str	r2, [r3, #4]
              break;
 80038f8:	e000      	b.n	80038fc <HAL_ADC_Start_IT+0x1e0>
          }
        }
 80038fa:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fc2b 	bl	800315c <LL_ADC_REG_StartConversion>
 8003906:	e05f      	b.n	80039c8 <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a19      	ldr	r2, [pc, #100]	; (8003980 <HAL_ADC_Start_IT+0x264>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_ADC_Start_IT+0x216>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1a      	ldr	r2, [pc, #104]	; (800398c <HAL_ADC_Start_IT+0x270>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d002      	beq.n	800392e <HAL_ADC_Start_IT+0x212>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	e003      	b.n	8003936 <HAL_ADC_Start_IT+0x21a>
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_ADC_Start_IT+0x274>)
 8003930:	e001      	b.n	8003936 <HAL_ADC_Start_IT+0x21a>
 8003932:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003936:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d040      	beq.n	80039c6 <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800394c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d11b      	bne.n	8003994 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0220 	bic.w	r2, r2, #32
 800396a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800397a:	605a      	str	r2, [r3, #4]
              break;
 800397c:	e024      	b.n	80039c8 <HAL_ADC_Start_IT+0x2ac>
 800397e:	bf00      	nop
 8003980:	50000100 	.word	0x50000100
 8003984:	50000300 	.word	0x50000300
 8003988:	50000700 	.word	0x50000700
 800398c:	50000500 	.word	0x50000500
 8003990:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0220 	orr.w	r2, r2, #32
 80039b2:	605a      	str	r2, [r3, #4]
              break;
 80039b4:	e008      	b.n	80039c8 <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80039be:	e003      	b.n	80039c8 <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
 80039c2:	75fb      	strb	r3, [r7, #23]
 80039c4:	e000      	b.n	80039c8 <HAL_ADC_Start_IT+0x2ac>
        }
 80039c6:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop

080039d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a14:	d004      	beq.n	8003a20 <HAL_ADC_IRQHandler+0x30>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a95      	ldr	r2, [pc, #596]	; (8003c70 <HAL_ADC_IRQHandler+0x280>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_IRQHandler+0x34>
 8003a20:	4b94      	ldr	r3, [pc, #592]	; (8003c74 <HAL_ADC_IRQHandler+0x284>)
 8003a22:	e000      	b.n	8003a26 <HAL_ADC_IRQHandler+0x36>
 8003a24:	4b94      	ldr	r3, [pc, #592]	; (8003c78 <HAL_ADC_IRQHandler+0x288>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fae0 	bl	8002fec <LL_ADC_GetMultimode>
 8003a2c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d017      	beq.n	8003a68 <HAL_ADC_IRQHandler+0x78>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d012      	beq.n	8003a68 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f001 f834 	bl	8004ac8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2202      	movs	r2, #2
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_ADC_IRQHandler+0x8c>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8094 	beq.w	8003bb0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 808e 	beq.w	8003bb0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff f9f9 	bl	8002ea8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d072      	beq.n	8003ba2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a6b      	ldr	r2, [pc, #428]	; (8003c70 <HAL_ADC_IRQHandler+0x280>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_ADC_IRQHandler+0xea>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6c      	ldr	r2, [pc, #432]	; (8003c7c <HAL_ADC_IRQHandler+0x28c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d002      	beq.n	8003ad6 <HAL_ADC_IRQHandler+0xe6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	e003      	b.n	8003ade <HAL_ADC_IRQHandler+0xee>
 8003ad6:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_ADC_IRQHandler+0x290>)
 8003ad8:	e001      	b.n	8003ade <HAL_ADC_IRQHandler+0xee>
 8003ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d008      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d002      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b09      	cmp	r3, #9
 8003af6:	d104      	bne.n	8003b02 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	623b      	str	r3, [r7, #32]
 8003b00:	e014      	b.n	8003b2c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5a      	ldr	r2, [pc, #360]	; (8003c70 <HAL_ADC_IRQHandler+0x280>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_ADC_IRQHandler+0x130>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5a      	ldr	r2, [pc, #360]	; (8003c7c <HAL_ADC_IRQHandler+0x28c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d002      	beq.n	8003b1c <HAL_ADC_IRQHandler+0x12c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	e003      	b.n	8003b24 <HAL_ADC_IRQHandler+0x134>
 8003b1c:	4b58      	ldr	r3, [pc, #352]	; (8003c80 <HAL_ADC_IRQHandler+0x290>)
 8003b1e:	e001      	b.n	8003b24 <HAL_ADC_IRQHandler+0x134>
 8003b20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b24:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d135      	bne.n	8003ba2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d12e      	bne.n	8003ba2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fb1b 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d11a      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 020c 	bic.w	r2, r2, #12
 8003b62:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d112      	bne.n	8003ba2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	f043 0201 	orr.w	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b88:	e00b      	b.n	8003ba2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	f043 0210 	orr.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe fd6c 	bl	8002680 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	220c      	movs	r2, #12
 8003bae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d004      	beq.n	8003bc4 <HAL_ADC_IRQHandler+0x1d4>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80b2 	beq.w	8003d34 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80ac 	beq.w	8003d34 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff f994 	bl	8002f26 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003bfe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff f94f 	bl	8002ea8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c0a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <HAL_ADC_IRQHandler+0x280>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_ADC_IRQHandler+0x23a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <HAL_ADC_IRQHandler+0x28c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d002      	beq.n	8003c26 <HAL_ADC_IRQHandler+0x236>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	e003      	b.n	8003c2e <HAL_ADC_IRQHandler+0x23e>
 8003c26:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <HAL_ADC_IRQHandler+0x290>)
 8003c28:	e001      	b.n	8003c2e <HAL_ADC_IRQHandler+0x23e>
 8003c2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d008      	beq.n	8003c48 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d002      	beq.n	8003c48 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b07      	cmp	r3, #7
 8003c46:	d104      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	623b      	str	r3, [r7, #32]
 8003c50:	e01e      	b.n	8003c90 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <HAL_ADC_IRQHandler+0x280>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d013      	beq.n	8003c84 <HAL_ADC_IRQHandler+0x294>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a06      	ldr	r2, [pc, #24]	; (8003c7c <HAL_ADC_IRQHandler+0x28c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d002      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x27c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	e00d      	b.n	8003c88 <HAL_ADC_IRQHandler+0x298>
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <HAL_ADC_IRQHandler+0x290>)
 8003c6e:	e00b      	b.n	8003c88 <HAL_ADC_IRQHandler+0x298>
 8003c70:	50000100 	.word	0x50000100
 8003c74:	50000300 	.word	0x50000300
 8003c78:	50000700 	.word	0x50000700
 8003c7c:	50000500 	.word	0x50000500
 8003c80:	50000400 	.word	0x50000400
 8003c84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c88:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d047      	beq.n	8003d26 <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <HAL_ADC_IRQHandler+0x2c0>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d03f      	beq.n	8003d26 <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d13a      	bne.n	8003d26 <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d133      	bne.n	8003d26 <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d12e      	bne.n	8003d26 <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fa6c 	bl	80031aa <LL_ADC_INJ_IsConversionOngoing>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d11a      	bne.n	8003d0e <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ce6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d112      	bne.n	8003d26 <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d0c:	e00b      	b.n	8003d26 <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	f043 0210 	orr.w	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1e:	f043 0201 	orr.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fea6 	bl	8004a78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2260      	movs	r2, #96	; 0x60
 8003d32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d011      	beq.n	8003d62 <HAL_ADC_IRQHandler+0x372>
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00c      	beq.n	8003d62 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8a5 	bl	8003ea4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d012      	beq.n	8003d92 <HAL_ADC_IRQHandler+0x3a2>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fe8c 	bl	8004aa0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d012      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0x3d2>
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003daa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fe7e 	bl	8004ab4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d043      	beq.n	8003e54 <HAL_ADC_IRQHandler+0x464>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d03e      	beq.n	8003e54 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8003dde:	2301      	movs	r3, #1
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
 8003de2:	e021      	b.n	8003e28 <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d015      	beq.n	8003e16 <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003df2:	d004      	beq.n	8003dfe <HAL_ADC_IRQHandler+0x40e>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <HAL_ADC_IRQHandler+0x4a8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_IRQHandler+0x412>
 8003dfe:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_ADC_IRQHandler+0x4ac>)
 8003e00:	e000      	b.n	8003e04 <HAL_ADC_IRQHandler+0x414>
 8003e02:	4b27      	ldr	r3, [pc, #156]	; (8003ea0 <HAL_ADC_IRQHandler+0x4b0>)
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff f8ff 	bl	8003008 <LL_ADC_GetMultiDMATransfer>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8003e10:	2301      	movs	r3, #1
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	e008      	b.n	8003e28 <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8003e24:	2301      	movs	r3, #1
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10e      	bne.n	8003e4c <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	f043 0202 	orr.w	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f836 	bl	8003eb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2210      	movs	r2, #16
 8003e52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d018      	beq.n	8003e90 <HAL_ADC_IRQHandler+0x4a0>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e78:	f043 0208 	orr.w	r2, r3, #8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e88:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fdfe 	bl	8004a8c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003e90:	bf00      	nop
 8003e92:	3728      	adds	r7, #40	; 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	50000100 	.word	0x50000100
 8003e9c:	50000300 	.word	0x50000300
 8003ea0:	50000700 	.word	0x50000700

08003ea4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b0b6      	sub	sp, #216	; 0xd8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d102      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x24>
 8003eea:	2302      	movs	r3, #2
 8003eec:	f000 bc13 	b.w	8004716 <HAL_ADC_ConfigChannel+0x84a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff f941 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 83f3 	bne.w	80046f0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f7fe ffd9 	bl	8002ece <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f92f 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003f26:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff f93b 	bl	80031aa <LL_ADC_INJ_IsConversionOngoing>
 8003f34:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 81d9 	bne.w	80042f4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 81d4 	bne.w	80042f4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f54:	d10f      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4619      	mov	r1, r3
 8003f62:	f7fe fff3 	bl	8002f4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe ff87 	bl	8002e82 <LL_ADC_SetSamplingTimeCommonConfig>
 8003f74:	e00e      	b.n	8003f94 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f7fe ffe2 	bl	8002f4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe ff77 	bl	8002e82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	08db      	lsrs	r3, r3, #3
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d022      	beq.n	8003ffc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6919      	ldr	r1, [r3, #16]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fc6:	f7fe fed1 	bl	8002d6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6919      	ldr	r1, [r3, #16]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f7fe ff1d 	bl	8002e16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6919      	ldr	r1, [r3, #16]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	7f1b      	ldrb	r3, [r3, #28]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d102      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x126>
 8003fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ff0:	e000      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x128>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f7fe ff29 	bl	8002e4c <LL_ADC_SetOffsetSaturation>
 8003ffa:	e17b      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fed6 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8004008:	4603      	mov	r3, r0
 800400a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x15c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe fecb 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 800401e:	4603      	mov	r3, r0
 8004020:	0e9b      	lsrs	r3, r3, #26
 8004022:	f003 021f 	and.w	r2, r3, #31
 8004026:	e01e      	b.n	8004066 <HAL_ADC_ConfigChannel+0x19a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe fec0 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8004034:	4603      	mov	r3, r0
 8004036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800404a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800404e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004056:	2320      	movs	r3, #32
 8004058:	e004      	b.n	8004064 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800405a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <HAL_ADC_ConfigChannel+0x1b2>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	0e9b      	lsrs	r3, r3, #26
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	e018      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x1e4>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800409a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80040a2:	2320      	movs	r3, #32
 80040a4:	e004      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80040a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d106      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe fe8f 	bl	8002de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2101      	movs	r1, #1
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fe73 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x222>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2101      	movs	r1, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fe68 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 80040e4:	4603      	mov	r3, r0
 80040e6:	0e9b      	lsrs	r3, r3, #26
 80040e8:	f003 021f 	and.w	r2, r3, #31
 80040ec:	e01e      	b.n	800412c <HAL_ADC_ConfigChannel+0x260>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fe5d 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800410c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800411c:	2320      	movs	r3, #32
 800411e:	e004      	b.n	800412a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x278>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0e9b      	lsrs	r3, r3, #26
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	e018      	b.n	8004176 <HAL_ADC_ConfigChannel+0x2aa>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800415c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004168:	2320      	movs	r3, #32
 800416a:	e004      	b.n	8004176 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800416c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004170:	fab3 f383 	clz	r3, r3
 8004174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004176:	429a      	cmp	r2, r3
 8004178:	d106      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2200      	movs	r2, #0
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fe2c 	bl	8002de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fe10 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8004194:	4603      	mov	r3, r0
 8004196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x2e8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe fe05 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 80041aa:	4603      	mov	r3, r0
 80041ac:	0e9b      	lsrs	r3, r3, #26
 80041ae:	f003 021f 	and.w	r2, r3, #31
 80041b2:	e01e      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x326>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2102      	movs	r1, #2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe fdfa 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80041d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80041da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80041e2:	2320      	movs	r3, #32
 80041e4:	e004      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80041e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d105      	bne.n	800420a <HAL_ADC_ConfigChannel+0x33e>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	0e9b      	lsrs	r3, r3, #26
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	e016      	b.n	8004238 <HAL_ADC_ConfigChannel+0x36c>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800421c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800421e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800422a:	2320      	movs	r3, #32
 800422c:	e004      	b.n	8004238 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800422e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004238:	429a      	cmp	r2, r3
 800423a:	d106      	bne.n	800424a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2200      	movs	r2, #0
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe fdcb 	bl	8002de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2103      	movs	r1, #3
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fdaf 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8004256:	4603      	mov	r3, r0
 8004258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x3aa>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2103      	movs	r1, #3
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fda4 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 800426c:	4603      	mov	r3, r0
 800426e:	0e9b      	lsrs	r3, r3, #26
 8004270:	f003 021f 	and.w	r2, r3, #31
 8004274:	e017      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x3da>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2103      	movs	r1, #3
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe fd99 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8004282:	4603      	mov	r3, r0
 8004284:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800428e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004290:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004298:	2320      	movs	r3, #32
 800429a:	e003      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800429c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <HAL_ADC_ConfigChannel+0x3f2>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	0e9b      	lsrs	r3, r3, #26
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	e011      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x416>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80042cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80042d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80042d6:	2320      	movs	r3, #32
 80042d8:	e003      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80042da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042dc:	fab3 f383 	clz	r3, r3
 80042e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d106      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	2103      	movs	r1, #3
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fd76 	bl	8002de0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fe ff09 	bl	8003110 <LL_ADC_IsEnabled>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 813d 	bne.w	8004580 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6819      	ldr	r1, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f7fe fe46 	bl	8002fa4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4aa2      	ldr	r2, [pc, #648]	; (80045a8 <HAL_ADC_ConfigChannel+0x6dc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	f040 812e 	bne.w	8004580 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_ADC_ConfigChannel+0x480>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2b09      	cmp	r3, #9
 8004342:	bf94      	ite	ls
 8004344:	2301      	movls	r3, #1
 8004346:	2300      	movhi	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e019      	b.n	8004380 <HAL_ADC_ConfigChannel+0x4b4>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800435a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800435c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800435e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004364:	2320      	movs	r3, #32
 8004366:	e003      	b.n	8004370 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	3301      	adds	r3, #1
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2b09      	cmp	r3, #9
 8004378:	bf94      	ite	ls
 800437a:	2301      	movls	r3, #1
 800437c:	2300      	movhi	r3, #0
 800437e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004380:	2b00      	cmp	r3, #0
 8004382:	d079      	beq.n	8004478 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438c:	2b00      	cmp	r3, #0
 800438e:	d107      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x4d4>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	0e9b      	lsrs	r3, r3, #26
 8004396:	3301      	adds	r3, #1
 8004398:	069b      	lsls	r3, r3, #26
 800439a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800439e:	e015      	b.n	80043cc <HAL_ADC_ConfigChannel+0x500>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80043b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80043b8:	2320      	movs	r3, #32
 80043ba:	e003      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80043bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	3301      	adds	r3, #1
 80043c6:	069b      	lsls	r3, r3, #26
 80043c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x520>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	0e9b      	lsrs	r3, r3, #26
 80043de:	3301      	adds	r3, #1
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	2101      	movs	r1, #1
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	e017      	b.n	800441c <HAL_ADC_ConfigChannel+0x550>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80043fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80043fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004404:	2320      	movs	r3, #32
 8004406:	e003      	b.n	8004410 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f303 	lsl.w	r3, r1, r3
 800441c:	ea42 0103 	orr.w	r1, r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x576>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0e9b      	lsrs	r3, r3, #26
 8004432:	3301      	adds	r3, #1
 8004434:	f003 021f 	and.w	r2, r3, #31
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	051b      	lsls	r3, r3, #20
 8004440:	e018      	b.n	8004474 <HAL_ADC_ConfigChannel+0x5a8>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800445a:	2320      	movs	r3, #32
 800445c:	e003      	b.n	8004466 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	3301      	adds	r3, #1
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004474:	430b      	orrs	r3, r1
 8004476:	e07e      	b.n	8004576 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x5c8>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	0e9b      	lsrs	r3, r3, #26
 800448a:	3301      	adds	r3, #1
 800448c:	069b      	lsls	r3, r3, #26
 800448e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004492:	e015      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x5f4>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	fa93 f3a3 	rbit	r3, r3
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80044ac:	2320      	movs	r3, #32
 80044ae:	e003      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	3301      	adds	r3, #1
 80044ba:	069b      	lsls	r3, r3, #26
 80044bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d109      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x614>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	0e9b      	lsrs	r3, r3, #26
 80044d2:	3301      	adds	r3, #1
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2101      	movs	r1, #1
 80044da:	fa01 f303 	lsl.w	r3, r1, r3
 80044de:	e017      	b.n	8004510 <HAL_ADC_ConfigChannel+0x644>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	fa93 f3a3 	rbit	r3, r3
 80044ec:	61fb      	str	r3, [r7, #28]
  return result;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80044f8:	2320      	movs	r3, #32
 80044fa:	e003      	b.n	8004504 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	3301      	adds	r3, #1
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	2101      	movs	r1, #1
 800450c:	fa01 f303 	lsl.w	r3, r1, r3
 8004510:	ea42 0103 	orr.w	r1, r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10d      	bne.n	800453c <HAL_ADC_ConfigChannel+0x670>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	0e9b      	lsrs	r3, r3, #26
 8004526:	3301      	adds	r3, #1
 8004528:	f003 021f 	and.w	r2, r3, #31
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	3b1e      	subs	r3, #30
 8004534:	051b      	lsls	r3, r3, #20
 8004536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800453a:	e01b      	b.n	8004574 <HAL_ADC_ConfigChannel+0x6a8>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	613b      	str	r3, [r7, #16]
  return result;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004554:	2320      	movs	r3, #32
 8004556:	e003      	b.n	8004560 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	3301      	adds	r3, #1
 8004562:	f003 021f 	and.w	r2, r3, #31
 8004566:	4613      	mov	r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	3b1e      	subs	r3, #30
 800456e:	051b      	lsls	r3, r3, #20
 8004570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004574:	430b      	orrs	r3, r1
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	6892      	ldr	r2, [r2, #8]
 800457a:	4619      	mov	r1, r3
 800457c:	f7fe fce6 	bl	8002f4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_ADC_ConfigChannel+0x6e0>)
 8004586:	4013      	ands	r3, r2
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80be 	beq.w	800470a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004596:	d004      	beq.n	80045a2 <HAL_ADC_ConfigChannel+0x6d6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <HAL_ADC_ConfigChannel+0x6e4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10a      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x6ec>
 80045a2:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <HAL_ADC_ConfigChannel+0x6e8>)
 80045a4:	e009      	b.n	80045ba <HAL_ADC_ConfigChannel+0x6ee>
 80045a6:	bf00      	nop
 80045a8:	407f0000 	.word	0x407f0000
 80045ac:	80080000 	.word	0x80080000
 80045b0:	50000100 	.word	0x50000100
 80045b4:	50000300 	.word	0x50000300
 80045b8:	4b59      	ldr	r3, [pc, #356]	; (8004720 <HAL_ADC_ConfigChannel+0x854>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fbc8 	bl	8002d50 <LL_ADC_GetCommonPathInternalCh>
 80045c0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a56      	ldr	r2, [pc, #344]	; (8004724 <HAL_ADC_ConfigChannel+0x858>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_ADC_ConfigChannel+0x70c>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a55      	ldr	r2, [pc, #340]	; (8004728 <HAL_ADC_ConfigChannel+0x85c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d13a      	bne.n	800464e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d134      	bne.n	800464e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ec:	d005      	beq.n	80045fa <HAL_ADC_ConfigChannel+0x72e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a4e      	ldr	r2, [pc, #312]	; (800472c <HAL_ADC_ConfigChannel+0x860>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	f040 8085 	bne.w	8004704 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004602:	d004      	beq.n	800460e <HAL_ADC_ConfigChannel+0x742>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a49      	ldr	r2, [pc, #292]	; (8004730 <HAL_ADC_ConfigChannel+0x864>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d101      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x746>
 800460e:	4a49      	ldr	r2, [pc, #292]	; (8004734 <HAL_ADC_ConfigChannel+0x868>)
 8004610:	e000      	b.n	8004614 <HAL_ADC_ConfigChannel+0x748>
 8004612:	4a43      	ldr	r2, [pc, #268]	; (8004720 <HAL_ADC_ConfigChannel+0x854>)
 8004614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f7fe fb83 	bl	8002d2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004624:	4b44      	ldr	r3, [pc, #272]	; (8004738 <HAL_ADC_ConfigChannel+0x86c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	099b      	lsrs	r3, r3, #6
 800462a:	4a44      	ldr	r2, [pc, #272]	; (800473c <HAL_ADC_ConfigChannel+0x870>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	099b      	lsrs	r3, r3, #6
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	4613      	mov	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800463e:	e002      	b.n	8004646 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3b01      	subs	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f9      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800464c:	e05a      	b.n	8004704 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3b      	ldr	r2, [pc, #236]	; (8004740 <HAL_ADC_ConfigChannel+0x874>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d125      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x7d8>
 8004658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800465c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11f      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a31      	ldr	r2, [pc, #196]	; (8004730 <HAL_ADC_ConfigChannel+0x864>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d104      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x7ac>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a34      	ldr	r2, [pc, #208]	; (8004744 <HAL_ADC_ConfigChannel+0x878>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d047      	beq.n	8004708 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004680:	d004      	beq.n	800468c <HAL_ADC_ConfigChannel+0x7c0>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <HAL_ADC_ConfigChannel+0x864>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d101      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x7c4>
 800468c:	4a29      	ldr	r2, [pc, #164]	; (8004734 <HAL_ADC_ConfigChannel+0x868>)
 800468e:	e000      	b.n	8004692 <HAL_ADC_ConfigChannel+0x7c6>
 8004690:	4a23      	ldr	r2, [pc, #140]	; (8004720 <HAL_ADC_ConfigChannel+0x854>)
 8004692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f7fe fb44 	bl	8002d2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046a2:	e031      	b.n	8004708 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a27      	ldr	r2, [pc, #156]	; (8004748 <HAL_ADC_ConfigChannel+0x87c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d12d      	bne.n	800470a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d127      	bne.n	800470a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <HAL_ADC_ConfigChannel+0x864>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d022      	beq.n	800470a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046cc:	d004      	beq.n	80046d8 <HAL_ADC_ConfigChannel+0x80c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a17      	ldr	r2, [pc, #92]	; (8004730 <HAL_ADC_ConfigChannel+0x864>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d101      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x810>
 80046d8:	4a16      	ldr	r2, [pc, #88]	; (8004734 <HAL_ADC_ConfigChannel+0x868>)
 80046da:	e000      	b.n	80046de <HAL_ADC_ConfigChannel+0x812>
 80046dc:	4a10      	ldr	r2, [pc, #64]	; (8004720 <HAL_ADC_ConfigChannel+0x854>)
 80046de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046e6:	4619      	mov	r1, r3
 80046e8:	4610      	mov	r0, r2
 80046ea:	f7fe fb1e 	bl	8002d2a <LL_ADC_SetCommonPathInternalCh>
 80046ee:	e00c      	b.n	800470a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004702:	e002      	b.n	800470a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004704:	bf00      	nop
 8004706:	e000      	b.n	800470a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004708:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004712:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004716:	4618      	mov	r0, r3
 8004718:	37d8      	adds	r7, #216	; 0xd8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	50000700 	.word	0x50000700
 8004724:	c3210000 	.word	0xc3210000
 8004728:	90c00010 	.word	0x90c00010
 800472c:	50000600 	.word	0x50000600
 8004730:	50000100 	.word	0x50000100
 8004734:	50000300 	.word	0x50000300
 8004738:	20000000 	.word	0x20000000
 800473c:	053e2d63 	.word	0x053e2d63
 8004740:	c7520000 	.word	0xc7520000
 8004744:	50000500 	.word	0x50000500
 8004748:	cb840000 	.word	0xcb840000

0800474c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fcd9 	bl	8003110 <LL_ADC_IsEnabled>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d14d      	bne.n	8004800 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	4b28      	ldr	r3, [pc, #160]	; (800480c <ADC_Enable+0xc0>)
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	f043 0210 	orr.w	r2, r3, #16
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e039      	b.n	8004802 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fc94 	bl	80030c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004798:	f7fe fa86 	bl	8002ca8 <HAL_GetTick>
 800479c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800479e:	e028      	b.n	80047f2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fcb3 	bl	8003110 <LL_ADC_IsEnabled>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fe fc83 	bl	80030c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047ba:	f7fe fa75 	bl	8002ca8 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d914      	bls.n	80047f2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d00d      	beq.n	80047f2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	f043 0210 	orr.w	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	f043 0201 	orr.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e007      	b.n	8004802 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d1cf      	bne.n	80047a0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	8000003f 	.word	0x8000003f

08004810 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe fc8a 	bl	8003136 <LL_ADC_IsDisableOngoing>
 8004822:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe fc71 	bl	8003110 <LL_ADC_IsEnabled>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d047      	beq.n	80048c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d144      	bne.n	80048c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030d 	and.w	r3, r3, #13
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10c      	bne.n	8004862 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe fc4b 	bl	80030e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2203      	movs	r2, #3
 8004858:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800485a:	f7fe fa25 	bl	8002ca8 <HAL_GetTick>
 800485e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004860:	e029      	b.n	80048b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	f043 0210 	orr.w	r2, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004872:	f043 0201 	orr.w	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e023      	b.n	80048c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800487e:	f7fe fa13 	bl	8002ca8 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d914      	bls.n	80048b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00d      	beq.n	80048b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	f043 0210 	orr.w	r2, r3, #16
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	f043 0201 	orr.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e007      	b.n	80048c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1dc      	bne.n	800487e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <LL_ADC_IsEnabled>:
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <LL_ADC_IsEnabled+0x18>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <LL_ADC_IsEnabled+0x1a>
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <LL_ADC_StartCalibration>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004906:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004910:	4313      	orrs	r3, r2
 8004912:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_ADC_IsCalibrationOnGoing>:
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800493a:	d101      	bne.n	8004940 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <LL_ADC_REG_IsConversionOngoing>:
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b04      	cmp	r3, #4
 8004960:	d101      	bne.n	8004966 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_ADCEx_Calibration_Start+0x1c>
 800498c:	2302      	movs	r3, #2
 800498e:	e04d      	b.n	8004a2c <HAL_ADCEx_Calibration_Start+0xb8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff39 	bl	8004810 <ADC_Disable>
 800499e:	4603      	mov	r3, r0
 80049a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d136      	bne.n	8004a16 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049b0:	f023 0302 	bic.w	r3, r3, #2
 80049b4:	f043 0202 	orr.w	r2, r3, #2
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ff96 	bl	80048f4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049c8:	e014      	b.n	80049f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <HAL_ADCEx_Calibration_Start+0xc0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d90d      	bls.n	80049f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	f023 0312 	bic.w	r3, r3, #18
 80049e0:	f043 0210 	orr.w	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e01b      	b.n	8004a2c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff94 	bl	8004926 <LL_ADC_IsCalibrationOnGoing>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e2      	bne.n	80049ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a08:	f023 0303 	bic.w	r3, r3, #3
 8004a0c:	f043 0201 	orr.w	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a14:	e005      	b.n	8004a22 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	f043 0210 	orr.w	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	0004de01 	.word	0x0004de01

08004a38 <HAL_ADCEx_MultiModeGetValue>:
  * @brief  Return the last ADC Master and Slave regular conversions results when in multimode configuration.
  * @param hadc ADC handle of ADC Master (handle of ADC Slave must not be used)
  * @retval The converted data values.
  */
uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef *hadc)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning if no assert_param check */
  /* and possible no usage in __LL_ADC_COMMON_INSTANCE() below               */
  UNUSED(hadc);

  /* Pointer to the common control register  */
  tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a48:	d004      	beq.n	8004a54 <HAL_ADCEx_MultiModeGetValue+0x1c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <HAL_ADCEx_MultiModeGetValue+0x34>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d101      	bne.n	8004a58 <HAL_ADCEx_MultiModeGetValue+0x20>
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <HAL_ADCEx_MultiModeGetValue+0x38>)
 8004a56:	e000      	b.n	8004a5a <HAL_ADCEx_MultiModeGetValue+0x22>
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_ADCEx_MultiModeGetValue+0x3c>)
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Return the multi mode conversion value */
  return tmpADC_Common->CDR;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68db      	ldr	r3, [r3, #12]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	50000100 	.word	0x50000100
 8004a70:	50000300 	.word	0x50000300
 8004a74:	50000700 	.word	0x50000700

08004a78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b0a1      	sub	sp, #132	; 0x84
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e0e7      	b.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004b02:	2300      	movs	r3, #0
 8004b04:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004b06:	2300      	movs	r3, #0
 8004b08:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b12:	d102      	bne.n	8004b1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b14:	4b6f      	ldr	r3, [pc, #444]	; (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	e009      	b.n	8004b2e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a6e      	ldr	r2, [pc, #440]	; (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d102      	bne.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004b24:	4b6d      	ldr	r3, [pc, #436]	; (8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	e001      	b.n	8004b2e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0be      	b.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fefd 	bl	800494e <LL_ADC_REG_IsConversionOngoing>
 8004b54:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fef7 	bl	800494e <LL_ADC_REG_IsConversionOngoing>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f040 80a0 	bne.w	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f040 809c 	bne.w	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b78:	d004      	beq.n	8004b84 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a55      	ldr	r2, [pc, #340]	; (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d101      	bne.n	8004b88 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004b84:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004b86:	e000      	b.n	8004b8a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004b88:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004b8a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d04b      	beq.n	8004c2c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ba6:	035b      	lsls	r3, r3, #13
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	431a      	orrs	r2, r3
 8004bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bb8:	d004      	beq.n	8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a45      	ldr	r2, [pc, #276]	; (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d10f      	bne.n	8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004bc4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004bc8:	f7ff fe81 	bl	80048ce <LL_ADC_IsEnabled>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	4841      	ldr	r0, [pc, #260]	; (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bd0:	f7ff fe7d 	bl	80048ce <LL_ADC_IsEnabled>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4323      	orrs	r3, r4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e012      	b.n	8004c0a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004be4:	483c      	ldr	r0, [pc, #240]	; (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004be6:	f7ff fe72 	bl	80048ce <LL_ADC_IsEnabled>
 8004bea:	4604      	mov	r4, r0
 8004bec:	483b      	ldr	r0, [pc, #236]	; (8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004bee:	f7ff fe6e 	bl	80048ce <LL_ADC_IsEnabled>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	431c      	orrs	r4, r3
 8004bf6:	483c      	ldr	r0, [pc, #240]	; (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004bf8:	f7ff fe69 	bl	80048ce <LL_ADC_IsEnabled>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4323      	orrs	r3, r4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d056      	beq.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c16:	f023 030f 	bic.w	r3, r3, #15
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	6811      	ldr	r1, [r2, #0]
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	6892      	ldr	r2, [r2, #8]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	431a      	orrs	r2, r3
 8004c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c28:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c2a:	e047      	b.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c36:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c40:	d004      	beq.n	8004c4c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a23      	ldr	r2, [pc, #140]	; (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d10f      	bne.n	8004c6c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004c4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004c50:	f7ff fe3d 	bl	80048ce <LL_ADC_IsEnabled>
 8004c54:	4604      	mov	r4, r0
 8004c56:	481f      	ldr	r0, [pc, #124]	; (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c58:	f7ff fe39 	bl	80048ce <LL_ADC_IsEnabled>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4323      	orrs	r3, r4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bf0c      	ite	eq
 8004c64:	2301      	moveq	r3, #1
 8004c66:	2300      	movne	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	e012      	b.n	8004c92 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004c6c:	481a      	ldr	r0, [pc, #104]	; (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c6e:	f7ff fe2e 	bl	80048ce <LL_ADC_IsEnabled>
 8004c72:	4604      	mov	r4, r0
 8004c74:	4819      	ldr	r0, [pc, #100]	; (8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c76:	f7ff fe2a 	bl	80048ce <LL_ADC_IsEnabled>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	431c      	orrs	r4, r3
 8004c7e:	481a      	ldr	r0, [pc, #104]	; (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c80:	f7ff fe25 	bl	80048ce <LL_ADC_IsEnabled>
 8004c84:	4603      	mov	r3, r0
 8004c86:	4323      	orrs	r3, r4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d012      	beq.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c9e:	f023 030f 	bic.w	r3, r3, #15
 8004ca2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ca4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ca6:	e009      	b.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004cba:	e000      	b.n	8004cbe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004cc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3784      	adds	r7, #132	; 0x84
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd90      	pop	{r4, r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	50000100 	.word	0x50000100
 8004cd8:	50000400 	.word	0x50000400
 8004cdc:	50000500 	.word	0x50000500
 8004ce0:	50000300 	.word	0x50000300
 8004ce4:	50000700 	.word	0x50000700
 8004ce8:	50000600 	.word	0x50000600

08004cec <__NVIC_SetPriorityGrouping>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <__NVIC_SetPriorityGrouping+0x44>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d1e:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <__NVIC_SetPriorityGrouping+0x44>)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	60d3      	str	r3, [r2, #12]
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	e000ed00 	.word	0xe000ed00

08004d34 <__NVIC_GetPriorityGrouping>:
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <__NVIC_GetPriorityGrouping+0x18>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	f003 0307 	and.w	r3, r3, #7
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	e000ed00 	.word	0xe000ed00

08004d50 <__NVIC_EnableIRQ>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	db0b      	blt.n	8004d7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	f003 021f 	and.w	r2, r3, #31
 8004d68:	4907      	ldr	r1, [pc, #28]	; (8004d88 <__NVIC_EnableIRQ+0x38>)
 8004d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	2001      	movs	r0, #1
 8004d72:	fa00 f202 	lsl.w	r2, r0, r2
 8004d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	e000e100 	.word	0xe000e100

08004d8c <__NVIC_SetPriority>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	db0a      	blt.n	8004db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	490c      	ldr	r1, [pc, #48]	; (8004dd8 <__NVIC_SetPriority+0x4c>)
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	0112      	lsls	r2, r2, #4
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	440b      	add	r3, r1
 8004db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004db4:	e00a      	b.n	8004dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	4908      	ldr	r1, [pc, #32]	; (8004ddc <__NVIC_SetPriority+0x50>)
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	3b04      	subs	r3, #4
 8004dc4:	0112      	lsls	r2, r2, #4
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	440b      	add	r3, r1
 8004dca:	761a      	strb	r2, [r3, #24]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	e000e100 	.word	0xe000e100
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <NVIC_EncodePriority>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f1c3 0307 	rsb	r3, r3, #7
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	bf28      	it	cs
 8004dfe:	2304      	movcs	r3, #4
 8004e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3304      	adds	r3, #4
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d902      	bls.n	8004e10 <NVIC_EncodePriority+0x30>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3b03      	subs	r3, #3
 8004e0e:	e000      	b.n	8004e12 <NVIC_EncodePriority+0x32>
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	401a      	ands	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	43d9      	mvns	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e38:	4313      	orrs	r3, r2
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3724      	adds	r7, #36	; 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <SysTick_Config>:
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e58:	d301      	bcc.n	8004e5e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e00f      	b.n	8004e7e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <SysTick_Config+0x40>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e66:	210f      	movs	r1, #15
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e6c:	f7ff ff8e 	bl	8004d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <SysTick_Config+0x40>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e76:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <SysTick_Config+0x40>)
 8004e78:	2207      	movs	r2, #7
 8004e7a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	e000e010 	.word	0xe000e010

08004e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff29 	bl	8004cec <__NVIC_SetPriorityGrouping>
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004eb0:	f7ff ff40 	bl	8004d34 <__NVIC_GetPriorityGrouping>
 8004eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	6978      	ldr	r0, [r7, #20]
 8004ebc:	f7ff ff90 	bl	8004de0 <NVIC_EncodePriority>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff5f 	bl	8004d8c <__NVIC_SetPriority>
}
 8004ece:	bf00      	nop
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	4603      	mov	r3, r0
 8004ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff ff33 	bl	8004d50 <__NVIC_EnableIRQ>
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ffa4 	bl	8004e48 <SysTick_Config>
 8004f00:	4603      	mov	r3, r0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f1a:	e15a      	b.n	80051d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	2101      	movs	r1, #1
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 814c 	beq.w	80051cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d00b      	beq.n	8004f54 <HAL_GPIO_Init+0x48>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d007      	beq.n	8004f54 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f48:	2b11      	cmp	r3, #17
 8004f4a:	d003      	beq.n	8004f54 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b12      	cmp	r3, #18
 8004f52:	d130      	bne.n	8004fb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	2203      	movs	r2, #3
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	43db      	mvns	r3, r3
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4013      	ands	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	f003 0201 	and.w	r2, r3, #1
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0xea>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b12      	cmp	r3, #18
 8004ff4:	d123      	bne.n	800503e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	08da      	lsrs	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3208      	adds	r2, #8
 8004ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	220f      	movs	r2, #15
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4013      	ands	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	08da      	lsrs	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3208      	adds	r2, #8
 8005038:	6939      	ldr	r1, [r7, #16]
 800503a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	2203      	movs	r2, #3
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 0203 	and.w	r2, r3, #3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80a6 	beq.w	80051cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005080:	4b5b      	ldr	r3, [pc, #364]	; (80051f0 <HAL_GPIO_Init+0x2e4>)
 8005082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005084:	4a5a      	ldr	r2, [pc, #360]	; (80051f0 <HAL_GPIO_Init+0x2e4>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	6613      	str	r3, [r2, #96]	; 0x60
 800508c:	4b58      	ldr	r3, [pc, #352]	; (80051f0 <HAL_GPIO_Init+0x2e4>)
 800508e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005098:	4a56      	ldr	r2, [pc, #344]	; (80051f4 <HAL_GPIO_Init+0x2e8>)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	089b      	lsrs	r3, r3, #2
 800509e:	3302      	adds	r3, #2
 80050a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	220f      	movs	r2, #15
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	43db      	mvns	r3, r3
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4013      	ands	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050c2:	d01f      	beq.n	8005104 <HAL_GPIO_Init+0x1f8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a4c      	ldr	r2, [pc, #304]	; (80051f8 <HAL_GPIO_Init+0x2ec>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d019      	beq.n	8005100 <HAL_GPIO_Init+0x1f4>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a4b      	ldr	r2, [pc, #300]	; (80051fc <HAL_GPIO_Init+0x2f0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <HAL_GPIO_Init+0x1f0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a4a      	ldr	r2, [pc, #296]	; (8005200 <HAL_GPIO_Init+0x2f4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00d      	beq.n	80050f8 <HAL_GPIO_Init+0x1ec>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a49      	ldr	r2, [pc, #292]	; (8005204 <HAL_GPIO_Init+0x2f8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <HAL_GPIO_Init+0x1e8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a48      	ldr	r2, [pc, #288]	; (8005208 <HAL_GPIO_Init+0x2fc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d101      	bne.n	80050f0 <HAL_GPIO_Init+0x1e4>
 80050ec:	2305      	movs	r3, #5
 80050ee:	e00a      	b.n	8005106 <HAL_GPIO_Init+0x1fa>
 80050f0:	2306      	movs	r3, #6
 80050f2:	e008      	b.n	8005106 <HAL_GPIO_Init+0x1fa>
 80050f4:	2304      	movs	r3, #4
 80050f6:	e006      	b.n	8005106 <HAL_GPIO_Init+0x1fa>
 80050f8:	2303      	movs	r3, #3
 80050fa:	e004      	b.n	8005106 <HAL_GPIO_Init+0x1fa>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e002      	b.n	8005106 <HAL_GPIO_Init+0x1fa>
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <HAL_GPIO_Init+0x1fa>
 8005104:	2300      	movs	r3, #0
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	f002 0203 	and.w	r2, r2, #3
 800510c:	0092      	lsls	r2, r2, #2
 800510e:	4093      	lsls	r3, r2
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005116:	4937      	ldr	r1, [pc, #220]	; (80051f4 <HAL_GPIO_Init+0x2e8>)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	089b      	lsrs	r3, r3, #2
 800511c:	3302      	adds	r3, #2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005124:	4b39      	ldr	r3, [pc, #228]	; (800520c <HAL_GPIO_Init+0x300>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	43db      	mvns	r3, r3
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4013      	ands	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005148:	4a30      	ldr	r2, [pc, #192]	; (800520c <HAL_GPIO_Init+0x300>)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800514e:	4b2f      	ldr	r3, [pc, #188]	; (800520c <HAL_GPIO_Init+0x300>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	43db      	mvns	r3, r3
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005172:	4a26      	ldr	r2, [pc, #152]	; (800520c <HAL_GPIO_Init+0x300>)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005178:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_GPIO_Init+0x300>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	43db      	mvns	r3, r3
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4013      	ands	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <HAL_GPIO_Init+0x300>)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80051a2:	4b1a      	ldr	r3, [pc, #104]	; (800520c <HAL_GPIO_Init+0x300>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4013      	ands	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80051c6:	4a11      	ldr	r2, [pc, #68]	; (800520c <HAL_GPIO_Init+0x300>)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	3301      	adds	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f47f ae9d 	bne.w	8004f1c <HAL_GPIO_Init+0x10>
  }
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	371c      	adds	r7, #28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40010000 	.word	0x40010000
 80051f8:	48000400 	.word	0x48000400
 80051fc:	48000800 	.word	0x48000800
 8005200:	48000c00 	.word	0x48000c00
 8005204:	48001000 	.word	0x48001000
 8005208:	48001400 	.word	0x48001400
 800520c:	40010400 	.word	0x40010400

08005210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	807b      	strh	r3, [r7, #2]
 800521c:	4613      	mov	r3, r2
 800521e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005220:	787b      	ldrb	r3, [r7, #1]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005226:	887a      	ldrh	r2, [r7, #2]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800522c:	e002      	b.n	8005234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800522e:	887a      	ldrh	r2, [r7, #2]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	4013      	ands	r3, r2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d006      	beq.n	8005264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005256:	4a05      	ldr	r2, [pc, #20]	; (800526c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fc f93a 	bl	80014d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40010400 	.word	0x40010400

08005270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e081      	b.n	8005386 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc f96c 	bl	8001574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	e006      	b.n	80052f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80052f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d104      	bne.n	800530a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800532c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	ea42 0103 	orr.w	r1, r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	021a      	lsls	r2, r3, #8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69d9      	ldr	r1, [r3, #28]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	461a      	mov	r2, r3
 800539c:	460b      	mov	r3, r1
 800539e:	817b      	strh	r3, [r7, #10]
 80053a0:	4613      	mov	r3, r2
 80053a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	f040 80da 	bne.w	8005566 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_I2C_Master_Transmit+0x30>
 80053bc:	2302      	movs	r3, #2
 80053be:	e0d3      	b.n	8005568 <HAL_I2C_Master_Transmit+0x1d8>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053c8:	f7fd fc6e 	bl	8002ca8 <HAL_GetTick>
 80053cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	2319      	movs	r3, #25
 80053d4:	2201      	movs	r2, #1
 80053d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f9f7 	bl	80057ce <I2C_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0be      	b.n	8005568 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2221      	movs	r2, #33	; 0x21
 80053ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2210      	movs	r2, #16
 80053f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	893a      	ldrh	r2, [r7, #8]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005416:	b29b      	uxth	r3, r3
 8005418:	2bff      	cmp	r3, #255	; 0xff
 800541a:	d90e      	bls.n	800543a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	22ff      	movs	r2, #255	; 0xff
 8005420:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	b2da      	uxtb	r2, r3
 8005428:	8979      	ldrh	r1, [r7, #10]
 800542a:	4b51      	ldr	r3, [pc, #324]	; (8005570 <HAL_I2C_Master_Transmit+0x1e0>)
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 faee 	bl	8005a14 <I2C_TransferConfig>
 8005438:	e06c      	b.n	8005514 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	b2da      	uxtb	r2, r3
 800544a:	8979      	ldrh	r1, [r7, #10]
 800544c:	4b48      	ldr	r3, [pc, #288]	; (8005570 <HAL_I2C_Master_Transmit+0x1e0>)
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 fadd 	bl	8005a14 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800545a:	e05b      	b.n	8005514 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	6a39      	ldr	r1, [r7, #32]
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f9f4 	bl	800584e <I2C_WaitOnTXISFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e07b      	b.n	8005568 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d034      	beq.n	8005514 <HAL_I2C_Master_Transmit+0x184>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d130      	bne.n	8005514 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f986 	bl	80057ce <I2C_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e04d      	b.n	8005568 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2bff      	cmp	r3, #255	; 0xff
 80054d4:	d90e      	bls.n	80054f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	22ff      	movs	r2, #255	; 0xff
 80054da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	8979      	ldrh	r1, [r7, #10]
 80054e4:	2300      	movs	r3, #0
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fa91 	bl	8005a14 <I2C_TransferConfig>
 80054f2:	e00f      	b.n	8005514 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	b2da      	uxtb	r2, r3
 8005504:	8979      	ldrh	r1, [r7, #10]
 8005506:	2300      	movs	r3, #0
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 fa80 	bl	8005a14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d19e      	bne.n	800545c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	6a39      	ldr	r1, [r7, #32]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f9d3 	bl	80058ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e01a      	b.n	8005568 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2220      	movs	r2, #32
 8005538:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6859      	ldr	r1, [r3, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <HAL_I2C_Master_Transmit+0x1e4>)
 8005546:	400b      	ands	r3, r1
 8005548:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	e000      	b.n	8005568 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005566:	2302      	movs	r3, #2
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	80002000 	.word	0x80002000
 8005574:	fe00e800 	.word	0xfe00e800

08005578 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	; 0x28
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	460b      	mov	r3, r1
 8005586:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b20      	cmp	r3, #32
 8005596:	f040 80f1 	bne.w	800577c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a8:	d101      	bne.n	80055ae <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
 80055ac:	e0e7      	b.n	800577e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_I2C_IsDeviceReady+0x44>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e0e0      	b.n	800577e <HAL_I2C_IsDeviceReady+0x206>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2224      	movs	r2, #36	; 0x24
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d107      	bne.n	80055ea <HAL_I2C_IsDeviceReady+0x72>
 80055da:	897b      	ldrh	r3, [r7, #10]
 80055dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055e8:	e004      	b.n	80055f4 <HAL_I2C_IsDeviceReady+0x7c>
 80055ea:	897b      	ldrh	r3, [r7, #10]
 80055ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80055fa:	f7fd fb55 	bl	8002ca8 <HAL_GetTick>
 80055fe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b20      	cmp	r3, #32
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b10      	cmp	r3, #16
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800562c:	e034      	b.n	8005698 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005634:	d01a      	beq.n	800566c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fd fb37 	bl	8002ca8 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <HAL_I2C_IsDeviceReady+0xd4>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10f      	bne.n	800566c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005658:	f043 0220 	orr.w	r2, r3, #32
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e088      	b.n	800577e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b20      	cmp	r3, #32
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	2b10      	cmp	r3, #16
 800568e:	bf0c      	ite	eq
 8005690:	2301      	moveq	r3, #1
 8005692:	2300      	movne	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005698:	7ffb      	ldrb	r3, [r7, #31]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <HAL_I2C_IsDeviceReady+0x12c>
 800569e:	7fbb      	ldrb	r3, [r7, #30]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0c4      	beq.n	800562e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b10      	cmp	r3, #16
 80056b0:	d01a      	beq.n	80056e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2120      	movs	r1, #32
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f886 	bl	80057ce <I2C_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e058      	b.n	800577e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2220      	movs	r2, #32
 80056d2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e04a      	b.n	800577e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	2120      	movs	r1, #32
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f86b 	bl	80057ce <I2C_WaitOnFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e03d      	b.n	800577e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2210      	movs	r2, #16
 8005708:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2220      	movs	r2, #32
 8005710:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d118      	bne.n	800574c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005728:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2200      	movs	r2, #0
 8005732:	2120      	movs	r1, #32
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f84a 	bl	80057ce <I2C_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e01c      	b.n	800577e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2220      	movs	r2, #32
 800574a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3301      	adds	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	f63f af3b 	bhi.w	80055d2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800577c:	2302      	movs	r3, #2
  }
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b02      	cmp	r3, #2
 800579a:	d103      	bne.n	80057a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2200      	movs	r2, #0
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d007      	beq.n	80057c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0201 	orr.w	r2, r2, #1
 80057c0:	619a      	str	r2, [r3, #24]
  }
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	603b      	str	r3, [r7, #0]
 80057da:	4613      	mov	r3, r2
 80057dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057de:	e022      	b.n	8005826 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e6:	d01e      	beq.n	8005826 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e8:	f7fd fa5e 	bl	8002ca8 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d302      	bcc.n	80057fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d113      	bne.n	8005826 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	f043 0220 	orr.w	r2, r3, #32
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e00f      	b.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4013      	ands	r3, r2
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	bf0c      	ite	eq
 8005836:	2301      	moveq	r3, #1
 8005838:	2300      	movne	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	429a      	cmp	r2, r3
 8005842:	d0cd      	beq.n	80057e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800585a:	e02c      	b.n	80058b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f871 	bl	8005948 <I2C_IsAcknowledgeFailed>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e02a      	b.n	80058c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005876:	d01e      	beq.n	80058b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005878:	f7fd fa16 	bl	8002ca8 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	429a      	cmp	r2, r3
 8005886:	d302      	bcc.n	800588e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d113      	bne.n	80058b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	f043 0220 	orr.w	r2, r3, #32
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e007      	b.n	80058c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d1cb      	bne.n	800585c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058da:	e028      	b.n	800592e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f831 	bl	8005948 <I2C_IsAcknowledgeFailed>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e026      	b.n	800593e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f0:	f7fd f9da 	bl	8002ca8 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d302      	bcc.n	8005906 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d113      	bne.n	800592e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	f043 0220 	orr.w	r2, r3, #32
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e007      	b.n	800593e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b20      	cmp	r3, #32
 800593a:	d1cf      	bne.n	80058dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b10      	cmp	r3, #16
 8005960:	d151      	bne.n	8005a06 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005962:	e022      	b.n	80059aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800596a:	d01e      	beq.n	80059aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596c:	f7fd f99c 	bl	8002ca8 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <I2C_IsAcknowledgeFailed+0x3a>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d113      	bne.n	80059aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e02e      	b.n	8005a08 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d1d5      	bne.n	8005964 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2210      	movs	r2, #16
 80059be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2220      	movs	r2, #32
 80059c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff fedc 	bl	8005786 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6859      	ldr	r1, [r3, #4]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <I2C_IsAcknowledgeFailed+0xc8>)
 80059da:	400b      	ands	r3, r1
 80059dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	fe00e800 	.word	0xfe00e800

08005a14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	817b      	strh	r3, [r7, #10]
 8005a22:	4613      	mov	r3, r2
 8005a24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	0d5b      	lsrs	r3, r3, #21
 8005a30:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005a34:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <I2C_TransferConfig+0x58>)
 8005a36:	430b      	orrs	r3, r1
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	ea02 0103 	and.w	r1, r2, r3
 8005a3e:	897b      	ldrh	r3, [r7, #10]
 8005a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a44:	7a7b      	ldrb	r3, [r7, #9]
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	431a      	orrs	r2, r3
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	03ff63ff 	.word	0x03ff63ff

08005a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d138      	bne.n	8005af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e032      	b.n	8005afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2224      	movs	r2, #36	; 0x24
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d139      	bne.n	8005b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e033      	b.n	8005b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2224      	movs	r2, #36	; 0x24
 8005b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0201 	bic.w	r2, r2, #1
 8005b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e000      	b.n	8005b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b90:	2302      	movs	r3, #2
  }
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d141      	bne.n	8005c32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bae:	4b4b      	ldr	r3, [pc, #300]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d131      	bne.n	8005c20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bbc:	4b47      	ldr	r3, [pc, #284]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc2:	4a46      	ldr	r2, [pc, #280]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bcc:	4b43      	ldr	r3, [pc, #268]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bd4:	4a41      	ldr	r2, [pc, #260]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bdc:	4b40      	ldr	r3, [pc, #256]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2232      	movs	r2, #50	; 0x32
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	4a3f      	ldr	r2, [pc, #252]	; (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	0c9b      	lsrs	r3, r3, #18
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bf2:	e002      	b.n	8005bfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bfa:	4b38      	ldr	r3, [pc, #224]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c06:	d102      	bne.n	8005c0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f2      	bne.n	8005bf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c0e:	4b33      	ldr	r3, [pc, #204]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1a:	d158      	bne.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e057      	b.n	8005cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c20:	4b2e      	ldr	r3, [pc, #184]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c26:	4a2d      	ldr	r2, [pc, #180]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c30:	e04d      	b.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c38:	d141      	bne.n	8005cbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c3a:	4b28      	ldr	r3, [pc, #160]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c46:	d131      	bne.n	8005cac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c48:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c4e:	4a23      	ldr	r2, [pc, #140]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c58:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c60:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c68:	4b1d      	ldr	r3, [pc, #116]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2232      	movs	r2, #50	; 0x32
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	4a1c      	ldr	r2, [pc, #112]	; (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	0c9b      	lsrs	r3, r3, #18
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c7e:	e002      	b.n	8005c86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c86:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c92:	d102      	bne.n	8005c9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f2      	bne.n	8005c80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c9a:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca6:	d112      	bne.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e011      	b.n	8005cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb2:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005cbc:	e007      	b.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005cbe:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cc6:	4a05      	ldr	r2, [pc, #20]	; (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ccc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40007000 	.word	0x40007000
 8005ce0:	20000000 	.word	0x20000000
 8005ce4:	431bde83 	.word	0x431bde83

08005ce8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cf6:	6093      	str	r3, [r2, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40007000 	.word	0x40007000

08005d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e308      	b.n	800632c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d075      	beq.n	8005e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d26:	4ba3      	ldr	r3, [pc, #652]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d30:	4ba0      	ldr	r3, [pc, #640]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b0c      	cmp	r3, #12
 8005d3e:	d102      	bne.n	8005d46 <HAL_RCC_OscConfig+0x3e>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d002      	beq.n	8005d4c <HAL_RCC_OscConfig+0x44>
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4b99      	ldr	r3, [pc, #612]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05b      	beq.n	8005e10 <HAL_RCC_OscConfig+0x108>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d157      	bne.n	8005e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e2e3      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x74>
 8005d6e:	4b91      	ldr	r3, [pc, #580]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a90      	ldr	r2, [pc, #576]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e01d      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x98>
 8005d86:	4b8b      	ldr	r3, [pc, #556]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a8a      	ldr	r2, [pc, #552]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b88      	ldr	r3, [pc, #544]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a87      	ldr	r2, [pc, #540]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00b      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005da0:	4b84      	ldr	r3, [pc, #528]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a83      	ldr	r2, [pc, #524]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b81      	ldr	r3, [pc, #516]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a80      	ldr	r2, [pc, #512]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fc ff72 	bl	8002ca8 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fc ff6e 	bl	8002ca8 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e2a8      	b.n	800632c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dda:	4b76      	ldr	r3, [pc, #472]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0xc0>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fc ff5e 	bl	8002ca8 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fc ff5a 	bl	8002ca8 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e294      	b.n	800632c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e02:	4b6c      	ldr	r3, [pc, #432]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0xe8>
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d075      	beq.n	8005f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e1e:	4b65      	ldr	r3, [pc, #404]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e28:	4b62      	ldr	r3, [pc, #392]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	d102      	bne.n	8005e3e <HAL_RCC_OscConfig+0x136>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d002      	beq.n	8005e44 <HAL_RCC_OscConfig+0x13c>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d11f      	bne.n	8005e84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e44:	4b5b      	ldr	r3, [pc, #364]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_RCC_OscConfig+0x154>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e267      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5c:	4b55      	ldr	r3, [pc, #340]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	061b      	lsls	r3, r3, #24
 8005e6a:	4952      	ldr	r1, [pc, #328]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e70:	4b51      	ldr	r3, [pc, #324]	; (8005fb8 <HAL_RCC_OscConfig+0x2b0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fc fecb 	bl	8002c10 <HAL_InitTick>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d043      	beq.n	8005f08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e253      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d023      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e8c:	4b49      	ldr	r3, [pc, #292]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a48      	ldr	r2, [pc, #288]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fc ff06 	bl	8002ca8 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fc ff02 	bl	8002ca8 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e23c      	b.n	800632c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eb2:	4b40      	ldr	r3, [pc, #256]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebe:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	061b      	lsls	r3, r3, #24
 8005ecc:	4939      	ldr	r1, [pc, #228]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	604b      	str	r3, [r1, #4]
 8005ed2:	e01a      	b.n	8005f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ed4:	4b37      	ldr	r3, [pc, #220]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a36      	ldr	r2, [pc, #216]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fc fee2 	bl	8002ca8 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee8:	f7fc fede 	bl	8002ca8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e218      	b.n	800632c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005efa:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x1e0>
 8005f06:	e000      	b.n	8005f0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d03c      	beq.n	8005f90 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01c      	beq.n	8005f58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f1e:	4b25      	ldr	r3, [pc, #148]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f24:	4a23      	ldr	r2, [pc, #140]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f2e:	f7fc febb 	bl	8002ca8 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f36:	f7fc feb7 	bl	8002ca8 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e1f1      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f48:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0ef      	beq.n	8005f36 <HAL_RCC_OscConfig+0x22e>
 8005f56:	e01b      	b.n	8005f90 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f68:	f7fc fe9e 	bl	8002ca8 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f70:	f7fc fe9a 	bl	8002ca8 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e1d4      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1ef      	bne.n	8005f70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80ab 	beq.w	80060f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005fa2:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_RCC_OscConfig+0x2b4>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e005      	b.n	8005fbe <HAL_RCC_OscConfig+0x2b6>
 8005fb2:	bf00      	nop
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	20000004 	.word	0x20000004
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc2:	4baf      	ldr	r3, [pc, #700]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc6:	4aae      	ldr	r2, [pc, #696]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8005fce:	4bac      	ldr	r3, [pc, #688]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fde:	4ba9      	ldr	r3, [pc, #676]	; (8006284 <HAL_RCC_OscConfig+0x57c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d118      	bne.n	800601c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fea:	4ba6      	ldr	r3, [pc, #664]	; (8006284 <HAL_RCC_OscConfig+0x57c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4aa5      	ldr	r2, [pc, #660]	; (8006284 <HAL_RCC_OscConfig+0x57c>)
 8005ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff6:	f7fc fe57 	bl	8002ca8 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffe:	f7fc fe53 	bl	8002ca8 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e18d      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006010:	4b9c      	ldr	r3, [pc, #624]	; (8006284 <HAL_RCC_OscConfig+0x57c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d108      	bne.n	8006036 <HAL_RCC_OscConfig+0x32e>
 8006024:	4b96      	ldr	r3, [pc, #600]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602a:	4a95      	ldr	r2, [pc, #596]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006034:	e024      	b.n	8006080 <HAL_RCC_OscConfig+0x378>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b05      	cmp	r3, #5
 800603c:	d110      	bne.n	8006060 <HAL_RCC_OscConfig+0x358>
 800603e:	4b90      	ldr	r3, [pc, #576]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	4a8e      	ldr	r2, [pc, #568]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006046:	f043 0304 	orr.w	r3, r3, #4
 800604a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800604e:	4b8c      	ldr	r3, [pc, #560]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006054:	4a8a      	ldr	r2, [pc, #552]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800605e:	e00f      	b.n	8006080 <HAL_RCC_OscConfig+0x378>
 8006060:	4b87      	ldr	r3, [pc, #540]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	4a86      	ldr	r2, [pc, #536]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006070:	4b83      	ldr	r3, [pc, #524]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	4a82      	ldr	r2, [pc, #520]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006078:	f023 0304 	bic.w	r3, r3, #4
 800607c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d016      	beq.n	80060b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fc fe0e 	bl	8002ca8 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006090:	f7fc fe0a 	bl	8002ca8 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	; 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e142      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060a6:	4b76      	ldr	r3, [pc, #472]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0ed      	beq.n	8006090 <HAL_RCC_OscConfig+0x388>
 80060b4:	e015      	b.n	80060e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b6:	f7fc fdf7 	bl	8002ca8 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060bc:	e00a      	b.n	80060d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fc fdf3 	bl	8002ca8 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e12b      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060d4:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1ed      	bne.n	80060be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d105      	bne.n	80060f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e8:	4b65      	ldr	r3, [pc, #404]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 80060ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ec:	4a64      	ldr	r2, [pc, #400]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 80060ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d03c      	beq.n	800617a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01c      	beq.n	8006142 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006108:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800610a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800610e:	4a5c      	ldr	r2, [pc, #368]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006118:	f7fc fdc6 	bl	8002ca8 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006120:	f7fc fdc2 	bl	8002ca8 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e0fc      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006132:	4b53      	ldr	r3, [pc, #332]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ef      	beq.n	8006120 <HAL_RCC_OscConfig+0x418>
 8006140:	e01b      	b.n	800617a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006142:	4b4f      	ldr	r3, [pc, #316]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006148:	4a4d      	ldr	r2, [pc, #308]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006152:	f7fc fda9 	bl	8002ca8 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800615a:	f7fc fda5 	bl	8002ca8 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e0df      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800616c:	4b44      	ldr	r3, [pc, #272]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800616e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1ef      	bne.n	800615a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 80d3 	beq.w	800632a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006184:	4b3e      	ldr	r3, [pc, #248]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b0c      	cmp	r3, #12
 800618e:	f000 808d 	beq.w	80062ac <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d15a      	bne.n	8006250 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619a:	4b39      	ldr	r3, [pc, #228]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a38      	ldr	r2, [pc, #224]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 80061a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a6:	f7fc fd7f 	bl	8002ca8 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fc fd7b 	bl	8002ca8 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e0b5      	b.n	800632c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c0:	4b2f      	ldr	r3, [pc, #188]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f0      	bne.n	80061ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061cc:	4b2c      	ldr	r3, [pc, #176]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	4b2d      	ldr	r3, [pc, #180]	; (8006288 <HAL_RCC_OscConfig+0x580>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6a11      	ldr	r1, [r2, #32]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061dc:	3a01      	subs	r2, #1
 80061de:	0112      	lsls	r2, r2, #4
 80061e0:	4311      	orrs	r1, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80061e6:	0212      	lsls	r2, r2, #8
 80061e8:	4311      	orrs	r1, r2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061ee:	0852      	lsrs	r2, r2, #1
 80061f0:	3a01      	subs	r2, #1
 80061f2:	0552      	lsls	r2, r2, #21
 80061f4:	4311      	orrs	r1, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061fa:	0852      	lsrs	r2, r2, #1
 80061fc:	3a01      	subs	r2, #1
 80061fe:	0652      	lsls	r2, r2, #25
 8006200:	4311      	orrs	r1, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006206:	06d2      	lsls	r2, r2, #27
 8006208:	430a      	orrs	r2, r1
 800620a:	491d      	ldr	r1, [pc, #116]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800620c:	4313      	orrs	r3, r2
 800620e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006210:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1a      	ldr	r2, [pc, #104]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800621a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800621c:	4b18      	ldr	r3, [pc, #96]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4a17      	ldr	r2, [pc, #92]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fc fd3e 	bl	8002ca8 <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006230:	f7fc fd3a 	bl	8002ca8 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e074      	b.n	800632c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f0      	beq.n	8006230 <HAL_RCC_OscConfig+0x528>
 800624e:	e06c      	b.n	800632a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800625a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800625c:	4b08      	ldr	r3, [pc, #32]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4a07      	ldr	r2, [pc, #28]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a04      	ldr	r2, [pc, #16]	; (8006280 <HAL_RCC_OscConfig+0x578>)
 800626e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006276:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fc fd16 	bl	8002ca8 <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800627e:	e00e      	b.n	800629e <HAL_RCC_OscConfig+0x596>
 8006280:	40021000 	.word	0x40021000
 8006284:	40007000 	.word	0x40007000
 8006288:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800628c:	f7fc fd0c 	bl	8002ca8 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e046      	b.n	800632c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800629e:	4b25      	ldr	r3, [pc, #148]	; (8006334 <HAL_RCC_OscConfig+0x62c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1f0      	bne.n	800628c <HAL_RCC_OscConfig+0x584>
 80062aa:	e03e      	b.n	800632a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e039      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80062b8:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <HAL_RCC_OscConfig+0x62c>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f003 0203 	and.w	r2, r3, #3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d12c      	bne.n	8006326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	3b01      	subs	r3, #1
 80062d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062da:	429a      	cmp	r2, r3
 80062dc:	d123      	bne.n	8006326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d11b      	bne.n	8006326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d113      	bne.n	8006326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	3b01      	subs	r3, #1
 800630c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800630e:	429a      	cmp	r2, r3
 8006310:	d109      	bne.n	8006326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	3b01      	subs	r3, #1
 8006320:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006322:	429a      	cmp	r2, r3
 8006324:	d001      	beq.n	800632a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3720      	adds	r7, #32
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40021000 	.word	0x40021000

08006338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e11e      	b.n	800658e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006350:	4b91      	ldr	r3, [pc, #580]	; (8006598 <HAL_RCC_ClockConfig+0x260>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d910      	bls.n	8006380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635e:	4b8e      	ldr	r3, [pc, #568]	; (8006598 <HAL_RCC_ClockConfig+0x260>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 020f 	bic.w	r2, r3, #15
 8006366:	498c      	ldr	r1, [pc, #560]	; (8006598 <HAL_RCC_ClockConfig+0x260>)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	4313      	orrs	r3, r2
 800636c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800636e:	4b8a      	ldr	r3, [pc, #552]	; (8006598 <HAL_RCC_ClockConfig+0x260>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d001      	beq.n	8006380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e106      	b.n	800658e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d073      	beq.n	8006474 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d129      	bne.n	80063e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006394:	4b81      	ldr	r3, [pc, #516]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0f4      	b.n	800658e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80063a4:	f000 f966 	bl	8006674 <RCC_GetSysClockFreqFromPLLSource>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4a7c      	ldr	r2, [pc, #496]	; (80065a0 <HAL_RCC_ClockConfig+0x268>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d93f      	bls.n	8006432 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063b2:	4b7a      	ldr	r3, [pc, #488]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d033      	beq.n	8006432 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d12f      	bne.n	8006432 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063d2:	4b72      	ldr	r3, [pc, #456]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063da:	4a70      	ldr	r2, [pc, #448]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80063dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e024      	b.n	8006432 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d107      	bne.n	8006400 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063f0:	4b6a      	ldr	r3, [pc, #424]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0c6      	b.n	800658e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006400:	4b66      	ldr	r3, [pc, #408]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e0be      	b.n	800658e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006410:	f000 f8ce 	bl	80065b0 <HAL_RCC_GetSysClockFreq>
 8006414:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4a61      	ldr	r2, [pc, #388]	; (80065a0 <HAL_RCC_ClockConfig+0x268>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d909      	bls.n	8006432 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800641e:	4b5f      	ldr	r3, [pc, #380]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006426:	4a5d      	ldr	r2, [pc, #372]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006432:	4b5a      	ldr	r3, [pc, #360]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f023 0203 	bic.w	r2, r3, #3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4957      	ldr	r1, [pc, #348]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006440:	4313      	orrs	r3, r2
 8006442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006444:	f7fc fc30 	bl	8002ca8 <HAL_GetTick>
 8006448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800644a:	e00a      	b.n	8006462 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800644c:	f7fc fc2c 	bl	8002ca8 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f241 3288 	movw	r2, #5000	; 0x1388
 800645a:	4293      	cmp	r3, r2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e095      	b.n	800658e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006462:	4b4e      	ldr	r3, [pc, #312]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 020c 	and.w	r2, r3, #12
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	429a      	cmp	r2, r3
 8006472:	d1eb      	bne.n	800644c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d023      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800648c:	4b43      	ldr	r3, [pc, #268]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	4a42      	ldr	r2, [pc, #264]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006496:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80064a4:	4b3d      	ldr	r3, [pc, #244]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80064ac:	4a3b      	ldr	r2, [pc, #236]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80064ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b4:	4b39      	ldr	r3, [pc, #228]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4936      	ldr	r1, [pc, #216]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	608b      	str	r3, [r1, #8]
 80064c6:	e008      	b.n	80064da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b80      	cmp	r3, #128	; 0x80
 80064cc:	d105      	bne.n	80064da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80064ce:	4b33      	ldr	r3, [pc, #204]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	4a32      	ldr	r2, [pc, #200]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 80064d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064da:	4b2f      	ldr	r3, [pc, #188]	; (8006598 <HAL_RCC_ClockConfig+0x260>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d21d      	bcs.n	8006524 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e8:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_ClockConfig+0x260>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f023 020f 	bic.w	r2, r3, #15
 80064f0:	4929      	ldr	r1, [pc, #164]	; (8006598 <HAL_RCC_ClockConfig+0x260>)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064f8:	f7fc fbd6 	bl	8002ca8 <HAL_GetTick>
 80064fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fe:	e00a      	b.n	8006516 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006500:	f7fc fbd2 	bl	8002ca8 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	f241 3288 	movw	r2, #5000	; 0x1388
 800650e:	4293      	cmp	r3, r2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e03b      	b.n	800658e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <HAL_RCC_ClockConfig+0x260>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d1ed      	bne.n	8006500 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006530:	4b1a      	ldr	r3, [pc, #104]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4917      	ldr	r1, [pc, #92]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 800653e:	4313      	orrs	r3, r2
 8006540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800654e:	4b13      	ldr	r3, [pc, #76]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	490f      	ldr	r1, [pc, #60]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006562:	f000 f825 	bl	80065b0 <HAL_RCC_GetSysClockFreq>
 8006566:	4602      	mov	r2, r0
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <HAL_RCC_ClockConfig+0x264>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	490c      	ldr	r1, [pc, #48]	; (80065a4 <HAL_RCC_ClockConfig+0x26c>)
 8006574:	5ccb      	ldrb	r3, [r1, r3]
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	fa22 f303 	lsr.w	r3, r2, r3
 800657e:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <HAL_RCC_ClockConfig+0x270>)
 8006580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <HAL_RCC_ClockConfig+0x274>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7fc fb42 	bl	8002c10 <HAL_InitTick>
 800658c:	4603      	mov	r3, r0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40022000 	.word	0x40022000
 800659c:	40021000 	.word	0x40021000
 80065a0:	04c4b400 	.word	0x04c4b400
 80065a4:	0800aa1c 	.word	0x0800aa1c
 80065a8:	20000000 	.word	0x20000000
 80065ac:	20000004 	.word	0x20000004

080065b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80065b6:	4b2c      	ldr	r3, [pc, #176]	; (8006668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 030c 	and.w	r3, r3, #12
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d102      	bne.n	80065c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065c2:	4b2a      	ldr	r3, [pc, #168]	; (800666c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	e047      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80065c8:	4b27      	ldr	r3, [pc, #156]	; (8006668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 030c 	and.w	r3, r3, #12
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d102      	bne.n	80065da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065d4:	4b26      	ldr	r3, [pc, #152]	; (8006670 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	e03e      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80065da:	4b23      	ldr	r3, [pc, #140]	; (8006668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 030c 	and.w	r3, r3, #12
 80065e2:	2b0c      	cmp	r3, #12
 80065e4:	d136      	bne.n	8006654 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065e6:	4b20      	ldr	r3, [pc, #128]	; (8006668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065f0:	4b1d      	ldr	r3, [pc, #116]	; (8006668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	3301      	adds	r3, #1
 80065fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b03      	cmp	r3, #3
 8006602:	d10c      	bne.n	800661e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006604:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	4a16      	ldr	r2, [pc, #88]	; (8006668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800660e:	68d2      	ldr	r2, [r2, #12]
 8006610:	0a12      	lsrs	r2, r2, #8
 8006612:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006616:	fb02 f303 	mul.w	r3, r2, r3
 800661a:	617b      	str	r3, [r7, #20]
      break;
 800661c:	e00c      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800661e:	4a13      	ldr	r2, [pc, #76]	; (800666c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	fbb2 f3f3 	udiv	r3, r2, r3
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006628:	68d2      	ldr	r2, [r2, #12]
 800662a:	0a12      	lsrs	r2, r2, #8
 800662c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006630:	fb02 f303 	mul.w	r3, r2, r3
 8006634:	617b      	str	r3, [r7, #20]
      break;
 8006636:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006638:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	0e5b      	lsrs	r3, r3, #25
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	3301      	adds	r3, #1
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	e001      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006658:	693b      	ldr	r3, [r7, #16]
}
 800665a:	4618      	mov	r0, r3
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40021000 	.word	0x40021000
 800666c:	00f42400 	.word	0x00f42400
 8006670:	016e3600 	.word	0x016e3600

08006674 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800667a:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006684:	4b1b      	ldr	r3, [pc, #108]	; (80066f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	091b      	lsrs	r3, r3, #4
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b03      	cmp	r3, #3
 8006696:	d10c      	bne.n	80066b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006698:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a0:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066a2:	68d2      	ldr	r2, [r2, #12]
 80066a4:	0a12      	lsrs	r2, r2, #8
 80066a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066aa:	fb02 f303 	mul.w	r3, r2, r3
 80066ae:	617b      	str	r3, [r7, #20]
    break;
 80066b0:	e00c      	b.n	80066cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066b2:	4a12      	ldr	r2, [pc, #72]	; (80066fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	4a0e      	ldr	r2, [pc, #56]	; (80066f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066bc:	68d2      	ldr	r2, [r2, #12]
 80066be:	0a12      	lsrs	r2, r2, #8
 80066c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066c4:	fb02 f303 	mul.w	r3, r2, r3
 80066c8:	617b      	str	r3, [r7, #20]
    break;
 80066ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	0e5b      	lsrs	r3, r3, #25
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	3301      	adds	r3, #1
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80066e6:	687b      	ldr	r3, [r7, #4]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	40021000 	.word	0x40021000
 80066f8:	016e3600 	.word	0x016e3600
 80066fc:	00f42400 	.word	0x00f42400

08006700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006708:	2300      	movs	r3, #0
 800670a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800670c:	2300      	movs	r3, #0
 800670e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8098 	beq.w	800684e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800671e:	2300      	movs	r3, #0
 8006720:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006722:	4b43      	ldr	r3, [pc, #268]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10d      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800672e:	4b40      	ldr	r3, [pc, #256]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006732:	4a3f      	ldr	r2, [pc, #252]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006738:	6593      	str	r3, [r2, #88]	; 0x58
 800673a:	4b3d      	ldr	r3, [pc, #244]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006742:	60bb      	str	r3, [r7, #8]
 8006744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006746:	2301      	movs	r3, #1
 8006748:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800674a:	4b3a      	ldr	r3, [pc, #232]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a39      	ldr	r2, [pc, #228]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006754:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006756:	f7fc faa7 	bl	8002ca8 <HAL_GetTick>
 800675a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800675c:	e009      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675e:	f7fc faa3 	bl	8002ca8 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d902      	bls.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	74fb      	strb	r3, [r7, #19]
        break;
 8006770:	e005      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006772:	4b30      	ldr	r3, [pc, #192]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0ef      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800677e:	7cfb      	ldrb	r3, [r7, #19]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d159      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006784:	4b2a      	ldr	r3, [pc, #168]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01e      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	429a      	cmp	r2, r3
 800679e:	d019      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067a0:	4b23      	ldr	r3, [pc, #140]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067ac:	4b20      	ldr	r3, [pc, #128]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b2:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067bc:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c2:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80067cc:	4a18      	ldr	r2, [pc, #96]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067de:	f7fc fa63 	bl	8002ca8 <HAL_GetTick>
 80067e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067e4:	e00b      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e6:	f7fc fa5f 	bl	8002ca8 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d902      	bls.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	74fb      	strb	r3, [r7, #19]
            break;
 80067fc:	e006      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067fe:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0ec      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800680c:	7cfb      	ldrb	r3, [r7, #19]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006812:	4b07      	ldr	r3, [pc, #28]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006820:	4903      	ldr	r1, [pc, #12]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006828:	e008      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800682a:	7cfb      	ldrb	r3, [r7, #19]
 800682c:	74bb      	strb	r3, [r7, #18]
 800682e:	e005      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006830:	40021000 	.word	0x40021000
 8006834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006838:	7cfb      	ldrb	r3, [r7, #19]
 800683a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800683c:	7c7b      	ldrb	r3, [r7, #17]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d105      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006842:	4baf      	ldr	r3, [pc, #700]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	4aae      	ldr	r2, [pc, #696]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800684c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800685a:	4ba9      	ldr	r3, [pc, #676]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006860:	f023 0203 	bic.w	r2, r3, #3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	49a5      	ldr	r1, [pc, #660]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800687c:	4ba0      	ldr	r3, [pc, #640]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f023 020c 	bic.w	r2, r3, #12
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	499d      	ldr	r1, [pc, #628]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800688c:	4313      	orrs	r3, r2
 800688e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800689e:	4b98      	ldr	r3, [pc, #608]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4994      	ldr	r1, [pc, #592]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068c0:	4b8f      	ldr	r3, [pc, #572]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	498c      	ldr	r1, [pc, #560]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0310 	and.w	r3, r3, #16
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068e2:	4b87      	ldr	r3, [pc, #540]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	4983      	ldr	r1, [pc, #524]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006904:	4b7e      	ldr	r3, [pc, #504]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	497b      	ldr	r1, [pc, #492]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006914:	4313      	orrs	r3, r2
 8006916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006926:	4b76      	ldr	r3, [pc, #472]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	4972      	ldr	r1, [pc, #456]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006948:	4b6d      	ldr	r3, [pc, #436]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800694a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	496a      	ldr	r1, [pc, #424]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006958:	4313      	orrs	r3, r2
 800695a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800696a:	4b65      	ldr	r3, [pc, #404]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	4961      	ldr	r1, [pc, #388]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800698c:	4b5c      	ldr	r3, [pc, #368]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800698e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006992:	f023 0203 	bic.w	r2, r3, #3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699a:	4959      	ldr	r1, [pc, #356]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069ae:	4b54      	ldr	r3, [pc, #336]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	4950      	ldr	r1, [pc, #320]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d015      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069d0:	4b4b      	ldr	r3, [pc, #300]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	4948      	ldr	r1, [pc, #288]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ee:	d105      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069f0:	4b43      	ldr	r3, [pc, #268]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4a42      	ldr	r2, [pc, #264]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d015      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a08:	4b3d      	ldr	r3, [pc, #244]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a16:	493a      	ldr	r1, [pc, #232]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a26:	d105      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a28:	4b35      	ldr	r3, [pc, #212]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4a34      	ldr	r2, [pc, #208]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d015      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a40:	4b2f      	ldr	r3, [pc, #188]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	492c      	ldr	r1, [pc, #176]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a5e:	d105      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4a26      	ldr	r2, [pc, #152]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d015      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a78:	4b21      	ldr	r3, [pc, #132]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	491e      	ldr	r1, [pc, #120]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a98:	4b19      	ldr	r3, [pc, #100]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aa2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d015      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ab0:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	4910      	ldr	r1, [pc, #64]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ace:	d105      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d018      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af6:	4902      	ldr	r1, [pc, #8]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006afe:	e001      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006b00:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b0c:	d105      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b0e:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	4a20      	ldr	r2, [pc, #128]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d015      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006b26:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b34:	4917      	ldr	r1, [pc, #92]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b44:	d105      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	4a12      	ldr	r2, [pc, #72]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b50:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d015      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6c:	4909      	ldr	r1, [pc, #36]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b7c:	d105      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b7e:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	4a04      	ldr	r2, [pc, #16]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b88:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40021000 	.word	0x40021000

08006b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e049      	b.n	8006c3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb ff80 	bl	8002ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f000 fb68 	bl	80072ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d001      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e054      	b.n	8006d0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d022      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0x80>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8a:	d01d      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0x80>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a22      	ldr	r2, [pc, #136]	; (8006d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d018      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0x80>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a21      	ldr	r2, [pc, #132]	; (8006d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0x80>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1f      	ldr	r2, [pc, #124]	; (8006d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0x80>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1e      	ldr	r2, [pc, #120]	; (8006d28 <HAL_TIM_Base_Start_IT+0xe0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d009      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0x80>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a1c      	ldr	r2, [pc, #112]	; (8006d2c <HAL_TIM_Base_Start_IT+0xe4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0x80>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <HAL_TIM_Base_Start_IT+0xe8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d115      	bne.n	8006cf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	4b19      	ldr	r3, [pc, #100]	; (8006d34 <HAL_TIM_Base_Start_IT+0xec>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b06      	cmp	r3, #6
 8006cd8:	d015      	beq.n	8006d06 <HAL_TIM_Base_Start_IT+0xbe>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce0:	d011      	beq.n	8006d06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0201 	orr.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf2:	e008      	b.n	8006d06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	e000      	b.n	8006d08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40012c00 	.word	0x40012c00
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800
 8006d24:	40000c00 	.word	0x40000c00
 8006d28:	40013400 	.word	0x40013400
 8006d2c:	40014000 	.word	0x40014000
 8006d30:	40015000 	.word	0x40015000
 8006d34:	00010007 	.word	0x00010007

08006d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d122      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d11b      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0202 	mvn.w	r2, #2
 8006d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa78 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 8006d80:	e005      	b.n	8006d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa6a 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fa7b 	bl	8007284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d122      	bne.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d11b      	bne.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0204 	mvn.w	r2, #4
 8006db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa4e 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 8006dd4:	e005      	b.n	8006de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa40 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fa51 	bl	8007284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d122      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d11b      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0208 	mvn.w	r2, #8
 8006e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa24 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa16 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fa27 	bl	8007284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d122      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d11b      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0210 	mvn.w	r2, #16
 8006e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2208      	movs	r2, #8
 8006e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f9fa 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 8006e7c:	e005      	b.n	8006e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f9ec 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f9fd 	bl	8007284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10e      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d107      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0201 	mvn.w	r2, #1
 8006eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fb fe44 	bl	8002b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec6:	2b80      	cmp	r3, #128	; 0x80
 8006ec8:	d10e      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed4:	2b80      	cmp	r3, #128	; 0x80
 8006ed6:	d107      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fbc6 	bl	8007674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef6:	d10e      	bne.n	8006f16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d107      	bne.n	8006f16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fbb9 	bl	8007688 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	d10e      	bne.n	8006f42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d107      	bne.n	8006f42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9ab 	bl	8007298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d10e      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d107      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f06f 0220 	mvn.w	r2, #32
 8006f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fb79 	bl	8007660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f7c:	d10f      	bne.n	8006f9e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f8c:	d107      	bne.n	8006f9e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb7f 	bl	800769c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fac:	d10f      	bne.n	8006fce <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fbc:	d107      	bne.n	8006fce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fb71 	bl	80076b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fdc:	d10f      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fec:	d107      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fb63 	bl	80076c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800700c:	d10f      	bne.n	800702e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800701c:	d107      	bne.n	800702e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fb55 	bl	80076d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_TIM_ConfigClockSource+0x18>
 800704c:	2302      	movs	r3, #2
 800704e:	e0f5      	b.n	800723c <HAL_TIM_ConfigClockSource+0x204>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800706e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800707a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a6e      	ldr	r2, [pc, #440]	; (8007244 <HAL_TIM_ConfigClockSource+0x20c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	f000 80c1 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 8007090:	4a6c      	ldr	r2, [pc, #432]	; (8007244 <HAL_TIM_ConfigClockSource+0x20c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	f200 80c6 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 8007098:	4a6b      	ldr	r2, [pc, #428]	; (8007248 <HAL_TIM_ConfigClockSource+0x210>)
 800709a:	4293      	cmp	r3, r2
 800709c:	f000 80b9 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 80070a0:	4a69      	ldr	r2, [pc, #420]	; (8007248 <HAL_TIM_ConfigClockSource+0x210>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	f200 80be 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 80070a8:	4a68      	ldr	r2, [pc, #416]	; (800724c <HAL_TIM_ConfigClockSource+0x214>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	f000 80b1 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 80070b0:	4a66      	ldr	r2, [pc, #408]	; (800724c <HAL_TIM_ConfigClockSource+0x214>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	f200 80b6 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 80070b8:	4a65      	ldr	r2, [pc, #404]	; (8007250 <HAL_TIM_ConfigClockSource+0x218>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	f000 80a9 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 80070c0:	4a63      	ldr	r2, [pc, #396]	; (8007250 <HAL_TIM_ConfigClockSource+0x218>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	f200 80ae 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 80070c8:	4a62      	ldr	r2, [pc, #392]	; (8007254 <HAL_TIM_ConfigClockSource+0x21c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	f000 80a1 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 80070d0:	4a60      	ldr	r2, [pc, #384]	; (8007254 <HAL_TIM_ConfigClockSource+0x21c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	f200 80a6 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 80070d8:	4a5f      	ldr	r2, [pc, #380]	; (8007258 <HAL_TIM_ConfigClockSource+0x220>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	f000 8099 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 80070e0:	4a5d      	ldr	r2, [pc, #372]	; (8007258 <HAL_TIM_ConfigClockSource+0x220>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	f200 809e 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 80070e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80070ec:	f000 8091 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 80070f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80070f4:	f200 8096 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 80070f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070fc:	f000 8089 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 8007100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007104:	f200 808e 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 8007108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800710c:	d03e      	beq.n	800718c <HAL_TIM_ConfigClockSource+0x154>
 800710e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007112:	f200 8087 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 8007116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711a:	f000 8085 	beq.w	8007228 <HAL_TIM_ConfigClockSource+0x1f0>
 800711e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007122:	d87f      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 8007124:	2b70      	cmp	r3, #112	; 0x70
 8007126:	d01a      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x126>
 8007128:	2b70      	cmp	r3, #112	; 0x70
 800712a:	d87b      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 800712c:	2b60      	cmp	r3, #96	; 0x60
 800712e:	d050      	beq.n	80071d2 <HAL_TIM_ConfigClockSource+0x19a>
 8007130:	2b60      	cmp	r3, #96	; 0x60
 8007132:	d877      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 8007134:	2b50      	cmp	r3, #80	; 0x50
 8007136:	d03c      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x17a>
 8007138:	2b50      	cmp	r3, #80	; 0x50
 800713a:	d873      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d058      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0x1ba>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d86f      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 8007144:	2b30      	cmp	r3, #48	; 0x30
 8007146:	d064      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 8007148:	2b30      	cmp	r3, #48	; 0x30
 800714a:	d86b      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 800714c:	2b20      	cmp	r3, #32
 800714e:	d060      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 8007150:	2b20      	cmp	r3, #32
 8007152:	d867      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d05c      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x1da>
 8007158:	2b10      	cmp	r3, #16
 800715a:	d05a      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800715c:	e062      	b.n	8007224 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6899      	ldr	r1, [r3, #8]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f000 f9c1 	bl	80074f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007180:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	609a      	str	r2, [r3, #8]
      break;
 800718a:	e04e      	b.n	800722a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	6899      	ldr	r1, [r3, #8]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f000 f9aa 	bl	80074f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ae:	609a      	str	r2, [r3, #8]
      break;
 80071b0:	e03b      	b.n	800722a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6859      	ldr	r1, [r3, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	461a      	mov	r2, r3
 80071c0:	f000 f91c 	bl	80073fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2150      	movs	r1, #80	; 0x50
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 f975 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 80071d0:	e02b      	b.n	800722a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6859      	ldr	r1, [r3, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	461a      	mov	r2, r3
 80071e0:	f000 f93b 	bl	800745a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2160      	movs	r1, #96	; 0x60
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f965 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 80071f0:	e01b      	b.n	800722a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6859      	ldr	r1, [r3, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	461a      	mov	r2, r3
 8007200:	f000 f8fc 	bl	80073fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2140      	movs	r1, #64	; 0x40
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f955 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 8007210:	e00b      	b.n	800722a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f000 f94c 	bl	80074ba <TIM_ITRx_SetConfig>
        break;
 8007222:	e002      	b.n	800722a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007228:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	00100070 	.word	0x00100070
 8007248:	00100060 	.word	0x00100060
 800724c:	00100050 	.word	0x00100050
 8007250:	00100040 	.word	0x00100040
 8007254:	00100030 	.word	0x00100030
 8007258:	00100020 	.word	0x00100020

0800725c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a46      	ldr	r2, [pc, #280]	; (80073d8 <TIM_Base_SetConfig+0x12c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d017      	beq.n	80072f4 <TIM_Base_SetConfig+0x48>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ca:	d013      	beq.n	80072f4 <TIM_Base_SetConfig+0x48>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a43      	ldr	r2, [pc, #268]	; (80073dc <TIM_Base_SetConfig+0x130>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00f      	beq.n	80072f4 <TIM_Base_SetConfig+0x48>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a42      	ldr	r2, [pc, #264]	; (80073e0 <TIM_Base_SetConfig+0x134>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00b      	beq.n	80072f4 <TIM_Base_SetConfig+0x48>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a41      	ldr	r2, [pc, #260]	; (80073e4 <TIM_Base_SetConfig+0x138>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d007      	beq.n	80072f4 <TIM_Base_SetConfig+0x48>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a40      	ldr	r2, [pc, #256]	; (80073e8 <TIM_Base_SetConfig+0x13c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_Base_SetConfig+0x48>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a3f      	ldr	r2, [pc, #252]	; (80073ec <TIM_Base_SetConfig+0x140>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d108      	bne.n	8007306 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a33      	ldr	r2, [pc, #204]	; (80073d8 <TIM_Base_SetConfig+0x12c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d023      	beq.n	8007356 <TIM_Base_SetConfig+0xaa>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007314:	d01f      	beq.n	8007356 <TIM_Base_SetConfig+0xaa>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a30      	ldr	r2, [pc, #192]	; (80073dc <TIM_Base_SetConfig+0x130>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01b      	beq.n	8007356 <TIM_Base_SetConfig+0xaa>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a2f      	ldr	r2, [pc, #188]	; (80073e0 <TIM_Base_SetConfig+0x134>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d017      	beq.n	8007356 <TIM_Base_SetConfig+0xaa>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a2e      	ldr	r2, [pc, #184]	; (80073e4 <TIM_Base_SetConfig+0x138>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d013      	beq.n	8007356 <TIM_Base_SetConfig+0xaa>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <TIM_Base_SetConfig+0x13c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00f      	beq.n	8007356 <TIM_Base_SetConfig+0xaa>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a2d      	ldr	r2, [pc, #180]	; (80073f0 <TIM_Base_SetConfig+0x144>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00b      	beq.n	8007356 <TIM_Base_SetConfig+0xaa>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2c      	ldr	r2, [pc, #176]	; (80073f4 <TIM_Base_SetConfig+0x148>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d007      	beq.n	8007356 <TIM_Base_SetConfig+0xaa>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2b      	ldr	r2, [pc, #172]	; (80073f8 <TIM_Base_SetConfig+0x14c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d003      	beq.n	8007356 <TIM_Base_SetConfig+0xaa>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a26      	ldr	r2, [pc, #152]	; (80073ec <TIM_Base_SetConfig+0x140>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d108      	bne.n	8007368 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a12      	ldr	r2, [pc, #72]	; (80073d8 <TIM_Base_SetConfig+0x12c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d013      	beq.n	80073bc <TIM_Base_SetConfig+0x110>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <TIM_Base_SetConfig+0x13c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00f      	beq.n	80073bc <TIM_Base_SetConfig+0x110>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <TIM_Base_SetConfig+0x144>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00b      	beq.n	80073bc <TIM_Base_SetConfig+0x110>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a13      	ldr	r2, [pc, #76]	; (80073f4 <TIM_Base_SetConfig+0x148>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d007      	beq.n	80073bc <TIM_Base_SetConfig+0x110>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a12      	ldr	r2, [pc, #72]	; (80073f8 <TIM_Base_SetConfig+0x14c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_Base_SetConfig+0x110>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a0d      	ldr	r2, [pc, #52]	; (80073ec <TIM_Base_SetConfig+0x140>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d103      	bne.n	80073c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	615a      	str	r2, [r3, #20]
}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	40012c00 	.word	0x40012c00
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	40013400 	.word	0x40013400
 80073ec:	40015000 	.word	0x40015000
 80073f0:	40014000 	.word	0x40014000
 80073f4:	40014400 	.word	0x40014400
 80073f8:	40014800 	.word	0x40014800

080073fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	f023 0201 	bic.w	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f023 030a 	bic.w	r3, r3, #10
 8007438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800745a:	b480      	push	{r7}
 800745c:	b087      	sub	sp, #28
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f023 0210 	bic.w	r2, r3, #16
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	031b      	lsls	r3, r3, #12
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4313      	orrs	r3, r2
 800748e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	621a      	str	r2, [r3, #32]
}
 80074ae:	bf00      	nop
 80074b0:	371c      	adds	r7, #28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80074d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4313      	orrs	r3, r2
 80074dc:	f043 0307 	orr.w	r3, r3, #7
 80074e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	609a      	str	r2, [r3, #8]
}
 80074e8:	bf00      	nop
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800750e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	021a      	lsls	r2, r3, #8
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	431a      	orrs	r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4313      	orrs	r3, r2
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	609a      	str	r2, [r3, #8]
}
 8007528:	bf00      	nop
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007548:	2302      	movs	r3, #2
 800754a:	e074      	b.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a34      	ldr	r2, [pc, #208]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d009      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a33      	ldr	r2, [pc, #204]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d004      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a31      	ldr	r2, [pc, #196]	; (800764c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d108      	bne.n	800759c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007590:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a21      	ldr	r2, [pc, #132]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d022      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075cc:	d01d      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d018      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d013      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a1c      	ldr	r2, [pc, #112]	; (8007658 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00e      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a15      	ldr	r2, [pc, #84]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d009      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a18      	ldr	r2, [pc, #96]	; (800765c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d004      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a11      	ldr	r2, [pc, #68]	; (800764c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d10c      	bne.n	8007624 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	4313      	orrs	r3, r2
 800761a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40013400 	.word	0x40013400
 800764c:	40015000 	.word	0x40015000
 8007650:	40000400 	.word	0x40000400
 8007654:	40000800 	.word	0x40000800
 8007658:	40000c00 	.word	0x40000c00
 800765c:	40014000 	.word	0x40014000

08007660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <__errno>:
 80076ec:	4b01      	ldr	r3, [pc, #4]	; (80076f4 <__errno+0x8>)
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	2000000c 	.word	0x2000000c

080076f8 <__libc_init_array>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	4d0d      	ldr	r5, [pc, #52]	; (8007730 <__libc_init_array+0x38>)
 80076fc:	4c0d      	ldr	r4, [pc, #52]	; (8007734 <__libc_init_array+0x3c>)
 80076fe:	1b64      	subs	r4, r4, r5
 8007700:	10a4      	asrs	r4, r4, #2
 8007702:	2600      	movs	r6, #0
 8007704:	42a6      	cmp	r6, r4
 8007706:	d109      	bne.n	800771c <__libc_init_array+0x24>
 8007708:	4d0b      	ldr	r5, [pc, #44]	; (8007738 <__libc_init_array+0x40>)
 800770a:	4c0c      	ldr	r4, [pc, #48]	; (800773c <__libc_init_array+0x44>)
 800770c:	f003 f886 	bl	800a81c <_init>
 8007710:	1b64      	subs	r4, r4, r5
 8007712:	10a4      	asrs	r4, r4, #2
 8007714:	2600      	movs	r6, #0
 8007716:	42a6      	cmp	r6, r4
 8007718:	d105      	bne.n	8007726 <__libc_init_array+0x2e>
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007720:	4798      	blx	r3
 8007722:	3601      	adds	r6, #1
 8007724:	e7ee      	b.n	8007704 <__libc_init_array+0xc>
 8007726:	f855 3b04 	ldr.w	r3, [r5], #4
 800772a:	4798      	blx	r3
 800772c:	3601      	adds	r6, #1
 800772e:	e7f2      	b.n	8007716 <__libc_init_array+0x1e>
 8007730:	0800ae0c 	.word	0x0800ae0c
 8007734:	0800ae0c 	.word	0x0800ae0c
 8007738:	0800ae0c 	.word	0x0800ae0c
 800773c:	0800ae10 	.word	0x0800ae10

08007740 <malloc>:
 8007740:	4b02      	ldr	r3, [pc, #8]	; (800774c <malloc+0xc>)
 8007742:	4601      	mov	r1, r0
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	f000 b85b 	b.w	8007800 <_malloc_r>
 800774a:	bf00      	nop
 800774c:	2000000c 	.word	0x2000000c

08007750 <memset>:
 8007750:	4402      	add	r2, r0
 8007752:	4603      	mov	r3, r0
 8007754:	4293      	cmp	r3, r2
 8007756:	d100      	bne.n	800775a <memset+0xa>
 8007758:	4770      	bx	lr
 800775a:	f803 1b01 	strb.w	r1, [r3], #1
 800775e:	e7f9      	b.n	8007754 <memset+0x4>

08007760 <_free_r>:
 8007760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007762:	2900      	cmp	r1, #0
 8007764:	d048      	beq.n	80077f8 <_free_r+0x98>
 8007766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800776a:	9001      	str	r0, [sp, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f1a1 0404 	sub.w	r4, r1, #4
 8007772:	bfb8      	it	lt
 8007774:	18e4      	addlt	r4, r4, r3
 8007776:	f001 ff45 	bl	8009604 <__malloc_lock>
 800777a:	4a20      	ldr	r2, [pc, #128]	; (80077fc <_free_r+0x9c>)
 800777c:	9801      	ldr	r0, [sp, #4]
 800777e:	6813      	ldr	r3, [r2, #0]
 8007780:	4615      	mov	r5, r2
 8007782:	b933      	cbnz	r3, 8007792 <_free_r+0x32>
 8007784:	6063      	str	r3, [r4, #4]
 8007786:	6014      	str	r4, [r2, #0]
 8007788:	b003      	add	sp, #12
 800778a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800778e:	f001 bf3f 	b.w	8009610 <__malloc_unlock>
 8007792:	42a3      	cmp	r3, r4
 8007794:	d90b      	bls.n	80077ae <_free_r+0x4e>
 8007796:	6821      	ldr	r1, [r4, #0]
 8007798:	1862      	adds	r2, r4, r1
 800779a:	4293      	cmp	r3, r2
 800779c:	bf04      	itt	eq
 800779e:	681a      	ldreq	r2, [r3, #0]
 80077a0:	685b      	ldreq	r3, [r3, #4]
 80077a2:	6063      	str	r3, [r4, #4]
 80077a4:	bf04      	itt	eq
 80077a6:	1852      	addeq	r2, r2, r1
 80077a8:	6022      	streq	r2, [r4, #0]
 80077aa:	602c      	str	r4, [r5, #0]
 80077ac:	e7ec      	b.n	8007788 <_free_r+0x28>
 80077ae:	461a      	mov	r2, r3
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	b10b      	cbz	r3, 80077b8 <_free_r+0x58>
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	d9fa      	bls.n	80077ae <_free_r+0x4e>
 80077b8:	6811      	ldr	r1, [r2, #0]
 80077ba:	1855      	adds	r5, r2, r1
 80077bc:	42a5      	cmp	r5, r4
 80077be:	d10b      	bne.n	80077d8 <_free_r+0x78>
 80077c0:	6824      	ldr	r4, [r4, #0]
 80077c2:	4421      	add	r1, r4
 80077c4:	1854      	adds	r4, r2, r1
 80077c6:	42a3      	cmp	r3, r4
 80077c8:	6011      	str	r1, [r2, #0]
 80077ca:	d1dd      	bne.n	8007788 <_free_r+0x28>
 80077cc:	681c      	ldr	r4, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	6053      	str	r3, [r2, #4]
 80077d2:	4421      	add	r1, r4
 80077d4:	6011      	str	r1, [r2, #0]
 80077d6:	e7d7      	b.n	8007788 <_free_r+0x28>
 80077d8:	d902      	bls.n	80077e0 <_free_r+0x80>
 80077da:	230c      	movs	r3, #12
 80077dc:	6003      	str	r3, [r0, #0]
 80077de:	e7d3      	b.n	8007788 <_free_r+0x28>
 80077e0:	6825      	ldr	r5, [r4, #0]
 80077e2:	1961      	adds	r1, r4, r5
 80077e4:	428b      	cmp	r3, r1
 80077e6:	bf04      	itt	eq
 80077e8:	6819      	ldreq	r1, [r3, #0]
 80077ea:	685b      	ldreq	r3, [r3, #4]
 80077ec:	6063      	str	r3, [r4, #4]
 80077ee:	bf04      	itt	eq
 80077f0:	1949      	addeq	r1, r1, r5
 80077f2:	6021      	streq	r1, [r4, #0]
 80077f4:	6054      	str	r4, [r2, #4]
 80077f6:	e7c7      	b.n	8007788 <_free_r+0x28>
 80077f8:	b003      	add	sp, #12
 80077fa:	bd30      	pop	{r4, r5, pc}
 80077fc:	2000020c 	.word	0x2000020c

08007800 <_malloc_r>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	1ccd      	adds	r5, r1, #3
 8007804:	f025 0503 	bic.w	r5, r5, #3
 8007808:	3508      	adds	r5, #8
 800780a:	2d0c      	cmp	r5, #12
 800780c:	bf38      	it	cc
 800780e:	250c      	movcc	r5, #12
 8007810:	2d00      	cmp	r5, #0
 8007812:	4606      	mov	r6, r0
 8007814:	db01      	blt.n	800781a <_malloc_r+0x1a>
 8007816:	42a9      	cmp	r1, r5
 8007818:	d903      	bls.n	8007822 <_malloc_r+0x22>
 800781a:	230c      	movs	r3, #12
 800781c:	6033      	str	r3, [r6, #0]
 800781e:	2000      	movs	r0, #0
 8007820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007822:	f001 feef 	bl	8009604 <__malloc_lock>
 8007826:	4921      	ldr	r1, [pc, #132]	; (80078ac <_malloc_r+0xac>)
 8007828:	680a      	ldr	r2, [r1, #0]
 800782a:	4614      	mov	r4, r2
 800782c:	b99c      	cbnz	r4, 8007856 <_malloc_r+0x56>
 800782e:	4f20      	ldr	r7, [pc, #128]	; (80078b0 <_malloc_r+0xb0>)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	b923      	cbnz	r3, 800783e <_malloc_r+0x3e>
 8007834:	4621      	mov	r1, r4
 8007836:	4630      	mov	r0, r6
 8007838:	f000 fd4a 	bl	80082d0 <_sbrk_r>
 800783c:	6038      	str	r0, [r7, #0]
 800783e:	4629      	mov	r1, r5
 8007840:	4630      	mov	r0, r6
 8007842:	f000 fd45 	bl	80082d0 <_sbrk_r>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d123      	bne.n	8007892 <_malloc_r+0x92>
 800784a:	230c      	movs	r3, #12
 800784c:	6033      	str	r3, [r6, #0]
 800784e:	4630      	mov	r0, r6
 8007850:	f001 fede 	bl	8009610 <__malloc_unlock>
 8007854:	e7e3      	b.n	800781e <_malloc_r+0x1e>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	1b5b      	subs	r3, r3, r5
 800785a:	d417      	bmi.n	800788c <_malloc_r+0x8c>
 800785c:	2b0b      	cmp	r3, #11
 800785e:	d903      	bls.n	8007868 <_malloc_r+0x68>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	441c      	add	r4, r3
 8007864:	6025      	str	r5, [r4, #0]
 8007866:	e004      	b.n	8007872 <_malloc_r+0x72>
 8007868:	6863      	ldr	r3, [r4, #4]
 800786a:	42a2      	cmp	r2, r4
 800786c:	bf0c      	ite	eq
 800786e:	600b      	streq	r3, [r1, #0]
 8007870:	6053      	strne	r3, [r2, #4]
 8007872:	4630      	mov	r0, r6
 8007874:	f001 fecc 	bl	8009610 <__malloc_unlock>
 8007878:	f104 000b 	add.w	r0, r4, #11
 800787c:	1d23      	adds	r3, r4, #4
 800787e:	f020 0007 	bic.w	r0, r0, #7
 8007882:	1ac2      	subs	r2, r0, r3
 8007884:	d0cc      	beq.n	8007820 <_malloc_r+0x20>
 8007886:	1a1b      	subs	r3, r3, r0
 8007888:	50a3      	str	r3, [r4, r2]
 800788a:	e7c9      	b.n	8007820 <_malloc_r+0x20>
 800788c:	4622      	mov	r2, r4
 800788e:	6864      	ldr	r4, [r4, #4]
 8007890:	e7cc      	b.n	800782c <_malloc_r+0x2c>
 8007892:	1cc4      	adds	r4, r0, #3
 8007894:	f024 0403 	bic.w	r4, r4, #3
 8007898:	42a0      	cmp	r0, r4
 800789a:	d0e3      	beq.n	8007864 <_malloc_r+0x64>
 800789c:	1a21      	subs	r1, r4, r0
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 fd16 	bl	80082d0 <_sbrk_r>
 80078a4:	3001      	adds	r0, #1
 80078a6:	d1dd      	bne.n	8007864 <_malloc_r+0x64>
 80078a8:	e7cf      	b.n	800784a <_malloc_r+0x4a>
 80078aa:	bf00      	nop
 80078ac:	2000020c 	.word	0x2000020c
 80078b0:	20000210 	.word	0x20000210

080078b4 <__cvt>:
 80078b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	ec55 4b10 	vmov	r4, r5, d0
 80078bc:	2d00      	cmp	r5, #0
 80078be:	460e      	mov	r6, r1
 80078c0:	4619      	mov	r1, r3
 80078c2:	462b      	mov	r3, r5
 80078c4:	bfbb      	ittet	lt
 80078c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078ca:	461d      	movlt	r5, r3
 80078cc:	2300      	movge	r3, #0
 80078ce:	232d      	movlt	r3, #45	; 0x2d
 80078d0:	700b      	strb	r3, [r1, #0]
 80078d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078d8:	4691      	mov	r9, r2
 80078da:	f023 0820 	bic.w	r8, r3, #32
 80078de:	bfbc      	itt	lt
 80078e0:	4622      	movlt	r2, r4
 80078e2:	4614      	movlt	r4, r2
 80078e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078e8:	d005      	beq.n	80078f6 <__cvt+0x42>
 80078ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078ee:	d100      	bne.n	80078f2 <__cvt+0x3e>
 80078f0:	3601      	adds	r6, #1
 80078f2:	2102      	movs	r1, #2
 80078f4:	e000      	b.n	80078f8 <__cvt+0x44>
 80078f6:	2103      	movs	r1, #3
 80078f8:	ab03      	add	r3, sp, #12
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	ab02      	add	r3, sp, #8
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	ec45 4b10 	vmov	d0, r4, r5
 8007904:	4653      	mov	r3, sl
 8007906:	4632      	mov	r2, r6
 8007908:	f000 fe5e 	bl	80085c8 <_dtoa_r>
 800790c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007910:	4607      	mov	r7, r0
 8007912:	d102      	bne.n	800791a <__cvt+0x66>
 8007914:	f019 0f01 	tst.w	r9, #1
 8007918:	d022      	beq.n	8007960 <__cvt+0xac>
 800791a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800791e:	eb07 0906 	add.w	r9, r7, r6
 8007922:	d110      	bne.n	8007946 <__cvt+0x92>
 8007924:	783b      	ldrb	r3, [r7, #0]
 8007926:	2b30      	cmp	r3, #48	; 0x30
 8007928:	d10a      	bne.n	8007940 <__cvt+0x8c>
 800792a:	2200      	movs	r2, #0
 800792c:	2300      	movs	r3, #0
 800792e:	4620      	mov	r0, r4
 8007930:	4629      	mov	r1, r5
 8007932:	f7f9 f8f1 	bl	8000b18 <__aeabi_dcmpeq>
 8007936:	b918      	cbnz	r0, 8007940 <__cvt+0x8c>
 8007938:	f1c6 0601 	rsb	r6, r6, #1
 800793c:	f8ca 6000 	str.w	r6, [sl]
 8007940:	f8da 3000 	ldr.w	r3, [sl]
 8007944:	4499      	add	r9, r3
 8007946:	2200      	movs	r2, #0
 8007948:	2300      	movs	r3, #0
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f7f9 f8e3 	bl	8000b18 <__aeabi_dcmpeq>
 8007952:	b108      	cbz	r0, 8007958 <__cvt+0xa4>
 8007954:	f8cd 900c 	str.w	r9, [sp, #12]
 8007958:	2230      	movs	r2, #48	; 0x30
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	454b      	cmp	r3, r9
 800795e:	d307      	bcc.n	8007970 <__cvt+0xbc>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007964:	1bdb      	subs	r3, r3, r7
 8007966:	4638      	mov	r0, r7
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	b004      	add	sp, #16
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	1c59      	adds	r1, r3, #1
 8007972:	9103      	str	r1, [sp, #12]
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e7f0      	b.n	800795a <__cvt+0xa6>

08007978 <__exponent>:
 8007978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800797a:	4603      	mov	r3, r0
 800797c:	2900      	cmp	r1, #0
 800797e:	bfb8      	it	lt
 8007980:	4249      	neglt	r1, r1
 8007982:	f803 2b02 	strb.w	r2, [r3], #2
 8007986:	bfb4      	ite	lt
 8007988:	222d      	movlt	r2, #45	; 0x2d
 800798a:	222b      	movge	r2, #43	; 0x2b
 800798c:	2909      	cmp	r1, #9
 800798e:	7042      	strb	r2, [r0, #1]
 8007990:	dd2a      	ble.n	80079e8 <__exponent+0x70>
 8007992:	f10d 0407 	add.w	r4, sp, #7
 8007996:	46a4      	mov	ip, r4
 8007998:	270a      	movs	r7, #10
 800799a:	46a6      	mov	lr, r4
 800799c:	460a      	mov	r2, r1
 800799e:	fb91 f6f7 	sdiv	r6, r1, r7
 80079a2:	fb07 1516 	mls	r5, r7, r6, r1
 80079a6:	3530      	adds	r5, #48	; 0x30
 80079a8:	2a63      	cmp	r2, #99	; 0x63
 80079aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80079ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079b2:	4631      	mov	r1, r6
 80079b4:	dcf1      	bgt.n	800799a <__exponent+0x22>
 80079b6:	3130      	adds	r1, #48	; 0x30
 80079b8:	f1ae 0502 	sub.w	r5, lr, #2
 80079bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079c0:	1c44      	adds	r4, r0, #1
 80079c2:	4629      	mov	r1, r5
 80079c4:	4561      	cmp	r1, ip
 80079c6:	d30a      	bcc.n	80079de <__exponent+0x66>
 80079c8:	f10d 0209 	add.w	r2, sp, #9
 80079cc:	eba2 020e 	sub.w	r2, r2, lr
 80079d0:	4565      	cmp	r5, ip
 80079d2:	bf88      	it	hi
 80079d4:	2200      	movhi	r2, #0
 80079d6:	4413      	add	r3, r2
 80079d8:	1a18      	subs	r0, r3, r0
 80079da:	b003      	add	sp, #12
 80079dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079e6:	e7ed      	b.n	80079c4 <__exponent+0x4c>
 80079e8:	2330      	movs	r3, #48	; 0x30
 80079ea:	3130      	adds	r1, #48	; 0x30
 80079ec:	7083      	strb	r3, [r0, #2]
 80079ee:	70c1      	strb	r1, [r0, #3]
 80079f0:	1d03      	adds	r3, r0, #4
 80079f2:	e7f1      	b.n	80079d8 <__exponent+0x60>

080079f4 <_printf_float>:
 80079f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	ed2d 8b02 	vpush	{d8}
 80079fc:	b08d      	sub	sp, #52	; 0x34
 80079fe:	460c      	mov	r4, r1
 8007a00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a04:	4616      	mov	r6, r2
 8007a06:	461f      	mov	r7, r3
 8007a08:	4605      	mov	r5, r0
 8007a0a:	f001 fd81 	bl	8009510 <_localeconv_r>
 8007a0e:	f8d0 a000 	ldr.w	sl, [r0]
 8007a12:	4650      	mov	r0, sl
 8007a14:	f7f8 fc04 	bl	8000220 <strlen>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	9305      	str	r3, [sp, #20]
 8007a20:	f8d8 3000 	ldr.w	r3, [r8]
 8007a24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a28:	3307      	adds	r3, #7
 8007a2a:	f023 0307 	bic.w	r3, r3, #7
 8007a2e:	f103 0208 	add.w	r2, r3, #8
 8007a32:	f8c8 2000 	str.w	r2, [r8]
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a46:	9307      	str	r3, [sp, #28]
 8007a48:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a4c:	ee08 0a10 	vmov	s16, r0
 8007a50:	4b9f      	ldr	r3, [pc, #636]	; (8007cd0 <_printf_float+0x2dc>)
 8007a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a5a:	f7f9 f88f 	bl	8000b7c <__aeabi_dcmpun>
 8007a5e:	bb88      	cbnz	r0, 8007ac4 <_printf_float+0xd0>
 8007a60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a64:	4b9a      	ldr	r3, [pc, #616]	; (8007cd0 <_printf_float+0x2dc>)
 8007a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a6a:	f7f9 f869 	bl	8000b40 <__aeabi_dcmple>
 8007a6e:	bb48      	cbnz	r0, 8007ac4 <_printf_float+0xd0>
 8007a70:	2200      	movs	r2, #0
 8007a72:	2300      	movs	r3, #0
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f9 f858 	bl	8000b2c <__aeabi_dcmplt>
 8007a7c:	b110      	cbz	r0, 8007a84 <_printf_float+0x90>
 8007a7e:	232d      	movs	r3, #45	; 0x2d
 8007a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a84:	4b93      	ldr	r3, [pc, #588]	; (8007cd4 <_printf_float+0x2e0>)
 8007a86:	4894      	ldr	r0, [pc, #592]	; (8007cd8 <_printf_float+0x2e4>)
 8007a88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a8c:	bf94      	ite	ls
 8007a8e:	4698      	movls	r8, r3
 8007a90:	4680      	movhi	r8, r0
 8007a92:	2303      	movs	r3, #3
 8007a94:	6123      	str	r3, [r4, #16]
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	f023 0204 	bic.w	r2, r3, #4
 8007a9c:	6022      	str	r2, [r4, #0]
 8007a9e:	f04f 0900 	mov.w	r9, #0
 8007aa2:	9700      	str	r7, [sp, #0]
 8007aa4:	4633      	mov	r3, r6
 8007aa6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 f9d8 	bl	8007e60 <_printf_common>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	f040 8090 	bne.w	8007bd6 <_printf_float+0x1e2>
 8007ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aba:	b00d      	add	sp, #52	; 0x34
 8007abc:	ecbd 8b02 	vpop	{d8}
 8007ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	4640      	mov	r0, r8
 8007aca:	4649      	mov	r1, r9
 8007acc:	f7f9 f856 	bl	8000b7c <__aeabi_dcmpun>
 8007ad0:	b140      	cbz	r0, 8007ae4 <_printf_float+0xf0>
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bfbc      	itt	lt
 8007ad8:	232d      	movlt	r3, #45	; 0x2d
 8007ada:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ade:	487f      	ldr	r0, [pc, #508]	; (8007cdc <_printf_float+0x2e8>)
 8007ae0:	4b7f      	ldr	r3, [pc, #508]	; (8007ce0 <_printf_float+0x2ec>)
 8007ae2:	e7d1      	b.n	8007a88 <_printf_float+0x94>
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007aea:	9206      	str	r2, [sp, #24]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	d13f      	bne.n	8007b70 <_printf_float+0x17c>
 8007af0:	2306      	movs	r3, #6
 8007af2:	6063      	str	r3, [r4, #4]
 8007af4:	9b05      	ldr	r3, [sp, #20]
 8007af6:	6861      	ldr	r1, [r4, #4]
 8007af8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007afc:	2300      	movs	r3, #0
 8007afe:	9303      	str	r3, [sp, #12]
 8007b00:	ab0a      	add	r3, sp, #40	; 0x28
 8007b02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b06:	ab09      	add	r3, sp, #36	; 0x24
 8007b08:	ec49 8b10 	vmov	d0, r8, r9
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	6022      	str	r2, [r4, #0]
 8007b10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b14:	4628      	mov	r0, r5
 8007b16:	f7ff fecd 	bl	80078b4 <__cvt>
 8007b1a:	9b06      	ldr	r3, [sp, #24]
 8007b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b1e:	2b47      	cmp	r3, #71	; 0x47
 8007b20:	4680      	mov	r8, r0
 8007b22:	d108      	bne.n	8007b36 <_printf_float+0x142>
 8007b24:	1cc8      	adds	r0, r1, #3
 8007b26:	db02      	blt.n	8007b2e <_printf_float+0x13a>
 8007b28:	6863      	ldr	r3, [r4, #4]
 8007b2a:	4299      	cmp	r1, r3
 8007b2c:	dd41      	ble.n	8007bb2 <_printf_float+0x1be>
 8007b2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b32:	fa5f fb8b 	uxtb.w	fp, fp
 8007b36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b3a:	d820      	bhi.n	8007b7e <_printf_float+0x18a>
 8007b3c:	3901      	subs	r1, #1
 8007b3e:	465a      	mov	r2, fp
 8007b40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b44:	9109      	str	r1, [sp, #36]	; 0x24
 8007b46:	f7ff ff17 	bl	8007978 <__exponent>
 8007b4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b4c:	1813      	adds	r3, r2, r0
 8007b4e:	2a01      	cmp	r2, #1
 8007b50:	4681      	mov	r9, r0
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	dc02      	bgt.n	8007b5c <_printf_float+0x168>
 8007b56:	6822      	ldr	r2, [r4, #0]
 8007b58:	07d2      	lsls	r2, r2, #31
 8007b5a:	d501      	bpl.n	8007b60 <_printf_float+0x16c>
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	6123      	str	r3, [r4, #16]
 8007b60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d09c      	beq.n	8007aa2 <_printf_float+0xae>
 8007b68:	232d      	movs	r3, #45	; 0x2d
 8007b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b6e:	e798      	b.n	8007aa2 <_printf_float+0xae>
 8007b70:	9a06      	ldr	r2, [sp, #24]
 8007b72:	2a47      	cmp	r2, #71	; 0x47
 8007b74:	d1be      	bne.n	8007af4 <_printf_float+0x100>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1bc      	bne.n	8007af4 <_printf_float+0x100>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e7b9      	b.n	8007af2 <_printf_float+0xfe>
 8007b7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b82:	d118      	bne.n	8007bb6 <_printf_float+0x1c2>
 8007b84:	2900      	cmp	r1, #0
 8007b86:	6863      	ldr	r3, [r4, #4]
 8007b88:	dd0b      	ble.n	8007ba2 <_printf_float+0x1ae>
 8007b8a:	6121      	str	r1, [r4, #16]
 8007b8c:	b913      	cbnz	r3, 8007b94 <_printf_float+0x1a0>
 8007b8e:	6822      	ldr	r2, [r4, #0]
 8007b90:	07d0      	lsls	r0, r2, #31
 8007b92:	d502      	bpl.n	8007b9a <_printf_float+0x1a6>
 8007b94:	3301      	adds	r3, #1
 8007b96:	440b      	add	r3, r1
 8007b98:	6123      	str	r3, [r4, #16]
 8007b9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b9c:	f04f 0900 	mov.w	r9, #0
 8007ba0:	e7de      	b.n	8007b60 <_printf_float+0x16c>
 8007ba2:	b913      	cbnz	r3, 8007baa <_printf_float+0x1b6>
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	07d2      	lsls	r2, r2, #31
 8007ba8:	d501      	bpl.n	8007bae <_printf_float+0x1ba>
 8007baa:	3302      	adds	r3, #2
 8007bac:	e7f4      	b.n	8007b98 <_printf_float+0x1a4>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e7f2      	b.n	8007b98 <_printf_float+0x1a4>
 8007bb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	db05      	blt.n	8007bc8 <_printf_float+0x1d4>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	6121      	str	r1, [r4, #16]
 8007bc0:	07d8      	lsls	r0, r3, #31
 8007bc2:	d5ea      	bpl.n	8007b9a <_printf_float+0x1a6>
 8007bc4:	1c4b      	adds	r3, r1, #1
 8007bc6:	e7e7      	b.n	8007b98 <_printf_float+0x1a4>
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	bfd4      	ite	le
 8007bcc:	f1c1 0202 	rsble	r2, r1, #2
 8007bd0:	2201      	movgt	r2, #1
 8007bd2:	4413      	add	r3, r2
 8007bd4:	e7e0      	b.n	8007b98 <_printf_float+0x1a4>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	055a      	lsls	r2, r3, #21
 8007bda:	d407      	bmi.n	8007bec <_printf_float+0x1f8>
 8007bdc:	6923      	ldr	r3, [r4, #16]
 8007bde:	4642      	mov	r2, r8
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	d12c      	bne.n	8007c44 <_printf_float+0x250>
 8007bea:	e764      	b.n	8007ab6 <_printf_float+0xc2>
 8007bec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bf0:	f240 80e0 	bls.w	8007db4 <_printf_float+0x3c0>
 8007bf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f7f8 ff8c 	bl	8000b18 <__aeabi_dcmpeq>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d034      	beq.n	8007c6e <_printf_float+0x27a>
 8007c04:	4a37      	ldr	r2, [pc, #220]	; (8007ce4 <_printf_float+0x2f0>)
 8007c06:	2301      	movs	r3, #1
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	47b8      	blx	r7
 8007c0e:	3001      	adds	r0, #1
 8007c10:	f43f af51 	beq.w	8007ab6 <_printf_float+0xc2>
 8007c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	db02      	blt.n	8007c22 <_printf_float+0x22e>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	07d8      	lsls	r0, r3, #31
 8007c20:	d510      	bpl.n	8007c44 <_printf_float+0x250>
 8007c22:	ee18 3a10 	vmov	r3, s16
 8007c26:	4652      	mov	r2, sl
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f43f af41 	beq.w	8007ab6 <_printf_float+0xc2>
 8007c34:	f04f 0800 	mov.w	r8, #0
 8007c38:	f104 091a 	add.w	r9, r4, #26
 8007c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	4543      	cmp	r3, r8
 8007c42:	dc09      	bgt.n	8007c58 <_printf_float+0x264>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	079b      	lsls	r3, r3, #30
 8007c48:	f100 8105 	bmi.w	8007e56 <_printf_float+0x462>
 8007c4c:	68e0      	ldr	r0, [r4, #12]
 8007c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c50:	4298      	cmp	r0, r3
 8007c52:	bfb8      	it	lt
 8007c54:	4618      	movlt	r0, r3
 8007c56:	e730      	b.n	8007aba <_printf_float+0xc6>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	464a      	mov	r2, r9
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f af27 	beq.w	8007ab6 <_printf_float+0xc2>
 8007c68:	f108 0801 	add.w	r8, r8, #1
 8007c6c:	e7e6      	b.n	8007c3c <_printf_float+0x248>
 8007c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	dc39      	bgt.n	8007ce8 <_printf_float+0x2f4>
 8007c74:	4a1b      	ldr	r2, [pc, #108]	; (8007ce4 <_printf_float+0x2f0>)
 8007c76:	2301      	movs	r3, #1
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f af19 	beq.w	8007ab6 <_printf_float+0xc2>
 8007c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	d102      	bne.n	8007c92 <_printf_float+0x29e>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	07d9      	lsls	r1, r3, #31
 8007c90:	d5d8      	bpl.n	8007c44 <_printf_float+0x250>
 8007c92:	ee18 3a10 	vmov	r3, s16
 8007c96:	4652      	mov	r2, sl
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	f43f af09 	beq.w	8007ab6 <_printf_float+0xc2>
 8007ca4:	f04f 0900 	mov.w	r9, #0
 8007ca8:	f104 0a1a 	add.w	sl, r4, #26
 8007cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cae:	425b      	negs	r3, r3
 8007cb0:	454b      	cmp	r3, r9
 8007cb2:	dc01      	bgt.n	8007cb8 <_printf_float+0x2c4>
 8007cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb6:	e792      	b.n	8007bde <_printf_float+0x1ea>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	4652      	mov	r2, sl
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b8      	blx	r7
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	f43f aef7 	beq.w	8007ab6 <_printf_float+0xc2>
 8007cc8:	f109 0901 	add.w	r9, r9, #1
 8007ccc:	e7ee      	b.n	8007cac <_printf_float+0x2b8>
 8007cce:	bf00      	nop
 8007cd0:	7fefffff 	.word	0x7fefffff
 8007cd4:	0800aa30 	.word	0x0800aa30
 8007cd8:	0800aa34 	.word	0x0800aa34
 8007cdc:	0800aa3c 	.word	0x0800aa3c
 8007ce0:	0800aa38 	.word	0x0800aa38
 8007ce4:	0800aa40 	.word	0x0800aa40
 8007ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cec:	429a      	cmp	r2, r3
 8007cee:	bfa8      	it	ge
 8007cf0:	461a      	movge	r2, r3
 8007cf2:	2a00      	cmp	r2, #0
 8007cf4:	4691      	mov	r9, r2
 8007cf6:	dc37      	bgt.n	8007d68 <_printf_float+0x374>
 8007cf8:	f04f 0b00 	mov.w	fp, #0
 8007cfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d00:	f104 021a 	add.w	r2, r4, #26
 8007d04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d06:	9305      	str	r3, [sp, #20]
 8007d08:	eba3 0309 	sub.w	r3, r3, r9
 8007d0c:	455b      	cmp	r3, fp
 8007d0e:	dc33      	bgt.n	8007d78 <_printf_float+0x384>
 8007d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d14:	429a      	cmp	r2, r3
 8007d16:	db3b      	blt.n	8007d90 <_printf_float+0x39c>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	07da      	lsls	r2, r3, #31
 8007d1c:	d438      	bmi.n	8007d90 <_printf_float+0x39c>
 8007d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d20:	9b05      	ldr	r3, [sp, #20]
 8007d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	eba2 0901 	sub.w	r9, r2, r1
 8007d2a:	4599      	cmp	r9, r3
 8007d2c:	bfa8      	it	ge
 8007d2e:	4699      	movge	r9, r3
 8007d30:	f1b9 0f00 	cmp.w	r9, #0
 8007d34:	dc35      	bgt.n	8007da2 <_printf_float+0x3ae>
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d3e:	f104 0a1a 	add.w	sl, r4, #26
 8007d42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d46:	1a9b      	subs	r3, r3, r2
 8007d48:	eba3 0309 	sub.w	r3, r3, r9
 8007d4c:	4543      	cmp	r3, r8
 8007d4e:	f77f af79 	ble.w	8007c44 <_printf_float+0x250>
 8007d52:	2301      	movs	r3, #1
 8007d54:	4652      	mov	r2, sl
 8007d56:	4631      	mov	r1, r6
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47b8      	blx	r7
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	f43f aeaa 	beq.w	8007ab6 <_printf_float+0xc2>
 8007d62:	f108 0801 	add.w	r8, r8, #1
 8007d66:	e7ec      	b.n	8007d42 <_printf_float+0x34e>
 8007d68:	4613      	mov	r3, r2
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b8      	blx	r7
 8007d72:	3001      	adds	r0, #1
 8007d74:	d1c0      	bne.n	8007cf8 <_printf_float+0x304>
 8007d76:	e69e      	b.n	8007ab6 <_printf_float+0xc2>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	9205      	str	r2, [sp, #20]
 8007d80:	47b8      	blx	r7
 8007d82:	3001      	adds	r0, #1
 8007d84:	f43f ae97 	beq.w	8007ab6 <_printf_float+0xc2>
 8007d88:	9a05      	ldr	r2, [sp, #20]
 8007d8a:	f10b 0b01 	add.w	fp, fp, #1
 8007d8e:	e7b9      	b.n	8007d04 <_printf_float+0x310>
 8007d90:	ee18 3a10 	vmov	r3, s16
 8007d94:	4652      	mov	r2, sl
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b8      	blx	r7
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d1be      	bne.n	8007d1e <_printf_float+0x32a>
 8007da0:	e689      	b.n	8007ab6 <_printf_float+0xc2>
 8007da2:	9a05      	ldr	r2, [sp, #20]
 8007da4:	464b      	mov	r3, r9
 8007da6:	4442      	add	r2, r8
 8007da8:	4631      	mov	r1, r6
 8007daa:	4628      	mov	r0, r5
 8007dac:	47b8      	blx	r7
 8007dae:	3001      	adds	r0, #1
 8007db0:	d1c1      	bne.n	8007d36 <_printf_float+0x342>
 8007db2:	e680      	b.n	8007ab6 <_printf_float+0xc2>
 8007db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007db6:	2a01      	cmp	r2, #1
 8007db8:	dc01      	bgt.n	8007dbe <_printf_float+0x3ca>
 8007dba:	07db      	lsls	r3, r3, #31
 8007dbc:	d538      	bpl.n	8007e30 <_printf_float+0x43c>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	47b8      	blx	r7
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f43f ae74 	beq.w	8007ab6 <_printf_float+0xc2>
 8007dce:	ee18 3a10 	vmov	r3, s16
 8007dd2:	4652      	mov	r2, sl
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	47b8      	blx	r7
 8007dda:	3001      	adds	r0, #1
 8007ddc:	f43f ae6b 	beq.w	8007ab6 <_printf_float+0xc2>
 8007de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	f7f8 fe96 	bl	8000b18 <__aeabi_dcmpeq>
 8007dec:	b9d8      	cbnz	r0, 8007e26 <_printf_float+0x432>
 8007dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df0:	f108 0201 	add.w	r2, r8, #1
 8007df4:	3b01      	subs	r3, #1
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b8      	blx	r7
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d10e      	bne.n	8007e1e <_printf_float+0x42a>
 8007e00:	e659      	b.n	8007ab6 <_printf_float+0xc2>
 8007e02:	2301      	movs	r3, #1
 8007e04:	4652      	mov	r2, sl
 8007e06:	4631      	mov	r1, r6
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b8      	blx	r7
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	f43f ae52 	beq.w	8007ab6 <_printf_float+0xc2>
 8007e12:	f108 0801 	add.w	r8, r8, #1
 8007e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	4543      	cmp	r3, r8
 8007e1c:	dcf1      	bgt.n	8007e02 <_printf_float+0x40e>
 8007e1e:	464b      	mov	r3, r9
 8007e20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e24:	e6dc      	b.n	8007be0 <_printf_float+0x1ec>
 8007e26:	f04f 0800 	mov.w	r8, #0
 8007e2a:	f104 0a1a 	add.w	sl, r4, #26
 8007e2e:	e7f2      	b.n	8007e16 <_printf_float+0x422>
 8007e30:	2301      	movs	r3, #1
 8007e32:	4642      	mov	r2, r8
 8007e34:	e7df      	b.n	8007df6 <_printf_float+0x402>
 8007e36:	2301      	movs	r3, #1
 8007e38:	464a      	mov	r2, r9
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b8      	blx	r7
 8007e40:	3001      	adds	r0, #1
 8007e42:	f43f ae38 	beq.w	8007ab6 <_printf_float+0xc2>
 8007e46:	f108 0801 	add.w	r8, r8, #1
 8007e4a:	68e3      	ldr	r3, [r4, #12]
 8007e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e4e:	1a5b      	subs	r3, r3, r1
 8007e50:	4543      	cmp	r3, r8
 8007e52:	dcf0      	bgt.n	8007e36 <_printf_float+0x442>
 8007e54:	e6fa      	b.n	8007c4c <_printf_float+0x258>
 8007e56:	f04f 0800 	mov.w	r8, #0
 8007e5a:	f104 0919 	add.w	r9, r4, #25
 8007e5e:	e7f4      	b.n	8007e4a <_printf_float+0x456>

08007e60 <_printf_common>:
 8007e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e64:	4616      	mov	r6, r2
 8007e66:	4699      	mov	r9, r3
 8007e68:	688a      	ldr	r2, [r1, #8]
 8007e6a:	690b      	ldr	r3, [r1, #16]
 8007e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	bfb8      	it	lt
 8007e74:	4613      	movlt	r3, r2
 8007e76:	6033      	str	r3, [r6, #0]
 8007e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	b10a      	cbz	r2, 8007e86 <_printf_common+0x26>
 8007e82:	3301      	adds	r3, #1
 8007e84:	6033      	str	r3, [r6, #0]
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	0699      	lsls	r1, r3, #26
 8007e8a:	bf42      	ittt	mi
 8007e8c:	6833      	ldrmi	r3, [r6, #0]
 8007e8e:	3302      	addmi	r3, #2
 8007e90:	6033      	strmi	r3, [r6, #0]
 8007e92:	6825      	ldr	r5, [r4, #0]
 8007e94:	f015 0506 	ands.w	r5, r5, #6
 8007e98:	d106      	bne.n	8007ea8 <_printf_common+0x48>
 8007e9a:	f104 0a19 	add.w	sl, r4, #25
 8007e9e:	68e3      	ldr	r3, [r4, #12]
 8007ea0:	6832      	ldr	r2, [r6, #0]
 8007ea2:	1a9b      	subs	r3, r3, r2
 8007ea4:	42ab      	cmp	r3, r5
 8007ea6:	dc26      	bgt.n	8007ef6 <_printf_common+0x96>
 8007ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eac:	1e13      	subs	r3, r2, #0
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	bf18      	it	ne
 8007eb2:	2301      	movne	r3, #1
 8007eb4:	0692      	lsls	r2, r2, #26
 8007eb6:	d42b      	bmi.n	8007f10 <_printf_common+0xb0>
 8007eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	47c0      	blx	r8
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	d01e      	beq.n	8007f04 <_printf_common+0xa4>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	68e5      	ldr	r5, [r4, #12]
 8007eca:	6832      	ldr	r2, [r6, #0]
 8007ecc:	f003 0306 	and.w	r3, r3, #6
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	bf08      	it	eq
 8007ed4:	1aad      	subeq	r5, r5, r2
 8007ed6:	68a3      	ldr	r3, [r4, #8]
 8007ed8:	6922      	ldr	r2, [r4, #16]
 8007eda:	bf0c      	ite	eq
 8007edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee0:	2500      	movne	r5, #0
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	bfc4      	itt	gt
 8007ee6:	1a9b      	subgt	r3, r3, r2
 8007ee8:	18ed      	addgt	r5, r5, r3
 8007eea:	2600      	movs	r6, #0
 8007eec:	341a      	adds	r4, #26
 8007eee:	42b5      	cmp	r5, r6
 8007ef0:	d11a      	bne.n	8007f28 <_printf_common+0xc8>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e008      	b.n	8007f08 <_printf_common+0xa8>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4652      	mov	r2, sl
 8007efa:	4649      	mov	r1, r9
 8007efc:	4638      	mov	r0, r7
 8007efe:	47c0      	blx	r8
 8007f00:	3001      	adds	r0, #1
 8007f02:	d103      	bne.n	8007f0c <_printf_common+0xac>
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	e7c6      	b.n	8007e9e <_printf_common+0x3e>
 8007f10:	18e1      	adds	r1, r4, r3
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	2030      	movs	r0, #48	; 0x30
 8007f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f1a:	4422      	add	r2, r4
 8007f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f24:	3302      	adds	r3, #2
 8007f26:	e7c7      	b.n	8007eb8 <_printf_common+0x58>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	4638      	mov	r0, r7
 8007f30:	47c0      	blx	r8
 8007f32:	3001      	adds	r0, #1
 8007f34:	d0e6      	beq.n	8007f04 <_printf_common+0xa4>
 8007f36:	3601      	adds	r6, #1
 8007f38:	e7d9      	b.n	8007eee <_printf_common+0x8e>
	...

08007f3c <_printf_i>:
 8007f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	460c      	mov	r4, r1
 8007f42:	4691      	mov	r9, r2
 8007f44:	7e27      	ldrb	r7, [r4, #24]
 8007f46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f48:	2f78      	cmp	r7, #120	; 0x78
 8007f4a:	4680      	mov	r8, r0
 8007f4c:	469a      	mov	sl, r3
 8007f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f52:	d807      	bhi.n	8007f64 <_printf_i+0x28>
 8007f54:	2f62      	cmp	r7, #98	; 0x62
 8007f56:	d80a      	bhi.n	8007f6e <_printf_i+0x32>
 8007f58:	2f00      	cmp	r7, #0
 8007f5a:	f000 80d8 	beq.w	800810e <_printf_i+0x1d2>
 8007f5e:	2f58      	cmp	r7, #88	; 0x58
 8007f60:	f000 80a3 	beq.w	80080aa <_printf_i+0x16e>
 8007f64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f6c:	e03a      	b.n	8007fe4 <_printf_i+0xa8>
 8007f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f72:	2b15      	cmp	r3, #21
 8007f74:	d8f6      	bhi.n	8007f64 <_printf_i+0x28>
 8007f76:	a001      	add	r0, pc, #4	; (adr r0, 8007f7c <_printf_i+0x40>)
 8007f78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007f7c:	08007fd5 	.word	0x08007fd5
 8007f80:	08007fe9 	.word	0x08007fe9
 8007f84:	08007f65 	.word	0x08007f65
 8007f88:	08007f65 	.word	0x08007f65
 8007f8c:	08007f65 	.word	0x08007f65
 8007f90:	08007f65 	.word	0x08007f65
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007f65 	.word	0x08007f65
 8007f9c:	08007f65 	.word	0x08007f65
 8007fa0:	08007f65 	.word	0x08007f65
 8007fa4:	08007f65 	.word	0x08007f65
 8007fa8:	080080f5 	.word	0x080080f5
 8007fac:	08008019 	.word	0x08008019
 8007fb0:	080080d7 	.word	0x080080d7
 8007fb4:	08007f65 	.word	0x08007f65
 8007fb8:	08007f65 	.word	0x08007f65
 8007fbc:	08008117 	.word	0x08008117
 8007fc0:	08007f65 	.word	0x08007f65
 8007fc4:	08008019 	.word	0x08008019
 8007fc8:	08007f65 	.word	0x08007f65
 8007fcc:	08007f65 	.word	0x08007f65
 8007fd0:	080080df 	.word	0x080080df
 8007fd4:	680b      	ldr	r3, [r1, #0]
 8007fd6:	1d1a      	adds	r2, r3, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	600a      	str	r2, [r1, #0]
 8007fdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e0a3      	b.n	8008130 <_printf_i+0x1f4>
 8007fe8:	6825      	ldr	r5, [r4, #0]
 8007fea:	6808      	ldr	r0, [r1, #0]
 8007fec:	062e      	lsls	r6, r5, #24
 8007fee:	f100 0304 	add.w	r3, r0, #4
 8007ff2:	d50a      	bpl.n	800800a <_printf_i+0xce>
 8007ff4:	6805      	ldr	r5, [r0, #0]
 8007ff6:	600b      	str	r3, [r1, #0]
 8007ff8:	2d00      	cmp	r5, #0
 8007ffa:	da03      	bge.n	8008004 <_printf_i+0xc8>
 8007ffc:	232d      	movs	r3, #45	; 0x2d
 8007ffe:	426d      	negs	r5, r5
 8008000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008004:	485e      	ldr	r0, [pc, #376]	; (8008180 <_printf_i+0x244>)
 8008006:	230a      	movs	r3, #10
 8008008:	e019      	b.n	800803e <_printf_i+0x102>
 800800a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800800e:	6805      	ldr	r5, [r0, #0]
 8008010:	600b      	str	r3, [r1, #0]
 8008012:	bf18      	it	ne
 8008014:	b22d      	sxthne	r5, r5
 8008016:	e7ef      	b.n	8007ff8 <_printf_i+0xbc>
 8008018:	680b      	ldr	r3, [r1, #0]
 800801a:	6825      	ldr	r5, [r4, #0]
 800801c:	1d18      	adds	r0, r3, #4
 800801e:	6008      	str	r0, [r1, #0]
 8008020:	0628      	lsls	r0, r5, #24
 8008022:	d501      	bpl.n	8008028 <_printf_i+0xec>
 8008024:	681d      	ldr	r5, [r3, #0]
 8008026:	e002      	b.n	800802e <_printf_i+0xf2>
 8008028:	0669      	lsls	r1, r5, #25
 800802a:	d5fb      	bpl.n	8008024 <_printf_i+0xe8>
 800802c:	881d      	ldrh	r5, [r3, #0]
 800802e:	4854      	ldr	r0, [pc, #336]	; (8008180 <_printf_i+0x244>)
 8008030:	2f6f      	cmp	r7, #111	; 0x6f
 8008032:	bf0c      	ite	eq
 8008034:	2308      	moveq	r3, #8
 8008036:	230a      	movne	r3, #10
 8008038:	2100      	movs	r1, #0
 800803a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800803e:	6866      	ldr	r6, [r4, #4]
 8008040:	60a6      	str	r6, [r4, #8]
 8008042:	2e00      	cmp	r6, #0
 8008044:	bfa2      	ittt	ge
 8008046:	6821      	ldrge	r1, [r4, #0]
 8008048:	f021 0104 	bicge.w	r1, r1, #4
 800804c:	6021      	strge	r1, [r4, #0]
 800804e:	b90d      	cbnz	r5, 8008054 <_printf_i+0x118>
 8008050:	2e00      	cmp	r6, #0
 8008052:	d04d      	beq.n	80080f0 <_printf_i+0x1b4>
 8008054:	4616      	mov	r6, r2
 8008056:	fbb5 f1f3 	udiv	r1, r5, r3
 800805a:	fb03 5711 	mls	r7, r3, r1, r5
 800805e:	5dc7      	ldrb	r7, [r0, r7]
 8008060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008064:	462f      	mov	r7, r5
 8008066:	42bb      	cmp	r3, r7
 8008068:	460d      	mov	r5, r1
 800806a:	d9f4      	bls.n	8008056 <_printf_i+0x11a>
 800806c:	2b08      	cmp	r3, #8
 800806e:	d10b      	bne.n	8008088 <_printf_i+0x14c>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	07df      	lsls	r7, r3, #31
 8008074:	d508      	bpl.n	8008088 <_printf_i+0x14c>
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	6861      	ldr	r1, [r4, #4]
 800807a:	4299      	cmp	r1, r3
 800807c:	bfde      	ittt	le
 800807e:	2330      	movle	r3, #48	; 0x30
 8008080:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008084:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008088:	1b92      	subs	r2, r2, r6
 800808a:	6122      	str	r2, [r4, #16]
 800808c:	f8cd a000 	str.w	sl, [sp]
 8008090:	464b      	mov	r3, r9
 8008092:	aa03      	add	r2, sp, #12
 8008094:	4621      	mov	r1, r4
 8008096:	4640      	mov	r0, r8
 8008098:	f7ff fee2 	bl	8007e60 <_printf_common>
 800809c:	3001      	adds	r0, #1
 800809e:	d14c      	bne.n	800813a <_printf_i+0x1fe>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a4:	b004      	add	sp, #16
 80080a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080aa:	4835      	ldr	r0, [pc, #212]	; (8008180 <_printf_i+0x244>)
 80080ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	680e      	ldr	r6, [r1, #0]
 80080b4:	061f      	lsls	r7, r3, #24
 80080b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80080ba:	600e      	str	r6, [r1, #0]
 80080bc:	d514      	bpl.n	80080e8 <_printf_i+0x1ac>
 80080be:	07d9      	lsls	r1, r3, #31
 80080c0:	bf44      	itt	mi
 80080c2:	f043 0320 	orrmi.w	r3, r3, #32
 80080c6:	6023      	strmi	r3, [r4, #0]
 80080c8:	b91d      	cbnz	r5, 80080d2 <_printf_i+0x196>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	f023 0320 	bic.w	r3, r3, #32
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	2310      	movs	r3, #16
 80080d4:	e7b0      	b.n	8008038 <_printf_i+0xfc>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	f043 0320 	orr.w	r3, r3, #32
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	2378      	movs	r3, #120	; 0x78
 80080e0:	4828      	ldr	r0, [pc, #160]	; (8008184 <_printf_i+0x248>)
 80080e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080e6:	e7e3      	b.n	80080b0 <_printf_i+0x174>
 80080e8:	065e      	lsls	r6, r3, #25
 80080ea:	bf48      	it	mi
 80080ec:	b2ad      	uxthmi	r5, r5
 80080ee:	e7e6      	b.n	80080be <_printf_i+0x182>
 80080f0:	4616      	mov	r6, r2
 80080f2:	e7bb      	b.n	800806c <_printf_i+0x130>
 80080f4:	680b      	ldr	r3, [r1, #0]
 80080f6:	6826      	ldr	r6, [r4, #0]
 80080f8:	6960      	ldr	r0, [r4, #20]
 80080fa:	1d1d      	adds	r5, r3, #4
 80080fc:	600d      	str	r5, [r1, #0]
 80080fe:	0635      	lsls	r5, r6, #24
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	d501      	bpl.n	8008108 <_printf_i+0x1cc>
 8008104:	6018      	str	r0, [r3, #0]
 8008106:	e002      	b.n	800810e <_printf_i+0x1d2>
 8008108:	0671      	lsls	r1, r6, #25
 800810a:	d5fb      	bpl.n	8008104 <_printf_i+0x1c8>
 800810c:	8018      	strh	r0, [r3, #0]
 800810e:	2300      	movs	r3, #0
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	4616      	mov	r6, r2
 8008114:	e7ba      	b.n	800808c <_printf_i+0x150>
 8008116:	680b      	ldr	r3, [r1, #0]
 8008118:	1d1a      	adds	r2, r3, #4
 800811a:	600a      	str	r2, [r1, #0]
 800811c:	681e      	ldr	r6, [r3, #0]
 800811e:	6862      	ldr	r2, [r4, #4]
 8008120:	2100      	movs	r1, #0
 8008122:	4630      	mov	r0, r6
 8008124:	f7f8 f884 	bl	8000230 <memchr>
 8008128:	b108      	cbz	r0, 800812e <_printf_i+0x1f2>
 800812a:	1b80      	subs	r0, r0, r6
 800812c:	6060      	str	r0, [r4, #4]
 800812e:	6863      	ldr	r3, [r4, #4]
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	2300      	movs	r3, #0
 8008134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008138:	e7a8      	b.n	800808c <_printf_i+0x150>
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	4632      	mov	r2, r6
 800813e:	4649      	mov	r1, r9
 8008140:	4640      	mov	r0, r8
 8008142:	47d0      	blx	sl
 8008144:	3001      	adds	r0, #1
 8008146:	d0ab      	beq.n	80080a0 <_printf_i+0x164>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	079b      	lsls	r3, r3, #30
 800814c:	d413      	bmi.n	8008176 <_printf_i+0x23a>
 800814e:	68e0      	ldr	r0, [r4, #12]
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	4298      	cmp	r0, r3
 8008154:	bfb8      	it	lt
 8008156:	4618      	movlt	r0, r3
 8008158:	e7a4      	b.n	80080a4 <_printf_i+0x168>
 800815a:	2301      	movs	r3, #1
 800815c:	4632      	mov	r2, r6
 800815e:	4649      	mov	r1, r9
 8008160:	4640      	mov	r0, r8
 8008162:	47d0      	blx	sl
 8008164:	3001      	adds	r0, #1
 8008166:	d09b      	beq.n	80080a0 <_printf_i+0x164>
 8008168:	3501      	adds	r5, #1
 800816a:	68e3      	ldr	r3, [r4, #12]
 800816c:	9903      	ldr	r1, [sp, #12]
 800816e:	1a5b      	subs	r3, r3, r1
 8008170:	42ab      	cmp	r3, r5
 8008172:	dcf2      	bgt.n	800815a <_printf_i+0x21e>
 8008174:	e7eb      	b.n	800814e <_printf_i+0x212>
 8008176:	2500      	movs	r5, #0
 8008178:	f104 0619 	add.w	r6, r4, #25
 800817c:	e7f5      	b.n	800816a <_printf_i+0x22e>
 800817e:	bf00      	nop
 8008180:	0800aa42 	.word	0x0800aa42
 8008184:	0800aa53 	.word	0x0800aa53

08008188 <iprintf>:
 8008188:	b40f      	push	{r0, r1, r2, r3}
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <iprintf+0x2c>)
 800818c:	b513      	push	{r0, r1, r4, lr}
 800818e:	681c      	ldr	r4, [r3, #0]
 8008190:	b124      	cbz	r4, 800819c <iprintf+0x14>
 8008192:	69a3      	ldr	r3, [r4, #24]
 8008194:	b913      	cbnz	r3, 800819c <iprintf+0x14>
 8008196:	4620      	mov	r0, r4
 8008198:	f001 f91c 	bl	80093d4 <__sinit>
 800819c:	ab05      	add	r3, sp, #20
 800819e:	9a04      	ldr	r2, [sp, #16]
 80081a0:	68a1      	ldr	r1, [r4, #8]
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	4620      	mov	r0, r4
 80081a6:	f001 ff4b 	bl	800a040 <_vfiprintf_r>
 80081aa:	b002      	add	sp, #8
 80081ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b0:	b004      	add	sp, #16
 80081b2:	4770      	bx	lr
 80081b4:	2000000c 	.word	0x2000000c

080081b8 <putchar>:
 80081b8:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <putchar+0x28>)
 80081ba:	b513      	push	{r0, r1, r4, lr}
 80081bc:	681c      	ldr	r4, [r3, #0]
 80081be:	4601      	mov	r1, r0
 80081c0:	b134      	cbz	r4, 80081d0 <putchar+0x18>
 80081c2:	69a3      	ldr	r3, [r4, #24]
 80081c4:	b923      	cbnz	r3, 80081d0 <putchar+0x18>
 80081c6:	9001      	str	r0, [sp, #4]
 80081c8:	4620      	mov	r0, r4
 80081ca:	f001 f903 	bl	80093d4 <__sinit>
 80081ce:	9901      	ldr	r1, [sp, #4]
 80081d0:	68a2      	ldr	r2, [r4, #8]
 80081d2:	4620      	mov	r0, r4
 80081d4:	b002      	add	sp, #8
 80081d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081da:	f002 b861 	b.w	800a2a0 <_putc_r>
 80081de:	bf00      	nop
 80081e0:	2000000c 	.word	0x2000000c

080081e4 <_puts_r>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	460e      	mov	r6, r1
 80081e8:	4605      	mov	r5, r0
 80081ea:	b118      	cbz	r0, 80081f4 <_puts_r+0x10>
 80081ec:	6983      	ldr	r3, [r0, #24]
 80081ee:	b90b      	cbnz	r3, 80081f4 <_puts_r+0x10>
 80081f0:	f001 f8f0 	bl	80093d4 <__sinit>
 80081f4:	69ab      	ldr	r3, [r5, #24]
 80081f6:	68ac      	ldr	r4, [r5, #8]
 80081f8:	b913      	cbnz	r3, 8008200 <_puts_r+0x1c>
 80081fa:	4628      	mov	r0, r5
 80081fc:	f001 f8ea 	bl	80093d4 <__sinit>
 8008200:	4b2c      	ldr	r3, [pc, #176]	; (80082b4 <_puts_r+0xd0>)
 8008202:	429c      	cmp	r4, r3
 8008204:	d120      	bne.n	8008248 <_puts_r+0x64>
 8008206:	686c      	ldr	r4, [r5, #4]
 8008208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800820a:	07db      	lsls	r3, r3, #31
 800820c:	d405      	bmi.n	800821a <_puts_r+0x36>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	0598      	lsls	r0, r3, #22
 8008212:	d402      	bmi.n	800821a <_puts_r+0x36>
 8008214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008216:	f001 f980 	bl	800951a <__retarget_lock_acquire_recursive>
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	0719      	lsls	r1, r3, #28
 800821e:	d51d      	bpl.n	800825c <_puts_r+0x78>
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	b1db      	cbz	r3, 800825c <_puts_r+0x78>
 8008224:	3e01      	subs	r6, #1
 8008226:	68a3      	ldr	r3, [r4, #8]
 8008228:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800822c:	3b01      	subs	r3, #1
 800822e:	60a3      	str	r3, [r4, #8]
 8008230:	bb39      	cbnz	r1, 8008282 <_puts_r+0x9e>
 8008232:	2b00      	cmp	r3, #0
 8008234:	da38      	bge.n	80082a8 <_puts_r+0xc4>
 8008236:	4622      	mov	r2, r4
 8008238:	210a      	movs	r1, #10
 800823a:	4628      	mov	r0, r5
 800823c:	f000 f878 	bl	8008330 <__swbuf_r>
 8008240:	3001      	adds	r0, #1
 8008242:	d011      	beq.n	8008268 <_puts_r+0x84>
 8008244:	250a      	movs	r5, #10
 8008246:	e011      	b.n	800826c <_puts_r+0x88>
 8008248:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <_puts_r+0xd4>)
 800824a:	429c      	cmp	r4, r3
 800824c:	d101      	bne.n	8008252 <_puts_r+0x6e>
 800824e:	68ac      	ldr	r4, [r5, #8]
 8008250:	e7da      	b.n	8008208 <_puts_r+0x24>
 8008252:	4b1a      	ldr	r3, [pc, #104]	; (80082bc <_puts_r+0xd8>)
 8008254:	429c      	cmp	r4, r3
 8008256:	bf08      	it	eq
 8008258:	68ec      	ldreq	r4, [r5, #12]
 800825a:	e7d5      	b.n	8008208 <_puts_r+0x24>
 800825c:	4621      	mov	r1, r4
 800825e:	4628      	mov	r0, r5
 8008260:	f000 f8b8 	bl	80083d4 <__swsetup_r>
 8008264:	2800      	cmp	r0, #0
 8008266:	d0dd      	beq.n	8008224 <_puts_r+0x40>
 8008268:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800826c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800826e:	07da      	lsls	r2, r3, #31
 8008270:	d405      	bmi.n	800827e <_puts_r+0x9a>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	059b      	lsls	r3, r3, #22
 8008276:	d402      	bmi.n	800827e <_puts_r+0x9a>
 8008278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827a:	f001 f94f 	bl	800951c <__retarget_lock_release_recursive>
 800827e:	4628      	mov	r0, r5
 8008280:	bd70      	pop	{r4, r5, r6, pc}
 8008282:	2b00      	cmp	r3, #0
 8008284:	da04      	bge.n	8008290 <_puts_r+0xac>
 8008286:	69a2      	ldr	r2, [r4, #24]
 8008288:	429a      	cmp	r2, r3
 800828a:	dc06      	bgt.n	800829a <_puts_r+0xb6>
 800828c:	290a      	cmp	r1, #10
 800828e:	d004      	beq.n	800829a <_puts_r+0xb6>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	7019      	strb	r1, [r3, #0]
 8008298:	e7c5      	b.n	8008226 <_puts_r+0x42>
 800829a:	4622      	mov	r2, r4
 800829c:	4628      	mov	r0, r5
 800829e:	f000 f847 	bl	8008330 <__swbuf_r>
 80082a2:	3001      	adds	r0, #1
 80082a4:	d1bf      	bne.n	8008226 <_puts_r+0x42>
 80082a6:	e7df      	b.n	8008268 <_puts_r+0x84>
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	250a      	movs	r5, #10
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	6022      	str	r2, [r4, #0]
 80082b0:	701d      	strb	r5, [r3, #0]
 80082b2:	e7db      	b.n	800826c <_puts_r+0x88>
 80082b4:	0800ab18 	.word	0x0800ab18
 80082b8:	0800ab38 	.word	0x0800ab38
 80082bc:	0800aaf8 	.word	0x0800aaf8

080082c0 <puts>:
 80082c0:	4b02      	ldr	r3, [pc, #8]	; (80082cc <puts+0xc>)
 80082c2:	4601      	mov	r1, r0
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	f7ff bf8d 	b.w	80081e4 <_puts_r>
 80082ca:	bf00      	nop
 80082cc:	2000000c 	.word	0x2000000c

080082d0 <_sbrk_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d06      	ldr	r5, [pc, #24]	; (80082ec <_sbrk_r+0x1c>)
 80082d4:	2300      	movs	r3, #0
 80082d6:	4604      	mov	r4, r0
 80082d8:	4608      	mov	r0, r1
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	f7fa fb08 	bl	80028f0 <_sbrk>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_sbrk_r+0x1a>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_sbrk_r+0x1a>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	20000460 	.word	0x20000460

080082f0 <_vsiprintf_r>:
 80082f0:	b500      	push	{lr}
 80082f2:	b09b      	sub	sp, #108	; 0x6c
 80082f4:	9100      	str	r1, [sp, #0]
 80082f6:	9104      	str	r1, [sp, #16]
 80082f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082fc:	9105      	str	r1, [sp, #20]
 80082fe:	9102      	str	r1, [sp, #8]
 8008300:	4905      	ldr	r1, [pc, #20]	; (8008318 <_vsiprintf_r+0x28>)
 8008302:	9103      	str	r1, [sp, #12]
 8008304:	4669      	mov	r1, sp
 8008306:	f001 fd71 	bl	8009dec <_svfiprintf_r>
 800830a:	9b00      	ldr	r3, [sp, #0]
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	b01b      	add	sp, #108	; 0x6c
 8008312:	f85d fb04 	ldr.w	pc, [sp], #4
 8008316:	bf00      	nop
 8008318:	ffff0208 	.word	0xffff0208

0800831c <vsiprintf>:
 800831c:	4613      	mov	r3, r2
 800831e:	460a      	mov	r2, r1
 8008320:	4601      	mov	r1, r0
 8008322:	4802      	ldr	r0, [pc, #8]	; (800832c <vsiprintf+0x10>)
 8008324:	6800      	ldr	r0, [r0, #0]
 8008326:	f7ff bfe3 	b.w	80082f0 <_vsiprintf_r>
 800832a:	bf00      	nop
 800832c:	2000000c 	.word	0x2000000c

08008330 <__swbuf_r>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	460e      	mov	r6, r1
 8008334:	4614      	mov	r4, r2
 8008336:	4605      	mov	r5, r0
 8008338:	b118      	cbz	r0, 8008342 <__swbuf_r+0x12>
 800833a:	6983      	ldr	r3, [r0, #24]
 800833c:	b90b      	cbnz	r3, 8008342 <__swbuf_r+0x12>
 800833e:	f001 f849 	bl	80093d4 <__sinit>
 8008342:	4b21      	ldr	r3, [pc, #132]	; (80083c8 <__swbuf_r+0x98>)
 8008344:	429c      	cmp	r4, r3
 8008346:	d12b      	bne.n	80083a0 <__swbuf_r+0x70>
 8008348:	686c      	ldr	r4, [r5, #4]
 800834a:	69a3      	ldr	r3, [r4, #24]
 800834c:	60a3      	str	r3, [r4, #8]
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	071a      	lsls	r2, r3, #28
 8008352:	d52f      	bpl.n	80083b4 <__swbuf_r+0x84>
 8008354:	6923      	ldr	r3, [r4, #16]
 8008356:	b36b      	cbz	r3, 80083b4 <__swbuf_r+0x84>
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	6820      	ldr	r0, [r4, #0]
 800835c:	1ac0      	subs	r0, r0, r3
 800835e:	6963      	ldr	r3, [r4, #20]
 8008360:	b2f6      	uxtb	r6, r6
 8008362:	4283      	cmp	r3, r0
 8008364:	4637      	mov	r7, r6
 8008366:	dc04      	bgt.n	8008372 <__swbuf_r+0x42>
 8008368:	4621      	mov	r1, r4
 800836a:	4628      	mov	r0, r5
 800836c:	f000 ff9e 	bl	80092ac <_fflush_r>
 8008370:	bb30      	cbnz	r0, 80083c0 <__swbuf_r+0x90>
 8008372:	68a3      	ldr	r3, [r4, #8]
 8008374:	3b01      	subs	r3, #1
 8008376:	60a3      	str	r3, [r4, #8]
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	6022      	str	r2, [r4, #0]
 800837e:	701e      	strb	r6, [r3, #0]
 8008380:	6963      	ldr	r3, [r4, #20]
 8008382:	3001      	adds	r0, #1
 8008384:	4283      	cmp	r3, r0
 8008386:	d004      	beq.n	8008392 <__swbuf_r+0x62>
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	07db      	lsls	r3, r3, #31
 800838c:	d506      	bpl.n	800839c <__swbuf_r+0x6c>
 800838e:	2e0a      	cmp	r6, #10
 8008390:	d104      	bne.n	800839c <__swbuf_r+0x6c>
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	f000 ff89 	bl	80092ac <_fflush_r>
 800839a:	b988      	cbnz	r0, 80083c0 <__swbuf_r+0x90>
 800839c:	4638      	mov	r0, r7
 800839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <__swbuf_r+0x9c>)
 80083a2:	429c      	cmp	r4, r3
 80083a4:	d101      	bne.n	80083aa <__swbuf_r+0x7a>
 80083a6:	68ac      	ldr	r4, [r5, #8]
 80083a8:	e7cf      	b.n	800834a <__swbuf_r+0x1a>
 80083aa:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <__swbuf_r+0xa0>)
 80083ac:	429c      	cmp	r4, r3
 80083ae:	bf08      	it	eq
 80083b0:	68ec      	ldreq	r4, [r5, #12]
 80083b2:	e7ca      	b.n	800834a <__swbuf_r+0x1a>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4628      	mov	r0, r5
 80083b8:	f000 f80c 	bl	80083d4 <__swsetup_r>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d0cb      	beq.n	8008358 <__swbuf_r+0x28>
 80083c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80083c4:	e7ea      	b.n	800839c <__swbuf_r+0x6c>
 80083c6:	bf00      	nop
 80083c8:	0800ab18 	.word	0x0800ab18
 80083cc:	0800ab38 	.word	0x0800ab38
 80083d0:	0800aaf8 	.word	0x0800aaf8

080083d4 <__swsetup_r>:
 80083d4:	4b32      	ldr	r3, [pc, #200]	; (80084a0 <__swsetup_r+0xcc>)
 80083d6:	b570      	push	{r4, r5, r6, lr}
 80083d8:	681d      	ldr	r5, [r3, #0]
 80083da:	4606      	mov	r6, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	b125      	cbz	r5, 80083ea <__swsetup_r+0x16>
 80083e0:	69ab      	ldr	r3, [r5, #24]
 80083e2:	b913      	cbnz	r3, 80083ea <__swsetup_r+0x16>
 80083e4:	4628      	mov	r0, r5
 80083e6:	f000 fff5 	bl	80093d4 <__sinit>
 80083ea:	4b2e      	ldr	r3, [pc, #184]	; (80084a4 <__swsetup_r+0xd0>)
 80083ec:	429c      	cmp	r4, r3
 80083ee:	d10f      	bne.n	8008410 <__swsetup_r+0x3c>
 80083f0:	686c      	ldr	r4, [r5, #4]
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083f8:	0719      	lsls	r1, r3, #28
 80083fa:	d42c      	bmi.n	8008456 <__swsetup_r+0x82>
 80083fc:	06dd      	lsls	r5, r3, #27
 80083fe:	d411      	bmi.n	8008424 <__swsetup_r+0x50>
 8008400:	2309      	movs	r3, #9
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008408:	81a3      	strh	r3, [r4, #12]
 800840a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800840e:	e03e      	b.n	800848e <__swsetup_r+0xba>
 8008410:	4b25      	ldr	r3, [pc, #148]	; (80084a8 <__swsetup_r+0xd4>)
 8008412:	429c      	cmp	r4, r3
 8008414:	d101      	bne.n	800841a <__swsetup_r+0x46>
 8008416:	68ac      	ldr	r4, [r5, #8]
 8008418:	e7eb      	b.n	80083f2 <__swsetup_r+0x1e>
 800841a:	4b24      	ldr	r3, [pc, #144]	; (80084ac <__swsetup_r+0xd8>)
 800841c:	429c      	cmp	r4, r3
 800841e:	bf08      	it	eq
 8008420:	68ec      	ldreq	r4, [r5, #12]
 8008422:	e7e6      	b.n	80083f2 <__swsetup_r+0x1e>
 8008424:	0758      	lsls	r0, r3, #29
 8008426:	d512      	bpl.n	800844e <__swsetup_r+0x7a>
 8008428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800842a:	b141      	cbz	r1, 800843e <__swsetup_r+0x6a>
 800842c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008430:	4299      	cmp	r1, r3
 8008432:	d002      	beq.n	800843a <__swsetup_r+0x66>
 8008434:	4630      	mov	r0, r6
 8008436:	f7ff f993 	bl	8007760 <_free_r>
 800843a:	2300      	movs	r3, #0
 800843c:	6363      	str	r3, [r4, #52]	; 0x34
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	2300      	movs	r3, #0
 8008448:	6063      	str	r3, [r4, #4]
 800844a:	6923      	ldr	r3, [r4, #16]
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	f043 0308 	orr.w	r3, r3, #8
 8008454:	81a3      	strh	r3, [r4, #12]
 8008456:	6923      	ldr	r3, [r4, #16]
 8008458:	b94b      	cbnz	r3, 800846e <__swsetup_r+0x9a>
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008464:	d003      	beq.n	800846e <__swsetup_r+0x9a>
 8008466:	4621      	mov	r1, r4
 8008468:	4630      	mov	r0, r6
 800846a:	f001 f87d 	bl	8009568 <__smakebuf_r>
 800846e:	89a0      	ldrh	r0, [r4, #12]
 8008470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008474:	f010 0301 	ands.w	r3, r0, #1
 8008478:	d00a      	beq.n	8008490 <__swsetup_r+0xbc>
 800847a:	2300      	movs	r3, #0
 800847c:	60a3      	str	r3, [r4, #8]
 800847e:	6963      	ldr	r3, [r4, #20]
 8008480:	425b      	negs	r3, r3
 8008482:	61a3      	str	r3, [r4, #24]
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	b943      	cbnz	r3, 800849a <__swsetup_r+0xc6>
 8008488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800848c:	d1ba      	bne.n	8008404 <__swsetup_r+0x30>
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	0781      	lsls	r1, r0, #30
 8008492:	bf58      	it	pl
 8008494:	6963      	ldrpl	r3, [r4, #20]
 8008496:	60a3      	str	r3, [r4, #8]
 8008498:	e7f4      	b.n	8008484 <__swsetup_r+0xb0>
 800849a:	2000      	movs	r0, #0
 800849c:	e7f7      	b.n	800848e <__swsetup_r+0xba>
 800849e:	bf00      	nop
 80084a0:	2000000c 	.word	0x2000000c
 80084a4:	0800ab18 	.word	0x0800ab18
 80084a8:	0800ab38 	.word	0x0800ab38
 80084ac:	0800aaf8 	.word	0x0800aaf8

080084b0 <quorem>:
 80084b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	6903      	ldr	r3, [r0, #16]
 80084b6:	690c      	ldr	r4, [r1, #16]
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	4607      	mov	r7, r0
 80084bc:	f2c0 8081 	blt.w	80085c2 <quorem+0x112>
 80084c0:	3c01      	subs	r4, #1
 80084c2:	f101 0814 	add.w	r8, r1, #20
 80084c6:	f100 0514 	add.w	r5, r0, #20
 80084ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084d8:	3301      	adds	r3, #1
 80084da:	429a      	cmp	r2, r3
 80084dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80084e8:	d331      	bcc.n	800854e <quorem+0x9e>
 80084ea:	f04f 0e00 	mov.w	lr, #0
 80084ee:	4640      	mov	r0, r8
 80084f0:	46ac      	mov	ip, r5
 80084f2:	46f2      	mov	sl, lr
 80084f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80084f8:	b293      	uxth	r3, r2
 80084fa:	fb06 e303 	mla	r3, r6, r3, lr
 80084fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008502:	b29b      	uxth	r3, r3
 8008504:	ebaa 0303 	sub.w	r3, sl, r3
 8008508:	0c12      	lsrs	r2, r2, #16
 800850a:	f8dc a000 	ldr.w	sl, [ip]
 800850e:	fb06 e202 	mla	r2, r6, r2, lr
 8008512:	fa13 f38a 	uxtah	r3, r3, sl
 8008516:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800851a:	fa1f fa82 	uxth.w	sl, r2
 800851e:	f8dc 2000 	ldr.w	r2, [ip]
 8008522:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008526:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800852a:	b29b      	uxth	r3, r3
 800852c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008530:	4581      	cmp	r9, r0
 8008532:	f84c 3b04 	str.w	r3, [ip], #4
 8008536:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800853a:	d2db      	bcs.n	80084f4 <quorem+0x44>
 800853c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008540:	b92b      	cbnz	r3, 800854e <quorem+0x9e>
 8008542:	9b01      	ldr	r3, [sp, #4]
 8008544:	3b04      	subs	r3, #4
 8008546:	429d      	cmp	r5, r3
 8008548:	461a      	mov	r2, r3
 800854a:	d32e      	bcc.n	80085aa <quorem+0xfa>
 800854c:	613c      	str	r4, [r7, #16]
 800854e:	4638      	mov	r0, r7
 8008550:	f001 fae2 	bl	8009b18 <__mcmp>
 8008554:	2800      	cmp	r0, #0
 8008556:	db24      	blt.n	80085a2 <quorem+0xf2>
 8008558:	3601      	adds	r6, #1
 800855a:	4628      	mov	r0, r5
 800855c:	f04f 0c00 	mov.w	ip, #0
 8008560:	f858 2b04 	ldr.w	r2, [r8], #4
 8008564:	f8d0 e000 	ldr.w	lr, [r0]
 8008568:	b293      	uxth	r3, r2
 800856a:	ebac 0303 	sub.w	r3, ip, r3
 800856e:	0c12      	lsrs	r2, r2, #16
 8008570:	fa13 f38e 	uxtah	r3, r3, lr
 8008574:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800857c:	b29b      	uxth	r3, r3
 800857e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008582:	45c1      	cmp	r9, r8
 8008584:	f840 3b04 	str.w	r3, [r0], #4
 8008588:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800858c:	d2e8      	bcs.n	8008560 <quorem+0xb0>
 800858e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008596:	b922      	cbnz	r2, 80085a2 <quorem+0xf2>
 8008598:	3b04      	subs	r3, #4
 800859a:	429d      	cmp	r5, r3
 800859c:	461a      	mov	r2, r3
 800859e:	d30a      	bcc.n	80085b6 <quorem+0x106>
 80085a0:	613c      	str	r4, [r7, #16]
 80085a2:	4630      	mov	r0, r6
 80085a4:	b003      	add	sp, #12
 80085a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085aa:	6812      	ldr	r2, [r2, #0]
 80085ac:	3b04      	subs	r3, #4
 80085ae:	2a00      	cmp	r2, #0
 80085b0:	d1cc      	bne.n	800854c <quorem+0x9c>
 80085b2:	3c01      	subs	r4, #1
 80085b4:	e7c7      	b.n	8008546 <quorem+0x96>
 80085b6:	6812      	ldr	r2, [r2, #0]
 80085b8:	3b04      	subs	r3, #4
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	d1f0      	bne.n	80085a0 <quorem+0xf0>
 80085be:	3c01      	subs	r4, #1
 80085c0:	e7eb      	b.n	800859a <quorem+0xea>
 80085c2:	2000      	movs	r0, #0
 80085c4:	e7ee      	b.n	80085a4 <quorem+0xf4>
	...

080085c8 <_dtoa_r>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	ed2d 8b02 	vpush	{d8}
 80085d0:	ec57 6b10 	vmov	r6, r7, d0
 80085d4:	b095      	sub	sp, #84	; 0x54
 80085d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085dc:	9105      	str	r1, [sp, #20]
 80085de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80085e2:	4604      	mov	r4, r0
 80085e4:	9209      	str	r2, [sp, #36]	; 0x24
 80085e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085e8:	b975      	cbnz	r5, 8008608 <_dtoa_r+0x40>
 80085ea:	2010      	movs	r0, #16
 80085ec:	f7ff f8a8 	bl	8007740 <malloc>
 80085f0:	4602      	mov	r2, r0
 80085f2:	6260      	str	r0, [r4, #36]	; 0x24
 80085f4:	b920      	cbnz	r0, 8008600 <_dtoa_r+0x38>
 80085f6:	4bb2      	ldr	r3, [pc, #712]	; (80088c0 <_dtoa_r+0x2f8>)
 80085f8:	21ea      	movs	r1, #234	; 0xea
 80085fa:	48b2      	ldr	r0, [pc, #712]	; (80088c4 <_dtoa_r+0x2fc>)
 80085fc:	f001 feee 	bl	800a3dc <__assert_func>
 8008600:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008604:	6005      	str	r5, [r0, #0]
 8008606:	60c5      	str	r5, [r0, #12]
 8008608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800860a:	6819      	ldr	r1, [r3, #0]
 800860c:	b151      	cbz	r1, 8008624 <_dtoa_r+0x5c>
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	604a      	str	r2, [r1, #4]
 8008612:	2301      	movs	r3, #1
 8008614:	4093      	lsls	r3, r2
 8008616:	608b      	str	r3, [r1, #8]
 8008618:	4620      	mov	r0, r4
 800861a:	f001 f83f 	bl	800969c <_Bfree>
 800861e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	1e3b      	subs	r3, r7, #0
 8008626:	bfb9      	ittee	lt
 8008628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800862c:	9303      	strlt	r3, [sp, #12]
 800862e:	2300      	movge	r3, #0
 8008630:	f8c8 3000 	strge.w	r3, [r8]
 8008634:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008638:	4ba3      	ldr	r3, [pc, #652]	; (80088c8 <_dtoa_r+0x300>)
 800863a:	bfbc      	itt	lt
 800863c:	2201      	movlt	r2, #1
 800863e:	f8c8 2000 	strlt.w	r2, [r8]
 8008642:	ea33 0309 	bics.w	r3, r3, r9
 8008646:	d11b      	bne.n	8008680 <_dtoa_r+0xb8>
 8008648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800864a:	f242 730f 	movw	r3, #9999	; 0x270f
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008654:	4333      	orrs	r3, r6
 8008656:	f000 857a 	beq.w	800914e <_dtoa_r+0xb86>
 800865a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800865c:	b963      	cbnz	r3, 8008678 <_dtoa_r+0xb0>
 800865e:	4b9b      	ldr	r3, [pc, #620]	; (80088cc <_dtoa_r+0x304>)
 8008660:	e024      	b.n	80086ac <_dtoa_r+0xe4>
 8008662:	4b9b      	ldr	r3, [pc, #620]	; (80088d0 <_dtoa_r+0x308>)
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	3308      	adds	r3, #8
 8008668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	9800      	ldr	r0, [sp, #0]
 800866e:	b015      	add	sp, #84	; 0x54
 8008670:	ecbd 8b02 	vpop	{d8}
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	4b94      	ldr	r3, [pc, #592]	; (80088cc <_dtoa_r+0x304>)
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	3303      	adds	r3, #3
 800867e:	e7f3      	b.n	8008668 <_dtoa_r+0xa0>
 8008680:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	ec51 0b17 	vmov	r0, r1, d7
 800868a:	2300      	movs	r3, #0
 800868c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008690:	f7f8 fa42 	bl	8000b18 <__aeabi_dcmpeq>
 8008694:	4680      	mov	r8, r0
 8008696:	b158      	cbz	r0, 80086b0 <_dtoa_r+0xe8>
 8008698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800869a:	2301      	movs	r3, #1
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8551 	beq.w	8009148 <_dtoa_r+0xb80>
 80086a6:	488b      	ldr	r0, [pc, #556]	; (80088d4 <_dtoa_r+0x30c>)
 80086a8:	6018      	str	r0, [r3, #0]
 80086aa:	1e43      	subs	r3, r0, #1
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	e7dd      	b.n	800866c <_dtoa_r+0xa4>
 80086b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80086b4:	aa12      	add	r2, sp, #72	; 0x48
 80086b6:	a913      	add	r1, sp, #76	; 0x4c
 80086b8:	4620      	mov	r0, r4
 80086ba:	f001 fad1 	bl	8009c60 <__d2b>
 80086be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086c2:	4683      	mov	fp, r0
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	d07c      	beq.n	80087c2 <_dtoa_r+0x1fa>
 80086c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80086ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80086d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80086da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80086de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086e2:	4b7d      	ldr	r3, [pc, #500]	; (80088d8 <_dtoa_r+0x310>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	4630      	mov	r0, r6
 80086e8:	4639      	mov	r1, r7
 80086ea:	f7f7 fdf5 	bl	80002d8 <__aeabi_dsub>
 80086ee:	a36e      	add	r3, pc, #440	; (adr r3, 80088a8 <_dtoa_r+0x2e0>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 ffa8 	bl	8000648 <__aeabi_dmul>
 80086f8:	a36d      	add	r3, pc, #436	; (adr r3, 80088b0 <_dtoa_r+0x2e8>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 fded 	bl	80002dc <__adddf3>
 8008702:	4606      	mov	r6, r0
 8008704:	4628      	mov	r0, r5
 8008706:	460f      	mov	r7, r1
 8008708:	f7f7 ff34 	bl	8000574 <__aeabi_i2d>
 800870c:	a36a      	add	r3, pc, #424	; (adr r3, 80088b8 <_dtoa_r+0x2f0>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f7 ff99 	bl	8000648 <__aeabi_dmul>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4630      	mov	r0, r6
 800871c:	4639      	mov	r1, r7
 800871e:	f7f7 fddd 	bl	80002dc <__adddf3>
 8008722:	4606      	mov	r6, r0
 8008724:	460f      	mov	r7, r1
 8008726:	f7f8 fa3f 	bl	8000ba8 <__aeabi_d2iz>
 800872a:	2200      	movs	r2, #0
 800872c:	4682      	mov	sl, r0
 800872e:	2300      	movs	r3, #0
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f8 f9fa 	bl	8000b2c <__aeabi_dcmplt>
 8008738:	b148      	cbz	r0, 800874e <_dtoa_r+0x186>
 800873a:	4650      	mov	r0, sl
 800873c:	f7f7 ff1a 	bl	8000574 <__aeabi_i2d>
 8008740:	4632      	mov	r2, r6
 8008742:	463b      	mov	r3, r7
 8008744:	f7f8 f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 8008748:	b908      	cbnz	r0, 800874e <_dtoa_r+0x186>
 800874a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800874e:	f1ba 0f16 	cmp.w	sl, #22
 8008752:	d854      	bhi.n	80087fe <_dtoa_r+0x236>
 8008754:	4b61      	ldr	r3, [pc, #388]	; (80088dc <_dtoa_r+0x314>)
 8008756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008762:	f7f8 f9e3 	bl	8000b2c <__aeabi_dcmplt>
 8008766:	2800      	cmp	r0, #0
 8008768:	d04b      	beq.n	8008802 <_dtoa_r+0x23a>
 800876a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800876e:	2300      	movs	r3, #0
 8008770:	930e      	str	r3, [sp, #56]	; 0x38
 8008772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008774:	1b5d      	subs	r5, r3, r5
 8008776:	1e6b      	subs	r3, r5, #1
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	bf43      	ittte	mi
 800877c:	2300      	movmi	r3, #0
 800877e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008782:	9304      	strmi	r3, [sp, #16]
 8008784:	f04f 0800 	movpl.w	r8, #0
 8008788:	f1ba 0f00 	cmp.w	sl, #0
 800878c:	db3b      	blt.n	8008806 <_dtoa_r+0x23e>
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008794:	4453      	add	r3, sl
 8008796:	9304      	str	r3, [sp, #16]
 8008798:	2300      	movs	r3, #0
 800879a:	9306      	str	r3, [sp, #24]
 800879c:	9b05      	ldr	r3, [sp, #20]
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d869      	bhi.n	8008876 <_dtoa_r+0x2ae>
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	bfc4      	itt	gt
 80087a6:	3b04      	subgt	r3, #4
 80087a8:	9305      	strgt	r3, [sp, #20]
 80087aa:	9b05      	ldr	r3, [sp, #20]
 80087ac:	f1a3 0302 	sub.w	r3, r3, #2
 80087b0:	bfcc      	ite	gt
 80087b2:	2500      	movgt	r5, #0
 80087b4:	2501      	movle	r5, #1
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d869      	bhi.n	800888e <_dtoa_r+0x2c6>
 80087ba:	e8df f003 	tbb	[pc, r3]
 80087be:	4e2c      	.short	0x4e2c
 80087c0:	5a4c      	.short	0x5a4c
 80087c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80087c6:	441d      	add	r5, r3
 80087c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	bfc1      	itttt	gt
 80087d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80087d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80087dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80087e0:	bfda      	itte	le
 80087e2:	f1c3 0320 	rsble	r3, r3, #32
 80087e6:	fa06 f003 	lslle.w	r0, r6, r3
 80087ea:	4318      	orrgt	r0, r3
 80087ec:	f7f7 feb2 	bl	8000554 <__aeabi_ui2d>
 80087f0:	2301      	movs	r3, #1
 80087f2:	4606      	mov	r6, r0
 80087f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80087f8:	3d01      	subs	r5, #1
 80087fa:	9310      	str	r3, [sp, #64]	; 0x40
 80087fc:	e771      	b.n	80086e2 <_dtoa_r+0x11a>
 80087fe:	2301      	movs	r3, #1
 8008800:	e7b6      	b.n	8008770 <_dtoa_r+0x1a8>
 8008802:	900e      	str	r0, [sp, #56]	; 0x38
 8008804:	e7b5      	b.n	8008772 <_dtoa_r+0x1aa>
 8008806:	f1ca 0300 	rsb	r3, sl, #0
 800880a:	9306      	str	r3, [sp, #24]
 800880c:	2300      	movs	r3, #0
 800880e:	eba8 080a 	sub.w	r8, r8, sl
 8008812:	930d      	str	r3, [sp, #52]	; 0x34
 8008814:	e7c2      	b.n	800879c <_dtoa_r+0x1d4>
 8008816:	2300      	movs	r3, #0
 8008818:	9308      	str	r3, [sp, #32]
 800881a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881c:	2b00      	cmp	r3, #0
 800881e:	dc39      	bgt.n	8008894 <_dtoa_r+0x2cc>
 8008820:	f04f 0901 	mov.w	r9, #1
 8008824:	f8cd 9004 	str.w	r9, [sp, #4]
 8008828:	464b      	mov	r3, r9
 800882a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800882e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008830:	2200      	movs	r2, #0
 8008832:	6042      	str	r2, [r0, #4]
 8008834:	2204      	movs	r2, #4
 8008836:	f102 0614 	add.w	r6, r2, #20
 800883a:	429e      	cmp	r6, r3
 800883c:	6841      	ldr	r1, [r0, #4]
 800883e:	d92f      	bls.n	80088a0 <_dtoa_r+0x2d8>
 8008840:	4620      	mov	r0, r4
 8008842:	f000 feeb 	bl	800961c <_Balloc>
 8008846:	9000      	str	r0, [sp, #0]
 8008848:	2800      	cmp	r0, #0
 800884a:	d14b      	bne.n	80088e4 <_dtoa_r+0x31c>
 800884c:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <_dtoa_r+0x318>)
 800884e:	4602      	mov	r2, r0
 8008850:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008854:	e6d1      	b.n	80085fa <_dtoa_r+0x32>
 8008856:	2301      	movs	r3, #1
 8008858:	e7de      	b.n	8008818 <_dtoa_r+0x250>
 800885a:	2300      	movs	r3, #0
 800885c:	9308      	str	r3, [sp, #32]
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	eb0a 0903 	add.w	r9, sl, r3
 8008864:	f109 0301 	add.w	r3, r9, #1
 8008868:	2b01      	cmp	r3, #1
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	bfb8      	it	lt
 800886e:	2301      	movlt	r3, #1
 8008870:	e7dd      	b.n	800882e <_dtoa_r+0x266>
 8008872:	2301      	movs	r3, #1
 8008874:	e7f2      	b.n	800885c <_dtoa_r+0x294>
 8008876:	2501      	movs	r5, #1
 8008878:	2300      	movs	r3, #0
 800887a:	9305      	str	r3, [sp, #20]
 800887c:	9508      	str	r5, [sp, #32]
 800887e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008882:	2200      	movs	r2, #0
 8008884:	f8cd 9004 	str.w	r9, [sp, #4]
 8008888:	2312      	movs	r3, #18
 800888a:	9209      	str	r2, [sp, #36]	; 0x24
 800888c:	e7cf      	b.n	800882e <_dtoa_r+0x266>
 800888e:	2301      	movs	r3, #1
 8008890:	9308      	str	r3, [sp, #32]
 8008892:	e7f4      	b.n	800887e <_dtoa_r+0x2b6>
 8008894:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008898:	f8cd 9004 	str.w	r9, [sp, #4]
 800889c:	464b      	mov	r3, r9
 800889e:	e7c6      	b.n	800882e <_dtoa_r+0x266>
 80088a0:	3101      	adds	r1, #1
 80088a2:	6041      	str	r1, [r0, #4]
 80088a4:	0052      	lsls	r2, r2, #1
 80088a6:	e7c6      	b.n	8008836 <_dtoa_r+0x26e>
 80088a8:	636f4361 	.word	0x636f4361
 80088ac:	3fd287a7 	.word	0x3fd287a7
 80088b0:	8b60c8b3 	.word	0x8b60c8b3
 80088b4:	3fc68a28 	.word	0x3fc68a28
 80088b8:	509f79fb 	.word	0x509f79fb
 80088bc:	3fd34413 	.word	0x3fd34413
 80088c0:	0800aa71 	.word	0x0800aa71
 80088c4:	0800aa88 	.word	0x0800aa88
 80088c8:	7ff00000 	.word	0x7ff00000
 80088cc:	0800aa6d 	.word	0x0800aa6d
 80088d0:	0800aa64 	.word	0x0800aa64
 80088d4:	0800aa41 	.word	0x0800aa41
 80088d8:	3ff80000 	.word	0x3ff80000
 80088dc:	0800abe0 	.word	0x0800abe0
 80088e0:	0800aae7 	.word	0x0800aae7
 80088e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088e6:	9a00      	ldr	r2, [sp, #0]
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	9b01      	ldr	r3, [sp, #4]
 80088ec:	2b0e      	cmp	r3, #14
 80088ee:	f200 80ad 	bhi.w	8008a4c <_dtoa_r+0x484>
 80088f2:	2d00      	cmp	r5, #0
 80088f4:	f000 80aa 	beq.w	8008a4c <_dtoa_r+0x484>
 80088f8:	f1ba 0f00 	cmp.w	sl, #0
 80088fc:	dd36      	ble.n	800896c <_dtoa_r+0x3a4>
 80088fe:	4ac3      	ldr	r2, [pc, #780]	; (8008c0c <_dtoa_r+0x644>)
 8008900:	f00a 030f 	and.w	r3, sl, #15
 8008904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008908:	ed93 7b00 	vldr	d7, [r3]
 800890c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008910:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008914:	eeb0 8a47 	vmov.f32	s16, s14
 8008918:	eef0 8a67 	vmov.f32	s17, s15
 800891c:	d016      	beq.n	800894c <_dtoa_r+0x384>
 800891e:	4bbc      	ldr	r3, [pc, #752]	; (8008c10 <_dtoa_r+0x648>)
 8008920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008924:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008928:	f7f7 ffb8 	bl	800089c <__aeabi_ddiv>
 800892c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008930:	f007 070f 	and.w	r7, r7, #15
 8008934:	2503      	movs	r5, #3
 8008936:	4eb6      	ldr	r6, [pc, #728]	; (8008c10 <_dtoa_r+0x648>)
 8008938:	b957      	cbnz	r7, 8008950 <_dtoa_r+0x388>
 800893a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893e:	ec53 2b18 	vmov	r2, r3, d8
 8008942:	f7f7 ffab 	bl	800089c <__aeabi_ddiv>
 8008946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800894a:	e029      	b.n	80089a0 <_dtoa_r+0x3d8>
 800894c:	2502      	movs	r5, #2
 800894e:	e7f2      	b.n	8008936 <_dtoa_r+0x36e>
 8008950:	07f9      	lsls	r1, r7, #31
 8008952:	d508      	bpl.n	8008966 <_dtoa_r+0x39e>
 8008954:	ec51 0b18 	vmov	r0, r1, d8
 8008958:	e9d6 2300 	ldrd	r2, r3, [r6]
 800895c:	f7f7 fe74 	bl	8000648 <__aeabi_dmul>
 8008960:	ec41 0b18 	vmov	d8, r0, r1
 8008964:	3501      	adds	r5, #1
 8008966:	107f      	asrs	r7, r7, #1
 8008968:	3608      	adds	r6, #8
 800896a:	e7e5      	b.n	8008938 <_dtoa_r+0x370>
 800896c:	f000 80a6 	beq.w	8008abc <_dtoa_r+0x4f4>
 8008970:	f1ca 0600 	rsb	r6, sl, #0
 8008974:	4ba5      	ldr	r3, [pc, #660]	; (8008c0c <_dtoa_r+0x644>)
 8008976:	4fa6      	ldr	r7, [pc, #664]	; (8008c10 <_dtoa_r+0x648>)
 8008978:	f006 020f 	and.w	r2, r6, #15
 800897c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008988:	f7f7 fe5e 	bl	8000648 <__aeabi_dmul>
 800898c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008990:	1136      	asrs	r6, r6, #4
 8008992:	2300      	movs	r3, #0
 8008994:	2502      	movs	r5, #2
 8008996:	2e00      	cmp	r6, #0
 8008998:	f040 8085 	bne.w	8008aa6 <_dtoa_r+0x4de>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1d2      	bne.n	8008946 <_dtoa_r+0x37e>
 80089a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 808c 	beq.w	8008ac0 <_dtoa_r+0x4f8>
 80089a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089ac:	4b99      	ldr	r3, [pc, #612]	; (8008c14 <_dtoa_r+0x64c>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f8 f8ba 	bl	8000b2c <__aeabi_dcmplt>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f000 8081 	beq.w	8008ac0 <_dtoa_r+0x4f8>
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d07d      	beq.n	8008ac0 <_dtoa_r+0x4f8>
 80089c4:	f1b9 0f00 	cmp.w	r9, #0
 80089c8:	dd3c      	ble.n	8008a44 <_dtoa_r+0x47c>
 80089ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80089ce:	9307      	str	r3, [sp, #28]
 80089d0:	2200      	movs	r2, #0
 80089d2:	4b91      	ldr	r3, [pc, #580]	; (8008c18 <_dtoa_r+0x650>)
 80089d4:	4630      	mov	r0, r6
 80089d6:	4639      	mov	r1, r7
 80089d8:	f7f7 fe36 	bl	8000648 <__aeabi_dmul>
 80089dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089e0:	3501      	adds	r5, #1
 80089e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80089e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089ea:	4628      	mov	r0, r5
 80089ec:	f7f7 fdc2 	bl	8000574 <__aeabi_i2d>
 80089f0:	4632      	mov	r2, r6
 80089f2:	463b      	mov	r3, r7
 80089f4:	f7f7 fe28 	bl	8000648 <__aeabi_dmul>
 80089f8:	4b88      	ldr	r3, [pc, #544]	; (8008c1c <_dtoa_r+0x654>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	f7f7 fc6e 	bl	80002dc <__adddf3>
 8008a00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a08:	9303      	str	r3, [sp, #12]
 8008a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d15c      	bne.n	8008aca <_dtoa_r+0x502>
 8008a10:	4b83      	ldr	r3, [pc, #524]	; (8008c20 <_dtoa_r+0x658>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	f7f7 fc5e 	bl	80002d8 <__aeabi_dsub>
 8008a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a20:	4606      	mov	r6, r0
 8008a22:	460f      	mov	r7, r1
 8008a24:	f7f8 f8a0 	bl	8000b68 <__aeabi_dcmpgt>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	f040 8296 	bne.w	8008f5a <_dtoa_r+0x992>
 8008a2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a32:	4630      	mov	r0, r6
 8008a34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a38:	4639      	mov	r1, r7
 8008a3a:	f7f8 f877 	bl	8000b2c <__aeabi_dcmplt>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f040 8288 	bne.w	8008f54 <_dtoa_r+0x98c>
 8008a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f2c0 8158 	blt.w	8008d04 <_dtoa_r+0x73c>
 8008a54:	f1ba 0f0e 	cmp.w	sl, #14
 8008a58:	f300 8154 	bgt.w	8008d04 <_dtoa_r+0x73c>
 8008a5c:	4b6b      	ldr	r3, [pc, #428]	; (8008c0c <_dtoa_r+0x644>)
 8008a5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f280 80e3 	bge.w	8008c34 <_dtoa_r+0x66c>
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f300 80df 	bgt.w	8008c34 <_dtoa_r+0x66c>
 8008a76:	f040 826d 	bne.w	8008f54 <_dtoa_r+0x98c>
 8008a7a:	4b69      	ldr	r3, [pc, #420]	; (8008c20 <_dtoa_r+0x658>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	4640      	mov	r0, r8
 8008a80:	4649      	mov	r1, r9
 8008a82:	f7f7 fde1 	bl	8000648 <__aeabi_dmul>
 8008a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a8a:	f7f8 f863 	bl	8000b54 <__aeabi_dcmpge>
 8008a8e:	9e01      	ldr	r6, [sp, #4]
 8008a90:	4637      	mov	r7, r6
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f040 8243 	bne.w	8008f1e <_dtoa_r+0x956>
 8008a98:	9d00      	ldr	r5, [sp, #0]
 8008a9a:	2331      	movs	r3, #49	; 0x31
 8008a9c:	f805 3b01 	strb.w	r3, [r5], #1
 8008aa0:	f10a 0a01 	add.w	sl, sl, #1
 8008aa4:	e23f      	b.n	8008f26 <_dtoa_r+0x95e>
 8008aa6:	07f2      	lsls	r2, r6, #31
 8008aa8:	d505      	bpl.n	8008ab6 <_dtoa_r+0x4ee>
 8008aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aae:	f7f7 fdcb 	bl	8000648 <__aeabi_dmul>
 8008ab2:	3501      	adds	r5, #1
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	1076      	asrs	r6, r6, #1
 8008ab8:	3708      	adds	r7, #8
 8008aba:	e76c      	b.n	8008996 <_dtoa_r+0x3ce>
 8008abc:	2502      	movs	r5, #2
 8008abe:	e76f      	b.n	80089a0 <_dtoa_r+0x3d8>
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ac6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ac8:	e78d      	b.n	80089e6 <_dtoa_r+0x41e>
 8008aca:	9900      	ldr	r1, [sp, #0]
 8008acc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ad0:	4b4e      	ldr	r3, [pc, #312]	; (8008c0c <_dtoa_r+0x644>)
 8008ad2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ad6:	4401      	add	r1, r0
 8008ad8:	9102      	str	r1, [sp, #8]
 8008ada:	9908      	ldr	r1, [sp, #32]
 8008adc:	eeb0 8a47 	vmov.f32	s16, s14
 8008ae0:	eef0 8a67 	vmov.f32	s17, s15
 8008ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aec:	2900      	cmp	r1, #0
 8008aee:	d045      	beq.n	8008b7c <_dtoa_r+0x5b4>
 8008af0:	494c      	ldr	r1, [pc, #304]	; (8008c24 <_dtoa_r+0x65c>)
 8008af2:	2000      	movs	r0, #0
 8008af4:	f7f7 fed2 	bl	800089c <__aeabi_ddiv>
 8008af8:	ec53 2b18 	vmov	r2, r3, d8
 8008afc:	f7f7 fbec 	bl	80002d8 <__aeabi_dsub>
 8008b00:	9d00      	ldr	r5, [sp, #0]
 8008b02:	ec41 0b18 	vmov	d8, r0, r1
 8008b06:	4639      	mov	r1, r7
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f7f8 f84d 	bl	8000ba8 <__aeabi_d2iz>
 8008b0e:	900c      	str	r0, [sp, #48]	; 0x30
 8008b10:	f7f7 fd30 	bl	8000574 <__aeabi_i2d>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	f7f7 fbdc 	bl	80002d8 <__aeabi_dsub>
 8008b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b22:	3330      	adds	r3, #48	; 0x30
 8008b24:	f805 3b01 	strb.w	r3, [r5], #1
 8008b28:	ec53 2b18 	vmov	r2, r3, d8
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	460f      	mov	r7, r1
 8008b30:	f7f7 fffc 	bl	8000b2c <__aeabi_dcmplt>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d165      	bne.n	8008c04 <_dtoa_r+0x63c>
 8008b38:	4632      	mov	r2, r6
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	4935      	ldr	r1, [pc, #212]	; (8008c14 <_dtoa_r+0x64c>)
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f7f7 fbca 	bl	80002d8 <__aeabi_dsub>
 8008b44:	ec53 2b18 	vmov	r2, r3, d8
 8008b48:	f7f7 fff0 	bl	8000b2c <__aeabi_dcmplt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f040 80b9 	bne.w	8008cc4 <_dtoa_r+0x6fc>
 8008b52:	9b02      	ldr	r3, [sp, #8]
 8008b54:	429d      	cmp	r5, r3
 8008b56:	f43f af75 	beq.w	8008a44 <_dtoa_r+0x47c>
 8008b5a:	4b2f      	ldr	r3, [pc, #188]	; (8008c18 <_dtoa_r+0x650>)
 8008b5c:	ec51 0b18 	vmov	r0, r1, d8
 8008b60:	2200      	movs	r2, #0
 8008b62:	f7f7 fd71 	bl	8000648 <__aeabi_dmul>
 8008b66:	4b2c      	ldr	r3, [pc, #176]	; (8008c18 <_dtoa_r+0x650>)
 8008b68:	ec41 0b18 	vmov	d8, r0, r1
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4630      	mov	r0, r6
 8008b70:	4639      	mov	r1, r7
 8008b72:	f7f7 fd69 	bl	8000648 <__aeabi_dmul>
 8008b76:	4606      	mov	r6, r0
 8008b78:	460f      	mov	r7, r1
 8008b7a:	e7c4      	b.n	8008b06 <_dtoa_r+0x53e>
 8008b7c:	ec51 0b17 	vmov	r0, r1, d7
 8008b80:	f7f7 fd62 	bl	8000648 <__aeabi_dmul>
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	9d00      	ldr	r5, [sp, #0]
 8008b88:	930c      	str	r3, [sp, #48]	; 0x30
 8008b8a:	ec41 0b18 	vmov	d8, r0, r1
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7f8 f809 	bl	8000ba8 <__aeabi_d2iz>
 8008b96:	9011      	str	r0, [sp, #68]	; 0x44
 8008b98:	f7f7 fcec 	bl	8000574 <__aeabi_i2d>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 fb98 	bl	80002d8 <__aeabi_dsub>
 8008ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008baa:	3330      	adds	r3, #48	; 0x30
 8008bac:	f805 3b01 	strb.w	r3, [r5], #1
 8008bb0:	9b02      	ldr	r3, [sp, #8]
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	460f      	mov	r7, r1
 8008bb8:	f04f 0200 	mov.w	r2, #0
 8008bbc:	d134      	bne.n	8008c28 <_dtoa_r+0x660>
 8008bbe:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <_dtoa_r+0x65c>)
 8008bc0:	ec51 0b18 	vmov	r0, r1, d8
 8008bc4:	f7f7 fb8a 	bl	80002dc <__adddf3>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 ffca 	bl	8000b68 <__aeabi_dcmpgt>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d175      	bne.n	8008cc4 <_dtoa_r+0x6fc>
 8008bd8:	ec53 2b18 	vmov	r2, r3, d8
 8008bdc:	4911      	ldr	r1, [pc, #68]	; (8008c24 <_dtoa_r+0x65c>)
 8008bde:	2000      	movs	r0, #0
 8008be0:	f7f7 fb7a 	bl	80002d8 <__aeabi_dsub>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 ff9e 	bl	8000b2c <__aeabi_dcmplt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f af27 	beq.w	8008a44 <_dtoa_r+0x47c>
 8008bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bf8:	1e6b      	subs	r3, r5, #1
 8008bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8008bfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c00:	2b30      	cmp	r3, #48	; 0x30
 8008c02:	d0f8      	beq.n	8008bf6 <_dtoa_r+0x62e>
 8008c04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008c08:	e04a      	b.n	8008ca0 <_dtoa_r+0x6d8>
 8008c0a:	bf00      	nop
 8008c0c:	0800abe0 	.word	0x0800abe0
 8008c10:	0800abb8 	.word	0x0800abb8
 8008c14:	3ff00000 	.word	0x3ff00000
 8008c18:	40240000 	.word	0x40240000
 8008c1c:	401c0000 	.word	0x401c0000
 8008c20:	40140000 	.word	0x40140000
 8008c24:	3fe00000 	.word	0x3fe00000
 8008c28:	4baf      	ldr	r3, [pc, #700]	; (8008ee8 <_dtoa_r+0x920>)
 8008c2a:	f7f7 fd0d 	bl	8000648 <__aeabi_dmul>
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	e7ac      	b.n	8008b8e <_dtoa_r+0x5c6>
 8008c34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c38:	9d00      	ldr	r5, [sp, #0]
 8008c3a:	4642      	mov	r2, r8
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	f7f7 fe2b 	bl	800089c <__aeabi_ddiv>
 8008c46:	f7f7 ffaf 	bl	8000ba8 <__aeabi_d2iz>
 8008c4a:	9002      	str	r0, [sp, #8]
 8008c4c:	f7f7 fc92 	bl	8000574 <__aeabi_i2d>
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	f7f7 fcf8 	bl	8000648 <__aeabi_dmul>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4639      	mov	r1, r7
 8008c60:	f7f7 fb3a 	bl	80002d8 <__aeabi_dsub>
 8008c64:	9e02      	ldr	r6, [sp, #8]
 8008c66:	9f01      	ldr	r7, [sp, #4]
 8008c68:	3630      	adds	r6, #48	; 0x30
 8008c6a:	f805 6b01 	strb.w	r6, [r5], #1
 8008c6e:	9e00      	ldr	r6, [sp, #0]
 8008c70:	1bae      	subs	r6, r5, r6
 8008c72:	42b7      	cmp	r7, r6
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	d137      	bne.n	8008cea <_dtoa_r+0x722>
 8008c7a:	f7f7 fb2f 	bl	80002dc <__adddf3>
 8008c7e:	4642      	mov	r2, r8
 8008c80:	464b      	mov	r3, r9
 8008c82:	4606      	mov	r6, r0
 8008c84:	460f      	mov	r7, r1
 8008c86:	f7f7 ff6f 	bl	8000b68 <__aeabi_dcmpgt>
 8008c8a:	b9c8      	cbnz	r0, 8008cc0 <_dtoa_r+0x6f8>
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	464b      	mov	r3, r9
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 ff40 	bl	8000b18 <__aeabi_dcmpeq>
 8008c98:	b110      	cbz	r0, 8008ca0 <_dtoa_r+0x6d8>
 8008c9a:	9b02      	ldr	r3, [sp, #8]
 8008c9c:	07d9      	lsls	r1, r3, #31
 8008c9e:	d40f      	bmi.n	8008cc0 <_dtoa_r+0x6f8>
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	4659      	mov	r1, fp
 8008ca4:	f000 fcfa 	bl	800969c <_Bfree>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	702b      	strb	r3, [r5, #0]
 8008cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cae:	f10a 0001 	add.w	r0, sl, #1
 8008cb2:	6018      	str	r0, [r3, #0]
 8008cb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f43f acd8 	beq.w	800866c <_dtoa_r+0xa4>
 8008cbc:	601d      	str	r5, [r3, #0]
 8008cbe:	e4d5      	b.n	800866c <_dtoa_r+0xa4>
 8008cc0:	f8cd a01c 	str.w	sl, [sp, #28]
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	461d      	mov	r5, r3
 8008cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ccc:	2a39      	cmp	r2, #57	; 0x39
 8008cce:	d108      	bne.n	8008ce2 <_dtoa_r+0x71a>
 8008cd0:	9a00      	ldr	r2, [sp, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d1f7      	bne.n	8008cc6 <_dtoa_r+0x6fe>
 8008cd6:	9a07      	ldr	r2, [sp, #28]
 8008cd8:	9900      	ldr	r1, [sp, #0]
 8008cda:	3201      	adds	r2, #1
 8008cdc:	9207      	str	r2, [sp, #28]
 8008cde:	2230      	movs	r2, #48	; 0x30
 8008ce0:	700a      	strb	r2, [r1, #0]
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	3201      	adds	r2, #1
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	e78c      	b.n	8008c04 <_dtoa_r+0x63c>
 8008cea:	4b7f      	ldr	r3, [pc, #508]	; (8008ee8 <_dtoa_r+0x920>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	f7f7 fcab 	bl	8000648 <__aeabi_dmul>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	460f      	mov	r7, r1
 8008cfa:	f7f7 ff0d 	bl	8000b18 <__aeabi_dcmpeq>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d09b      	beq.n	8008c3a <_dtoa_r+0x672>
 8008d02:	e7cd      	b.n	8008ca0 <_dtoa_r+0x6d8>
 8008d04:	9a08      	ldr	r2, [sp, #32]
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	f000 80c4 	beq.w	8008e94 <_dtoa_r+0x8cc>
 8008d0c:	9a05      	ldr	r2, [sp, #20]
 8008d0e:	2a01      	cmp	r2, #1
 8008d10:	f300 80a8 	bgt.w	8008e64 <_dtoa_r+0x89c>
 8008d14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	f000 80a0 	beq.w	8008e5c <_dtoa_r+0x894>
 8008d1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d20:	9e06      	ldr	r6, [sp, #24]
 8008d22:	4645      	mov	r5, r8
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	2101      	movs	r1, #1
 8008d28:	441a      	add	r2, r3
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	4498      	add	r8, r3
 8008d2e:	9204      	str	r2, [sp, #16]
 8008d30:	f000 fd70 	bl	8009814 <__i2b>
 8008d34:	4607      	mov	r7, r0
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	dd0b      	ble.n	8008d52 <_dtoa_r+0x78a>
 8008d3a:	9b04      	ldr	r3, [sp, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dd08      	ble.n	8008d52 <_dtoa_r+0x78a>
 8008d40:	42ab      	cmp	r3, r5
 8008d42:	9a04      	ldr	r2, [sp, #16]
 8008d44:	bfa8      	it	ge
 8008d46:	462b      	movge	r3, r5
 8008d48:	eba8 0803 	sub.w	r8, r8, r3
 8008d4c:	1aed      	subs	r5, r5, r3
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	9b06      	ldr	r3, [sp, #24]
 8008d54:	b1fb      	cbz	r3, 8008d96 <_dtoa_r+0x7ce>
 8008d56:	9b08      	ldr	r3, [sp, #32]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 809f 	beq.w	8008e9c <_dtoa_r+0x8d4>
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	dd11      	ble.n	8008d86 <_dtoa_r+0x7be>
 8008d62:	4639      	mov	r1, r7
 8008d64:	4632      	mov	r2, r6
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 fe10 	bl	800998c <__pow5mult>
 8008d6c:	465a      	mov	r2, fp
 8008d6e:	4601      	mov	r1, r0
 8008d70:	4607      	mov	r7, r0
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 fd64 	bl	8009840 <__multiply>
 8008d78:	4659      	mov	r1, fp
 8008d7a:	9007      	str	r0, [sp, #28]
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f000 fc8d 	bl	800969c <_Bfree>
 8008d82:	9b07      	ldr	r3, [sp, #28]
 8008d84:	469b      	mov	fp, r3
 8008d86:	9b06      	ldr	r3, [sp, #24]
 8008d88:	1b9a      	subs	r2, r3, r6
 8008d8a:	d004      	beq.n	8008d96 <_dtoa_r+0x7ce>
 8008d8c:	4659      	mov	r1, fp
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fdfc 	bl	800998c <__pow5mult>
 8008d94:	4683      	mov	fp, r0
 8008d96:	2101      	movs	r1, #1
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 fd3b 	bl	8009814 <__i2b>
 8008d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	4606      	mov	r6, r0
 8008da4:	dd7c      	ble.n	8008ea0 <_dtoa_r+0x8d8>
 8008da6:	461a      	mov	r2, r3
 8008da8:	4601      	mov	r1, r0
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 fdee 	bl	800998c <__pow5mult>
 8008db0:	9b05      	ldr	r3, [sp, #20]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	4606      	mov	r6, r0
 8008db6:	dd76      	ble.n	8008ea6 <_dtoa_r+0x8de>
 8008db8:	2300      	movs	r3, #0
 8008dba:	9306      	str	r3, [sp, #24]
 8008dbc:	6933      	ldr	r3, [r6, #16]
 8008dbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008dc2:	6918      	ldr	r0, [r3, #16]
 8008dc4:	f000 fcd6 	bl	8009774 <__hi0bits>
 8008dc8:	f1c0 0020 	rsb	r0, r0, #32
 8008dcc:	9b04      	ldr	r3, [sp, #16]
 8008dce:	4418      	add	r0, r3
 8008dd0:	f010 001f 	ands.w	r0, r0, #31
 8008dd4:	f000 8086 	beq.w	8008ee4 <_dtoa_r+0x91c>
 8008dd8:	f1c0 0320 	rsb	r3, r0, #32
 8008ddc:	2b04      	cmp	r3, #4
 8008dde:	dd7f      	ble.n	8008ee0 <_dtoa_r+0x918>
 8008de0:	f1c0 001c 	rsb	r0, r0, #28
 8008de4:	9b04      	ldr	r3, [sp, #16]
 8008de6:	4403      	add	r3, r0
 8008de8:	4480      	add	r8, r0
 8008dea:	4405      	add	r5, r0
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	f1b8 0f00 	cmp.w	r8, #0
 8008df2:	dd05      	ble.n	8008e00 <_dtoa_r+0x838>
 8008df4:	4659      	mov	r1, fp
 8008df6:	4642      	mov	r2, r8
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fe21 	bl	8009a40 <__lshift>
 8008dfe:	4683      	mov	fp, r0
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dd05      	ble.n	8008e12 <_dtoa_r+0x84a>
 8008e06:	4631      	mov	r1, r6
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 fe18 	bl	8009a40 <__lshift>
 8008e10:	4606      	mov	r6, r0
 8008e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d069      	beq.n	8008eec <_dtoa_r+0x924>
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4658      	mov	r0, fp
 8008e1c:	f000 fe7c 	bl	8009b18 <__mcmp>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	da63      	bge.n	8008eec <_dtoa_r+0x924>
 8008e24:	2300      	movs	r3, #0
 8008e26:	4659      	mov	r1, fp
 8008e28:	220a      	movs	r2, #10
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 fc58 	bl	80096e0 <__multadd>
 8008e30:	9b08      	ldr	r3, [sp, #32]
 8008e32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e36:	4683      	mov	fp, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 818f 	beq.w	800915c <_dtoa_r+0xb94>
 8008e3e:	4639      	mov	r1, r7
 8008e40:	2300      	movs	r3, #0
 8008e42:	220a      	movs	r2, #10
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 fc4b 	bl	80096e0 <__multadd>
 8008e4a:	f1b9 0f00 	cmp.w	r9, #0
 8008e4e:	4607      	mov	r7, r0
 8008e50:	f300 808e 	bgt.w	8008f70 <_dtoa_r+0x9a8>
 8008e54:	9b05      	ldr	r3, [sp, #20]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	dc50      	bgt.n	8008efc <_dtoa_r+0x934>
 8008e5a:	e089      	b.n	8008f70 <_dtoa_r+0x9a8>
 8008e5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e62:	e75d      	b.n	8008d20 <_dtoa_r+0x758>
 8008e64:	9b01      	ldr	r3, [sp, #4]
 8008e66:	1e5e      	subs	r6, r3, #1
 8008e68:	9b06      	ldr	r3, [sp, #24]
 8008e6a:	42b3      	cmp	r3, r6
 8008e6c:	bfbf      	itttt	lt
 8008e6e:	9b06      	ldrlt	r3, [sp, #24]
 8008e70:	9606      	strlt	r6, [sp, #24]
 8008e72:	1af2      	sublt	r2, r6, r3
 8008e74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008e76:	bfb6      	itet	lt
 8008e78:	189b      	addlt	r3, r3, r2
 8008e7a:	1b9e      	subge	r6, r3, r6
 8008e7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008e7e:	9b01      	ldr	r3, [sp, #4]
 8008e80:	bfb8      	it	lt
 8008e82:	2600      	movlt	r6, #0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bfb5      	itete	lt
 8008e88:	eba8 0503 	sublt.w	r5, r8, r3
 8008e8c:	9b01      	ldrge	r3, [sp, #4]
 8008e8e:	2300      	movlt	r3, #0
 8008e90:	4645      	movge	r5, r8
 8008e92:	e747      	b.n	8008d24 <_dtoa_r+0x75c>
 8008e94:	9e06      	ldr	r6, [sp, #24]
 8008e96:	9f08      	ldr	r7, [sp, #32]
 8008e98:	4645      	mov	r5, r8
 8008e9a:	e74c      	b.n	8008d36 <_dtoa_r+0x76e>
 8008e9c:	9a06      	ldr	r2, [sp, #24]
 8008e9e:	e775      	b.n	8008d8c <_dtoa_r+0x7c4>
 8008ea0:	9b05      	ldr	r3, [sp, #20]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	dc18      	bgt.n	8008ed8 <_dtoa_r+0x910>
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	b9b3      	cbnz	r3, 8008ed8 <_dtoa_r+0x910>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eb0:	b9a3      	cbnz	r3, 8008edc <_dtoa_r+0x914>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eb8:	0d1b      	lsrs	r3, r3, #20
 8008eba:	051b      	lsls	r3, r3, #20
 8008ebc:	b12b      	cbz	r3, 8008eca <_dtoa_r+0x902>
 8008ebe:	9b04      	ldr	r3, [sp, #16]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	f108 0801 	add.w	r8, r8, #1
 8008ec8:	2301      	movs	r3, #1
 8008eca:	9306      	str	r3, [sp, #24]
 8008ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f47f af74 	bne.w	8008dbc <_dtoa_r+0x7f4>
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	e779      	b.n	8008dcc <_dtoa_r+0x804>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e7f6      	b.n	8008eca <_dtoa_r+0x902>
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	e7f4      	b.n	8008eca <_dtoa_r+0x902>
 8008ee0:	d085      	beq.n	8008dee <_dtoa_r+0x826>
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	301c      	adds	r0, #28
 8008ee6:	e77d      	b.n	8008de4 <_dtoa_r+0x81c>
 8008ee8:	40240000 	.word	0x40240000
 8008eec:	9b01      	ldr	r3, [sp, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dc38      	bgt.n	8008f64 <_dtoa_r+0x99c>
 8008ef2:	9b05      	ldr	r3, [sp, #20]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	dd35      	ble.n	8008f64 <_dtoa_r+0x99c>
 8008ef8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008efc:	f1b9 0f00 	cmp.w	r9, #0
 8008f00:	d10d      	bne.n	8008f1e <_dtoa_r+0x956>
 8008f02:	4631      	mov	r1, r6
 8008f04:	464b      	mov	r3, r9
 8008f06:	2205      	movs	r2, #5
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 fbe9 	bl	80096e0 <__multadd>
 8008f0e:	4601      	mov	r1, r0
 8008f10:	4606      	mov	r6, r0
 8008f12:	4658      	mov	r0, fp
 8008f14:	f000 fe00 	bl	8009b18 <__mcmp>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f73f adbd 	bgt.w	8008a98 <_dtoa_r+0x4d0>
 8008f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f20:	9d00      	ldr	r5, [sp, #0]
 8008f22:	ea6f 0a03 	mvn.w	sl, r3
 8008f26:	f04f 0800 	mov.w	r8, #0
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fbb5 	bl	800969c <_Bfree>
 8008f32:	2f00      	cmp	r7, #0
 8008f34:	f43f aeb4 	beq.w	8008ca0 <_dtoa_r+0x6d8>
 8008f38:	f1b8 0f00 	cmp.w	r8, #0
 8008f3c:	d005      	beq.n	8008f4a <_dtoa_r+0x982>
 8008f3e:	45b8      	cmp	r8, r7
 8008f40:	d003      	beq.n	8008f4a <_dtoa_r+0x982>
 8008f42:	4641      	mov	r1, r8
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 fba9 	bl	800969c <_Bfree>
 8008f4a:	4639      	mov	r1, r7
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f000 fba5 	bl	800969c <_Bfree>
 8008f52:	e6a5      	b.n	8008ca0 <_dtoa_r+0x6d8>
 8008f54:	2600      	movs	r6, #0
 8008f56:	4637      	mov	r7, r6
 8008f58:	e7e1      	b.n	8008f1e <_dtoa_r+0x956>
 8008f5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008f5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f60:	4637      	mov	r7, r6
 8008f62:	e599      	b.n	8008a98 <_dtoa_r+0x4d0>
 8008f64:	9b08      	ldr	r3, [sp, #32]
 8008f66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80fd 	beq.w	800916a <_dtoa_r+0xba2>
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	dd05      	ble.n	8008f80 <_dtoa_r+0x9b8>
 8008f74:	4639      	mov	r1, r7
 8008f76:	462a      	mov	r2, r5
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fd61 	bl	8009a40 <__lshift>
 8008f7e:	4607      	mov	r7, r0
 8008f80:	9b06      	ldr	r3, [sp, #24]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d05c      	beq.n	8009040 <_dtoa_r+0xa78>
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 fb47 	bl	800961c <_Balloc>
 8008f8e:	4605      	mov	r5, r0
 8008f90:	b928      	cbnz	r0, 8008f9e <_dtoa_r+0x9d6>
 8008f92:	4b80      	ldr	r3, [pc, #512]	; (8009194 <_dtoa_r+0xbcc>)
 8008f94:	4602      	mov	r2, r0
 8008f96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f9a:	f7ff bb2e 	b.w	80085fa <_dtoa_r+0x32>
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	3202      	adds	r2, #2
 8008fa2:	0092      	lsls	r2, r2, #2
 8008fa4:	f107 010c 	add.w	r1, r7, #12
 8008fa8:	300c      	adds	r0, #12
 8008faa:	f000 fb1d 	bl	80095e8 <memcpy>
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 fd44 	bl	8009a40 <__lshift>
 8008fb8:	9b00      	ldr	r3, [sp, #0]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	9b00      	ldr	r3, [sp, #0]
 8008fc0:	444b      	add	r3, r9
 8008fc2:	9307      	str	r3, [sp, #28]
 8008fc4:	9b02      	ldr	r3, [sp, #8]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	46b8      	mov	r8, r7
 8008fcc:	9306      	str	r3, [sp, #24]
 8008fce:	4607      	mov	r7, r0
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	4658      	mov	r0, fp
 8008fd8:	9302      	str	r3, [sp, #8]
 8008fda:	f7ff fa69 	bl	80084b0 <quorem>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	3330      	adds	r3, #48	; 0x30
 8008fe2:	9004      	str	r0, [sp, #16]
 8008fe4:	4641      	mov	r1, r8
 8008fe6:	4658      	mov	r0, fp
 8008fe8:	9308      	str	r3, [sp, #32]
 8008fea:	f000 fd95 	bl	8009b18 <__mcmp>
 8008fee:	463a      	mov	r2, r7
 8008ff0:	4681      	mov	r9, r0
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 fdab 	bl	8009b50 <__mdiff>
 8008ffa:	68c2      	ldr	r2, [r0, #12]
 8008ffc:	9b08      	ldr	r3, [sp, #32]
 8008ffe:	4605      	mov	r5, r0
 8009000:	bb02      	cbnz	r2, 8009044 <_dtoa_r+0xa7c>
 8009002:	4601      	mov	r1, r0
 8009004:	4658      	mov	r0, fp
 8009006:	f000 fd87 	bl	8009b18 <__mcmp>
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	4602      	mov	r2, r0
 800900e:	4629      	mov	r1, r5
 8009010:	4620      	mov	r0, r4
 8009012:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009016:	f000 fb41 	bl	800969c <_Bfree>
 800901a:	9b05      	ldr	r3, [sp, #20]
 800901c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800901e:	9d01      	ldr	r5, [sp, #4]
 8009020:	ea43 0102 	orr.w	r1, r3, r2
 8009024:	9b06      	ldr	r3, [sp, #24]
 8009026:	430b      	orrs	r3, r1
 8009028:	9b08      	ldr	r3, [sp, #32]
 800902a:	d10d      	bne.n	8009048 <_dtoa_r+0xa80>
 800902c:	2b39      	cmp	r3, #57	; 0x39
 800902e:	d029      	beq.n	8009084 <_dtoa_r+0xabc>
 8009030:	f1b9 0f00 	cmp.w	r9, #0
 8009034:	dd01      	ble.n	800903a <_dtoa_r+0xa72>
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	3331      	adds	r3, #49	; 0x31
 800903a:	9a02      	ldr	r2, [sp, #8]
 800903c:	7013      	strb	r3, [r2, #0]
 800903e:	e774      	b.n	8008f2a <_dtoa_r+0x962>
 8009040:	4638      	mov	r0, r7
 8009042:	e7b9      	b.n	8008fb8 <_dtoa_r+0x9f0>
 8009044:	2201      	movs	r2, #1
 8009046:	e7e2      	b.n	800900e <_dtoa_r+0xa46>
 8009048:	f1b9 0f00 	cmp.w	r9, #0
 800904c:	db06      	blt.n	800905c <_dtoa_r+0xa94>
 800904e:	9905      	ldr	r1, [sp, #20]
 8009050:	ea41 0909 	orr.w	r9, r1, r9
 8009054:	9906      	ldr	r1, [sp, #24]
 8009056:	ea59 0101 	orrs.w	r1, r9, r1
 800905a:	d120      	bne.n	800909e <_dtoa_r+0xad6>
 800905c:	2a00      	cmp	r2, #0
 800905e:	ddec      	ble.n	800903a <_dtoa_r+0xa72>
 8009060:	4659      	mov	r1, fp
 8009062:	2201      	movs	r2, #1
 8009064:	4620      	mov	r0, r4
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	f000 fcea 	bl	8009a40 <__lshift>
 800906c:	4631      	mov	r1, r6
 800906e:	4683      	mov	fp, r0
 8009070:	f000 fd52 	bl	8009b18 <__mcmp>
 8009074:	2800      	cmp	r0, #0
 8009076:	9b01      	ldr	r3, [sp, #4]
 8009078:	dc02      	bgt.n	8009080 <_dtoa_r+0xab8>
 800907a:	d1de      	bne.n	800903a <_dtoa_r+0xa72>
 800907c:	07da      	lsls	r2, r3, #31
 800907e:	d5dc      	bpl.n	800903a <_dtoa_r+0xa72>
 8009080:	2b39      	cmp	r3, #57	; 0x39
 8009082:	d1d8      	bne.n	8009036 <_dtoa_r+0xa6e>
 8009084:	9a02      	ldr	r2, [sp, #8]
 8009086:	2339      	movs	r3, #57	; 0x39
 8009088:	7013      	strb	r3, [r2, #0]
 800908a:	462b      	mov	r3, r5
 800908c:	461d      	mov	r5, r3
 800908e:	3b01      	subs	r3, #1
 8009090:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009094:	2a39      	cmp	r2, #57	; 0x39
 8009096:	d050      	beq.n	800913a <_dtoa_r+0xb72>
 8009098:	3201      	adds	r2, #1
 800909a:	701a      	strb	r2, [r3, #0]
 800909c:	e745      	b.n	8008f2a <_dtoa_r+0x962>
 800909e:	2a00      	cmp	r2, #0
 80090a0:	dd03      	ble.n	80090aa <_dtoa_r+0xae2>
 80090a2:	2b39      	cmp	r3, #57	; 0x39
 80090a4:	d0ee      	beq.n	8009084 <_dtoa_r+0xabc>
 80090a6:	3301      	adds	r3, #1
 80090a8:	e7c7      	b.n	800903a <_dtoa_r+0xa72>
 80090aa:	9a01      	ldr	r2, [sp, #4]
 80090ac:	9907      	ldr	r1, [sp, #28]
 80090ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80090b2:	428a      	cmp	r2, r1
 80090b4:	d02a      	beq.n	800910c <_dtoa_r+0xb44>
 80090b6:	4659      	mov	r1, fp
 80090b8:	2300      	movs	r3, #0
 80090ba:	220a      	movs	r2, #10
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 fb0f 	bl	80096e0 <__multadd>
 80090c2:	45b8      	cmp	r8, r7
 80090c4:	4683      	mov	fp, r0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	f04f 020a 	mov.w	r2, #10
 80090ce:	4641      	mov	r1, r8
 80090d0:	4620      	mov	r0, r4
 80090d2:	d107      	bne.n	80090e4 <_dtoa_r+0xb1c>
 80090d4:	f000 fb04 	bl	80096e0 <__multadd>
 80090d8:	4680      	mov	r8, r0
 80090da:	4607      	mov	r7, r0
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	3301      	adds	r3, #1
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	e775      	b.n	8008fd0 <_dtoa_r+0xa08>
 80090e4:	f000 fafc 	bl	80096e0 <__multadd>
 80090e8:	4639      	mov	r1, r7
 80090ea:	4680      	mov	r8, r0
 80090ec:	2300      	movs	r3, #0
 80090ee:	220a      	movs	r2, #10
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 faf5 	bl	80096e0 <__multadd>
 80090f6:	4607      	mov	r7, r0
 80090f8:	e7f0      	b.n	80090dc <_dtoa_r+0xb14>
 80090fa:	f1b9 0f00 	cmp.w	r9, #0
 80090fe:	9a00      	ldr	r2, [sp, #0]
 8009100:	bfcc      	ite	gt
 8009102:	464d      	movgt	r5, r9
 8009104:	2501      	movle	r5, #1
 8009106:	4415      	add	r5, r2
 8009108:	f04f 0800 	mov.w	r8, #0
 800910c:	4659      	mov	r1, fp
 800910e:	2201      	movs	r2, #1
 8009110:	4620      	mov	r0, r4
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	f000 fc94 	bl	8009a40 <__lshift>
 8009118:	4631      	mov	r1, r6
 800911a:	4683      	mov	fp, r0
 800911c:	f000 fcfc 	bl	8009b18 <__mcmp>
 8009120:	2800      	cmp	r0, #0
 8009122:	dcb2      	bgt.n	800908a <_dtoa_r+0xac2>
 8009124:	d102      	bne.n	800912c <_dtoa_r+0xb64>
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	07db      	lsls	r3, r3, #31
 800912a:	d4ae      	bmi.n	800908a <_dtoa_r+0xac2>
 800912c:	462b      	mov	r3, r5
 800912e:	461d      	mov	r5, r3
 8009130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009134:	2a30      	cmp	r2, #48	; 0x30
 8009136:	d0fa      	beq.n	800912e <_dtoa_r+0xb66>
 8009138:	e6f7      	b.n	8008f2a <_dtoa_r+0x962>
 800913a:	9a00      	ldr	r2, [sp, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d1a5      	bne.n	800908c <_dtoa_r+0xac4>
 8009140:	f10a 0a01 	add.w	sl, sl, #1
 8009144:	2331      	movs	r3, #49	; 0x31
 8009146:	e779      	b.n	800903c <_dtoa_r+0xa74>
 8009148:	4b13      	ldr	r3, [pc, #76]	; (8009198 <_dtoa_r+0xbd0>)
 800914a:	f7ff baaf 	b.w	80086ac <_dtoa_r+0xe4>
 800914e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009150:	2b00      	cmp	r3, #0
 8009152:	f47f aa86 	bne.w	8008662 <_dtoa_r+0x9a>
 8009156:	4b11      	ldr	r3, [pc, #68]	; (800919c <_dtoa_r+0xbd4>)
 8009158:	f7ff baa8 	b.w	80086ac <_dtoa_r+0xe4>
 800915c:	f1b9 0f00 	cmp.w	r9, #0
 8009160:	dc03      	bgt.n	800916a <_dtoa_r+0xba2>
 8009162:	9b05      	ldr	r3, [sp, #20]
 8009164:	2b02      	cmp	r3, #2
 8009166:	f73f aec9 	bgt.w	8008efc <_dtoa_r+0x934>
 800916a:	9d00      	ldr	r5, [sp, #0]
 800916c:	4631      	mov	r1, r6
 800916e:	4658      	mov	r0, fp
 8009170:	f7ff f99e 	bl	80084b0 <quorem>
 8009174:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009178:	f805 3b01 	strb.w	r3, [r5], #1
 800917c:	9a00      	ldr	r2, [sp, #0]
 800917e:	1aaa      	subs	r2, r5, r2
 8009180:	4591      	cmp	r9, r2
 8009182:	ddba      	ble.n	80090fa <_dtoa_r+0xb32>
 8009184:	4659      	mov	r1, fp
 8009186:	2300      	movs	r3, #0
 8009188:	220a      	movs	r2, #10
 800918a:	4620      	mov	r0, r4
 800918c:	f000 faa8 	bl	80096e0 <__multadd>
 8009190:	4683      	mov	fp, r0
 8009192:	e7eb      	b.n	800916c <_dtoa_r+0xba4>
 8009194:	0800aae7 	.word	0x0800aae7
 8009198:	0800aa40 	.word	0x0800aa40
 800919c:	0800aa64 	.word	0x0800aa64

080091a0 <__sflush_r>:
 80091a0:	898a      	ldrh	r2, [r1, #12]
 80091a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a6:	4605      	mov	r5, r0
 80091a8:	0710      	lsls	r0, r2, #28
 80091aa:	460c      	mov	r4, r1
 80091ac:	d458      	bmi.n	8009260 <__sflush_r+0xc0>
 80091ae:	684b      	ldr	r3, [r1, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dc05      	bgt.n	80091c0 <__sflush_r+0x20>
 80091b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dc02      	bgt.n	80091c0 <__sflush_r+0x20>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091c2:	2e00      	cmp	r6, #0
 80091c4:	d0f9      	beq.n	80091ba <__sflush_r+0x1a>
 80091c6:	2300      	movs	r3, #0
 80091c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091cc:	682f      	ldr	r7, [r5, #0]
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	d032      	beq.n	8009238 <__sflush_r+0x98>
 80091d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	075a      	lsls	r2, r3, #29
 80091d8:	d505      	bpl.n	80091e6 <__sflush_r+0x46>
 80091da:	6863      	ldr	r3, [r4, #4]
 80091dc:	1ac0      	subs	r0, r0, r3
 80091de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091e0:	b10b      	cbz	r3, 80091e6 <__sflush_r+0x46>
 80091e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091e4:	1ac0      	subs	r0, r0, r3
 80091e6:	2300      	movs	r3, #0
 80091e8:	4602      	mov	r2, r0
 80091ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091ec:	6a21      	ldr	r1, [r4, #32]
 80091ee:	4628      	mov	r0, r5
 80091f0:	47b0      	blx	r6
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	d106      	bne.n	8009206 <__sflush_r+0x66>
 80091f8:	6829      	ldr	r1, [r5, #0]
 80091fa:	291d      	cmp	r1, #29
 80091fc:	d82c      	bhi.n	8009258 <__sflush_r+0xb8>
 80091fe:	4a2a      	ldr	r2, [pc, #168]	; (80092a8 <__sflush_r+0x108>)
 8009200:	40ca      	lsrs	r2, r1
 8009202:	07d6      	lsls	r6, r2, #31
 8009204:	d528      	bpl.n	8009258 <__sflush_r+0xb8>
 8009206:	2200      	movs	r2, #0
 8009208:	6062      	str	r2, [r4, #4]
 800920a:	04d9      	lsls	r1, r3, #19
 800920c:	6922      	ldr	r2, [r4, #16]
 800920e:	6022      	str	r2, [r4, #0]
 8009210:	d504      	bpl.n	800921c <__sflush_r+0x7c>
 8009212:	1c42      	adds	r2, r0, #1
 8009214:	d101      	bne.n	800921a <__sflush_r+0x7a>
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	b903      	cbnz	r3, 800921c <__sflush_r+0x7c>
 800921a:	6560      	str	r0, [r4, #84]	; 0x54
 800921c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800921e:	602f      	str	r7, [r5, #0]
 8009220:	2900      	cmp	r1, #0
 8009222:	d0ca      	beq.n	80091ba <__sflush_r+0x1a>
 8009224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009228:	4299      	cmp	r1, r3
 800922a:	d002      	beq.n	8009232 <__sflush_r+0x92>
 800922c:	4628      	mov	r0, r5
 800922e:	f7fe fa97 	bl	8007760 <_free_r>
 8009232:	2000      	movs	r0, #0
 8009234:	6360      	str	r0, [r4, #52]	; 0x34
 8009236:	e7c1      	b.n	80091bc <__sflush_r+0x1c>
 8009238:	6a21      	ldr	r1, [r4, #32]
 800923a:	2301      	movs	r3, #1
 800923c:	4628      	mov	r0, r5
 800923e:	47b0      	blx	r6
 8009240:	1c41      	adds	r1, r0, #1
 8009242:	d1c7      	bne.n	80091d4 <__sflush_r+0x34>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0c4      	beq.n	80091d4 <__sflush_r+0x34>
 800924a:	2b1d      	cmp	r3, #29
 800924c:	d001      	beq.n	8009252 <__sflush_r+0xb2>
 800924e:	2b16      	cmp	r3, #22
 8009250:	d101      	bne.n	8009256 <__sflush_r+0xb6>
 8009252:	602f      	str	r7, [r5, #0]
 8009254:	e7b1      	b.n	80091ba <__sflush_r+0x1a>
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	e7ad      	b.n	80091bc <__sflush_r+0x1c>
 8009260:	690f      	ldr	r7, [r1, #16]
 8009262:	2f00      	cmp	r7, #0
 8009264:	d0a9      	beq.n	80091ba <__sflush_r+0x1a>
 8009266:	0793      	lsls	r3, r2, #30
 8009268:	680e      	ldr	r6, [r1, #0]
 800926a:	bf08      	it	eq
 800926c:	694b      	ldreq	r3, [r1, #20]
 800926e:	600f      	str	r7, [r1, #0]
 8009270:	bf18      	it	ne
 8009272:	2300      	movne	r3, #0
 8009274:	eba6 0807 	sub.w	r8, r6, r7
 8009278:	608b      	str	r3, [r1, #8]
 800927a:	f1b8 0f00 	cmp.w	r8, #0
 800927e:	dd9c      	ble.n	80091ba <__sflush_r+0x1a>
 8009280:	6a21      	ldr	r1, [r4, #32]
 8009282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009284:	4643      	mov	r3, r8
 8009286:	463a      	mov	r2, r7
 8009288:	4628      	mov	r0, r5
 800928a:	47b0      	blx	r6
 800928c:	2800      	cmp	r0, #0
 800928e:	dc06      	bgt.n	800929e <__sflush_r+0xfe>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800929c:	e78e      	b.n	80091bc <__sflush_r+0x1c>
 800929e:	4407      	add	r7, r0
 80092a0:	eba8 0800 	sub.w	r8, r8, r0
 80092a4:	e7e9      	b.n	800927a <__sflush_r+0xda>
 80092a6:	bf00      	nop
 80092a8:	20400001 	.word	0x20400001

080092ac <_fflush_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	690b      	ldr	r3, [r1, #16]
 80092b0:	4605      	mov	r5, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	b913      	cbnz	r3, 80092bc <_fflush_r+0x10>
 80092b6:	2500      	movs	r5, #0
 80092b8:	4628      	mov	r0, r5
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	b118      	cbz	r0, 80092c6 <_fflush_r+0x1a>
 80092be:	6983      	ldr	r3, [r0, #24]
 80092c0:	b90b      	cbnz	r3, 80092c6 <_fflush_r+0x1a>
 80092c2:	f000 f887 	bl	80093d4 <__sinit>
 80092c6:	4b14      	ldr	r3, [pc, #80]	; (8009318 <_fflush_r+0x6c>)
 80092c8:	429c      	cmp	r4, r3
 80092ca:	d11b      	bne.n	8009304 <_fflush_r+0x58>
 80092cc:	686c      	ldr	r4, [r5, #4]
 80092ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0ef      	beq.n	80092b6 <_fflush_r+0xa>
 80092d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092d8:	07d0      	lsls	r0, r2, #31
 80092da:	d404      	bmi.n	80092e6 <_fflush_r+0x3a>
 80092dc:	0599      	lsls	r1, r3, #22
 80092de:	d402      	bmi.n	80092e6 <_fflush_r+0x3a>
 80092e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092e2:	f000 f91a 	bl	800951a <__retarget_lock_acquire_recursive>
 80092e6:	4628      	mov	r0, r5
 80092e8:	4621      	mov	r1, r4
 80092ea:	f7ff ff59 	bl	80091a0 <__sflush_r>
 80092ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092f0:	07da      	lsls	r2, r3, #31
 80092f2:	4605      	mov	r5, r0
 80092f4:	d4e0      	bmi.n	80092b8 <_fflush_r+0xc>
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	059b      	lsls	r3, r3, #22
 80092fa:	d4dd      	bmi.n	80092b8 <_fflush_r+0xc>
 80092fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092fe:	f000 f90d 	bl	800951c <__retarget_lock_release_recursive>
 8009302:	e7d9      	b.n	80092b8 <_fflush_r+0xc>
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <_fflush_r+0x70>)
 8009306:	429c      	cmp	r4, r3
 8009308:	d101      	bne.n	800930e <_fflush_r+0x62>
 800930a:	68ac      	ldr	r4, [r5, #8]
 800930c:	e7df      	b.n	80092ce <_fflush_r+0x22>
 800930e:	4b04      	ldr	r3, [pc, #16]	; (8009320 <_fflush_r+0x74>)
 8009310:	429c      	cmp	r4, r3
 8009312:	bf08      	it	eq
 8009314:	68ec      	ldreq	r4, [r5, #12]
 8009316:	e7da      	b.n	80092ce <_fflush_r+0x22>
 8009318:	0800ab18 	.word	0x0800ab18
 800931c:	0800ab38 	.word	0x0800ab38
 8009320:	0800aaf8 	.word	0x0800aaf8

08009324 <std>:
 8009324:	2300      	movs	r3, #0
 8009326:	b510      	push	{r4, lr}
 8009328:	4604      	mov	r4, r0
 800932a:	e9c0 3300 	strd	r3, r3, [r0]
 800932e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009332:	6083      	str	r3, [r0, #8]
 8009334:	8181      	strh	r1, [r0, #12]
 8009336:	6643      	str	r3, [r0, #100]	; 0x64
 8009338:	81c2      	strh	r2, [r0, #14]
 800933a:	6183      	str	r3, [r0, #24]
 800933c:	4619      	mov	r1, r3
 800933e:	2208      	movs	r2, #8
 8009340:	305c      	adds	r0, #92	; 0x5c
 8009342:	f7fe fa05 	bl	8007750 <memset>
 8009346:	4b05      	ldr	r3, [pc, #20]	; (800935c <std+0x38>)
 8009348:	6263      	str	r3, [r4, #36]	; 0x24
 800934a:	4b05      	ldr	r3, [pc, #20]	; (8009360 <std+0x3c>)
 800934c:	62a3      	str	r3, [r4, #40]	; 0x28
 800934e:	4b05      	ldr	r3, [pc, #20]	; (8009364 <std+0x40>)
 8009350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009352:	4b05      	ldr	r3, [pc, #20]	; (8009368 <std+0x44>)
 8009354:	6224      	str	r4, [r4, #32]
 8009356:	6323      	str	r3, [r4, #48]	; 0x30
 8009358:	bd10      	pop	{r4, pc}
 800935a:	bf00      	nop
 800935c:	0800a331 	.word	0x0800a331
 8009360:	0800a353 	.word	0x0800a353
 8009364:	0800a38b 	.word	0x0800a38b
 8009368:	0800a3af 	.word	0x0800a3af

0800936c <_cleanup_r>:
 800936c:	4901      	ldr	r1, [pc, #4]	; (8009374 <_cleanup_r+0x8>)
 800936e:	f000 b8af 	b.w	80094d0 <_fwalk_reent>
 8009372:	bf00      	nop
 8009374:	080092ad 	.word	0x080092ad

08009378 <__sfmoreglue>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	1e4a      	subs	r2, r1, #1
 800937c:	2568      	movs	r5, #104	; 0x68
 800937e:	4355      	muls	r5, r2
 8009380:	460e      	mov	r6, r1
 8009382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009386:	f7fe fa3b 	bl	8007800 <_malloc_r>
 800938a:	4604      	mov	r4, r0
 800938c:	b140      	cbz	r0, 80093a0 <__sfmoreglue+0x28>
 800938e:	2100      	movs	r1, #0
 8009390:	e9c0 1600 	strd	r1, r6, [r0]
 8009394:	300c      	adds	r0, #12
 8009396:	60a0      	str	r0, [r4, #8]
 8009398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800939c:	f7fe f9d8 	bl	8007750 <memset>
 80093a0:	4620      	mov	r0, r4
 80093a2:	bd70      	pop	{r4, r5, r6, pc}

080093a4 <__sfp_lock_acquire>:
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__sfp_lock_acquire+0x8>)
 80093a6:	f000 b8b8 	b.w	800951a <__retarget_lock_acquire_recursive>
 80093aa:	bf00      	nop
 80093ac:	2000045c 	.word	0x2000045c

080093b0 <__sfp_lock_release>:
 80093b0:	4801      	ldr	r0, [pc, #4]	; (80093b8 <__sfp_lock_release+0x8>)
 80093b2:	f000 b8b3 	b.w	800951c <__retarget_lock_release_recursive>
 80093b6:	bf00      	nop
 80093b8:	2000045c 	.word	0x2000045c

080093bc <__sinit_lock_acquire>:
 80093bc:	4801      	ldr	r0, [pc, #4]	; (80093c4 <__sinit_lock_acquire+0x8>)
 80093be:	f000 b8ac 	b.w	800951a <__retarget_lock_acquire_recursive>
 80093c2:	bf00      	nop
 80093c4:	20000457 	.word	0x20000457

080093c8 <__sinit_lock_release>:
 80093c8:	4801      	ldr	r0, [pc, #4]	; (80093d0 <__sinit_lock_release+0x8>)
 80093ca:	f000 b8a7 	b.w	800951c <__retarget_lock_release_recursive>
 80093ce:	bf00      	nop
 80093d0:	20000457 	.word	0x20000457

080093d4 <__sinit>:
 80093d4:	b510      	push	{r4, lr}
 80093d6:	4604      	mov	r4, r0
 80093d8:	f7ff fff0 	bl	80093bc <__sinit_lock_acquire>
 80093dc:	69a3      	ldr	r3, [r4, #24]
 80093de:	b11b      	cbz	r3, 80093e8 <__sinit+0x14>
 80093e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093e4:	f7ff bff0 	b.w	80093c8 <__sinit_lock_release>
 80093e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093ec:	6523      	str	r3, [r4, #80]	; 0x50
 80093ee:	4b13      	ldr	r3, [pc, #76]	; (800943c <__sinit+0x68>)
 80093f0:	4a13      	ldr	r2, [pc, #76]	; (8009440 <__sinit+0x6c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80093f6:	42a3      	cmp	r3, r4
 80093f8:	bf04      	itt	eq
 80093fa:	2301      	moveq	r3, #1
 80093fc:	61a3      	streq	r3, [r4, #24]
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 f820 	bl	8009444 <__sfp>
 8009404:	6060      	str	r0, [r4, #4]
 8009406:	4620      	mov	r0, r4
 8009408:	f000 f81c 	bl	8009444 <__sfp>
 800940c:	60a0      	str	r0, [r4, #8]
 800940e:	4620      	mov	r0, r4
 8009410:	f000 f818 	bl	8009444 <__sfp>
 8009414:	2200      	movs	r2, #0
 8009416:	60e0      	str	r0, [r4, #12]
 8009418:	2104      	movs	r1, #4
 800941a:	6860      	ldr	r0, [r4, #4]
 800941c:	f7ff ff82 	bl	8009324 <std>
 8009420:	68a0      	ldr	r0, [r4, #8]
 8009422:	2201      	movs	r2, #1
 8009424:	2109      	movs	r1, #9
 8009426:	f7ff ff7d 	bl	8009324 <std>
 800942a:	68e0      	ldr	r0, [r4, #12]
 800942c:	2202      	movs	r2, #2
 800942e:	2112      	movs	r1, #18
 8009430:	f7ff ff78 	bl	8009324 <std>
 8009434:	2301      	movs	r3, #1
 8009436:	61a3      	str	r3, [r4, #24]
 8009438:	e7d2      	b.n	80093e0 <__sinit+0xc>
 800943a:	bf00      	nop
 800943c:	0800aa2c 	.word	0x0800aa2c
 8009440:	0800936d 	.word	0x0800936d

08009444 <__sfp>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	4607      	mov	r7, r0
 8009448:	f7ff ffac 	bl	80093a4 <__sfp_lock_acquire>
 800944c:	4b1e      	ldr	r3, [pc, #120]	; (80094c8 <__sfp+0x84>)
 800944e:	681e      	ldr	r6, [r3, #0]
 8009450:	69b3      	ldr	r3, [r6, #24]
 8009452:	b913      	cbnz	r3, 800945a <__sfp+0x16>
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff ffbd 	bl	80093d4 <__sinit>
 800945a:	3648      	adds	r6, #72	; 0x48
 800945c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009460:	3b01      	subs	r3, #1
 8009462:	d503      	bpl.n	800946c <__sfp+0x28>
 8009464:	6833      	ldr	r3, [r6, #0]
 8009466:	b30b      	cbz	r3, 80094ac <__sfp+0x68>
 8009468:	6836      	ldr	r6, [r6, #0]
 800946a:	e7f7      	b.n	800945c <__sfp+0x18>
 800946c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009470:	b9d5      	cbnz	r5, 80094a8 <__sfp+0x64>
 8009472:	4b16      	ldr	r3, [pc, #88]	; (80094cc <__sfp+0x88>)
 8009474:	60e3      	str	r3, [r4, #12]
 8009476:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800947a:	6665      	str	r5, [r4, #100]	; 0x64
 800947c:	f000 f84c 	bl	8009518 <__retarget_lock_init_recursive>
 8009480:	f7ff ff96 	bl	80093b0 <__sfp_lock_release>
 8009484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800948c:	6025      	str	r5, [r4, #0]
 800948e:	61a5      	str	r5, [r4, #24]
 8009490:	2208      	movs	r2, #8
 8009492:	4629      	mov	r1, r5
 8009494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009498:	f7fe f95a 	bl	8007750 <memset>
 800949c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094a4:	4620      	mov	r0, r4
 80094a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a8:	3468      	adds	r4, #104	; 0x68
 80094aa:	e7d9      	b.n	8009460 <__sfp+0x1c>
 80094ac:	2104      	movs	r1, #4
 80094ae:	4638      	mov	r0, r7
 80094b0:	f7ff ff62 	bl	8009378 <__sfmoreglue>
 80094b4:	4604      	mov	r4, r0
 80094b6:	6030      	str	r0, [r6, #0]
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d1d5      	bne.n	8009468 <__sfp+0x24>
 80094bc:	f7ff ff78 	bl	80093b0 <__sfp_lock_release>
 80094c0:	230c      	movs	r3, #12
 80094c2:	603b      	str	r3, [r7, #0]
 80094c4:	e7ee      	b.n	80094a4 <__sfp+0x60>
 80094c6:	bf00      	nop
 80094c8:	0800aa2c 	.word	0x0800aa2c
 80094cc:	ffff0001 	.word	0xffff0001

080094d0 <_fwalk_reent>:
 80094d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d4:	4606      	mov	r6, r0
 80094d6:	4688      	mov	r8, r1
 80094d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094dc:	2700      	movs	r7, #0
 80094de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094e2:	f1b9 0901 	subs.w	r9, r9, #1
 80094e6:	d505      	bpl.n	80094f4 <_fwalk_reent+0x24>
 80094e8:	6824      	ldr	r4, [r4, #0]
 80094ea:	2c00      	cmp	r4, #0
 80094ec:	d1f7      	bne.n	80094de <_fwalk_reent+0xe>
 80094ee:	4638      	mov	r0, r7
 80094f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f4:	89ab      	ldrh	r3, [r5, #12]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d907      	bls.n	800950a <_fwalk_reent+0x3a>
 80094fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094fe:	3301      	adds	r3, #1
 8009500:	d003      	beq.n	800950a <_fwalk_reent+0x3a>
 8009502:	4629      	mov	r1, r5
 8009504:	4630      	mov	r0, r6
 8009506:	47c0      	blx	r8
 8009508:	4307      	orrs	r7, r0
 800950a:	3568      	adds	r5, #104	; 0x68
 800950c:	e7e9      	b.n	80094e2 <_fwalk_reent+0x12>
	...

08009510 <_localeconv_r>:
 8009510:	4800      	ldr	r0, [pc, #0]	; (8009514 <_localeconv_r+0x4>)
 8009512:	4770      	bx	lr
 8009514:	20000160 	.word	0x20000160

08009518 <__retarget_lock_init_recursive>:
 8009518:	4770      	bx	lr

0800951a <__retarget_lock_acquire_recursive>:
 800951a:	4770      	bx	lr

0800951c <__retarget_lock_release_recursive>:
 800951c:	4770      	bx	lr

0800951e <__swhatbuf_r>:
 800951e:	b570      	push	{r4, r5, r6, lr}
 8009520:	460e      	mov	r6, r1
 8009522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009526:	2900      	cmp	r1, #0
 8009528:	b096      	sub	sp, #88	; 0x58
 800952a:	4614      	mov	r4, r2
 800952c:	461d      	mov	r5, r3
 800952e:	da07      	bge.n	8009540 <__swhatbuf_r+0x22>
 8009530:	2300      	movs	r3, #0
 8009532:	602b      	str	r3, [r5, #0]
 8009534:	89b3      	ldrh	r3, [r6, #12]
 8009536:	061a      	lsls	r2, r3, #24
 8009538:	d410      	bmi.n	800955c <__swhatbuf_r+0x3e>
 800953a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800953e:	e00e      	b.n	800955e <__swhatbuf_r+0x40>
 8009540:	466a      	mov	r2, sp
 8009542:	f000 ff8b 	bl	800a45c <_fstat_r>
 8009546:	2800      	cmp	r0, #0
 8009548:	dbf2      	blt.n	8009530 <__swhatbuf_r+0x12>
 800954a:	9a01      	ldr	r2, [sp, #4]
 800954c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009550:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009554:	425a      	negs	r2, r3
 8009556:	415a      	adcs	r2, r3
 8009558:	602a      	str	r2, [r5, #0]
 800955a:	e7ee      	b.n	800953a <__swhatbuf_r+0x1c>
 800955c:	2340      	movs	r3, #64	; 0x40
 800955e:	2000      	movs	r0, #0
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	b016      	add	sp, #88	; 0x58
 8009564:	bd70      	pop	{r4, r5, r6, pc}
	...

08009568 <__smakebuf_r>:
 8009568:	898b      	ldrh	r3, [r1, #12]
 800956a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800956c:	079d      	lsls	r5, r3, #30
 800956e:	4606      	mov	r6, r0
 8009570:	460c      	mov	r4, r1
 8009572:	d507      	bpl.n	8009584 <__smakebuf_r+0x1c>
 8009574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	6123      	str	r3, [r4, #16]
 800957c:	2301      	movs	r3, #1
 800957e:	6163      	str	r3, [r4, #20]
 8009580:	b002      	add	sp, #8
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	ab01      	add	r3, sp, #4
 8009586:	466a      	mov	r2, sp
 8009588:	f7ff ffc9 	bl	800951e <__swhatbuf_r>
 800958c:	9900      	ldr	r1, [sp, #0]
 800958e:	4605      	mov	r5, r0
 8009590:	4630      	mov	r0, r6
 8009592:	f7fe f935 	bl	8007800 <_malloc_r>
 8009596:	b948      	cbnz	r0, 80095ac <__smakebuf_r+0x44>
 8009598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800959c:	059a      	lsls	r2, r3, #22
 800959e:	d4ef      	bmi.n	8009580 <__smakebuf_r+0x18>
 80095a0:	f023 0303 	bic.w	r3, r3, #3
 80095a4:	f043 0302 	orr.w	r3, r3, #2
 80095a8:	81a3      	strh	r3, [r4, #12]
 80095aa:	e7e3      	b.n	8009574 <__smakebuf_r+0xc>
 80095ac:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <__smakebuf_r+0x7c>)
 80095ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	6020      	str	r0, [r4, #0]
 80095b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	9b00      	ldr	r3, [sp, #0]
 80095bc:	6163      	str	r3, [r4, #20]
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	6120      	str	r0, [r4, #16]
 80095c2:	b15b      	cbz	r3, 80095dc <__smakebuf_r+0x74>
 80095c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 ff59 	bl	800a480 <_isatty_r>
 80095ce:	b128      	cbz	r0, 80095dc <__smakebuf_r+0x74>
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	f023 0303 	bic.w	r3, r3, #3
 80095d6:	f043 0301 	orr.w	r3, r3, #1
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	89a0      	ldrh	r0, [r4, #12]
 80095de:	4305      	orrs	r5, r0
 80095e0:	81a5      	strh	r5, [r4, #12]
 80095e2:	e7cd      	b.n	8009580 <__smakebuf_r+0x18>
 80095e4:	0800936d 	.word	0x0800936d

080095e8 <memcpy>:
 80095e8:	440a      	add	r2, r1
 80095ea:	4291      	cmp	r1, r2
 80095ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80095f0:	d100      	bne.n	80095f4 <memcpy+0xc>
 80095f2:	4770      	bx	lr
 80095f4:	b510      	push	{r4, lr}
 80095f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095fe:	4291      	cmp	r1, r2
 8009600:	d1f9      	bne.n	80095f6 <memcpy+0xe>
 8009602:	bd10      	pop	{r4, pc}

08009604 <__malloc_lock>:
 8009604:	4801      	ldr	r0, [pc, #4]	; (800960c <__malloc_lock+0x8>)
 8009606:	f7ff bf88 	b.w	800951a <__retarget_lock_acquire_recursive>
 800960a:	bf00      	nop
 800960c:	20000458 	.word	0x20000458

08009610 <__malloc_unlock>:
 8009610:	4801      	ldr	r0, [pc, #4]	; (8009618 <__malloc_unlock+0x8>)
 8009612:	f7ff bf83 	b.w	800951c <__retarget_lock_release_recursive>
 8009616:	bf00      	nop
 8009618:	20000458 	.word	0x20000458

0800961c <_Balloc>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009620:	4604      	mov	r4, r0
 8009622:	460d      	mov	r5, r1
 8009624:	b976      	cbnz	r6, 8009644 <_Balloc+0x28>
 8009626:	2010      	movs	r0, #16
 8009628:	f7fe f88a 	bl	8007740 <malloc>
 800962c:	4602      	mov	r2, r0
 800962e:	6260      	str	r0, [r4, #36]	; 0x24
 8009630:	b920      	cbnz	r0, 800963c <_Balloc+0x20>
 8009632:	4b18      	ldr	r3, [pc, #96]	; (8009694 <_Balloc+0x78>)
 8009634:	4818      	ldr	r0, [pc, #96]	; (8009698 <_Balloc+0x7c>)
 8009636:	2166      	movs	r1, #102	; 0x66
 8009638:	f000 fed0 	bl	800a3dc <__assert_func>
 800963c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009640:	6006      	str	r6, [r0, #0]
 8009642:	60c6      	str	r6, [r0, #12]
 8009644:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009646:	68f3      	ldr	r3, [r6, #12]
 8009648:	b183      	cbz	r3, 800966c <_Balloc+0x50>
 800964a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009652:	b9b8      	cbnz	r0, 8009684 <_Balloc+0x68>
 8009654:	2101      	movs	r1, #1
 8009656:	fa01 f605 	lsl.w	r6, r1, r5
 800965a:	1d72      	adds	r2, r6, #5
 800965c:	0092      	lsls	r2, r2, #2
 800965e:	4620      	mov	r0, r4
 8009660:	f000 fb5a 	bl	8009d18 <_calloc_r>
 8009664:	b160      	cbz	r0, 8009680 <_Balloc+0x64>
 8009666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800966a:	e00e      	b.n	800968a <_Balloc+0x6e>
 800966c:	2221      	movs	r2, #33	; 0x21
 800966e:	2104      	movs	r1, #4
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fb51 	bl	8009d18 <_calloc_r>
 8009676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009678:	60f0      	str	r0, [r6, #12]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e4      	bne.n	800964a <_Balloc+0x2e>
 8009680:	2000      	movs	r0, #0
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	6802      	ldr	r2, [r0, #0]
 8009686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800968a:	2300      	movs	r3, #0
 800968c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009690:	e7f7      	b.n	8009682 <_Balloc+0x66>
 8009692:	bf00      	nop
 8009694:	0800aa71 	.word	0x0800aa71
 8009698:	0800ab58 	.word	0x0800ab58

0800969c <_Bfree>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096a0:	4605      	mov	r5, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	b976      	cbnz	r6, 80096c4 <_Bfree+0x28>
 80096a6:	2010      	movs	r0, #16
 80096a8:	f7fe f84a 	bl	8007740 <malloc>
 80096ac:	4602      	mov	r2, r0
 80096ae:	6268      	str	r0, [r5, #36]	; 0x24
 80096b0:	b920      	cbnz	r0, 80096bc <_Bfree+0x20>
 80096b2:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <_Bfree+0x3c>)
 80096b4:	4809      	ldr	r0, [pc, #36]	; (80096dc <_Bfree+0x40>)
 80096b6:	218a      	movs	r1, #138	; 0x8a
 80096b8:	f000 fe90 	bl	800a3dc <__assert_func>
 80096bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096c0:	6006      	str	r6, [r0, #0]
 80096c2:	60c6      	str	r6, [r0, #12]
 80096c4:	b13c      	cbz	r4, 80096d6 <_Bfree+0x3a>
 80096c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096c8:	6862      	ldr	r2, [r4, #4]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096d0:	6021      	str	r1, [r4, #0]
 80096d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	0800aa71 	.word	0x0800aa71
 80096dc:	0800ab58 	.word	0x0800ab58

080096e0 <__multadd>:
 80096e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e4:	690e      	ldr	r6, [r1, #16]
 80096e6:	4607      	mov	r7, r0
 80096e8:	4698      	mov	r8, r3
 80096ea:	460c      	mov	r4, r1
 80096ec:	f101 0014 	add.w	r0, r1, #20
 80096f0:	2300      	movs	r3, #0
 80096f2:	6805      	ldr	r5, [r0, #0]
 80096f4:	b2a9      	uxth	r1, r5
 80096f6:	fb02 8101 	mla	r1, r2, r1, r8
 80096fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80096fe:	0c2d      	lsrs	r5, r5, #16
 8009700:	fb02 c505 	mla	r5, r2, r5, ip
 8009704:	b289      	uxth	r1, r1
 8009706:	3301      	adds	r3, #1
 8009708:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800970c:	429e      	cmp	r6, r3
 800970e:	f840 1b04 	str.w	r1, [r0], #4
 8009712:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009716:	dcec      	bgt.n	80096f2 <__multadd+0x12>
 8009718:	f1b8 0f00 	cmp.w	r8, #0
 800971c:	d022      	beq.n	8009764 <__multadd+0x84>
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	42b3      	cmp	r3, r6
 8009722:	dc19      	bgt.n	8009758 <__multadd+0x78>
 8009724:	6861      	ldr	r1, [r4, #4]
 8009726:	4638      	mov	r0, r7
 8009728:	3101      	adds	r1, #1
 800972a:	f7ff ff77 	bl	800961c <_Balloc>
 800972e:	4605      	mov	r5, r0
 8009730:	b928      	cbnz	r0, 800973e <__multadd+0x5e>
 8009732:	4602      	mov	r2, r0
 8009734:	4b0d      	ldr	r3, [pc, #52]	; (800976c <__multadd+0x8c>)
 8009736:	480e      	ldr	r0, [pc, #56]	; (8009770 <__multadd+0x90>)
 8009738:	21b5      	movs	r1, #181	; 0xb5
 800973a:	f000 fe4f 	bl	800a3dc <__assert_func>
 800973e:	6922      	ldr	r2, [r4, #16]
 8009740:	3202      	adds	r2, #2
 8009742:	f104 010c 	add.w	r1, r4, #12
 8009746:	0092      	lsls	r2, r2, #2
 8009748:	300c      	adds	r0, #12
 800974a:	f7ff ff4d 	bl	80095e8 <memcpy>
 800974e:	4621      	mov	r1, r4
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff ffa3 	bl	800969c <_Bfree>
 8009756:	462c      	mov	r4, r5
 8009758:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800975c:	3601      	adds	r6, #1
 800975e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009762:	6126      	str	r6, [r4, #16]
 8009764:	4620      	mov	r0, r4
 8009766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976a:	bf00      	nop
 800976c:	0800aae7 	.word	0x0800aae7
 8009770:	0800ab58 	.word	0x0800ab58

08009774 <__hi0bits>:
 8009774:	0c03      	lsrs	r3, r0, #16
 8009776:	041b      	lsls	r3, r3, #16
 8009778:	b9d3      	cbnz	r3, 80097b0 <__hi0bits+0x3c>
 800977a:	0400      	lsls	r0, r0, #16
 800977c:	2310      	movs	r3, #16
 800977e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009782:	bf04      	itt	eq
 8009784:	0200      	lsleq	r0, r0, #8
 8009786:	3308      	addeq	r3, #8
 8009788:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800978c:	bf04      	itt	eq
 800978e:	0100      	lsleq	r0, r0, #4
 8009790:	3304      	addeq	r3, #4
 8009792:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009796:	bf04      	itt	eq
 8009798:	0080      	lsleq	r0, r0, #2
 800979a:	3302      	addeq	r3, #2
 800979c:	2800      	cmp	r0, #0
 800979e:	db05      	blt.n	80097ac <__hi0bits+0x38>
 80097a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097a4:	f103 0301 	add.w	r3, r3, #1
 80097a8:	bf08      	it	eq
 80097aa:	2320      	moveq	r3, #32
 80097ac:	4618      	mov	r0, r3
 80097ae:	4770      	bx	lr
 80097b0:	2300      	movs	r3, #0
 80097b2:	e7e4      	b.n	800977e <__hi0bits+0xa>

080097b4 <__lo0bits>:
 80097b4:	6803      	ldr	r3, [r0, #0]
 80097b6:	f013 0207 	ands.w	r2, r3, #7
 80097ba:	4601      	mov	r1, r0
 80097bc:	d00b      	beq.n	80097d6 <__lo0bits+0x22>
 80097be:	07da      	lsls	r2, r3, #31
 80097c0:	d424      	bmi.n	800980c <__lo0bits+0x58>
 80097c2:	0798      	lsls	r0, r3, #30
 80097c4:	bf49      	itett	mi
 80097c6:	085b      	lsrmi	r3, r3, #1
 80097c8:	089b      	lsrpl	r3, r3, #2
 80097ca:	2001      	movmi	r0, #1
 80097cc:	600b      	strmi	r3, [r1, #0]
 80097ce:	bf5c      	itt	pl
 80097d0:	600b      	strpl	r3, [r1, #0]
 80097d2:	2002      	movpl	r0, #2
 80097d4:	4770      	bx	lr
 80097d6:	b298      	uxth	r0, r3
 80097d8:	b9b0      	cbnz	r0, 8009808 <__lo0bits+0x54>
 80097da:	0c1b      	lsrs	r3, r3, #16
 80097dc:	2010      	movs	r0, #16
 80097de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80097e2:	bf04      	itt	eq
 80097e4:	0a1b      	lsreq	r3, r3, #8
 80097e6:	3008      	addeq	r0, #8
 80097e8:	071a      	lsls	r2, r3, #28
 80097ea:	bf04      	itt	eq
 80097ec:	091b      	lsreq	r3, r3, #4
 80097ee:	3004      	addeq	r0, #4
 80097f0:	079a      	lsls	r2, r3, #30
 80097f2:	bf04      	itt	eq
 80097f4:	089b      	lsreq	r3, r3, #2
 80097f6:	3002      	addeq	r0, #2
 80097f8:	07da      	lsls	r2, r3, #31
 80097fa:	d403      	bmi.n	8009804 <__lo0bits+0x50>
 80097fc:	085b      	lsrs	r3, r3, #1
 80097fe:	f100 0001 	add.w	r0, r0, #1
 8009802:	d005      	beq.n	8009810 <__lo0bits+0x5c>
 8009804:	600b      	str	r3, [r1, #0]
 8009806:	4770      	bx	lr
 8009808:	4610      	mov	r0, r2
 800980a:	e7e8      	b.n	80097de <__lo0bits+0x2a>
 800980c:	2000      	movs	r0, #0
 800980e:	4770      	bx	lr
 8009810:	2020      	movs	r0, #32
 8009812:	4770      	bx	lr

08009814 <__i2b>:
 8009814:	b510      	push	{r4, lr}
 8009816:	460c      	mov	r4, r1
 8009818:	2101      	movs	r1, #1
 800981a:	f7ff feff 	bl	800961c <_Balloc>
 800981e:	4602      	mov	r2, r0
 8009820:	b928      	cbnz	r0, 800982e <__i2b+0x1a>
 8009822:	4b05      	ldr	r3, [pc, #20]	; (8009838 <__i2b+0x24>)
 8009824:	4805      	ldr	r0, [pc, #20]	; (800983c <__i2b+0x28>)
 8009826:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800982a:	f000 fdd7 	bl	800a3dc <__assert_func>
 800982e:	2301      	movs	r3, #1
 8009830:	6144      	str	r4, [r0, #20]
 8009832:	6103      	str	r3, [r0, #16]
 8009834:	bd10      	pop	{r4, pc}
 8009836:	bf00      	nop
 8009838:	0800aae7 	.word	0x0800aae7
 800983c:	0800ab58 	.word	0x0800ab58

08009840 <__multiply>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	4614      	mov	r4, r2
 8009846:	690a      	ldr	r2, [r1, #16]
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	429a      	cmp	r2, r3
 800984c:	bfb8      	it	lt
 800984e:	460b      	movlt	r3, r1
 8009850:	460d      	mov	r5, r1
 8009852:	bfbc      	itt	lt
 8009854:	4625      	movlt	r5, r4
 8009856:	461c      	movlt	r4, r3
 8009858:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800985c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009860:	68ab      	ldr	r3, [r5, #8]
 8009862:	6869      	ldr	r1, [r5, #4]
 8009864:	eb0a 0709 	add.w	r7, sl, r9
 8009868:	42bb      	cmp	r3, r7
 800986a:	b085      	sub	sp, #20
 800986c:	bfb8      	it	lt
 800986e:	3101      	addlt	r1, #1
 8009870:	f7ff fed4 	bl	800961c <_Balloc>
 8009874:	b930      	cbnz	r0, 8009884 <__multiply+0x44>
 8009876:	4602      	mov	r2, r0
 8009878:	4b42      	ldr	r3, [pc, #264]	; (8009984 <__multiply+0x144>)
 800987a:	4843      	ldr	r0, [pc, #268]	; (8009988 <__multiply+0x148>)
 800987c:	f240 115d 	movw	r1, #349	; 0x15d
 8009880:	f000 fdac 	bl	800a3dc <__assert_func>
 8009884:	f100 0614 	add.w	r6, r0, #20
 8009888:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800988c:	4633      	mov	r3, r6
 800988e:	2200      	movs	r2, #0
 8009890:	4543      	cmp	r3, r8
 8009892:	d31e      	bcc.n	80098d2 <__multiply+0x92>
 8009894:	f105 0c14 	add.w	ip, r5, #20
 8009898:	f104 0314 	add.w	r3, r4, #20
 800989c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80098a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80098a4:	9202      	str	r2, [sp, #8]
 80098a6:	ebac 0205 	sub.w	r2, ip, r5
 80098aa:	3a15      	subs	r2, #21
 80098ac:	f022 0203 	bic.w	r2, r2, #3
 80098b0:	3204      	adds	r2, #4
 80098b2:	f105 0115 	add.w	r1, r5, #21
 80098b6:	458c      	cmp	ip, r1
 80098b8:	bf38      	it	cc
 80098ba:	2204      	movcc	r2, #4
 80098bc:	9201      	str	r2, [sp, #4]
 80098be:	9a02      	ldr	r2, [sp, #8]
 80098c0:	9303      	str	r3, [sp, #12]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d808      	bhi.n	80098d8 <__multiply+0x98>
 80098c6:	2f00      	cmp	r7, #0
 80098c8:	dc55      	bgt.n	8009976 <__multiply+0x136>
 80098ca:	6107      	str	r7, [r0, #16]
 80098cc:	b005      	add	sp, #20
 80098ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d2:	f843 2b04 	str.w	r2, [r3], #4
 80098d6:	e7db      	b.n	8009890 <__multiply+0x50>
 80098d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80098dc:	f1ba 0f00 	cmp.w	sl, #0
 80098e0:	d020      	beq.n	8009924 <__multiply+0xe4>
 80098e2:	f105 0e14 	add.w	lr, r5, #20
 80098e6:	46b1      	mov	r9, r6
 80098e8:	2200      	movs	r2, #0
 80098ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 80098ee:	f8d9 b000 	ldr.w	fp, [r9]
 80098f2:	b2a1      	uxth	r1, r4
 80098f4:	fa1f fb8b 	uxth.w	fp, fp
 80098f8:	fb0a b101 	mla	r1, sl, r1, fp
 80098fc:	4411      	add	r1, r2
 80098fe:	f8d9 2000 	ldr.w	r2, [r9]
 8009902:	0c24      	lsrs	r4, r4, #16
 8009904:	0c12      	lsrs	r2, r2, #16
 8009906:	fb0a 2404 	mla	r4, sl, r4, r2
 800990a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800990e:	b289      	uxth	r1, r1
 8009910:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009914:	45f4      	cmp	ip, lr
 8009916:	f849 1b04 	str.w	r1, [r9], #4
 800991a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800991e:	d8e4      	bhi.n	80098ea <__multiply+0xaa>
 8009920:	9901      	ldr	r1, [sp, #4]
 8009922:	5072      	str	r2, [r6, r1]
 8009924:	9a03      	ldr	r2, [sp, #12]
 8009926:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800992a:	3304      	adds	r3, #4
 800992c:	f1b9 0f00 	cmp.w	r9, #0
 8009930:	d01f      	beq.n	8009972 <__multiply+0x132>
 8009932:	6834      	ldr	r4, [r6, #0]
 8009934:	f105 0114 	add.w	r1, r5, #20
 8009938:	46b6      	mov	lr, r6
 800993a:	f04f 0a00 	mov.w	sl, #0
 800993e:	880a      	ldrh	r2, [r1, #0]
 8009940:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009944:	fb09 b202 	mla	r2, r9, r2, fp
 8009948:	4492      	add	sl, r2
 800994a:	b2a4      	uxth	r4, r4
 800994c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009950:	f84e 4b04 	str.w	r4, [lr], #4
 8009954:	f851 4b04 	ldr.w	r4, [r1], #4
 8009958:	f8be 2000 	ldrh.w	r2, [lr]
 800995c:	0c24      	lsrs	r4, r4, #16
 800995e:	fb09 2404 	mla	r4, r9, r4, r2
 8009962:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009966:	458c      	cmp	ip, r1
 8009968:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800996c:	d8e7      	bhi.n	800993e <__multiply+0xfe>
 800996e:	9a01      	ldr	r2, [sp, #4]
 8009970:	50b4      	str	r4, [r6, r2]
 8009972:	3604      	adds	r6, #4
 8009974:	e7a3      	b.n	80098be <__multiply+0x7e>
 8009976:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1a5      	bne.n	80098ca <__multiply+0x8a>
 800997e:	3f01      	subs	r7, #1
 8009980:	e7a1      	b.n	80098c6 <__multiply+0x86>
 8009982:	bf00      	nop
 8009984:	0800aae7 	.word	0x0800aae7
 8009988:	0800ab58 	.word	0x0800ab58

0800998c <__pow5mult>:
 800998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009990:	4615      	mov	r5, r2
 8009992:	f012 0203 	ands.w	r2, r2, #3
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	d007      	beq.n	80099ac <__pow5mult+0x20>
 800999c:	4c25      	ldr	r4, [pc, #148]	; (8009a34 <__pow5mult+0xa8>)
 800999e:	3a01      	subs	r2, #1
 80099a0:	2300      	movs	r3, #0
 80099a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099a6:	f7ff fe9b 	bl	80096e0 <__multadd>
 80099aa:	4607      	mov	r7, r0
 80099ac:	10ad      	asrs	r5, r5, #2
 80099ae:	d03d      	beq.n	8009a2c <__pow5mult+0xa0>
 80099b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099b2:	b97c      	cbnz	r4, 80099d4 <__pow5mult+0x48>
 80099b4:	2010      	movs	r0, #16
 80099b6:	f7fd fec3 	bl	8007740 <malloc>
 80099ba:	4602      	mov	r2, r0
 80099bc:	6270      	str	r0, [r6, #36]	; 0x24
 80099be:	b928      	cbnz	r0, 80099cc <__pow5mult+0x40>
 80099c0:	4b1d      	ldr	r3, [pc, #116]	; (8009a38 <__pow5mult+0xac>)
 80099c2:	481e      	ldr	r0, [pc, #120]	; (8009a3c <__pow5mult+0xb0>)
 80099c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099c8:	f000 fd08 	bl	800a3dc <__assert_func>
 80099cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099d0:	6004      	str	r4, [r0, #0]
 80099d2:	60c4      	str	r4, [r0, #12]
 80099d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099dc:	b94c      	cbnz	r4, 80099f2 <__pow5mult+0x66>
 80099de:	f240 2171 	movw	r1, #625	; 0x271
 80099e2:	4630      	mov	r0, r6
 80099e4:	f7ff ff16 	bl	8009814 <__i2b>
 80099e8:	2300      	movs	r3, #0
 80099ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80099ee:	4604      	mov	r4, r0
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	07eb      	lsls	r3, r5, #31
 80099f8:	d50a      	bpl.n	8009a10 <__pow5mult+0x84>
 80099fa:	4639      	mov	r1, r7
 80099fc:	4622      	mov	r2, r4
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7ff ff1e 	bl	8009840 <__multiply>
 8009a04:	4639      	mov	r1, r7
 8009a06:	4680      	mov	r8, r0
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff fe47 	bl	800969c <_Bfree>
 8009a0e:	4647      	mov	r7, r8
 8009a10:	106d      	asrs	r5, r5, #1
 8009a12:	d00b      	beq.n	8009a2c <__pow5mult+0xa0>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	b938      	cbnz	r0, 8009a28 <__pow5mult+0x9c>
 8009a18:	4622      	mov	r2, r4
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff ff0f 	bl	8009840 <__multiply>
 8009a22:	6020      	str	r0, [r4, #0]
 8009a24:	f8c0 9000 	str.w	r9, [r0]
 8009a28:	4604      	mov	r4, r0
 8009a2a:	e7e4      	b.n	80099f6 <__pow5mult+0x6a>
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a32:	bf00      	nop
 8009a34:	0800aca8 	.word	0x0800aca8
 8009a38:	0800aa71 	.word	0x0800aa71
 8009a3c:	0800ab58 	.word	0x0800ab58

08009a40 <__lshift>:
 8009a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a44:	460c      	mov	r4, r1
 8009a46:	6849      	ldr	r1, [r1, #4]
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a4e:	68a3      	ldr	r3, [r4, #8]
 8009a50:	4607      	mov	r7, r0
 8009a52:	4691      	mov	r9, r2
 8009a54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a58:	f108 0601 	add.w	r6, r8, #1
 8009a5c:	42b3      	cmp	r3, r6
 8009a5e:	db0b      	blt.n	8009a78 <__lshift+0x38>
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7ff fddb 	bl	800961c <_Balloc>
 8009a66:	4605      	mov	r5, r0
 8009a68:	b948      	cbnz	r0, 8009a7e <__lshift+0x3e>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b28      	ldr	r3, [pc, #160]	; (8009b10 <__lshift+0xd0>)
 8009a6e:	4829      	ldr	r0, [pc, #164]	; (8009b14 <__lshift+0xd4>)
 8009a70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a74:	f000 fcb2 	bl	800a3dc <__assert_func>
 8009a78:	3101      	adds	r1, #1
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	e7ee      	b.n	8009a5c <__lshift+0x1c>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f100 0114 	add.w	r1, r0, #20
 8009a84:	f100 0210 	add.w	r2, r0, #16
 8009a88:	4618      	mov	r0, r3
 8009a8a:	4553      	cmp	r3, sl
 8009a8c:	db33      	blt.n	8009af6 <__lshift+0xb6>
 8009a8e:	6920      	ldr	r0, [r4, #16]
 8009a90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a94:	f104 0314 	add.w	r3, r4, #20
 8009a98:	f019 091f 	ands.w	r9, r9, #31
 8009a9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009aa4:	d02b      	beq.n	8009afe <__lshift+0xbe>
 8009aa6:	f1c9 0e20 	rsb	lr, r9, #32
 8009aaa:	468a      	mov	sl, r1
 8009aac:	2200      	movs	r2, #0
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	fa00 f009 	lsl.w	r0, r0, r9
 8009ab4:	4302      	orrs	r2, r0
 8009ab6:	f84a 2b04 	str.w	r2, [sl], #4
 8009aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009abe:	459c      	cmp	ip, r3
 8009ac0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ac4:	d8f3      	bhi.n	8009aae <__lshift+0x6e>
 8009ac6:	ebac 0304 	sub.w	r3, ip, r4
 8009aca:	3b15      	subs	r3, #21
 8009acc:	f023 0303 	bic.w	r3, r3, #3
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	f104 0015 	add.w	r0, r4, #21
 8009ad6:	4584      	cmp	ip, r0
 8009ad8:	bf38      	it	cc
 8009ada:	2304      	movcc	r3, #4
 8009adc:	50ca      	str	r2, [r1, r3]
 8009ade:	b10a      	cbz	r2, 8009ae4 <__lshift+0xa4>
 8009ae0:	f108 0602 	add.w	r6, r8, #2
 8009ae4:	3e01      	subs	r6, #1
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	612e      	str	r6, [r5, #16]
 8009aea:	4621      	mov	r1, r4
 8009aec:	f7ff fdd6 	bl	800969c <_Bfree>
 8009af0:	4628      	mov	r0, r5
 8009af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009afa:	3301      	adds	r3, #1
 8009afc:	e7c5      	b.n	8009a8a <__lshift+0x4a>
 8009afe:	3904      	subs	r1, #4
 8009b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b04:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b08:	459c      	cmp	ip, r3
 8009b0a:	d8f9      	bhi.n	8009b00 <__lshift+0xc0>
 8009b0c:	e7ea      	b.n	8009ae4 <__lshift+0xa4>
 8009b0e:	bf00      	nop
 8009b10:	0800aae7 	.word	0x0800aae7
 8009b14:	0800ab58 	.word	0x0800ab58

08009b18 <__mcmp>:
 8009b18:	b530      	push	{r4, r5, lr}
 8009b1a:	6902      	ldr	r2, [r0, #16]
 8009b1c:	690c      	ldr	r4, [r1, #16]
 8009b1e:	1b12      	subs	r2, r2, r4
 8009b20:	d10e      	bne.n	8009b40 <__mcmp+0x28>
 8009b22:	f100 0314 	add.w	r3, r0, #20
 8009b26:	3114      	adds	r1, #20
 8009b28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b38:	42a5      	cmp	r5, r4
 8009b3a:	d003      	beq.n	8009b44 <__mcmp+0x2c>
 8009b3c:	d305      	bcc.n	8009b4a <__mcmp+0x32>
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4610      	mov	r0, r2
 8009b42:	bd30      	pop	{r4, r5, pc}
 8009b44:	4283      	cmp	r3, r0
 8009b46:	d3f3      	bcc.n	8009b30 <__mcmp+0x18>
 8009b48:	e7fa      	b.n	8009b40 <__mcmp+0x28>
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b4e:	e7f7      	b.n	8009b40 <__mcmp+0x28>

08009b50 <__mdiff>:
 8009b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	460c      	mov	r4, r1
 8009b56:	4606      	mov	r6, r0
 8009b58:	4611      	mov	r1, r2
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	4617      	mov	r7, r2
 8009b5e:	f7ff ffdb 	bl	8009b18 <__mcmp>
 8009b62:	1e05      	subs	r5, r0, #0
 8009b64:	d110      	bne.n	8009b88 <__mdiff+0x38>
 8009b66:	4629      	mov	r1, r5
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff fd57 	bl	800961c <_Balloc>
 8009b6e:	b930      	cbnz	r0, 8009b7e <__mdiff+0x2e>
 8009b70:	4b39      	ldr	r3, [pc, #228]	; (8009c58 <__mdiff+0x108>)
 8009b72:	4602      	mov	r2, r0
 8009b74:	f240 2132 	movw	r1, #562	; 0x232
 8009b78:	4838      	ldr	r0, [pc, #224]	; (8009c5c <__mdiff+0x10c>)
 8009b7a:	f000 fc2f 	bl	800a3dc <__assert_func>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b88:	bfa4      	itt	ge
 8009b8a:	463b      	movge	r3, r7
 8009b8c:	4627      	movge	r7, r4
 8009b8e:	4630      	mov	r0, r6
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	bfa6      	itte	ge
 8009b94:	461c      	movge	r4, r3
 8009b96:	2500      	movge	r5, #0
 8009b98:	2501      	movlt	r5, #1
 8009b9a:	f7ff fd3f 	bl	800961c <_Balloc>
 8009b9e:	b920      	cbnz	r0, 8009baa <__mdiff+0x5a>
 8009ba0:	4b2d      	ldr	r3, [pc, #180]	; (8009c58 <__mdiff+0x108>)
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ba8:	e7e6      	b.n	8009b78 <__mdiff+0x28>
 8009baa:	693e      	ldr	r6, [r7, #16]
 8009bac:	60c5      	str	r5, [r0, #12]
 8009bae:	6925      	ldr	r5, [r4, #16]
 8009bb0:	f107 0114 	add.w	r1, r7, #20
 8009bb4:	f104 0914 	add.w	r9, r4, #20
 8009bb8:	f100 0e14 	add.w	lr, r0, #20
 8009bbc:	f107 0210 	add.w	r2, r7, #16
 8009bc0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009bc4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009bc8:	46f2      	mov	sl, lr
 8009bca:	2700      	movs	r7, #0
 8009bcc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009bd4:	fa1f f883 	uxth.w	r8, r3
 8009bd8:	fa17 f78b 	uxtah	r7, r7, fp
 8009bdc:	0c1b      	lsrs	r3, r3, #16
 8009bde:	eba7 0808 	sub.w	r8, r7, r8
 8009be2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009be6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009bea:	fa1f f888 	uxth.w	r8, r8
 8009bee:	141f      	asrs	r7, r3, #16
 8009bf0:	454d      	cmp	r5, r9
 8009bf2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009bf6:	f84a 3b04 	str.w	r3, [sl], #4
 8009bfa:	d8e7      	bhi.n	8009bcc <__mdiff+0x7c>
 8009bfc:	1b2b      	subs	r3, r5, r4
 8009bfe:	3b15      	subs	r3, #21
 8009c00:	f023 0303 	bic.w	r3, r3, #3
 8009c04:	3304      	adds	r3, #4
 8009c06:	3415      	adds	r4, #21
 8009c08:	42a5      	cmp	r5, r4
 8009c0a:	bf38      	it	cc
 8009c0c:	2304      	movcc	r3, #4
 8009c0e:	4419      	add	r1, r3
 8009c10:	4473      	add	r3, lr
 8009c12:	469e      	mov	lr, r3
 8009c14:	460d      	mov	r5, r1
 8009c16:	4565      	cmp	r5, ip
 8009c18:	d30e      	bcc.n	8009c38 <__mdiff+0xe8>
 8009c1a:	f10c 0203 	add.w	r2, ip, #3
 8009c1e:	1a52      	subs	r2, r2, r1
 8009c20:	f022 0203 	bic.w	r2, r2, #3
 8009c24:	3903      	subs	r1, #3
 8009c26:	458c      	cmp	ip, r1
 8009c28:	bf38      	it	cc
 8009c2a:	2200      	movcc	r2, #0
 8009c2c:	441a      	add	r2, r3
 8009c2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c32:	b17b      	cbz	r3, 8009c54 <__mdiff+0x104>
 8009c34:	6106      	str	r6, [r0, #16]
 8009c36:	e7a5      	b.n	8009b84 <__mdiff+0x34>
 8009c38:	f855 8b04 	ldr.w	r8, [r5], #4
 8009c3c:	fa17 f488 	uxtah	r4, r7, r8
 8009c40:	1422      	asrs	r2, r4, #16
 8009c42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009c46:	b2a4      	uxth	r4, r4
 8009c48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009c4c:	f84e 4b04 	str.w	r4, [lr], #4
 8009c50:	1417      	asrs	r7, r2, #16
 8009c52:	e7e0      	b.n	8009c16 <__mdiff+0xc6>
 8009c54:	3e01      	subs	r6, #1
 8009c56:	e7ea      	b.n	8009c2e <__mdiff+0xde>
 8009c58:	0800aae7 	.word	0x0800aae7
 8009c5c:	0800ab58 	.word	0x0800ab58

08009c60 <__d2b>:
 8009c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	4689      	mov	r9, r1
 8009c66:	2101      	movs	r1, #1
 8009c68:	ec57 6b10 	vmov	r6, r7, d0
 8009c6c:	4690      	mov	r8, r2
 8009c6e:	f7ff fcd5 	bl	800961c <_Balloc>
 8009c72:	4604      	mov	r4, r0
 8009c74:	b930      	cbnz	r0, 8009c84 <__d2b+0x24>
 8009c76:	4602      	mov	r2, r0
 8009c78:	4b25      	ldr	r3, [pc, #148]	; (8009d10 <__d2b+0xb0>)
 8009c7a:	4826      	ldr	r0, [pc, #152]	; (8009d14 <__d2b+0xb4>)
 8009c7c:	f240 310a 	movw	r1, #778	; 0x30a
 8009c80:	f000 fbac 	bl	800a3dc <__assert_func>
 8009c84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c8c:	bb35      	cbnz	r5, 8009cdc <__d2b+0x7c>
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	d028      	beq.n	8009ce6 <__d2b+0x86>
 8009c94:	4668      	mov	r0, sp
 8009c96:	9600      	str	r6, [sp, #0]
 8009c98:	f7ff fd8c 	bl	80097b4 <__lo0bits>
 8009c9c:	9900      	ldr	r1, [sp, #0]
 8009c9e:	b300      	cbz	r0, 8009ce2 <__d2b+0x82>
 8009ca0:	9a01      	ldr	r2, [sp, #4]
 8009ca2:	f1c0 0320 	rsb	r3, r0, #32
 8009ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8009caa:	430b      	orrs	r3, r1
 8009cac:	40c2      	lsrs	r2, r0
 8009cae:	6163      	str	r3, [r4, #20]
 8009cb0:	9201      	str	r2, [sp, #4]
 8009cb2:	9b01      	ldr	r3, [sp, #4]
 8009cb4:	61a3      	str	r3, [r4, #24]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	bf14      	ite	ne
 8009cba:	2202      	movne	r2, #2
 8009cbc:	2201      	moveq	r2, #1
 8009cbe:	6122      	str	r2, [r4, #16]
 8009cc0:	b1d5      	cbz	r5, 8009cf8 <__d2b+0x98>
 8009cc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cc6:	4405      	add	r5, r0
 8009cc8:	f8c9 5000 	str.w	r5, [r9]
 8009ccc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cd0:	f8c8 0000 	str.w	r0, [r8]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	b003      	add	sp, #12
 8009cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ce0:	e7d5      	b.n	8009c8e <__d2b+0x2e>
 8009ce2:	6161      	str	r1, [r4, #20]
 8009ce4:	e7e5      	b.n	8009cb2 <__d2b+0x52>
 8009ce6:	a801      	add	r0, sp, #4
 8009ce8:	f7ff fd64 	bl	80097b4 <__lo0bits>
 8009cec:	9b01      	ldr	r3, [sp, #4]
 8009cee:	6163      	str	r3, [r4, #20]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	6122      	str	r2, [r4, #16]
 8009cf4:	3020      	adds	r0, #32
 8009cf6:	e7e3      	b.n	8009cc0 <__d2b+0x60>
 8009cf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d00:	f8c9 0000 	str.w	r0, [r9]
 8009d04:	6918      	ldr	r0, [r3, #16]
 8009d06:	f7ff fd35 	bl	8009774 <__hi0bits>
 8009d0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d0e:	e7df      	b.n	8009cd0 <__d2b+0x70>
 8009d10:	0800aae7 	.word	0x0800aae7
 8009d14:	0800ab58 	.word	0x0800ab58

08009d18 <_calloc_r>:
 8009d18:	b513      	push	{r0, r1, r4, lr}
 8009d1a:	434a      	muls	r2, r1
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	9201      	str	r2, [sp, #4]
 8009d20:	f7fd fd6e 	bl	8007800 <_malloc_r>
 8009d24:	4604      	mov	r4, r0
 8009d26:	b118      	cbz	r0, 8009d30 <_calloc_r+0x18>
 8009d28:	9a01      	ldr	r2, [sp, #4]
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	f7fd fd10 	bl	8007750 <memset>
 8009d30:	4620      	mov	r0, r4
 8009d32:	b002      	add	sp, #8
 8009d34:	bd10      	pop	{r4, pc}

08009d36 <__ssputs_r>:
 8009d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d3a:	688e      	ldr	r6, [r1, #8]
 8009d3c:	429e      	cmp	r6, r3
 8009d3e:	4682      	mov	sl, r0
 8009d40:	460c      	mov	r4, r1
 8009d42:	4690      	mov	r8, r2
 8009d44:	461f      	mov	r7, r3
 8009d46:	d838      	bhi.n	8009dba <__ssputs_r+0x84>
 8009d48:	898a      	ldrh	r2, [r1, #12]
 8009d4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d4e:	d032      	beq.n	8009db6 <__ssputs_r+0x80>
 8009d50:	6825      	ldr	r5, [r4, #0]
 8009d52:	6909      	ldr	r1, [r1, #16]
 8009d54:	eba5 0901 	sub.w	r9, r5, r1
 8009d58:	6965      	ldr	r5, [r4, #20]
 8009d5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d62:	3301      	adds	r3, #1
 8009d64:	444b      	add	r3, r9
 8009d66:	106d      	asrs	r5, r5, #1
 8009d68:	429d      	cmp	r5, r3
 8009d6a:	bf38      	it	cc
 8009d6c:	461d      	movcc	r5, r3
 8009d6e:	0553      	lsls	r3, r2, #21
 8009d70:	d531      	bpl.n	8009dd6 <__ssputs_r+0xa0>
 8009d72:	4629      	mov	r1, r5
 8009d74:	f7fd fd44 	bl	8007800 <_malloc_r>
 8009d78:	4606      	mov	r6, r0
 8009d7a:	b950      	cbnz	r0, 8009d92 <__ssputs_r+0x5c>
 8009d7c:	230c      	movs	r3, #12
 8009d7e:	f8ca 3000 	str.w	r3, [sl]
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d88:	81a3      	strh	r3, [r4, #12]
 8009d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d92:	6921      	ldr	r1, [r4, #16]
 8009d94:	464a      	mov	r2, r9
 8009d96:	f7ff fc27 	bl	80095e8 <memcpy>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	6126      	str	r6, [r4, #16]
 8009da8:	6165      	str	r5, [r4, #20]
 8009daa:	444e      	add	r6, r9
 8009dac:	eba5 0509 	sub.w	r5, r5, r9
 8009db0:	6026      	str	r6, [r4, #0]
 8009db2:	60a5      	str	r5, [r4, #8]
 8009db4:	463e      	mov	r6, r7
 8009db6:	42be      	cmp	r6, r7
 8009db8:	d900      	bls.n	8009dbc <__ssputs_r+0x86>
 8009dba:	463e      	mov	r6, r7
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	6820      	ldr	r0, [r4, #0]
 8009dc0:	4641      	mov	r1, r8
 8009dc2:	f000 fb91 	bl	800a4e8 <memmove>
 8009dc6:	68a3      	ldr	r3, [r4, #8]
 8009dc8:	6822      	ldr	r2, [r4, #0]
 8009dca:	1b9b      	subs	r3, r3, r6
 8009dcc:	4432      	add	r2, r6
 8009dce:	60a3      	str	r3, [r4, #8]
 8009dd0:	6022      	str	r2, [r4, #0]
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e7db      	b.n	8009d8e <__ssputs_r+0x58>
 8009dd6:	462a      	mov	r2, r5
 8009dd8:	f000 fba0 	bl	800a51c <_realloc_r>
 8009ddc:	4606      	mov	r6, r0
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d1e1      	bne.n	8009da6 <__ssputs_r+0x70>
 8009de2:	6921      	ldr	r1, [r4, #16]
 8009de4:	4650      	mov	r0, sl
 8009de6:	f7fd fcbb 	bl	8007760 <_free_r>
 8009dea:	e7c7      	b.n	8009d7c <__ssputs_r+0x46>

08009dec <_svfiprintf_r>:
 8009dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df0:	4698      	mov	r8, r3
 8009df2:	898b      	ldrh	r3, [r1, #12]
 8009df4:	061b      	lsls	r3, r3, #24
 8009df6:	b09d      	sub	sp, #116	; 0x74
 8009df8:	4607      	mov	r7, r0
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	4614      	mov	r4, r2
 8009dfe:	d50e      	bpl.n	8009e1e <_svfiprintf_r+0x32>
 8009e00:	690b      	ldr	r3, [r1, #16]
 8009e02:	b963      	cbnz	r3, 8009e1e <_svfiprintf_r+0x32>
 8009e04:	2140      	movs	r1, #64	; 0x40
 8009e06:	f7fd fcfb 	bl	8007800 <_malloc_r>
 8009e0a:	6028      	str	r0, [r5, #0]
 8009e0c:	6128      	str	r0, [r5, #16]
 8009e0e:	b920      	cbnz	r0, 8009e1a <_svfiprintf_r+0x2e>
 8009e10:	230c      	movs	r3, #12
 8009e12:	603b      	str	r3, [r7, #0]
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e18:	e0d1      	b.n	8009fbe <_svfiprintf_r+0x1d2>
 8009e1a:	2340      	movs	r3, #64	; 0x40
 8009e1c:	616b      	str	r3, [r5, #20]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9309      	str	r3, [sp, #36]	; 0x24
 8009e22:	2320      	movs	r3, #32
 8009e24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e2c:	2330      	movs	r3, #48	; 0x30
 8009e2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fd8 <_svfiprintf_r+0x1ec>
 8009e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e36:	f04f 0901 	mov.w	r9, #1
 8009e3a:	4623      	mov	r3, r4
 8009e3c:	469a      	mov	sl, r3
 8009e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e42:	b10a      	cbz	r2, 8009e48 <_svfiprintf_r+0x5c>
 8009e44:	2a25      	cmp	r2, #37	; 0x25
 8009e46:	d1f9      	bne.n	8009e3c <_svfiprintf_r+0x50>
 8009e48:	ebba 0b04 	subs.w	fp, sl, r4
 8009e4c:	d00b      	beq.n	8009e66 <_svfiprintf_r+0x7a>
 8009e4e:	465b      	mov	r3, fp
 8009e50:	4622      	mov	r2, r4
 8009e52:	4629      	mov	r1, r5
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7ff ff6e 	bl	8009d36 <__ssputs_r>
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	f000 80aa 	beq.w	8009fb4 <_svfiprintf_r+0x1c8>
 8009e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e62:	445a      	add	r2, fp
 8009e64:	9209      	str	r2, [sp, #36]	; 0x24
 8009e66:	f89a 3000 	ldrb.w	r3, [sl]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 80a2 	beq.w	8009fb4 <_svfiprintf_r+0x1c8>
 8009e70:	2300      	movs	r3, #0
 8009e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e7a:	f10a 0a01 	add.w	sl, sl, #1
 8009e7e:	9304      	str	r3, [sp, #16]
 8009e80:	9307      	str	r3, [sp, #28]
 8009e82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e86:	931a      	str	r3, [sp, #104]	; 0x68
 8009e88:	4654      	mov	r4, sl
 8009e8a:	2205      	movs	r2, #5
 8009e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e90:	4851      	ldr	r0, [pc, #324]	; (8009fd8 <_svfiprintf_r+0x1ec>)
 8009e92:	f7f6 f9cd 	bl	8000230 <memchr>
 8009e96:	9a04      	ldr	r2, [sp, #16]
 8009e98:	b9d8      	cbnz	r0, 8009ed2 <_svfiprintf_r+0xe6>
 8009e9a:	06d0      	lsls	r0, r2, #27
 8009e9c:	bf44      	itt	mi
 8009e9e:	2320      	movmi	r3, #32
 8009ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea4:	0711      	lsls	r1, r2, #28
 8009ea6:	bf44      	itt	mi
 8009ea8:	232b      	movmi	r3, #43	; 0x2b
 8009eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eae:	f89a 3000 	ldrb.w	r3, [sl]
 8009eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb4:	d015      	beq.n	8009ee2 <_svfiprintf_r+0xf6>
 8009eb6:	9a07      	ldr	r2, [sp, #28]
 8009eb8:	4654      	mov	r4, sl
 8009eba:	2000      	movs	r0, #0
 8009ebc:	f04f 0c0a 	mov.w	ip, #10
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ec6:	3b30      	subs	r3, #48	; 0x30
 8009ec8:	2b09      	cmp	r3, #9
 8009eca:	d94e      	bls.n	8009f6a <_svfiprintf_r+0x17e>
 8009ecc:	b1b0      	cbz	r0, 8009efc <_svfiprintf_r+0x110>
 8009ece:	9207      	str	r2, [sp, #28]
 8009ed0:	e014      	b.n	8009efc <_svfiprintf_r+0x110>
 8009ed2:	eba0 0308 	sub.w	r3, r0, r8
 8009ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8009eda:	4313      	orrs	r3, r2
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	46a2      	mov	sl, r4
 8009ee0:	e7d2      	b.n	8009e88 <_svfiprintf_r+0x9c>
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	1d19      	adds	r1, r3, #4
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	9103      	str	r1, [sp, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bfbb      	ittet	lt
 8009eee:	425b      	neglt	r3, r3
 8009ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ef4:	9307      	strge	r3, [sp, #28]
 8009ef6:	9307      	strlt	r3, [sp, #28]
 8009ef8:	bfb8      	it	lt
 8009efa:	9204      	strlt	r2, [sp, #16]
 8009efc:	7823      	ldrb	r3, [r4, #0]
 8009efe:	2b2e      	cmp	r3, #46	; 0x2e
 8009f00:	d10c      	bne.n	8009f1c <_svfiprintf_r+0x130>
 8009f02:	7863      	ldrb	r3, [r4, #1]
 8009f04:	2b2a      	cmp	r3, #42	; 0x2a
 8009f06:	d135      	bne.n	8009f74 <_svfiprintf_r+0x188>
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	1d1a      	adds	r2, r3, #4
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	9203      	str	r2, [sp, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	bfb8      	it	lt
 8009f14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f18:	3402      	adds	r4, #2
 8009f1a:	9305      	str	r3, [sp, #20]
 8009f1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fe8 <_svfiprintf_r+0x1fc>
 8009f20:	7821      	ldrb	r1, [r4, #0]
 8009f22:	2203      	movs	r2, #3
 8009f24:	4650      	mov	r0, sl
 8009f26:	f7f6 f983 	bl	8000230 <memchr>
 8009f2a:	b140      	cbz	r0, 8009f3e <_svfiprintf_r+0x152>
 8009f2c:	2340      	movs	r3, #64	; 0x40
 8009f2e:	eba0 000a 	sub.w	r0, r0, sl
 8009f32:	fa03 f000 	lsl.w	r0, r3, r0
 8009f36:	9b04      	ldr	r3, [sp, #16]
 8009f38:	4303      	orrs	r3, r0
 8009f3a:	3401      	adds	r4, #1
 8009f3c:	9304      	str	r3, [sp, #16]
 8009f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f42:	4826      	ldr	r0, [pc, #152]	; (8009fdc <_svfiprintf_r+0x1f0>)
 8009f44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f48:	2206      	movs	r2, #6
 8009f4a:	f7f6 f971 	bl	8000230 <memchr>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d038      	beq.n	8009fc4 <_svfiprintf_r+0x1d8>
 8009f52:	4b23      	ldr	r3, [pc, #140]	; (8009fe0 <_svfiprintf_r+0x1f4>)
 8009f54:	bb1b      	cbnz	r3, 8009f9e <_svfiprintf_r+0x1b2>
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	3307      	adds	r3, #7
 8009f5a:	f023 0307 	bic.w	r3, r3, #7
 8009f5e:	3308      	adds	r3, #8
 8009f60:	9303      	str	r3, [sp, #12]
 8009f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f64:	4433      	add	r3, r6
 8009f66:	9309      	str	r3, [sp, #36]	; 0x24
 8009f68:	e767      	b.n	8009e3a <_svfiprintf_r+0x4e>
 8009f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f6e:	460c      	mov	r4, r1
 8009f70:	2001      	movs	r0, #1
 8009f72:	e7a5      	b.n	8009ec0 <_svfiprintf_r+0xd4>
 8009f74:	2300      	movs	r3, #0
 8009f76:	3401      	adds	r4, #1
 8009f78:	9305      	str	r3, [sp, #20]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	f04f 0c0a 	mov.w	ip, #10
 8009f80:	4620      	mov	r0, r4
 8009f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f86:	3a30      	subs	r2, #48	; 0x30
 8009f88:	2a09      	cmp	r2, #9
 8009f8a:	d903      	bls.n	8009f94 <_svfiprintf_r+0x1a8>
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0c5      	beq.n	8009f1c <_svfiprintf_r+0x130>
 8009f90:	9105      	str	r1, [sp, #20]
 8009f92:	e7c3      	b.n	8009f1c <_svfiprintf_r+0x130>
 8009f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f98:	4604      	mov	r4, r0
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e7f0      	b.n	8009f80 <_svfiprintf_r+0x194>
 8009f9e:	ab03      	add	r3, sp, #12
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	462a      	mov	r2, r5
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	; (8009fe4 <_svfiprintf_r+0x1f8>)
 8009fa6:	a904      	add	r1, sp, #16
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f7fd fd23 	bl	80079f4 <_printf_float>
 8009fae:	1c42      	adds	r2, r0, #1
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	d1d6      	bne.n	8009f62 <_svfiprintf_r+0x176>
 8009fb4:	89ab      	ldrh	r3, [r5, #12]
 8009fb6:	065b      	lsls	r3, r3, #25
 8009fb8:	f53f af2c 	bmi.w	8009e14 <_svfiprintf_r+0x28>
 8009fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fbe:	b01d      	add	sp, #116	; 0x74
 8009fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc4:	ab03      	add	r3, sp, #12
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	462a      	mov	r2, r5
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <_svfiprintf_r+0x1f8>)
 8009fcc:	a904      	add	r1, sp, #16
 8009fce:	4638      	mov	r0, r7
 8009fd0:	f7fd ffb4 	bl	8007f3c <_printf_i>
 8009fd4:	e7eb      	b.n	8009fae <_svfiprintf_r+0x1c2>
 8009fd6:	bf00      	nop
 8009fd8:	0800acb4 	.word	0x0800acb4
 8009fdc:	0800acbe 	.word	0x0800acbe
 8009fe0:	080079f5 	.word	0x080079f5
 8009fe4:	08009d37 	.word	0x08009d37
 8009fe8:	0800acba 	.word	0x0800acba

08009fec <__sfputc_r>:
 8009fec:	6893      	ldr	r3, [r2, #8]
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	b410      	push	{r4}
 8009ff4:	6093      	str	r3, [r2, #8]
 8009ff6:	da08      	bge.n	800a00a <__sfputc_r+0x1e>
 8009ff8:	6994      	ldr	r4, [r2, #24]
 8009ffa:	42a3      	cmp	r3, r4
 8009ffc:	db01      	blt.n	800a002 <__sfputc_r+0x16>
 8009ffe:	290a      	cmp	r1, #10
 800a000:	d103      	bne.n	800a00a <__sfputc_r+0x1e>
 800a002:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a006:	f7fe b993 	b.w	8008330 <__swbuf_r>
 800a00a:	6813      	ldr	r3, [r2, #0]
 800a00c:	1c58      	adds	r0, r3, #1
 800a00e:	6010      	str	r0, [r2, #0]
 800a010:	7019      	strb	r1, [r3, #0]
 800a012:	4608      	mov	r0, r1
 800a014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <__sfputs_r>:
 800a01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01c:	4606      	mov	r6, r0
 800a01e:	460f      	mov	r7, r1
 800a020:	4614      	mov	r4, r2
 800a022:	18d5      	adds	r5, r2, r3
 800a024:	42ac      	cmp	r4, r5
 800a026:	d101      	bne.n	800a02c <__sfputs_r+0x12>
 800a028:	2000      	movs	r0, #0
 800a02a:	e007      	b.n	800a03c <__sfputs_r+0x22>
 800a02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a030:	463a      	mov	r2, r7
 800a032:	4630      	mov	r0, r6
 800a034:	f7ff ffda 	bl	8009fec <__sfputc_r>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d1f3      	bne.n	800a024 <__sfputs_r+0xa>
 800a03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a040 <_vfiprintf_r>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	460d      	mov	r5, r1
 800a046:	b09d      	sub	sp, #116	; 0x74
 800a048:	4614      	mov	r4, r2
 800a04a:	4698      	mov	r8, r3
 800a04c:	4606      	mov	r6, r0
 800a04e:	b118      	cbz	r0, 800a058 <_vfiprintf_r+0x18>
 800a050:	6983      	ldr	r3, [r0, #24]
 800a052:	b90b      	cbnz	r3, 800a058 <_vfiprintf_r+0x18>
 800a054:	f7ff f9be 	bl	80093d4 <__sinit>
 800a058:	4b89      	ldr	r3, [pc, #548]	; (800a280 <_vfiprintf_r+0x240>)
 800a05a:	429d      	cmp	r5, r3
 800a05c:	d11b      	bne.n	800a096 <_vfiprintf_r+0x56>
 800a05e:	6875      	ldr	r5, [r6, #4]
 800a060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a062:	07d9      	lsls	r1, r3, #31
 800a064:	d405      	bmi.n	800a072 <_vfiprintf_r+0x32>
 800a066:	89ab      	ldrh	r3, [r5, #12]
 800a068:	059a      	lsls	r2, r3, #22
 800a06a:	d402      	bmi.n	800a072 <_vfiprintf_r+0x32>
 800a06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a06e:	f7ff fa54 	bl	800951a <__retarget_lock_acquire_recursive>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	071b      	lsls	r3, r3, #28
 800a076:	d501      	bpl.n	800a07c <_vfiprintf_r+0x3c>
 800a078:	692b      	ldr	r3, [r5, #16]
 800a07a:	b9eb      	cbnz	r3, 800a0b8 <_vfiprintf_r+0x78>
 800a07c:	4629      	mov	r1, r5
 800a07e:	4630      	mov	r0, r6
 800a080:	f7fe f9a8 	bl	80083d4 <__swsetup_r>
 800a084:	b1c0      	cbz	r0, 800a0b8 <_vfiprintf_r+0x78>
 800a086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a088:	07dc      	lsls	r4, r3, #31
 800a08a:	d50e      	bpl.n	800a0aa <_vfiprintf_r+0x6a>
 800a08c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a090:	b01d      	add	sp, #116	; 0x74
 800a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a096:	4b7b      	ldr	r3, [pc, #492]	; (800a284 <_vfiprintf_r+0x244>)
 800a098:	429d      	cmp	r5, r3
 800a09a:	d101      	bne.n	800a0a0 <_vfiprintf_r+0x60>
 800a09c:	68b5      	ldr	r5, [r6, #8]
 800a09e:	e7df      	b.n	800a060 <_vfiprintf_r+0x20>
 800a0a0:	4b79      	ldr	r3, [pc, #484]	; (800a288 <_vfiprintf_r+0x248>)
 800a0a2:	429d      	cmp	r5, r3
 800a0a4:	bf08      	it	eq
 800a0a6:	68f5      	ldreq	r5, [r6, #12]
 800a0a8:	e7da      	b.n	800a060 <_vfiprintf_r+0x20>
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	0598      	lsls	r0, r3, #22
 800a0ae:	d4ed      	bmi.n	800a08c <_vfiprintf_r+0x4c>
 800a0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0b2:	f7ff fa33 	bl	800951c <__retarget_lock_release_recursive>
 800a0b6:	e7e9      	b.n	800a08c <_vfiprintf_r+0x4c>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a0bc:	2320      	movs	r3, #32
 800a0be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c6:	2330      	movs	r3, #48	; 0x30
 800a0c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a28c <_vfiprintf_r+0x24c>
 800a0cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0d0:	f04f 0901 	mov.w	r9, #1
 800a0d4:	4623      	mov	r3, r4
 800a0d6:	469a      	mov	sl, r3
 800a0d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0dc:	b10a      	cbz	r2, 800a0e2 <_vfiprintf_r+0xa2>
 800a0de:	2a25      	cmp	r2, #37	; 0x25
 800a0e0:	d1f9      	bne.n	800a0d6 <_vfiprintf_r+0x96>
 800a0e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e6:	d00b      	beq.n	800a100 <_vfiprintf_r+0xc0>
 800a0e8:	465b      	mov	r3, fp
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f7ff ff93 	bl	800a01a <__sfputs_r>
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f000 80aa 	beq.w	800a24e <_vfiprintf_r+0x20e>
 800a0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fc:	445a      	add	r2, fp
 800a0fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a100:	f89a 3000 	ldrb.w	r3, [sl]
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80a2 	beq.w	800a24e <_vfiprintf_r+0x20e>
 800a10a:	2300      	movs	r3, #0
 800a10c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a114:	f10a 0a01 	add.w	sl, sl, #1
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	9307      	str	r3, [sp, #28]
 800a11c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a120:	931a      	str	r3, [sp, #104]	; 0x68
 800a122:	4654      	mov	r4, sl
 800a124:	2205      	movs	r2, #5
 800a126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a12a:	4858      	ldr	r0, [pc, #352]	; (800a28c <_vfiprintf_r+0x24c>)
 800a12c:	f7f6 f880 	bl	8000230 <memchr>
 800a130:	9a04      	ldr	r2, [sp, #16]
 800a132:	b9d8      	cbnz	r0, 800a16c <_vfiprintf_r+0x12c>
 800a134:	06d1      	lsls	r1, r2, #27
 800a136:	bf44      	itt	mi
 800a138:	2320      	movmi	r3, #32
 800a13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13e:	0713      	lsls	r3, r2, #28
 800a140:	bf44      	itt	mi
 800a142:	232b      	movmi	r3, #43	; 0x2b
 800a144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a148:	f89a 3000 	ldrb.w	r3, [sl]
 800a14c:	2b2a      	cmp	r3, #42	; 0x2a
 800a14e:	d015      	beq.n	800a17c <_vfiprintf_r+0x13c>
 800a150:	9a07      	ldr	r2, [sp, #28]
 800a152:	4654      	mov	r4, sl
 800a154:	2000      	movs	r0, #0
 800a156:	f04f 0c0a 	mov.w	ip, #10
 800a15a:	4621      	mov	r1, r4
 800a15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a160:	3b30      	subs	r3, #48	; 0x30
 800a162:	2b09      	cmp	r3, #9
 800a164:	d94e      	bls.n	800a204 <_vfiprintf_r+0x1c4>
 800a166:	b1b0      	cbz	r0, 800a196 <_vfiprintf_r+0x156>
 800a168:	9207      	str	r2, [sp, #28]
 800a16a:	e014      	b.n	800a196 <_vfiprintf_r+0x156>
 800a16c:	eba0 0308 	sub.w	r3, r0, r8
 800a170:	fa09 f303 	lsl.w	r3, r9, r3
 800a174:	4313      	orrs	r3, r2
 800a176:	9304      	str	r3, [sp, #16]
 800a178:	46a2      	mov	sl, r4
 800a17a:	e7d2      	b.n	800a122 <_vfiprintf_r+0xe2>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	1d19      	adds	r1, r3, #4
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	9103      	str	r1, [sp, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfbb      	ittet	lt
 800a188:	425b      	neglt	r3, r3
 800a18a:	f042 0202 	orrlt.w	r2, r2, #2
 800a18e:	9307      	strge	r3, [sp, #28]
 800a190:	9307      	strlt	r3, [sp, #28]
 800a192:	bfb8      	it	lt
 800a194:	9204      	strlt	r2, [sp, #16]
 800a196:	7823      	ldrb	r3, [r4, #0]
 800a198:	2b2e      	cmp	r3, #46	; 0x2e
 800a19a:	d10c      	bne.n	800a1b6 <_vfiprintf_r+0x176>
 800a19c:	7863      	ldrb	r3, [r4, #1]
 800a19e:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a0:	d135      	bne.n	800a20e <_vfiprintf_r+0x1ce>
 800a1a2:	9b03      	ldr	r3, [sp, #12]
 800a1a4:	1d1a      	adds	r2, r3, #4
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	9203      	str	r2, [sp, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bfb8      	it	lt
 800a1ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1b2:	3402      	adds	r4, #2
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a29c <_vfiprintf_r+0x25c>
 800a1ba:	7821      	ldrb	r1, [r4, #0]
 800a1bc:	2203      	movs	r2, #3
 800a1be:	4650      	mov	r0, sl
 800a1c0:	f7f6 f836 	bl	8000230 <memchr>
 800a1c4:	b140      	cbz	r0, 800a1d8 <_vfiprintf_r+0x198>
 800a1c6:	2340      	movs	r3, #64	; 0x40
 800a1c8:	eba0 000a 	sub.w	r0, r0, sl
 800a1cc:	fa03 f000 	lsl.w	r0, r3, r0
 800a1d0:	9b04      	ldr	r3, [sp, #16]
 800a1d2:	4303      	orrs	r3, r0
 800a1d4:	3401      	adds	r4, #1
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1dc:	482c      	ldr	r0, [pc, #176]	; (800a290 <_vfiprintf_r+0x250>)
 800a1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e2:	2206      	movs	r2, #6
 800a1e4:	f7f6 f824 	bl	8000230 <memchr>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d03f      	beq.n	800a26c <_vfiprintf_r+0x22c>
 800a1ec:	4b29      	ldr	r3, [pc, #164]	; (800a294 <_vfiprintf_r+0x254>)
 800a1ee:	bb1b      	cbnz	r3, 800a238 <_vfiprintf_r+0x1f8>
 800a1f0:	9b03      	ldr	r3, [sp, #12]
 800a1f2:	3307      	adds	r3, #7
 800a1f4:	f023 0307 	bic.w	r3, r3, #7
 800a1f8:	3308      	adds	r3, #8
 800a1fa:	9303      	str	r3, [sp, #12]
 800a1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fe:	443b      	add	r3, r7
 800a200:	9309      	str	r3, [sp, #36]	; 0x24
 800a202:	e767      	b.n	800a0d4 <_vfiprintf_r+0x94>
 800a204:	fb0c 3202 	mla	r2, ip, r2, r3
 800a208:	460c      	mov	r4, r1
 800a20a:	2001      	movs	r0, #1
 800a20c:	e7a5      	b.n	800a15a <_vfiprintf_r+0x11a>
 800a20e:	2300      	movs	r3, #0
 800a210:	3401      	adds	r4, #1
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	4619      	mov	r1, r3
 800a216:	f04f 0c0a 	mov.w	ip, #10
 800a21a:	4620      	mov	r0, r4
 800a21c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a220:	3a30      	subs	r2, #48	; 0x30
 800a222:	2a09      	cmp	r2, #9
 800a224:	d903      	bls.n	800a22e <_vfiprintf_r+0x1ee>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0c5      	beq.n	800a1b6 <_vfiprintf_r+0x176>
 800a22a:	9105      	str	r1, [sp, #20]
 800a22c:	e7c3      	b.n	800a1b6 <_vfiprintf_r+0x176>
 800a22e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a232:	4604      	mov	r4, r0
 800a234:	2301      	movs	r3, #1
 800a236:	e7f0      	b.n	800a21a <_vfiprintf_r+0x1da>
 800a238:	ab03      	add	r3, sp, #12
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	462a      	mov	r2, r5
 800a23e:	4b16      	ldr	r3, [pc, #88]	; (800a298 <_vfiprintf_r+0x258>)
 800a240:	a904      	add	r1, sp, #16
 800a242:	4630      	mov	r0, r6
 800a244:	f7fd fbd6 	bl	80079f4 <_printf_float>
 800a248:	4607      	mov	r7, r0
 800a24a:	1c78      	adds	r0, r7, #1
 800a24c:	d1d6      	bne.n	800a1fc <_vfiprintf_r+0x1bc>
 800a24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a250:	07d9      	lsls	r1, r3, #31
 800a252:	d405      	bmi.n	800a260 <_vfiprintf_r+0x220>
 800a254:	89ab      	ldrh	r3, [r5, #12]
 800a256:	059a      	lsls	r2, r3, #22
 800a258:	d402      	bmi.n	800a260 <_vfiprintf_r+0x220>
 800a25a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a25c:	f7ff f95e 	bl	800951c <__retarget_lock_release_recursive>
 800a260:	89ab      	ldrh	r3, [r5, #12]
 800a262:	065b      	lsls	r3, r3, #25
 800a264:	f53f af12 	bmi.w	800a08c <_vfiprintf_r+0x4c>
 800a268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a26a:	e711      	b.n	800a090 <_vfiprintf_r+0x50>
 800a26c:	ab03      	add	r3, sp, #12
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	462a      	mov	r2, r5
 800a272:	4b09      	ldr	r3, [pc, #36]	; (800a298 <_vfiprintf_r+0x258>)
 800a274:	a904      	add	r1, sp, #16
 800a276:	4630      	mov	r0, r6
 800a278:	f7fd fe60 	bl	8007f3c <_printf_i>
 800a27c:	e7e4      	b.n	800a248 <_vfiprintf_r+0x208>
 800a27e:	bf00      	nop
 800a280:	0800ab18 	.word	0x0800ab18
 800a284:	0800ab38 	.word	0x0800ab38
 800a288:	0800aaf8 	.word	0x0800aaf8
 800a28c:	0800acb4 	.word	0x0800acb4
 800a290:	0800acbe 	.word	0x0800acbe
 800a294:	080079f5 	.word	0x080079f5
 800a298:	0800a01b 	.word	0x0800a01b
 800a29c:	0800acba 	.word	0x0800acba

0800a2a0 <_putc_r>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	460d      	mov	r5, r1
 800a2a4:	4614      	mov	r4, r2
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	b118      	cbz	r0, 800a2b2 <_putc_r+0x12>
 800a2aa:	6983      	ldr	r3, [r0, #24]
 800a2ac:	b90b      	cbnz	r3, 800a2b2 <_putc_r+0x12>
 800a2ae:	f7ff f891 	bl	80093d4 <__sinit>
 800a2b2:	4b1c      	ldr	r3, [pc, #112]	; (800a324 <_putc_r+0x84>)
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	d124      	bne.n	800a302 <_putc_r+0x62>
 800a2b8:	6874      	ldr	r4, [r6, #4]
 800a2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2bc:	07d8      	lsls	r0, r3, #31
 800a2be:	d405      	bmi.n	800a2cc <_putc_r+0x2c>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	0599      	lsls	r1, r3, #22
 800a2c4:	d402      	bmi.n	800a2cc <_putc_r+0x2c>
 800a2c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c8:	f7ff f927 	bl	800951a <__retarget_lock_acquire_recursive>
 800a2cc:	68a3      	ldr	r3, [r4, #8]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	60a3      	str	r3, [r4, #8]
 800a2d4:	da05      	bge.n	800a2e2 <_putc_r+0x42>
 800a2d6:	69a2      	ldr	r2, [r4, #24]
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	db1c      	blt.n	800a316 <_putc_r+0x76>
 800a2dc:	b2eb      	uxtb	r3, r5
 800a2de:	2b0a      	cmp	r3, #10
 800a2e0:	d019      	beq.n	800a316 <_putc_r+0x76>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	6022      	str	r2, [r4, #0]
 800a2e8:	701d      	strb	r5, [r3, #0]
 800a2ea:	b2ed      	uxtb	r5, r5
 800a2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2ee:	07da      	lsls	r2, r3, #31
 800a2f0:	d405      	bmi.n	800a2fe <_putc_r+0x5e>
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	059b      	lsls	r3, r3, #22
 800a2f6:	d402      	bmi.n	800a2fe <_putc_r+0x5e>
 800a2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2fa:	f7ff f90f 	bl	800951c <__retarget_lock_release_recursive>
 800a2fe:	4628      	mov	r0, r5
 800a300:	bd70      	pop	{r4, r5, r6, pc}
 800a302:	4b09      	ldr	r3, [pc, #36]	; (800a328 <_putc_r+0x88>)
 800a304:	429c      	cmp	r4, r3
 800a306:	d101      	bne.n	800a30c <_putc_r+0x6c>
 800a308:	68b4      	ldr	r4, [r6, #8]
 800a30a:	e7d6      	b.n	800a2ba <_putc_r+0x1a>
 800a30c:	4b07      	ldr	r3, [pc, #28]	; (800a32c <_putc_r+0x8c>)
 800a30e:	429c      	cmp	r4, r3
 800a310:	bf08      	it	eq
 800a312:	68f4      	ldreq	r4, [r6, #12]
 800a314:	e7d1      	b.n	800a2ba <_putc_r+0x1a>
 800a316:	4629      	mov	r1, r5
 800a318:	4622      	mov	r2, r4
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7fe f808 	bl	8008330 <__swbuf_r>
 800a320:	4605      	mov	r5, r0
 800a322:	e7e3      	b.n	800a2ec <_putc_r+0x4c>
 800a324:	0800ab18 	.word	0x0800ab18
 800a328:	0800ab38 	.word	0x0800ab38
 800a32c:	0800aaf8 	.word	0x0800aaf8

0800a330 <__sread>:
 800a330:	b510      	push	{r4, lr}
 800a332:	460c      	mov	r4, r1
 800a334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a338:	f000 f916 	bl	800a568 <_read_r>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	bfab      	itete	ge
 800a340:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a342:	89a3      	ldrhlt	r3, [r4, #12]
 800a344:	181b      	addge	r3, r3, r0
 800a346:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a34a:	bfac      	ite	ge
 800a34c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a34e:	81a3      	strhlt	r3, [r4, #12]
 800a350:	bd10      	pop	{r4, pc}

0800a352 <__swrite>:
 800a352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a356:	461f      	mov	r7, r3
 800a358:	898b      	ldrh	r3, [r1, #12]
 800a35a:	05db      	lsls	r3, r3, #23
 800a35c:	4605      	mov	r5, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4616      	mov	r6, r2
 800a362:	d505      	bpl.n	800a370 <__swrite+0x1e>
 800a364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a368:	2302      	movs	r3, #2
 800a36a:	2200      	movs	r2, #0
 800a36c:	f000 f898 	bl	800a4a0 <_lseek_r>
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a37a:	81a3      	strh	r3, [r4, #12]
 800a37c:	4632      	mov	r2, r6
 800a37e:	463b      	mov	r3, r7
 800a380:	4628      	mov	r0, r5
 800a382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a386:	f000 b817 	b.w	800a3b8 <_write_r>

0800a38a <__sseek>:
 800a38a:	b510      	push	{r4, lr}
 800a38c:	460c      	mov	r4, r1
 800a38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a392:	f000 f885 	bl	800a4a0 <_lseek_r>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	bf15      	itete	ne
 800a39c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a39e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3a6:	81a3      	strheq	r3, [r4, #12]
 800a3a8:	bf18      	it	ne
 800a3aa:	81a3      	strhne	r3, [r4, #12]
 800a3ac:	bd10      	pop	{r4, pc}

0800a3ae <__sclose>:
 800a3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b2:	f000 b831 	b.w	800a418 <_close_r>
	...

0800a3b8 <_write_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d07      	ldr	r5, [pc, #28]	; (800a3d8 <_write_r+0x20>)
 800a3bc:	4604      	mov	r4, r0
 800a3be:	4608      	mov	r0, r1
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	602a      	str	r2, [r5, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f7f7 fa95 	bl	80018f6 <_write>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_write_r+0x1e>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_write_r+0x1e>
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	20000460 	.word	0x20000460

0800a3dc <__assert_func>:
 800a3dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3de:	4614      	mov	r4, r2
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4b09      	ldr	r3, [pc, #36]	; (800a408 <__assert_func+0x2c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	68d8      	ldr	r0, [r3, #12]
 800a3ea:	b14c      	cbz	r4, 800a400 <__assert_func+0x24>
 800a3ec:	4b07      	ldr	r3, [pc, #28]	; (800a40c <__assert_func+0x30>)
 800a3ee:	9100      	str	r1, [sp, #0]
 800a3f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3f4:	4906      	ldr	r1, [pc, #24]	; (800a410 <__assert_func+0x34>)
 800a3f6:	462b      	mov	r3, r5
 800a3f8:	f000 f81e 	bl	800a438 <fiprintf>
 800a3fc:	f000 f8d3 	bl	800a5a6 <abort>
 800a400:	4b04      	ldr	r3, [pc, #16]	; (800a414 <__assert_func+0x38>)
 800a402:	461c      	mov	r4, r3
 800a404:	e7f3      	b.n	800a3ee <__assert_func+0x12>
 800a406:	bf00      	nop
 800a408:	2000000c 	.word	0x2000000c
 800a40c:	0800acc5 	.word	0x0800acc5
 800a410:	0800acd2 	.word	0x0800acd2
 800a414:	0800ad00 	.word	0x0800ad00

0800a418 <_close_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d06      	ldr	r5, [pc, #24]	; (800a434 <_close_r+0x1c>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	f7f8 fa2f 	bl	8002886 <_close>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_close_r+0x1a>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_close_r+0x1a>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	20000460 	.word	0x20000460

0800a438 <fiprintf>:
 800a438:	b40e      	push	{r1, r2, r3}
 800a43a:	b503      	push	{r0, r1, lr}
 800a43c:	4601      	mov	r1, r0
 800a43e:	ab03      	add	r3, sp, #12
 800a440:	4805      	ldr	r0, [pc, #20]	; (800a458 <fiprintf+0x20>)
 800a442:	f853 2b04 	ldr.w	r2, [r3], #4
 800a446:	6800      	ldr	r0, [r0, #0]
 800a448:	9301      	str	r3, [sp, #4]
 800a44a:	f7ff fdf9 	bl	800a040 <_vfiprintf_r>
 800a44e:	b002      	add	sp, #8
 800a450:	f85d eb04 	ldr.w	lr, [sp], #4
 800a454:	b003      	add	sp, #12
 800a456:	4770      	bx	lr
 800a458:	2000000c 	.word	0x2000000c

0800a45c <_fstat_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d07      	ldr	r5, [pc, #28]	; (800a47c <_fstat_r+0x20>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	4611      	mov	r1, r2
 800a468:	602b      	str	r3, [r5, #0]
 800a46a:	f7f8 fa18 	bl	800289e <_fstat>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	d102      	bne.n	800a478 <_fstat_r+0x1c>
 800a472:	682b      	ldr	r3, [r5, #0]
 800a474:	b103      	cbz	r3, 800a478 <_fstat_r+0x1c>
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	bd38      	pop	{r3, r4, r5, pc}
 800a47a:	bf00      	nop
 800a47c:	20000460 	.word	0x20000460

0800a480 <_isatty_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4d06      	ldr	r5, [pc, #24]	; (800a49c <_isatty_r+0x1c>)
 800a484:	2300      	movs	r3, #0
 800a486:	4604      	mov	r4, r0
 800a488:	4608      	mov	r0, r1
 800a48a:	602b      	str	r3, [r5, #0]
 800a48c:	f7f8 fa17 	bl	80028be <_isatty>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_isatty_r+0x1a>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_isatty_r+0x1a>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	20000460 	.word	0x20000460

0800a4a0 <_lseek_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	; (800a4c0 <_lseek_r+0x20>)
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	602a      	str	r2, [r5, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f8 fa10 	bl	80028d4 <_lseek>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_lseek_r+0x1e>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_lseek_r+0x1e>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	20000460 	.word	0x20000460

0800a4c4 <__ascii_mbtowc>:
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	b901      	cbnz	r1, 800a4ca <__ascii_mbtowc+0x6>
 800a4c8:	a901      	add	r1, sp, #4
 800a4ca:	b142      	cbz	r2, 800a4de <__ascii_mbtowc+0x1a>
 800a4cc:	b14b      	cbz	r3, 800a4e2 <__ascii_mbtowc+0x1e>
 800a4ce:	7813      	ldrb	r3, [r2, #0]
 800a4d0:	600b      	str	r3, [r1, #0]
 800a4d2:	7812      	ldrb	r2, [r2, #0]
 800a4d4:	1e10      	subs	r0, r2, #0
 800a4d6:	bf18      	it	ne
 800a4d8:	2001      	movne	r0, #1
 800a4da:	b002      	add	sp, #8
 800a4dc:	4770      	bx	lr
 800a4de:	4610      	mov	r0, r2
 800a4e0:	e7fb      	b.n	800a4da <__ascii_mbtowc+0x16>
 800a4e2:	f06f 0001 	mvn.w	r0, #1
 800a4e6:	e7f8      	b.n	800a4da <__ascii_mbtowc+0x16>

0800a4e8 <memmove>:
 800a4e8:	4288      	cmp	r0, r1
 800a4ea:	b510      	push	{r4, lr}
 800a4ec:	eb01 0402 	add.w	r4, r1, r2
 800a4f0:	d902      	bls.n	800a4f8 <memmove+0x10>
 800a4f2:	4284      	cmp	r4, r0
 800a4f4:	4623      	mov	r3, r4
 800a4f6:	d807      	bhi.n	800a508 <memmove+0x20>
 800a4f8:	1e43      	subs	r3, r0, #1
 800a4fa:	42a1      	cmp	r1, r4
 800a4fc:	d008      	beq.n	800a510 <memmove+0x28>
 800a4fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a502:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a506:	e7f8      	b.n	800a4fa <memmove+0x12>
 800a508:	4402      	add	r2, r0
 800a50a:	4601      	mov	r1, r0
 800a50c:	428a      	cmp	r2, r1
 800a50e:	d100      	bne.n	800a512 <memmove+0x2a>
 800a510:	bd10      	pop	{r4, pc}
 800a512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a51a:	e7f7      	b.n	800a50c <memmove+0x24>

0800a51c <_realloc_r>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	4607      	mov	r7, r0
 800a520:	4614      	mov	r4, r2
 800a522:	460e      	mov	r6, r1
 800a524:	b921      	cbnz	r1, 800a530 <_realloc_r+0x14>
 800a526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a52a:	4611      	mov	r1, r2
 800a52c:	f7fd b968 	b.w	8007800 <_malloc_r>
 800a530:	b922      	cbnz	r2, 800a53c <_realloc_r+0x20>
 800a532:	f7fd f915 	bl	8007760 <_free_r>
 800a536:	4625      	mov	r5, r4
 800a538:	4628      	mov	r0, r5
 800a53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a53c:	f000 f83a 	bl	800a5b4 <_malloc_usable_size_r>
 800a540:	42a0      	cmp	r0, r4
 800a542:	d20f      	bcs.n	800a564 <_realloc_r+0x48>
 800a544:	4621      	mov	r1, r4
 800a546:	4638      	mov	r0, r7
 800a548:	f7fd f95a 	bl	8007800 <_malloc_r>
 800a54c:	4605      	mov	r5, r0
 800a54e:	2800      	cmp	r0, #0
 800a550:	d0f2      	beq.n	800a538 <_realloc_r+0x1c>
 800a552:	4631      	mov	r1, r6
 800a554:	4622      	mov	r2, r4
 800a556:	f7ff f847 	bl	80095e8 <memcpy>
 800a55a:	4631      	mov	r1, r6
 800a55c:	4638      	mov	r0, r7
 800a55e:	f7fd f8ff 	bl	8007760 <_free_r>
 800a562:	e7e9      	b.n	800a538 <_realloc_r+0x1c>
 800a564:	4635      	mov	r5, r6
 800a566:	e7e7      	b.n	800a538 <_realloc_r+0x1c>

0800a568 <_read_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4d07      	ldr	r5, [pc, #28]	; (800a588 <_read_r+0x20>)
 800a56c:	4604      	mov	r4, r0
 800a56e:	4608      	mov	r0, r1
 800a570:	4611      	mov	r1, r2
 800a572:	2200      	movs	r2, #0
 800a574:	602a      	str	r2, [r5, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	f7f8 f968 	bl	800284c <_read>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_read_r+0x1e>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_read_r+0x1e>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	20000460 	.word	0x20000460

0800a58c <__ascii_wctomb>:
 800a58c:	b149      	cbz	r1, 800a5a2 <__ascii_wctomb+0x16>
 800a58e:	2aff      	cmp	r2, #255	; 0xff
 800a590:	bf85      	ittet	hi
 800a592:	238a      	movhi	r3, #138	; 0x8a
 800a594:	6003      	strhi	r3, [r0, #0]
 800a596:	700a      	strbls	r2, [r1, #0]
 800a598:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a59c:	bf98      	it	ls
 800a59e:	2001      	movls	r0, #1
 800a5a0:	4770      	bx	lr
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4770      	bx	lr

0800a5a6 <abort>:
 800a5a6:	b508      	push	{r3, lr}
 800a5a8:	2006      	movs	r0, #6
 800a5aa:	f000 f833 	bl	800a614 <raise>
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	f7f8 f942 	bl	8002838 <_exit>

0800a5b4 <_malloc_usable_size_r>:
 800a5b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b8:	1f18      	subs	r0, r3, #4
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	bfbc      	itt	lt
 800a5be:	580b      	ldrlt	r3, [r1, r0]
 800a5c0:	18c0      	addlt	r0, r0, r3
 800a5c2:	4770      	bx	lr

0800a5c4 <_raise_r>:
 800a5c4:	291f      	cmp	r1, #31
 800a5c6:	b538      	push	{r3, r4, r5, lr}
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	d904      	bls.n	800a5d8 <_raise_r+0x14>
 800a5ce:	2316      	movs	r3, #22
 800a5d0:	6003      	str	r3, [r0, #0]
 800a5d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5da:	b112      	cbz	r2, 800a5e2 <_raise_r+0x1e>
 800a5dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5e0:	b94b      	cbnz	r3, 800a5f6 <_raise_r+0x32>
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 f830 	bl	800a648 <_getpid_r>
 800a5e8:	462a      	mov	r2, r5
 800a5ea:	4601      	mov	r1, r0
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5f2:	f000 b817 	b.w	800a624 <_kill_r>
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d00a      	beq.n	800a610 <_raise_r+0x4c>
 800a5fa:	1c59      	adds	r1, r3, #1
 800a5fc:	d103      	bne.n	800a606 <_raise_r+0x42>
 800a5fe:	2316      	movs	r3, #22
 800a600:	6003      	str	r3, [r0, #0]
 800a602:	2001      	movs	r0, #1
 800a604:	e7e7      	b.n	800a5d6 <_raise_r+0x12>
 800a606:	2400      	movs	r4, #0
 800a608:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a60c:	4628      	mov	r0, r5
 800a60e:	4798      	blx	r3
 800a610:	2000      	movs	r0, #0
 800a612:	e7e0      	b.n	800a5d6 <_raise_r+0x12>

0800a614 <raise>:
 800a614:	4b02      	ldr	r3, [pc, #8]	; (800a620 <raise+0xc>)
 800a616:	4601      	mov	r1, r0
 800a618:	6818      	ldr	r0, [r3, #0]
 800a61a:	f7ff bfd3 	b.w	800a5c4 <_raise_r>
 800a61e:	bf00      	nop
 800a620:	2000000c 	.word	0x2000000c

0800a624 <_kill_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d07      	ldr	r5, [pc, #28]	; (800a644 <_kill_r+0x20>)
 800a628:	2300      	movs	r3, #0
 800a62a:	4604      	mov	r4, r0
 800a62c:	4608      	mov	r0, r1
 800a62e:	4611      	mov	r1, r2
 800a630:	602b      	str	r3, [r5, #0]
 800a632:	f7f8 f8f1 	bl	8002818 <_kill>
 800a636:	1c43      	adds	r3, r0, #1
 800a638:	d102      	bne.n	800a640 <_kill_r+0x1c>
 800a63a:	682b      	ldr	r3, [r5, #0]
 800a63c:	b103      	cbz	r3, 800a640 <_kill_r+0x1c>
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	bd38      	pop	{r3, r4, r5, pc}
 800a642:	bf00      	nop
 800a644:	20000460 	.word	0x20000460

0800a648 <_getpid_r>:
 800a648:	f7f8 b8de 	b.w	8002808 <_getpid>

0800a64c <sqrt>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	ed2d 8b02 	vpush	{d8}
 800a652:	ec55 4b10 	vmov	r4, r5, d0
 800a656:	f000 f82d 	bl	800a6b4 <__ieee754_sqrt>
 800a65a:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <sqrt+0x64>)
 800a65c:	eeb0 8a40 	vmov.f32	s16, s0
 800a660:	eef0 8a60 	vmov.f32	s17, s1
 800a664:	f993 3000 	ldrsb.w	r3, [r3]
 800a668:	3301      	adds	r3, #1
 800a66a:	d019      	beq.n	800a6a0 <sqrt+0x54>
 800a66c:	4622      	mov	r2, r4
 800a66e:	462b      	mov	r3, r5
 800a670:	4620      	mov	r0, r4
 800a672:	4629      	mov	r1, r5
 800a674:	f7f6 fa82 	bl	8000b7c <__aeabi_dcmpun>
 800a678:	b990      	cbnz	r0, 800a6a0 <sqrt+0x54>
 800a67a:	2200      	movs	r2, #0
 800a67c:	2300      	movs	r3, #0
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	f7f6 fa53 	bl	8000b2c <__aeabi_dcmplt>
 800a686:	b158      	cbz	r0, 800a6a0 <sqrt+0x54>
 800a688:	f7fd f830 	bl	80076ec <__errno>
 800a68c:	2321      	movs	r3, #33	; 0x21
 800a68e:	6003      	str	r3, [r0, #0]
 800a690:	2200      	movs	r2, #0
 800a692:	2300      	movs	r3, #0
 800a694:	4610      	mov	r0, r2
 800a696:	4619      	mov	r1, r3
 800a698:	f7f6 f900 	bl	800089c <__aeabi_ddiv>
 800a69c:	ec41 0b18 	vmov	d8, r0, r1
 800a6a0:	eeb0 0a48 	vmov.f32	s0, s16
 800a6a4:	eef0 0a68 	vmov.f32	s1, s17
 800a6a8:	ecbd 8b02 	vpop	{d8}
 800a6ac:	bd38      	pop	{r3, r4, r5, pc}
 800a6ae:	bf00      	nop
 800a6b0:	200001dc 	.word	0x200001dc

0800a6b4 <__ieee754_sqrt>:
 800a6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b8:	ec55 4b10 	vmov	r4, r5, d0
 800a6bc:	4e56      	ldr	r6, [pc, #344]	; (800a818 <__ieee754_sqrt+0x164>)
 800a6be:	43ae      	bics	r6, r5
 800a6c0:	ee10 0a10 	vmov	r0, s0
 800a6c4:	ee10 3a10 	vmov	r3, s0
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	462a      	mov	r2, r5
 800a6cc:	d110      	bne.n	800a6f0 <__ieee754_sqrt+0x3c>
 800a6ce:	ee10 2a10 	vmov	r2, s0
 800a6d2:	462b      	mov	r3, r5
 800a6d4:	f7f5 ffb8 	bl	8000648 <__aeabi_dmul>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4620      	mov	r0, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	f7f5 fdfc 	bl	80002dc <__adddf3>
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	ec45 4b10 	vmov	d0, r4, r5
 800a6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f0:	2d00      	cmp	r5, #0
 800a6f2:	dc10      	bgt.n	800a716 <__ieee754_sqrt+0x62>
 800a6f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a6f8:	4330      	orrs	r0, r6
 800a6fa:	d0f5      	beq.n	800a6e8 <__ieee754_sqrt+0x34>
 800a6fc:	b15d      	cbz	r5, 800a716 <__ieee754_sqrt+0x62>
 800a6fe:	ee10 2a10 	vmov	r2, s0
 800a702:	462b      	mov	r3, r5
 800a704:	ee10 0a10 	vmov	r0, s0
 800a708:	f7f5 fde6 	bl	80002d8 <__aeabi_dsub>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	f7f6 f8c4 	bl	800089c <__aeabi_ddiv>
 800a714:	e7e6      	b.n	800a6e4 <__ieee754_sqrt+0x30>
 800a716:	1509      	asrs	r1, r1, #20
 800a718:	d076      	beq.n	800a808 <__ieee754_sqrt+0x154>
 800a71a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a71e:	07ce      	lsls	r6, r1, #31
 800a720:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a724:	bf5e      	ittt	pl
 800a726:	0fda      	lsrpl	r2, r3, #31
 800a728:	005b      	lslpl	r3, r3, #1
 800a72a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a72e:	0fda      	lsrs	r2, r3, #31
 800a730:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a734:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a738:	2000      	movs	r0, #0
 800a73a:	106d      	asrs	r5, r5, #1
 800a73c:	005b      	lsls	r3, r3, #1
 800a73e:	f04f 0e16 	mov.w	lr, #22
 800a742:	4684      	mov	ip, r0
 800a744:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a748:	eb0c 0401 	add.w	r4, ip, r1
 800a74c:	4294      	cmp	r4, r2
 800a74e:	bfde      	ittt	le
 800a750:	1b12      	suble	r2, r2, r4
 800a752:	eb04 0c01 	addle.w	ip, r4, r1
 800a756:	1840      	addle	r0, r0, r1
 800a758:	0052      	lsls	r2, r2, #1
 800a75a:	f1be 0e01 	subs.w	lr, lr, #1
 800a75e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a762:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a766:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a76a:	d1ed      	bne.n	800a748 <__ieee754_sqrt+0x94>
 800a76c:	4671      	mov	r1, lr
 800a76e:	2720      	movs	r7, #32
 800a770:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a774:	4562      	cmp	r2, ip
 800a776:	eb04 060e 	add.w	r6, r4, lr
 800a77a:	dc02      	bgt.n	800a782 <__ieee754_sqrt+0xce>
 800a77c:	d113      	bne.n	800a7a6 <__ieee754_sqrt+0xf2>
 800a77e:	429e      	cmp	r6, r3
 800a780:	d811      	bhi.n	800a7a6 <__ieee754_sqrt+0xf2>
 800a782:	2e00      	cmp	r6, #0
 800a784:	eb06 0e04 	add.w	lr, r6, r4
 800a788:	da43      	bge.n	800a812 <__ieee754_sqrt+0x15e>
 800a78a:	f1be 0f00 	cmp.w	lr, #0
 800a78e:	db40      	blt.n	800a812 <__ieee754_sqrt+0x15e>
 800a790:	f10c 0801 	add.w	r8, ip, #1
 800a794:	eba2 020c 	sub.w	r2, r2, ip
 800a798:	429e      	cmp	r6, r3
 800a79a:	bf88      	it	hi
 800a79c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a7a0:	1b9b      	subs	r3, r3, r6
 800a7a2:	4421      	add	r1, r4
 800a7a4:	46c4      	mov	ip, r8
 800a7a6:	0052      	lsls	r2, r2, #1
 800a7a8:	3f01      	subs	r7, #1
 800a7aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a7ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a7b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7b6:	d1dd      	bne.n	800a774 <__ieee754_sqrt+0xc0>
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	d006      	beq.n	800a7ca <__ieee754_sqrt+0x116>
 800a7bc:	1c4c      	adds	r4, r1, #1
 800a7be:	bf13      	iteet	ne
 800a7c0:	3101      	addne	r1, #1
 800a7c2:	3001      	addeq	r0, #1
 800a7c4:	4639      	moveq	r1, r7
 800a7c6:	f021 0101 	bicne.w	r1, r1, #1
 800a7ca:	1043      	asrs	r3, r0, #1
 800a7cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7d0:	0849      	lsrs	r1, r1, #1
 800a7d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7d6:	07c2      	lsls	r2, r0, #31
 800a7d8:	bf48      	it	mi
 800a7da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a7de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	463d      	mov	r5, r7
 800a7e6:	e77f      	b.n	800a6e8 <__ieee754_sqrt+0x34>
 800a7e8:	0ada      	lsrs	r2, r3, #11
 800a7ea:	3815      	subs	r0, #21
 800a7ec:	055b      	lsls	r3, r3, #21
 800a7ee:	2a00      	cmp	r2, #0
 800a7f0:	d0fa      	beq.n	800a7e8 <__ieee754_sqrt+0x134>
 800a7f2:	02d7      	lsls	r7, r2, #11
 800a7f4:	d50a      	bpl.n	800a80c <__ieee754_sqrt+0x158>
 800a7f6:	f1c1 0420 	rsb	r4, r1, #32
 800a7fa:	fa23 f404 	lsr.w	r4, r3, r4
 800a7fe:	1e4d      	subs	r5, r1, #1
 800a800:	408b      	lsls	r3, r1
 800a802:	4322      	orrs	r2, r4
 800a804:	1b41      	subs	r1, r0, r5
 800a806:	e788      	b.n	800a71a <__ieee754_sqrt+0x66>
 800a808:	4608      	mov	r0, r1
 800a80a:	e7f0      	b.n	800a7ee <__ieee754_sqrt+0x13a>
 800a80c:	0052      	lsls	r2, r2, #1
 800a80e:	3101      	adds	r1, #1
 800a810:	e7ef      	b.n	800a7f2 <__ieee754_sqrt+0x13e>
 800a812:	46e0      	mov	r8, ip
 800a814:	e7be      	b.n	800a794 <__ieee754_sqrt+0xe0>
 800a816:	bf00      	nop
 800a818:	7ff00000 	.word	0x7ff00000

0800a81c <_init>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	bf00      	nop
 800a820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a822:	bc08      	pop	{r3}
 800a824:	469e      	mov	lr, r3
 800a826:	4770      	bx	lr

0800a828 <_fini>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	bf00      	nop
 800a82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82e:	bc08      	pop	{r3}
 800a830:	469e      	mov	lr, r3
 800a832:	4770      	bx	lr
