
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800a7d8  0800a7d8  0001a7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adac  0800adac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800adac  0800adac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adac  0800adac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adac  0800adac  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adb0  0800adb0  0001adb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800adb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e0  0800af94  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800af94  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002452f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d4b  00000000  00000000  0004473f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00048490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  00049b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b266  00000000  00000000  0004b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4c2  00000000  00000000  0007626e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f123  00000000  00000000  00091730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a0853  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007200  00000000  00000000  001a08a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a7bc 	.word	0x0800a7bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800a7bc 	.word	0x0800a7bc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2220      	movs	r2, #32
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f006 fd1d 	bl	80076f0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cb6:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cbe:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ce4:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d20:	4819      	ldr	r0, [pc, #100]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d22:	f002 fa25 	bl	8003170 <HAL_ADC_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d2c:	f000 fe90 	bl	8001a50 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000d30:	2306      	movs	r3, #6
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d44:	f003 fe9a 	bl	8004a7c <HAL_ADCEx_MultiModeConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000d4e:	f000 fe7f 	bl	8001a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_ADC1_Init+0xf4>)
 8000d54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d56:	2306      	movs	r3, #6
 8000d58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d5e:	237f      	movs	r3, #127	; 0x7f
 8000d60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d62:	2304      	movs	r3, #4
 8000d64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_ADC1_Init+0xf0>)
 8000d70:	f003 f87c 	bl	8003e6c <HAL_ADC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d7a:	f000 fe69 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3730      	adds	r7, #48	; 0x30
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200002ec 	.word	0x200002ec
 8000d8c:	04300002 	.word	0x04300002

08000d90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2220      	movs	r2, #32
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fca7 	bl	80076f0 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000da4:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <MX_ADC2_Init+0xb8>)
 8000da6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dfe:	4811      	ldr	r0, [pc, #68]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000e00:	f002 f9b6 	bl	8003170 <HAL_ADC_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000e0a:	f000 fe21 	bl	8001a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_ADC2_Init+0xbc>)
 8000e10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e12:	2306      	movs	r3, #6
 8000e14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1a:	237f      	movs	r3, #127	; 0x7f
 8000e1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_ADC2_Init+0xb4>)
 8000e2c:	f003 f81e 	bl	8003e6c <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e36:	f000 fe0b 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000214 	.word	0x20000214
 8000e48:	50000100 	.word	0x50000100
 8000e4c:	08600004 	.word	0x08600004

08000e50 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2220      	movs	r2, #32
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 fc47 	bl	80076f0 <memset>
  /* USER CODE BEGIN ADC5_Init 1 */

  /* USER CODE END ADC5_Init 1 */
  /** Common config
  */
  hadc5.Instance = ADC5;
 8000e62:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e64:	4a2b      	ldr	r2, [pc, #172]	; (8000f14 <MX_ADC5_Init+0xc4>)
 8000e66:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e6e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ecc:	f002 f950 	bl	8003170 <HAL_ADC_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000ed6:	f000 fdbb 	bl	8001a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_ADC5_Init+0xc8>)
 8000edc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ede:	2306      	movs	r3, #6
 8000ee0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee6:	237f      	movs	r3, #127	; 0x7f
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eea:	2304      	movs	r3, #4
 8000eec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_ADC5_Init+0xc0>)
 8000ef8:	f002 ffb8 	bl	8003e6c <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000f02:	f000 fda5 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000280 	.word	0x20000280
 8000f14:	50000600 	.word	0x50000600
 8000f18:	90c00010 	.word	0x90c00010

08000f1c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3c:	d136      	bne.n	8000fac <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f3e:	4b48      	ldr	r3, [pc, #288]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a46      	ldr	r2, [pc, #280]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000f46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f48:	4b45      	ldr	r3, [pc, #276]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d10b      	bne.n	8000f68 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f50:	4b44      	ldr	r3, [pc, #272]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a43      	ldr	r2, [pc, #268]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b41      	ldr	r3, [pc, #260]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b3e      	ldr	r3, [pc, #248]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6c:	4a3d      	ldr	r2, [pc, #244]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f74:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CELL_1_VOLTAGE_Pin;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f84:	2303      	movs	r3, #3
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CELL_1_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f003 ff89 	bl	8004eac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2012      	movs	r0, #18
 8000fa0:	f003 ff4f 	bl	8004e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fa4:	2012      	movs	r0, #18
 8000fa6:	f003 ff66 	bl	8004e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000faa:	e054      	b.n	8001056 <HAL_ADC_MspInit+0x13a>
  else if(adcHandle->Instance==ADC2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a2d      	ldr	r2, [pc, #180]	; (8001068 <HAL_ADC_MspInit+0x14c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d136      	bne.n	8001024 <HAL_ADC_MspInit+0x108>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a28      	ldr	r2, [pc, #160]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000fbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <HAL_ADC_MspInit+0x144>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d10b      	bne.n	8000fe0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fc8:	4b26      	ldr	r3, [pc, #152]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000fce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CELL_1_CURRENT_Pin;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CELL_1_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100e:	f003 ff4d 	bl	8004eac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2012      	movs	r0, #18
 8001018:	f003 ff13 	bl	8004e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800101c:	2012      	movs	r0, #18
 800101e:	f003 ff2a 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 8001022:	e018      	b.n	8001056 <HAL_ADC_MspInit+0x13a>
  else if(adcHandle->Instance==ADC5)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_ADC_MspInit+0x150>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d113      	bne.n	8001056 <HAL_ADC_MspInit+0x13a>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <HAL_ADC_MspInit+0x148>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_ADC_MspInit+0x148>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	203e      	movs	r0, #62	; 0x3e
 800104c:	f003 fef9 	bl	8004e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 8001050:	203e      	movs	r0, #62	; 0x3e
 8001052:	f003 ff10 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200001fc 	.word	0x200001fc
 8001064:	40021000 	.word	0x40021000
 8001068:	50000100 	.word	0x50000100
 800106c:	50000600 	.word	0x50000600

08001070 <events_initialize_debug_mod>:
#include "events.h"

debug_mod *events_initialize_debug_mod(char *tag, GPIO_TypeDef *Port, uint16_t Probe_1, uint16_t Probe_2, uint16_t Probe_3)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	460b      	mov	r3, r1
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	4613      	mov	r3, r2
 8001084:	80bb      	strh	r3, [r7, #4]
	debug_mod *dbg_struct = (debug_mod *)malloc(sizeof(debug_mod));
 8001086:	2010      	movs	r0, #16
 8001088:	f006 fb2a 	bl	80076e0 <malloc>
 800108c:	4603      	mov	r3, r0
 800108e:	617b      	str	r3, [r7, #20]

	if (dbg_struct == NULL)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <events_initialize_debug_mod+0x2a>
		return (NULL);
 8001096:	2300      	movs	r3, #0
 8001098:	e030      	b.n	80010fc <events_initialize_debug_mod+0x8c>

	dbg_struct->tag = tag;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	601a      	str	r2, [r3, #0]

	printf("Initializing %s:\n", dbg_struct->tag);
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <events_initialize_debug_mod+0x94>)
 80010a8:	f007 f83e 	bl	8008128 <iprintf>

	printf("\t- ");
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <events_initialize_debug_mod+0x98>)
 80010ae:	f007 f83b 	bl	8008128 <iprintf>
	dbg_struct->probe_1 = events_initialize_digital_ios("probe 1", Port, Probe_1, 0);
 80010b2:	88fa      	ldrh	r2, [r7, #6]
 80010b4:	2300      	movs	r3, #0
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <events_initialize_debug_mod+0x9c>)
 80010ba:	f000 f82d 	bl	8001118 <events_initialize_digital_ios>
 80010be:	4602      	mov	r2, r0
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	605a      	str	r2, [r3, #4]

	printf("\t- ");
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <events_initialize_debug_mod+0x98>)
 80010c6:	f007 f82f 	bl	8008128 <iprintf>
	dbg_struct->probe_2 = events_initialize_digital_ios("probe 2", Port, Probe_2, 0);
 80010ca:	88ba      	ldrh	r2, [r7, #4]
 80010cc:	2300      	movs	r3, #0
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <events_initialize_debug_mod+0xa0>)
 80010d2:	f000 f821 	bl	8001118 <events_initialize_digital_ios>
 80010d6:	4602      	mov	r2, r0
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	609a      	str	r2, [r3, #8]

	printf("\t- ");
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <events_initialize_debug_mod+0x98>)
 80010de:	f007 f823 	bl	8008128 <iprintf>
	dbg_struct->probe_3 = events_initialize_digital_ios("probe 3", Port, Probe_3, 0);
 80010e2:	8c3a      	ldrh	r2, [r7, #32]
 80010e4:	2300      	movs	r3, #0
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <events_initialize_debug_mod+0xa4>)
 80010ea:	f000 f815 	bl	8001118 <events_initialize_digital_ios>
 80010ee:	4602      	mov	r2, r0
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	60da      	str	r2, [r3, #12]

	printf("\n");
 80010f4:	200a      	movs	r0, #10
 80010f6:	f007 f82f 	bl	8008158 <putchar>

	return(dbg_struct);
 80010fa:	697b      	ldr	r3, [r7, #20]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0800a7d8 	.word	0x0800a7d8
 8001108:	0800a7ec 	.word	0x0800a7ec
 800110c:	0800a7f0 	.word	0x0800a7f0
 8001110:	0800a7f8 	.word	0x0800a7f8
 8001114:	0800a800 	.word	0x0800a800

08001118 <events_initialize_digital_ios>:

digital_IOs *events_initialize_digital_ios(char *tag, GPIO_TypeDef *Port, uint16_t Pin, uint8_t invert_output)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	4611      	mov	r1, r2
 8001124:	461a      	mov	r2, r3
 8001126:	460b      	mov	r3, r1
 8001128:	80fb      	strh	r3, [r7, #6]
 800112a:	4613      	mov	r3, r2
 800112c:	717b      	strb	r3, [r7, #5]
	digital_IOs *dig_ios_struct = (digital_IOs *)malloc(sizeof(digital_IOs));
 800112e:	200c      	movs	r0, #12
 8001130:	f006 fad6 	bl	80076e0 <malloc>
 8001134:	4603      	mov	r3, r0
 8001136:	617b      	str	r3, [r7, #20]

	if (dig_ios_struct == NULL)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <events_initialize_digital_ios+0x2a>
		return (NULL);
 800113e:	2300      	movs	r3, #0
 8001140:	e012      	b.n	8001168 <events_initialize_digital_ios+0x50>

	dig_ios_struct->tag = tag;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	601a      	str	r2, [r3, #0]

	dig_ios_struct->Port = Port;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	605a      	str	r2, [r3, #4]

	dig_ios_struct->Pin = Pin;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	811a      	strh	r2, [r3, #8]

	dig_ios_struct->invert = invert_output;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	797a      	ldrb	r2, [r7, #5]
 8001158:	729a      	strb	r2, [r3, #10]

	printf("Initializing %s\n", dig_ios_struct->tag);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <events_initialize_digital_ios+0x58>)
 8001162:	f006 ffe1 	bl	8008128 <iprintf>

	return (dig_ios_struct);
 8001166:	697b      	ldr	r3, [r7, #20]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	0800a808 	.word	0x0800a808

08001174 <events_handler>:

void events_handler(photovoltaic *ptr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	// Seccionamento do circuito
	if ((ptr->events_handler & EVENT_USER_BREAK) == EVENT_USER_BREAK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d008      	beq.n	800119c <events_handler+0x28>
	{
		events_output_relays(ptr, 0);
 800118a:	2100      	movs	r1, #0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f861 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x1);
 8001192:	2101      	movs	r1, #1
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f89f 	bl	80012d8 <events_output_debugger>
	else
	{
		events_output_relays(ptr, 1);
		events_output_debugger(ptr, 0x0);
	}
}
 800119a:	e057      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_OVERVOLTAGE) == EVENT_OVERVOLTAGE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d008      	beq.n	80011bc <events_handler+0x48>
		events_output_relays(ptr, 0);
 80011aa:	2100      	movs	r1, #0
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f851 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x2);
 80011b2:	2102      	movs	r1, #2
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f88f 	bl	80012d8 <events_output_debugger>
}
 80011ba:	e047      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_OVERCURRENT) == EVENT_OVERCURRENT)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d008      	beq.n	80011dc <events_handler+0x68>
		events_output_relays(ptr, 0);
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f841 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x3);
 80011d2:	2103      	movs	r1, #3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f87f 	bl	80012d8 <events_output_debugger>
}
 80011da:	e037      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == EVENT_UNDERVOLTAGE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d008      	beq.n	80011fc <events_handler+0x88>
		events_output_relays(ptr, 1);
 80011ea:	2101      	movs	r1, #1
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f831 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x4);
 80011f2:	2104      	movs	r1, #4
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f86f 	bl	80012d8 <events_output_debugger>
}
 80011fa:	e027      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_OVERHEAT) == EVENT_OVERHEAT)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <events_handler+0xa8>
		events_output_relays(ptr, 1);
 800120a:	2101      	movs	r1, #1
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f821 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x5);
 8001212:	2105      	movs	r1, #5
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f85f 	bl	80012d8 <events_output_debugger>
}
 800121a:	e017      	b.n	800124c <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_DPS_LIFESPAN) == EVENT_DPS_LIFESPAN)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d008      	beq.n	800123c <events_handler+0xc8>
		events_output_relays(ptr, 1);
 800122a:	2101      	movs	r1, #1
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f811 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x6);
 8001232:	2106      	movs	r1, #6
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f84f 	bl	80012d8 <events_output_debugger>
}
 800123a:	e007      	b.n	800124c <events_handler+0xd8>
		events_output_relays(ptr, 1);
 800123c:	2101      	movs	r1, #1
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f808 	bl	8001254 <events_output_relays>
		events_output_debugger(ptr, 0x0);
 8001244:	2100      	movs	r1, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f846 	bl	80012d8 <events_output_debugger>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <events_output_relays>:

void events_output_relays(photovoltaic *ptr, uint8_t value)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
	// Relé (-)
	if (ptr->neg_out->invert)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	7a9b      	ldrb	r3, [r3, #10]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00c      	beq.n	8001284 <events_output_relays+0x30>
		HAL_GPIO_WritePin(ptr->neg_out->Port, ptr->neg_out->Pin, ~value);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	6858      	ldr	r0, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	8919      	ldrh	r1, [r3, #8]
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	43db      	mvns	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	f003 ff97 	bl	80051b0 <HAL_GPIO_WritePin>
 8001282:	e009      	b.n	8001298 <events_output_relays+0x44>
	else
		HAL_GPIO_WritePin(ptr->neg_out->Port, ptr->neg_out->Pin, value);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	6858      	ldr	r0, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	4619      	mov	r1, r3
 8001294:	f003 ff8c 	bl	80051b0 <HAL_GPIO_WritePin>

	// Relé (+)
	if (ptr->pos_out->invert)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	7a9b      	ldrb	r3, [r3, #10]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00c      	beq.n	80012bc <events_output_relays+0x68>
		HAL_GPIO_WritePin(ptr->pos_out->Port, ptr->pos_out->Pin, ~value);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	6858      	ldr	r0, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	8919      	ldrh	r1, [r3, #8]
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	f003 ff7b 	bl	80051b0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ptr->pos_out->Port, ptr->pos_out->Pin, value);

}
 80012ba:	e009      	b.n	80012d0 <events_output_relays+0x7c>
		HAL_GPIO_WritePin(ptr->pos_out->Port, ptr->pos_out->Pin, value);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	6858      	ldr	r0, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	891b      	ldrh	r3, [r3, #8]
 80012c8:	78fa      	ldrb	r2, [r7, #3]
 80012ca:	4619      	mov	r1, r3
 80012cc:	f003 ff70 	bl	80051b0 <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <events_output_debugger>:

void events_output_debugger(photovoltaic *ptr, uint8_t value)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
	if (ptr->debugger == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d02d      	beq.n	8001348 <events_output_debugger+0x70>
		return;

	// LSB
	HAL_GPIO_WritePin(ptr->debugger->probe_3->Port, ptr->debugger->probe_3->Pin, 0x1 & value);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	6858      	ldr	r0, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	8919      	ldrh	r1, [r3, #8]
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	f003 ff53 	bl	80051b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ptr->debugger->probe_2->Port, ptr->debugger->probe_2->Pin, 0x2 & value);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	6858      	ldr	r0, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	8919      	ldrh	r1, [r3, #8]
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	f003 ff44 	bl	80051b0 <HAL_GPIO_WritePin>

	// MSB
	HAL_GPIO_WritePin(ptr->debugger->probe_1->Port, ptr->debugger->probe_1->Pin, 0x4 & value);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	6858      	ldr	r0, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	8919      	ldrh	r1, [r3, #8]
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	f003 ff35 	bl	80051b0 <HAL_GPIO_WritePin>
 8001346:	e000      	b.n	800134a <events_output_debugger+0x72>
		return;
 8001348:	bf00      	nop
}
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b40      	ldr	r3, [pc, #256]	; (8001468 <MX_GPIO_Init+0x118>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a3f      	ldr	r2, [pc, #252]	; (8001468 <MX_GPIO_Init+0x118>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <MX_GPIO_Init+0x118>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <MX_GPIO_Init+0x118>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a39      	ldr	r2, [pc, #228]	; (8001468 <MX_GPIO_Init+0x118>)
 8001384:	f043 0320 	orr.w	r3, r3, #32
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b37      	ldr	r3, [pc, #220]	; (8001468 <MX_GPIO_Init+0x118>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <MX_GPIO_Init+0x118>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a33      	ldr	r2, [pc, #204]	; (8001468 <MX_GPIO_Init+0x118>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <MX_GPIO_Init+0x118>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <MX_GPIO_Init+0x118>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a2d      	ldr	r2, [pc, #180]	; (8001468 <MX_GPIO_Init+0x118>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <MX_GPIO_Init+0x118>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CELL_1_OUT_LED_Pin|CELL_1_OUT_POS_Pin|CELL_1_OUT_NEG_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f003 feee 	bl	80051b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL_1_DBG1_Pin|CELL_1_DBG2_Pin|CELL_1_DBG3_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80013da:	4824      	ldr	r0, [pc, #144]	; (800146c <MX_GPIO_Init+0x11c>)
 80013dc:	f003 fee8 	bl	80051b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_BTN_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <MX_GPIO_Init+0x120>)
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_BTN_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	481d      	ldr	r0, [pc, #116]	; (800146c <MX_GPIO_Init+0x11c>)
 80013f6:	f003 fd59 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CELL_1_OUT_LED_Pin|CELL_1_OUT_POS_Pin|CELL_1_OUT_NEG_Pin;
 80013fa:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001416:	f003 fd49 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CELL_1_DBG1_Pin|CELL_1_DBG2_Pin|CELL_1_DBG3_Pin;
 800141a:	f44f 73b0 	mov.w	r3, #352	; 0x160
 800141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	480e      	ldr	r0, [pc, #56]	; (800146c <MX_GPIO_Init+0x11c>)
 8001434:	f003 fd3a 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_DPS_Pin;
 8001438:	2301      	movs	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_DPS_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	480a      	ldr	r0, [pc, #40]	; (8001474 <MX_GPIO_Init+0x124>)
 800144c:	f003 fd2e 	bl	8004eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2028      	movs	r0, #40	; 0x28
 8001456:	f003 fcf4 	bl	8004e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800145a:	2028      	movs	r0, #40	; 0x28
 800145c:	f003 fd0b 	bl	8004e76 <HAL_NVIC_EnableIRQ>

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	48000800 	.word	0x48000800
 8001470:	10110000 	.word	0x10110000
 8001474:	48000400 	.word	0x48000400

08001478 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
	objects_def_exti_gpio(GPIO_Pin);
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	4618      	mov	r0, r3
 8001486:	f001 f8ed 	bl	8002664 <objects_def_exti_gpio>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_I2C1_Init+0x74>)
 800149a:	4a1c      	ldr	r2, [pc, #112]	; (800150c <MX_I2C1_Init+0x78>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_I2C1_Init+0x74>)
 80014a0:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <MX_I2C1_Init+0x7c>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <MX_I2C1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_I2C1_Init+0x74>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_I2C1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_I2C1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ce:	480e      	ldr	r0, [pc, #56]	; (8001508 <MX_I2C1_Init+0x74>)
 80014d0:	f003 fe9e 	bl	8005210 <HAL_I2C_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014da:	f000 fab9 	bl	8001a50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <MX_I2C1_Init+0x74>)
 80014e2:	f004 fa95 	bl	8005a10 <HAL_I2CEx_ConfigAnalogFilter>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014ec:	f000 fab0 	bl	8001a50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_I2C1_Init+0x74>)
 80014f4:	f004 fad7 	bl	8005aa6 <HAL_I2CEx_ConfigDigitalFilter>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014fe:	f000 faa7 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000358 	.word	0x20000358
 800150c:	40005400 	.word	0x40005400
 8001510:	307075b1 	.word	0x307075b1

08001514 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a17      	ldr	r2, [pc, #92]	; (8001590 <HAL_I2C_MspInit+0x7c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d128      	bne.n	8001588 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_I2C_MspInit+0x80>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <HAL_I2C_MspInit+0x80>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <HAL_I2C_MspInit+0x80>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800154e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001554:	2312      	movs	r3, #18
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001558:	2301      	movs	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001560:	2304      	movs	r3, #4
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	480b      	ldr	r0, [pc, #44]	; (8001598 <HAL_I2C_MspInit+0x84>)
 800156c:	f003 fc9e 	bl	8004eac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_I2C_MspInit+0x80>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_I2C_MspInit+0x80>)
 8001576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800157a:	6593      	str	r3, [r2, #88]	; 0x58
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_I2C_MspInit+0x80>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40005400 	.word	0x40005400
 8001594:	40021000 	.word	0x40021000
 8001598:	48000400 	.word	0x48000400

0800159c <lcd16x2_i2c_sendCommand>:

static I2C_HandleTypeDef* lcd16x2_i2cHandle;
static uint8_t LCD_I2C_SLAVE_ADDRESS = 0;

static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command << 4));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f023 030f 	bic.w	r3, r3, #15
 80015b2:	73bb      	strb	r3, [r7, #14]

  uint8_t i2cData[4] =
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	f043 030c 	orr.w	r3, r3, #12
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	723b      	strb	r3, [r7, #8]
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	727b      	strb	r3, [r7, #9]
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	f043 030c 	orr.w	r3, r3, #12
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	72bb      	strb	r3, [r7, #10]
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };

  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <lcd16x2_i2c_sendCommand+0x60>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <lcd16x2_i2c_sendCommand+0x64>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b299      	uxth	r1, r3
 80015e6:	f107 0208 	add.w	r2, r7, #8
 80015ea:	23c8      	movs	r3, #200	; 0xc8
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2304      	movs	r3, #4
 80015f0:	f003 fe9e 	bl	8005330 <HAL_I2C_Master_Transmit>
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000200 	.word	0x20000200
 8001600:	20000204 	.word	0x20000204

08001604 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af02      	add	r7, sp, #8
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data << 4));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f023 030f 	bic.w	r3, r3, #15
 800161a:	73bb      	strb	r3, [r7, #14]

  uint8_t i2cData[4] =
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	f043 030d 	orr.w	r3, r3, #13
 8001622:	b2db      	uxtb	r3, r3
 8001624:	723b      	strb	r3, [r7, #8]
 8001626:	7bbb      	ldrb	r3, [r7, #14]
 8001628:	f043 0309 	orr.w	r3, r3, #9
 800162c:	b2db      	uxtb	r3, r3
 800162e:	727b      	strb	r3, [r7, #9]
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f043 030d 	orr.w	r3, r3, #13
 8001636:	b2db      	uxtb	r3, r3
 8001638:	72bb      	strb	r3, [r7, #10]
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	f043 0309 	orr.w	r3, r3, #9
 8001640:	b2db      	uxtb	r3, r3
 8001642:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };

  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <lcd16x2_i2c_sendData+0x60>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <lcd16x2_i2c_sendData+0x64>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b299      	uxth	r1, r3
 800164e:	f107 0208 	add.w	r2, r7, #8
 8001652:	23c8      	movs	r3, #200	; 0xc8
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2304      	movs	r3, #4
 8001658:	f003 fe6a 	bl	8005330 <HAL_I2C_Master_Transmit>
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000200 	.word	0x20000200
 8001668:	20000204 	.word	0x20000204

0800166c <lcd16x2_i2c_init>:

int lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f001 faf3 	bl	8002c60 <HAL_Delay>

  lcd16x2_i2cHandle = pI2cHandle;
 800167a:	4a30      	ldr	r2, [pc, #192]	; (800173c <lcd16x2_i2c_init+0xd0>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6013      	str	r3, [r2, #0]

  if (HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <lcd16x2_i2c_init+0xd0>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001688:	2205      	movs	r2, #5
 800168a:	214e      	movs	r1, #78	; 0x4e
 800168c:	f003 ff44 	bl	8005518 <HAL_I2C_IsDeviceReady>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d010      	beq.n	80016b8 <lcd16x2_i2c_init+0x4c>
  {
    if (HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <lcd16x2_i2c_init+0xd0>)
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800169e:	2205      	movs	r2, #5
 80016a0:	217e      	movs	r1, #126	; 0x7e
 80016a2:	f003 ff39 	bl	8005518 <HAL_I2C_IsDeviceReady>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <lcd16x2_i2c_init+0x44>
    {
      return (0);
 80016ac:	2300      	movs	r3, #0
 80016ae:	e040      	b.n	8001732 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <lcd16x2_i2c_init+0xd4>)
 80016b2:	227e      	movs	r2, #126	; 0x7e
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e002      	b.n	80016be <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <lcd16x2_i2c_init+0xd4>)
 80016ba:	224e      	movs	r2, #78	; 0x4e
 80016bc:	701a      	strb	r2, [r3, #0]
  }

  //1. Wait at least 15ms
  HAL_Delay(45);
 80016be:	202d      	movs	r0, #45	; 0x2d
 80016c0:	f001 face 	bl	8002c60 <HAL_Delay>

  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80016c4:	2030      	movs	r0, #48	; 0x30
 80016c6:	f7ff ff69 	bl	800159c <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80016ca:	2005      	movs	r0, #5
 80016cc:	f001 fac8 	bl	8002c60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80016d0:	2030      	movs	r0, #48	; 0x30
 80016d2:	f7ff ff63 	bl	800159c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f001 fac2 	bl	8002c60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80016dc:	2030      	movs	r0, #48	; 0x30
 80016de:	f7ff ff5d 	bl	800159c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80016e2:	2008      	movs	r0, #8
 80016e4:	f001 fabc 	bl	8002c60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80016e8:	2020      	movs	r0, #32
 80016ea:	f7ff ff57 	bl	800159c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80016ee:	2008      	movs	r0, #8
 80016f0:	f001 fab6 	bl	8002c60 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80016f4:	2028      	movs	r0, #40	; 0x28
 80016f6:	f7ff ff51 	bl	800159c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f001 fab0 	bl	8002c60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001700:	2008      	movs	r0, #8
 8001702:	f7ff ff4b 	bl	800159c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f001 faaa 	bl	8002c60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff ff45 	bl	800159c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001712:	2003      	movs	r0, #3
 8001714:	f001 faa4 	bl	8002c60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8001718:	2006      	movs	r0, #6
 800171a:	f7ff ff3f 	bl	800159c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f001 fa9e 	bl	8002c60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001724:	200c      	movs	r0, #12
 8001726:	f7ff ff39 	bl	800159c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800172a:	2003      	movs	r0, #3
 800172c:	f001 fa98 	bl	8002c60 <HAL_Delay>

  return (1);
 8001730:	2301      	movs	r3, #1
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000200 	.word	0x20000200
 8001740:	20000204 	.word	0x20000204

08001744 <lcd16x2_i2c_setCursor>:

void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;

  maskData = (col) & 0x0F;
 8001754:	79bb      	ldrb	r3, [r7, #6]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	73fb      	strb	r3, [r7, #15]

  if (row==0)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d108      	bne.n	8001774 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001768:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff15 	bl	800159c <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8001772:	e007      	b.n	8001784 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800177a:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff0c 	bl	800159c <lcd16x2_i2c_sendCommand>
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <lcd16x2_i2c_printf>:
    lcd16x2_i2c_sendCommand(0x18);
  }
}

void lcd16x2_i2c_printf(const char* str, ...)
{
 800178c:	b40f      	push	{r0, r1, r2, r3}
 800178e:	b590      	push	{r4, r7, lr}
 8001790:	b089      	sub	sp, #36	; 0x24
 8001792:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;

  va_start(args, str);
 8001794:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001798:	607b      	str	r3, [r7, #4]

  vsprintf(stringArray, str, args);
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017a2:	4618      	mov	r0, r3
 80017a4:	f006 fd8a 	bl	80082bc <vsiprintf>

  va_end(args);

  for (uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	77fb      	strb	r3, [r7, #31]
 80017ac:	e00b      	b.n	80017c6 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
 80017b0:	f107 0220 	add.w	r2, r7, #32
 80017b4:	4413      	add	r3, r2
 80017b6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff22 	bl	8001604 <lcd16x2_i2c_sendData>
  for (uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80017c0:	7ffb      	ldrb	r3, [r7, #31]
 80017c2:	3301      	adds	r3, #1
 80017c4:	77fb      	strb	r3, [r7, #31]
 80017c6:	7ffc      	ldrb	r4, [r7, #31]
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fd27 	bl	8000220 <strlen>
 80017d2:	4603      	mov	r3, r0
 80017d4:	429c      	cmp	r4, r3
 80017d6:	d202      	bcs.n	80017de <lcd16x2_i2c_printf+0x52>
 80017d8:	7ffb      	ldrb	r3, [r7, #31]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	d9e7      	bls.n	80017ae <lcd16x2_i2c_printf+0x22>
  }
}
 80017de:	bf00      	nop
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80017e8:	b004      	add	sp, #16
 80017ea:	4770      	bx	lr

080017ec <lcd16x2_i2c_update>:

void lcd16x2_i2c_update(photovoltaic *ptr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	// Tensão
	lcd16x2_i2c_setCursor(0,0);
 80017f4:	2100      	movs	r1, #0
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff ffa4 	bl	8001744 <lcd16x2_i2c_setCursor>
	lcd16x2_i2c_printf("V:%.2f [V]                ", ptr->voltage->scnd_level_value);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fec6 	bl	8000598 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <lcd16x2_i2c_update+0x54>)
 8001812:	f7ff ffbb 	bl	800178c <lcd16x2_i2c_printf>

	// Corrente
	lcd16x2_i2c_setCursor(1,0);
 8001816:	2100      	movs	r1, #0
 8001818:	2001      	movs	r0, #1
 800181a:	f7ff ff93 	bl	8001744 <lcd16x2_i2c_setCursor>
	lcd16x2_i2c_printf("I:%.2f [A]                ", ptr->current->scnd_level_value);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe feb5 	bl	8000598 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4804      	ldr	r0, [pc, #16]	; (8001844 <lcd16x2_i2c_update+0x58>)
 8001834:	f7ff ffaa 	bl	800178c <lcd16x2_i2c_printf>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	0800a81c 	.word	0x0800a81c
 8001844:	0800a838 	.word	0x0800a838

08001848 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001850:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001854:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001860:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001864:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001868:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00b      	beq.n	8001888 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001870:	e000      	b.n	8001874 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001872:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001874:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f9      	beq.n	8001872 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800187e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
	for (int i=0 ; i<len ; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e009      	b.n	80018bc <_write+0x26>
		ITM_SendChar((*ptr++));
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ffc9 	bl	8001848 <ITM_SendChar>
	for (int i=0 ; i<len ; i++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf1      	blt.n	80018a8 <_write+0x12>

	return (len);
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d4:	f001 f953 	bl	8002b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d8:	f000 f84a 	bl	8001970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018dc:	f7ff fd38 	bl	8001350 <MX_GPIO_Init>
  MX_TIM1_Init();
 80018e0:	f001 f81e 	bl	8002920 <MX_TIM1_Init>
  MX_ADC1_Init();
 80018e4:	f7ff f9d8 	bl	8000c98 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018e8:	f7ff fa52 	bl	8000d90 <MX_ADC2_Init>
  MX_ADC5_Init();
 80018ec:	f7ff fab0 	bl	8000e50 <MX_ADC5_Init>
  MX_TIM2_Init();
 80018f0:	f001 f86a 	bl	80029c8 <MX_TIM2_Init>
  MX_I2C1_Init();
 80018f4:	f7ff fdce 	bl	8001494 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("-- Starting System's Configuration\n\n");
 80018f8:	4815      	ldr	r0, [pc, #84]	; (8001950 <main+0x80>)
 80018fa:	f006 fcb1 	bl	8008260 <puts>

  objects_def_init();
 80018fe:	f000 fe2f 	bl	8002560 <objects_def_init>

  HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 8001902:	217f      	movs	r1, #127	; 0x7f
 8001904:	4813      	ldr	r0, [pc, #76]	; (8001954 <main+0x84>)
 8001906:	f003 f805 	bl	8004914 <HAL_ADCEx_Calibration_Start>

  if (lcd16x2_i2c_init(&hi2c1))
 800190a:	4813      	ldr	r0, [pc, #76]	; (8001958 <main+0x88>)
 800190c:	f7ff feae 	bl	800166c <lcd16x2_i2c_init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00e      	beq.n	8001934 <main+0x64>
  {
	  printf("Display LCD 16x2 initialized\n");
 8001916:	4811      	ldr	r0, [pc, #68]	; (800195c <main+0x8c>)
 8001918:	f006 fca2 	bl	8008260 <puts>

	  lcd16x2_i2c_setCursor(0, 6);
 800191c:	2106      	movs	r1, #6
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff ff10 	bl	8001744 <lcd16x2_i2c_setCursor>
	  lcd16x2_i2c_printf("TCC2");
 8001924:	480e      	ldr	r0, [pc, #56]	; (8001960 <main+0x90>)
 8001926:	f7ff ff31 	bl	800178c <lcd16x2_i2c_printf>
	  HAL_Delay(2000);
 800192a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800192e:	f001 f997 	bl	8002c60 <HAL_Delay>
 8001932:	e001      	b.n	8001938 <main+0x68>
  	 }
  else
	  Error_Handler();
 8001934:	f000 f88c 	bl	8001a50 <Error_Handler>

  HAL_TIM_Base_Start_IT(&htim1);
 8001938:	480a      	ldr	r0, [pc, #40]	; (8001964 <main+0x94>)
 800193a:	f005 f955 	bl	8006be8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <main+0x98>)
 8001940:	f005 f952 	bl	8006be8 <HAL_TIM_Base_Start_IT>

  printf("-- End of System's Configuration\n");
 8001944:	4809      	ldr	r0, [pc, #36]	; (800196c <main+0x9c>)
 8001946:	f006 fc8b 	bl	8008260 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	objects_def_loop();
 800194a:	f000 fe9f 	bl	800268c <objects_def_loop>
 800194e:	e7fc      	b.n	800194a <main+0x7a>
 8001950:	0800a854 	.word	0x0800a854
 8001954:	20000280 	.word	0x20000280
 8001958:	20000358 	.word	0x20000358
 800195c:	0800a878 	.word	0x0800a878
 8001960:	0800a898 	.word	0x0800a898
 8001964:	200003b8 	.word	0x200003b8
 8001968:	20000404 	.word	0x20000404
 800196c:	0800a8a0 	.word	0x0800a8a0

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0a8      	sub	sp, #160	; 0xa0
 8001974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800197a:	2238      	movs	r2, #56	; 0x38
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f005 feb6 	bl	80076f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001984:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001994:	463b      	mov	r3, r7
 8001996:	2254      	movs	r2, #84	; 0x54
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f005 fea8 	bl	80076f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019a4:	f004 f8cc 	bl	8005b40 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a8:	2302      	movs	r3, #2
 80019aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b2:	2340      	movs	r3, #64	; 0x40
 80019b4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 15;
 80019c8:	230f      	movs	r3, #15
 80019ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019d4:	2302      	movs	r3, #2
 80019d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 f95f 	bl	8005ca8 <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80019f0:	f000 f82e 	bl	8001a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2303      	movs	r3, #3
 80019fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a0c:	2103      	movs	r1, #3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fc62 	bl	80062d8 <HAL_RCC_ClockConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a1a:	f000 f819 	bl	8001a50 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <SystemClock_Config+0xdc>)
 8001a20:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a2a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001a2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a32:	463b      	mov	r3, r7
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 fe33 	bl	80066a0 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001a40:	f000 f806 	bl	8001a50 <Error_Handler>
  }
}
 8001a44:	bf00      	nop
 8001a46:	37a0      	adds	r7, #160	; 0xa0
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	00018040 	.word	0x00018040

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>
	...

08001a5c <meas_initialize_objects>:
#include "meas.h"

photovoltaic *meas_initialize_objects(char *tag, ADC_HandleTypeDef *ADC_master, ADC_HandleTypeDef *ADC_slave, digital_IOs *pos_out, digital_IOs *neg_out, digital_IOs *led_out, debug_mod *debug_mod)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
	photovoltaic *ph_struct = (photovoltaic *)malloc(sizeof(photovoltaic));
 8001a6a:	2028      	movs	r0, #40	; 0x28
 8001a6c:	f005 fe38 	bl	80076e0 <malloc>
 8001a70:	4603      	mov	r3, r0
 8001a72:	617b      	str	r3, [r7, #20]

	if (ph_struct == NULL)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <meas_initialize_objects+0x22>
		return (NULL);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e03c      	b.n	8001af8 <meas_initialize_objects+0x9c>

	ph_struct->tag = tag;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	601a      	str	r2, [r3, #0]

	ph_struct->pe_interval_cnt = 0;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2200      	movs	r2, #0
 8001a88:	849a      	strh	r2, [r3, #36]	; 0x24

	ph_struct->events_handler = 0;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	printf("Initializing %s:\n", ph_struct->tag);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4819      	ldr	r0, [pc, #100]	; (8001b00 <meas_initialize_objects+0xa4>)
 8001a9a:	f006 fb45 	bl	8008128 <iprintf>

	ph_struct->voltage = meas_initialize_rms_objects("Voltage", ADC_master);
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	4818      	ldr	r0, [pc, #96]	; (8001b04 <meas_initialize_objects+0xa8>)
 8001aa2:	f000 f837 	bl	8001b14 <meas_initialize_rms_objects>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	605a      	str	r2, [r3, #4]
	ph_struct->current = meas_initialize_rms_objects("Current", ADC_slave);
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4816      	ldr	r0, [pc, #88]	; (8001b08 <meas_initialize_objects+0xac>)
 8001ab0:	f000 f830 	bl	8001b14 <meas_initialize_rms_objects>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	609a      	str	r2, [r3, #8]

	ph_struct->power_energy = meas_initialize_power_and_energy_objects();
 8001aba:	f000 f863 	bl	8001b84 <meas_initialize_power_and_energy_objects>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	611a      	str	r2, [r3, #16]

	ph_struct->pos_out = pos_out;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	615a      	str	r2, [r3, #20]
	ph_struct->neg_out = neg_out;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	619a      	str	r2, [r3, #24]
	ph_struct->led_out = led_out;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	61da      	str	r2, [r3, #28]

	if (debug_mod == NULL)
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d106      	bne.n	8001aea <meas_initialize_objects+0x8e>
	{
		ph_struct->debugger = NULL;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]

		printf("\t- Debugger not attached\n\n");
 8001ae2:	480a      	ldr	r0, [pc, #40]	; (8001b0c <meas_initialize_objects+0xb0>)
 8001ae4:	f006 fbbc 	bl	8008260 <puts>
 8001ae8:	e005      	b.n	8001af6 <meas_initialize_objects+0x9a>
	}
	else
	{
		ph_struct->debugger = debug_mod;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aee:	621a      	str	r2, [r3, #32]

		printf("\t- Debugger attached\n\n");
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <meas_initialize_objects+0xb4>)
 8001af2:	f006 fbb5 	bl	8008260 <puts>
	}

	return(ph_struct);
 8001af6:	697b      	ldr	r3, [r7, #20]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	0800a8c4 	.word	0x0800a8c4
 8001b04:	0800a8d8 	.word	0x0800a8d8
 8001b08:	0800a8e0 	.word	0x0800a8e0
 8001b0c:	0800a8e8 	.word	0x0800a8e8
 8001b10:	0800a904 	.word	0x0800a904

08001b14 <meas_initialize_rms_objects>:

rms_measurement *meas_initialize_rms_objects(char *tag, ADC_HandleTypeDef *ADC)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
	rms_measurement *rms_struct = (rms_measurement *)malloc(sizeof(rms_measurement));
 8001b1e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8001b22:	f005 fddd 	bl	80076e0 <malloc>
 8001b26:	4603      	mov	r3, r0
 8001b28:	60fb      	str	r3, [r7, #12]

	if (rms_struct == NULL)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <meas_initialize_rms_objects+0x20>
		return (NULL);
 8001b30:	2300      	movs	r3, #0
 8001b32:	e021      	b.n	8001b78 <meas_initialize_rms_objects+0x64>

	rms_struct->ADC = ADC;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]

	rms_struct->frst_level_index = 0;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
	rms_struct->scnd_level_index = 0;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
	rms_struct->thrd_level_index = 0;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
	rms_struct->frth_level_index = 0;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
	rms_struct->ffth_level_index = 0;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0

	HAL_ADCEx_Calibration_Start(rms_struct->ADC, ADC_SINGLE_ENDED);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	217f      	movs	r1, #127	; 0x7f
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fed3 	bl	8004914 <HAL_ADCEx_Calibration_Start>

	printf("\t- %s measurement initialized\n", tag);
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <meas_initialize_rms_objects+0x6c>)
 8001b72:	f006 fad9 	bl	8008128 <iprintf>

	return (rms_struct);
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	0800a91c 	.word	0x0800a91c

08001b84 <meas_initialize_power_and_energy_objects>:

power_and_energy *meas_initialize_power_and_energy_objects(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
	power_and_energy *pe_struct = (power_and_energy *)malloc(sizeof(power_and_energy));
 8001b8a:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 8001b8e:	f005 fda7 	bl	80076e0 <malloc>
 8001b92:	4603      	mov	r3, r0
 8001b94:	607b      	str	r3, [r7, #4]

	if (pe_struct == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <meas_initialize_power_and_energy_objects+0x1c>
		return (NULL);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e013      	b.n	8001bc8 <meas_initialize_power_and_energy_objects+0x44>

	pe_struct->energy = 0.0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

	pe_struct->frst_level_index = 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c
	pe_struct->scnd_level_index = 0;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 239d 	strb.w	r2, [r3, #925]	; 0x39d
	pe_struct->thrd_level_index = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e

	printf("\t- Power & Energy measurement initialized\n");
 8001bc0:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <meas_initialize_power_and_energy_objects+0x4c>)
 8001bc2:	f006 fb4d 	bl	8008260 <puts>

	return (pe_struct);
 8001bc6:	687b      	ldr	r3, [r7, #4]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	0800a93c 	.word	0x0800a93c

08001bd4 <meas_decouple_system>:

void meas_decouple_system(photovoltaic *ptr)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if ((ptr->events_handler & 0x01) == 1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <meas_decouple_system+0x2a>
		ptr->events_handler &= ~0x01;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	else
		ptr->events_handler |= 0x01;
}
 8001bfc:	e008      	b.n	8001c10 <meas_decouple_system+0x3c>
		ptr->events_handler |= 0x01;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	0000      	movs	r0, r0
	...

08001c20 <meas_temperature>:

void meas_temperature(photovoltaic *ptr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	// Obtém a leitura do módulo ADC, em bits
	uint32_t raw = HAL_ADC_GetValue(&hadc5);
 8001c28:	4841      	ldr	r0, [pc, #260]	; (8001d30 <meas_temperature+0x110>)
 8001c2a:	f001 fea3 	bl	8003974 <HAL_ADC_GetValue>
 8001c2e:	60f8      	str	r0, [r7, #12]

	// Converte a leitura do módulo ADC em tensão
	float voltage = (float)raw * (SYSTEM_VCC / ADC_RESOLUTION);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3a:	ee17 0a90 	vmov	r0, s15
 8001c3e:	f7fe fcab 	bl	8000598 <__aeabi_f2d>
 8001c42:	a335      	add	r3, pc, #212	; (adr r3, 8001d18 <meas_temperature+0xf8>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fcfe 	bl	8000648 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe ffd0 	bl	8000bf8 <__aeabi_d2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60bb      	str	r3, [r7, #8]

	// Converte a tensão em temperatura (ºC)
	ptr->temperature = ((voltage - TEMP_SENSOR_VREF) / TEMP_SENSOR_SLOPE) + TEMP_SENSOR_TREF;
 8001c5c:	68b8      	ldr	r0, [r7, #8]
 8001c5e:	f7fe fc9b 	bl	8000598 <__aeabi_f2d>
 8001c62:	a32f      	add	r3, pc, #188	; (adr r3, 8001d20 <meas_temperature+0x100>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fb36 	bl	80002d8 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	a32c      	add	r3, pc, #176	; (adr r3, 8001d28 <meas_temperature+0x108>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fe0f 	bl	800089c <__aeabi_ddiv>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <meas_temperature+0x114>)
 8001c8c:	f7fe fb26 	bl	80002dc <__adddf3>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ffae 	bl	8000bf8 <__aeabi_d2f>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60da      	str	r2, [r3, #12]

	// Verifica se o evento de superaquecimento está iniciado, para resetá-lo
	if ((ptr->events_handler & EVENT_OVERHEAT) == EVENT_OVERHEAT &&
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d012      	beq.n	8001cd6 <meas_temperature+0xb6>
			ptr->temperature <= OVERHEAT_RELEASE_LIMIT)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	edd3 7a03 	vldr	s15, [r3, #12]
	if ((ptr->events_handler & EVENT_OVERHEAT) == EVENT_OVERHEAT &&
 8001cb6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001d38 <meas_temperature+0x118>
 8001cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	d808      	bhi.n	8001cd6 <meas_temperature+0xb6>
	{
		ptr->events_handler &= ~EVENT_OVERHEAT;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001cca:	f023 0310 	bic.w	r3, r3, #16
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}
	// Verifica se o evento de superaquecimento está resetado, para iniciá-lo
	if ((ptr->events_handler & EVENT_OVERHEAT) == 0x00 &&
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d113      	bne.n	8001d0c <meas_temperature+0xec>
			ptr->temperature >= OVERHEAT_HOLD_LIMIT)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	edd3 7a03 	vldr	s15, [r3, #12]
	if ((ptr->events_handler & EVENT_OVERHEAT) == 0x00 &&
 8001cea:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d3c <meas_temperature+0x11c>
 8001cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf6:	da00      	bge.n	8001cfa <meas_temperature+0xda>
	{
		ptr->events_handler |= EVENT_OVERHEAT;
	}
}
 8001cf8:	e008      	b.n	8001d0c <meas_temperature+0xec>
		ptr->events_handler |= EVENT_OVERHEAT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d00:	f043 0310 	orr.w	r3, r3, #16
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	f3af 8000 	nop.w
 8001d18:	e734d9b4 	.word	0xe734d9b4
 8001d1c:	3f4a680c 	.word	0x3f4a680c
 8001d20:	851eb852 	.word	0x851eb852
 8001d24:	3fe851eb 	.word	0x3fe851eb
 8001d28:	47ae147b 	.word	0x47ae147b
 8001d2c:	3f647ae1 	.word	0x3f647ae1
 8001d30:	20000280 	.word	0x20000280
 8001d34:	403e0000 	.word	0x403e0000
 8001d38:	42480000 	.word	0x42480000
 8001d3c:	42960000 	.word	0x42960000

08001d40 <meas_sample>:

void meas_sample(photovoltaic *ptr)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	// Obtém a leitura simultânea dos módulos ADC
	uint32_t raw  = HAL_ADCEx_MultiModeGetValue(ptr->voltage->ADC);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fe42 	bl	80049d8 <HAL_ADCEx_MultiModeGetValue>
 8001d54:	60f8      	str	r0, [r7, #12]

	// Extrai a tensão a partir da leitura simultanea dos módulos ADC (16 bits LSB)
	ptr->voltage->sample = (raw & LSB_WORD_BIT_MASK) * (VCC / ADC_RES_BITS) * VOLTAGE_GAIN;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbfa 	bl	8000554 <__aeabi_ui2d>
 8001d60:	a31d      	add	r3, pc, #116	; (adr r3, 8001dd8 <meas_sample+0x98>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fc6f 	bl	8000648 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	a31b      	add	r3, pc, #108	; (adr r3, 8001de0 <meas_sample+0xa0>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fc66 	bl	8000648 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685c      	ldr	r4, [r3, #4]
 8001d88:	f7fe ff36 	bl	8000bf8 <__aeabi_d2f>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	6063      	str	r3, [r4, #4]

	// Extrai a corrente a partir da leitura simultanea dos módulos ADC (16 bits MSB)
	ptr->current->sample = (raw >> HALF_WORD_LENGTH) * (VCC / ADC_RES_BITS) * CURRENT_GAIN;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbdd 	bl	8000554 <__aeabi_ui2d>
 8001d9a:	a30f      	add	r3, pc, #60	; (adr r3, 8001dd8 <meas_sample+0x98>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fc52 	bl	8000648 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	a30e      	add	r3, pc, #56	; (adr r3, 8001de8 <meas_sample+0xa8>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fc49 	bl	8000648 <__aeabi_dmul>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689c      	ldr	r4, [r3, #8]
 8001dc2:	f7fe ff19 	bl	8000bf8 <__aeabi_d2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6063      	str	r3, [r4, #4]

	// Inicia o processamento das medições de tensão e corrente
	meas_objects_handler(ptr);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f810 	bl	8001df0 <meas_objects_handler>
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd90      	pop	{r4, r7, pc}
 8001dd8:	e734d9b4 	.word	0xe734d9b4
 8001ddc:	3f4a680c 	.word	0x3f4a680c
 8001de0:	d70a3d71 	.word	0xd70a3d71
 8001de4:	4062f0a3 	.word	0x4062f0a3
 8001de8:	5a1cac08 	.word	0x5a1cac08
 8001dec:	4031db64 	.word	0x4031db64

08001df0 <meas_objects_handler>:

void meas_objects_handler(photovoltaic *ptr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	// Gerencia o protocolo de agregação em multi-camadas para medição de tensão
	meas_voltage_aggregation_handler(ptr);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f80a 	bl	8001e12 <meas_voltage_aggregation_handler>

	// Gerencia o protocolo de agregação em multi-camadas para medição de corrente
	meas_current_aggregation_handler(ptr);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8de 	bl	8001fc0 <meas_current_aggregation_handler>

	// Gerencia o protocolo de medição de potência e energia produzidas
	meas_compute_power_and_energy(ptr);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fa83 	bl	8002310 <meas_compute_power_and_energy>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <meas_voltage_aggregation_handler>:

void meas_voltage_aggregation_handler(photovoltaic *ptr)
{
 8001e12:	b5b0      	push	{r4, r5, r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
	ptr->voltage->frst_level[ptr->voltage->frst_level_index++] = ptr->voltage->sample;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6858      	ldr	r0, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f893 26dc 	ldrb.w	r2, [r3, #1756]	; 0x6dc
 8001e2a:	1c54      	adds	r4, r2, #1
 8001e2c:	b2e4      	uxtb	r4, r4
 8001e2e:	f883 46dc 	strb.w	r4, [r3, #1756]	; 0x6dc
 8001e32:	4613      	mov	r3, r2
 8001e34:	6842      	ldr	r2, [r0, #4]
 8001e36:	3302      	adds	r3, #2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	601a      	str	r2, [r3, #0]

	if (ptr->voltage->frst_level_index == RMS_FRST_LEVEL_LENGTH)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 8001e46:	2bc0      	cmp	r3, #192	; 0xc0
 8001e48:	f040 80b6 	bne.w	8001fb8 <meas_voltage_aggregation_handler+0x1a6>
	{
		ptr->voltage->scnd_level_value = meas_quadratic_average(ptr->voltage->frst_level, RMS_FRST_LEVEL_LENGTH);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f103 0208 	add.w	r2, r3, #8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685c      	ldr	r4, [r3, #4]
 8001e58:	21c0      	movs	r1, #192	; 0xc0
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 fb39 	bl	80024d2 <meas_quadratic_average>
 8001e60:	eef0 7a40 	vmov.f32	s15, s0
 8001e64:	f204 63e4 	addw	r3, r4, #1764	; 0x6e4
 8001e68:	edc3 7a00 	vstr	s15, [r3]

		ptr->voltage->scnd_level[ptr->voltage->scnd_level_index++] = ptr->voltage->scnd_level_value;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6858      	ldr	r0, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f893 26dd 	ldrb.w	r2, [r3, #1757]	; 0x6dd
 8001e7c:	1c54      	adds	r4, r2, #1
 8001e7e:	b2e4      	uxtb	r4, r4
 8001e80:	f883 46dd 	strb.w	r4, [r3, #1757]	; 0x6dd
 8001e84:	4614      	mov	r4, r2
 8001e86:	f200 63e4 	addw	r3, r0, #1764	; 0x6e4
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f104 03c2 	add.w	r3, r4, #194	; 0xc2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	601a      	str	r2, [r3, #0]

		if (ptr->voltage->scnd_level_index == RMS_SCND_LEVEL_LENGTH)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f893 36dd 	ldrb.w	r3, [r3, #1757]	; 0x6dd
 8001e9e:	2b0f      	cmp	r3, #15
 8001ea0:	f040 8085 	bne.w	8001fae <meas_voltage_aggregation_handler+0x19c>
		{
			ptr->voltage->thrd_level_value = meas_quadratic_average(ptr->voltage->scnd_level, RMS_SCND_LEVEL_LENGTH);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f503 7242 	add.w	r2, r3, #776	; 0x308
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685c      	ldr	r4, [r3, #4]
 8001eb0:	210f      	movs	r1, #15
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f000 fb0d 	bl	80024d2 <meas_quadratic_average>
 8001eb8:	eef0 7a40 	vmov.f32	s15, s0
 8001ebc:	f504 63dd 	add.w	r3, r4, #1768	; 0x6e8
 8001ec0:	edc3 7a00 	vstr	s15, [r3]

			meas_verify_voltage_triggers(ptr);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f953 	bl	8002170 <meas_verify_voltage_triggers>

			ptr->voltage->thrd_level[ptr->voltage->thrd_level_index++] = ptr->voltage->thrd_level_value;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6858      	ldr	r0, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f893 26de 	ldrb.w	r2, [r3, #1758]	; 0x6de
 8001eda:	1c54      	adds	r4, r2, #1
 8001edc:	b2e4      	uxtb	r4, r4
 8001ede:	f883 46de 	strb.w	r4, [r3, #1758]	; 0x6de
 8001ee2:	4614      	mov	r4, r2
 8001ee4:	f500 63dd 	add.w	r3, r0, #1768	; 0x6e8
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	601a      	str	r2, [r3, #0]

			if (ptr->voltage->thrd_level_index == RMS_THRD_LEVEL_LENGTH)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f893 36de 	ldrb.w	r3, [r3, #1758]	; 0x6de
 8001efe:	2bc8      	cmp	r3, #200	; 0xc8
 8001f00:	d150      	bne.n	8001fa4 <meas_voltage_aggregation_handler+0x192>
			{
				ptr->voltage->frth_level[ptr->voltage->frth_level_index++] = meas_quadratic_average(ptr->voltage->thrd_level, RMS_THRD_LEVEL_LENGTH);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685c      	ldr	r4, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f893 26df 	ldrb.w	r2, [r3, #1759]	; 0x6df
 8001f16:	1c51      	adds	r1, r2, #1
 8001f18:	b2c9      	uxtb	r1, r1
 8001f1a:	f883 16df 	strb.w	r1, [r3, #1759]	; 0x6df
 8001f1e:	4615      	mov	r5, r2
 8001f20:	21c8      	movs	r1, #200	; 0xc8
 8001f22:	f000 fad6 	bl	80024d2 <meas_quadratic_average>
 8001f26:	eef0 7a40 	vmov.f32	s15, s0
 8001f2a:	f505 73cc 	add.w	r3, r5, #408	; 0x198
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4423      	add	r3, r4
 8001f32:	3304      	adds	r3, #4
 8001f34:	edc3 7a00 	vstr	s15, [r3]

				if (ptr->voltage->frth_level_index == RMS_FRTH_LEVEL_LENGTH)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f893 36df 	ldrb.w	r3, [r3, #1759]	; 0x6df
 8001f40:	2b06      	cmp	r3, #6
 8001f42:	d12a      	bne.n	8001f9a <meas_voltage_aggregation_handler+0x188>
				{
					ptr->voltage->ffth_level[ptr->voltage->ffth_level_index++] = meas_quadratic_average(ptr->voltage->frth_level, RMS_FRTH_LEVEL_LENGTH);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f203 6064 	addw	r0, r3, #1636	; 0x664
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685c      	ldr	r4, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f893 26e0 	ldrb.w	r2, [r3, #1760]	; 0x6e0
 8001f58:	1c51      	adds	r1, r2, #1
 8001f5a:	b2c9      	uxtb	r1, r1
 8001f5c:	f883 16e0 	strb.w	r1, [r3, #1760]	; 0x6e0
 8001f60:	4615      	mov	r5, r2
 8001f62:	2106      	movs	r1, #6
 8001f64:	f000 fab5 	bl	80024d2 <meas_quadratic_average>
 8001f68:	eef0 7a40 	vmov.f32	s15, s0
 8001f6c:	f505 73cf 	add.w	r3, r5, #414	; 0x19e
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4423      	add	r3, r4
 8001f74:	3304      	adds	r3, #4
 8001f76:	edc3 7a00 	vstr	s15, [r3]

					if (ptr->voltage->ffth_level_index == RMS_FFTH_LEVEL_LENGTH)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f893 36e0 	ldrb.w	r3, [r3, #1760]	; 0x6e0
 8001f82:	2b18      	cmp	r3, #24
 8001f84:	d104      	bne.n	8001f90 <meas_voltage_aggregation_handler+0x17e>
						ptr->voltage->ffth_level_index = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0

					ptr->voltage->frth_level_index = 0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
				}

				ptr->voltage->thrd_level_index = 0;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
			}

			ptr->voltage->scnd_level_index = 0;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
		}

		ptr->voltage->frst_level_index = 0;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
	}
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bdb0      	pop	{r4, r5, r7, pc}

08001fc0 <meas_current_aggregation_handler>:

void meas_current_aggregation_handler(photovoltaic *ptr)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	ptr->current->frst_level[ptr->current->frst_level_index++] = ptr->current->sample;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6898      	ldr	r0, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6899      	ldr	r1, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f893 26dc 	ldrb.w	r2, [r3, #1756]	; 0x6dc
 8001fd8:	1c54      	adds	r4, r2, #1
 8001fda:	b2e4      	uxtb	r4, r4
 8001fdc:	f883 46dc 	strb.w	r4, [r3, #1756]	; 0x6dc
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	6842      	ldr	r2, [r0, #4]
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	601a      	str	r2, [r3, #0]

	if (ptr->current->frst_level_index == RMS_FRST_LEVEL_LENGTH)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 8001ff4:	2bc0      	cmp	r3, #192	; 0xc0
 8001ff6:	f040 80b6 	bne.w	8002166 <meas_current_aggregation_handler+0x1a6>
	{
		ptr->current->scnd_level_value = meas_quadratic_average(ptr->current->frst_level, RMS_FRST_LEVEL_LENGTH);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f103 0208 	add.w	r2, r3, #8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689c      	ldr	r4, [r3, #8]
 8002006:	21c0      	movs	r1, #192	; 0xc0
 8002008:	4610      	mov	r0, r2
 800200a:	f000 fa62 	bl	80024d2 <meas_quadratic_average>
 800200e:	eef0 7a40 	vmov.f32	s15, s0
 8002012:	f204 63e4 	addw	r3, r4, #1764	; 0x6e4
 8002016:	edc3 7a00 	vstr	s15, [r3]

		ptr->current->scnd_level[ptr->current->scnd_level_index++] = ptr->current->scnd_level_value;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6898      	ldr	r0, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6899      	ldr	r1, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f893 26dd 	ldrb.w	r2, [r3, #1757]	; 0x6dd
 800202a:	1c54      	adds	r4, r2, #1
 800202c:	b2e4      	uxtb	r4, r4
 800202e:	f883 46dd 	strb.w	r4, [r3, #1757]	; 0x6dd
 8002032:	4614      	mov	r4, r2
 8002034:	f200 63e4 	addw	r3, r0, #1764	; 0x6e4
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	f104 03c2 	add.w	r3, r4, #194	; 0xc2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	601a      	str	r2, [r3, #0]

		if (ptr->current->scnd_level_index == RMS_SCND_LEVEL_LENGTH)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f893 36dd 	ldrb.w	r3, [r3, #1757]	; 0x6dd
 800204c:	2b0f      	cmp	r3, #15
 800204e:	f040 8085 	bne.w	800215c <meas_current_aggregation_handler+0x19c>
		{
			ptr->current->thrd_level_value = meas_quadratic_average(ptr->current->scnd_level, RMS_SCND_LEVEL_LENGTH);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f503 7242 	add.w	r2, r3, #776	; 0x308
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689c      	ldr	r4, [r3, #8]
 800205e:	210f      	movs	r1, #15
 8002060:	4610      	mov	r0, r2
 8002062:	f000 fa36 	bl	80024d2 <meas_quadratic_average>
 8002066:	eef0 7a40 	vmov.f32	s15, s0
 800206a:	f504 63dd 	add.w	r3, r4, #1768	; 0x6e8
 800206e:	edc3 7a00 	vstr	s15, [r3]

			meas_verify_current_triggers(ptr);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f904 	bl	8002280 <meas_verify_current_triggers>

			ptr->current->thrd_level[ptr->current->thrd_level_index++] = ptr->current->thrd_level_value;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6898      	ldr	r0, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6899      	ldr	r1, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f893 26de 	ldrb.w	r2, [r3, #1758]	; 0x6de
 8002088:	1c54      	adds	r4, r2, #1
 800208a:	b2e4      	uxtb	r4, r4
 800208c:	f883 46de 	strb.w	r4, [r3, #1758]	; 0x6de
 8002090:	4614      	mov	r4, r2
 8002092:	f500 63dd 	add.w	r3, r0, #1768	; 0x6e8
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3304      	adds	r3, #4
 80020a2:	601a      	str	r2, [r3, #0]

			if (ptr->current->thrd_level_index == RMS_THRD_LEVEL_LENGTH)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f893 36de 	ldrb.w	r3, [r3, #1758]	; 0x6de
 80020ac:	2bc8      	cmp	r3, #200	; 0xc8
 80020ae:	d150      	bne.n	8002152 <meas_current_aggregation_handler+0x192>
			{
				ptr->current->frth_level[ptr->current->frth_level_index++] = meas_quadratic_average(ptr->current->thrd_level, RMS_THRD_LEVEL_LENGTH);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f503 7051 	add.w	r0, r3, #836	; 0x344
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689c      	ldr	r4, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f893 26df 	ldrb.w	r2, [r3, #1759]	; 0x6df
 80020c4:	1c51      	adds	r1, r2, #1
 80020c6:	b2c9      	uxtb	r1, r1
 80020c8:	f883 16df 	strb.w	r1, [r3, #1759]	; 0x6df
 80020cc:	4615      	mov	r5, r2
 80020ce:	21c8      	movs	r1, #200	; 0xc8
 80020d0:	f000 f9ff 	bl	80024d2 <meas_quadratic_average>
 80020d4:	eef0 7a40 	vmov.f32	s15, s0
 80020d8:	f505 73cc 	add.w	r3, r5, #408	; 0x198
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4423      	add	r3, r4
 80020e0:	3304      	adds	r3, #4
 80020e2:	edc3 7a00 	vstr	s15, [r3]

				if (ptr->current->frth_level_index == RMS_FRTH_LEVEL_LENGTH)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f893 36df 	ldrb.w	r3, [r3, #1759]	; 0x6df
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d12a      	bne.n	8002148 <meas_current_aggregation_handler+0x188>
				{
					ptr->current->ffth_level[ptr->current->ffth_level_index++] = meas_quadratic_average(ptr->current->frth_level, RMS_FRTH_LEVEL_LENGTH);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f203 6064 	addw	r0, r3, #1636	; 0x664
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689c      	ldr	r4, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f893 26e0 	ldrb.w	r2, [r3, #1760]	; 0x6e0
 8002106:	1c51      	adds	r1, r2, #1
 8002108:	b2c9      	uxtb	r1, r1
 800210a:	f883 16e0 	strb.w	r1, [r3, #1760]	; 0x6e0
 800210e:	4615      	mov	r5, r2
 8002110:	2106      	movs	r1, #6
 8002112:	f000 f9de 	bl	80024d2 <meas_quadratic_average>
 8002116:	eef0 7a40 	vmov.f32	s15, s0
 800211a:	f505 73cf 	add.w	r3, r5, #414	; 0x19e
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4423      	add	r3, r4
 8002122:	3304      	adds	r3, #4
 8002124:	edc3 7a00 	vstr	s15, [r3]

					if (ptr->current->ffth_level_index == RMS_FFTH_LEVEL_LENGTH)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f893 36e0 	ldrb.w	r3, [r3, #1760]	; 0x6e0
 8002130:	2b18      	cmp	r3, #24
 8002132:	d104      	bne.n	800213e <meas_current_aggregation_handler+0x17e>
						ptr->current->ffth_level_index = 0;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0

					ptr->current->frth_level_index = 0;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
				}

				ptr->current->thrd_level_index = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
			}

			ptr->current->scnd_level_index = 0;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
		}

		ptr->current->frst_level_index = 0;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
	}
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002170 <meas_verify_voltage_triggers>:

void meas_verify_voltage_triggers(photovoltaic *ptr)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	// Verifica se o evento de sobretensão está iniciado, para resetá-lo
	if ((ptr->events_handler & EVENT_OVERVOLTAGE) == EVENT_OVERVOLTAGE &&
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <meas_verify_voltage_triggers+0x44>
			ptr->voltage->thrd_level_value <= OVERVOLTAGE_RELEASE_LIMIT)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800218e:	edd3 7a00 	vldr	s15, [r3]
	if ((ptr->events_handler & EVENT_OVERVOLTAGE) == EVENT_OVERVOLTAGE &&
 8002192:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002274 <meas_verify_voltage_triggers+0x104>
 8002196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	d809      	bhi.n	80021b4 <meas_verify_voltage_triggers+0x44>
	{
		ptr->events_handler &= ~EVENT_OVERVOLTAGE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80021a6:	f023 0302 	bic.w	r3, r3, #2
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80021b2:	e01c      	b.n	80021ee <meas_verify_voltage_triggers+0x7e>
	}
	// Verifica se o evento de sobretensão está resetado, para iniciá-lo
	else if ((ptr->events_handler & EVENT_OVERVOLTAGE) == 0x00 &&
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d115      	bne.n	80021ee <meas_verify_voltage_triggers+0x7e>
				ptr->voltage->thrd_level_value >= OVERVOLTAGE_HOLD_LIMIT)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80021ca:	edd3 7a00 	vldr	s15, [r3]
	else if ((ptr->events_handler & EVENT_OVERVOLTAGE) == 0x00 &&
 80021ce:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002278 <meas_verify_voltage_triggers+0x108>
 80021d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	db08      	blt.n	80021ee <meas_verify_voltage_triggers+0x7e>
	{
		ptr->events_handler |= EVENT_OVERVOLTAGE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}

	// Verifica se o evento de subtensão está iniciado, para resetá-lo
	if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == EVENT_UNDERVOLTAGE &&
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d016      	beq.n	800222a <meas_verify_voltage_triggers+0xba>
			ptr->voltage->thrd_level_value >= UNDERVOLTAGE_RELEASE_LIMIT)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8002204:	edd3 7a00 	vldr	s15, [r3]
	if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == EVENT_UNDERVOLTAGE &&
 8002208:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800227c <meas_verify_voltage_triggers+0x10c>
 800220c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002214:	db09      	blt.n	800222a <meas_verify_voltage_triggers+0xba>
	{
		ptr->events_handler &= ~EVENT_UNDERVOLTAGE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800221c:	f023 0308 	bic.w	r3, r3, #8
 8002220:	b2da      	uxtb	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	else if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == 0x00 &&
				ptr->voltage->thrd_level_value <= UNDERVOLTAGE_HOLD_LIMIT)
	{
		ptr->events_handler |= EVENT_UNDERVOLTAGE;
	}
}
 8002228:	e01d      	b.n	8002266 <meas_verify_voltage_triggers+0xf6>
	else if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == 0x00 &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d116      	bne.n	8002266 <meas_verify_voltage_triggers+0xf6>
				ptr->voltage->thrd_level_value <= UNDERVOLTAGE_HOLD_LIMIT)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8002240:	edd3 7a00 	vldr	s15, [r3]
	else if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == 0x00 &&
 8002244:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002250:	d900      	bls.n	8002254 <meas_verify_voltage_triggers+0xe4>
}
 8002252:	e008      	b.n	8002266 <meas_verify_voltage_triggers+0xf6>
		ptr->events_handler |= EVENT_UNDERVOLTAGE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	b2da      	uxtb	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	43e10000 	.word	0x43e10000
 8002278:	43ed8000 	.word	0x43ed8000
 800227c:	42480000 	.word	0x42480000

08002280 <meas_verify_current_triggers>:

void meas_verify_current_triggers(photovoltaic *ptr)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	// Verifica se o evento de sobrecorrente está iniciado, para resetá-lo
	if ((ptr->events_handler & EVENT_OVERCURRENT) == EVENT_OVERCURRENT &&
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <meas_verify_current_triggers+0x44>
			ptr->current->thrd_level_value <= OVERCURRENT_RELEASE_LIMIT)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800229e:	edd3 7a00 	vldr	s15, [r3]
	if ((ptr->events_handler & EVENT_OVERCURRENT) == EVENT_OVERCURRENT &&
 80022a2:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80022a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ae:	d809      	bhi.n	80022c4 <meas_verify_current_triggers+0x44>
	{
		ptr->events_handler &= 0xFB;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022b6:	f023 0304 	bic.w	r3, r3, #4
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	else if ((ptr->events_handler & EVENT_OVERCURRENT) == 0x00 &&
			ptr->current->thrd_level_value >= OVERCURRENT_HOLD_LIMIT)
	{
		ptr->events_handler |= 0x04;
	}
}
 80022c2:	e01d      	b.n	8002300 <meas_verify_current_triggers+0x80>
	else if ((ptr->events_handler & EVENT_OVERCURRENT) == 0x00 &&
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d116      	bne.n	8002300 <meas_verify_current_triggers+0x80>
			ptr->current->thrd_level_value >= OVERCURRENT_HOLD_LIMIT)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80022da:	edd3 7a00 	vldr	s15, [r3]
	else if ((ptr->events_handler & EVENT_OVERCURRENT) == 0x00 &&
 80022de:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80022e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	da00      	bge.n	80022ee <meas_verify_current_triggers+0x6e>
}
 80022ec:	e008      	b.n	8002300 <meas_verify_current_triggers+0x80>
		ptr->events_handler |= 0x04;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	0000      	movs	r0, r0
	...

08002310 <meas_compute_power_and_energy>:

void meas_compute_power_and_energy(photovoltaic *ptr)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	// Divisor de clock [3 segundos]
	if (!meas_power_energy_interval(ptr))
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f8bf 	bl	800249c <meas_power_energy_interval>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80ae 	beq.w	8002482 <meas_compute_power_and_energy+0x172>
		return;

	float voltage = ptr->voltage->thrd_level[ptr->power_energy->frst_level_index];
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8002332:	33d0      	adds	r3, #208	; 0xd0
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	3304      	adds	r3, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	617b      	str	r3, [r7, #20]
	float current = ptr->current->thrd_level[ptr->power_energy->frst_level_index];
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 800234a:	33d0      	adds	r3, #208	; 0xd0
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3304      	adds	r3, #4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	613b      	str	r3, [r7, #16]

	// Conversão W -> KW
	float power_3s = (voltage * current) / 1000.0;
 8002356:	ed97 7a05 	vldr	s14, [r7, #20]
 800235a:	edd7 7a04 	vldr	s15, [r7, #16]
 800235e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002362:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002498 <meas_compute_power_and_energy+0x188>
 8002366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800236a:	edc7 7a03 	vstr	s15, [r7, #12]

	// Conversão KW -> (KW / h)
	ptr->power_energy->energy += (power_3s / 3600.0);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f90f 	bl	8000598 <__aeabi_f2d>
 800237a:	4604      	mov	r4, r0
 800237c:	460d      	mov	r5, r1
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7fe f90a 	bl	8000598 <__aeabi_f2d>
 8002384:	a342      	add	r3, pc, #264	; (adr r3, 8002490 <meas_compute_power_and_energy+0x180>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe fa87 	bl	800089c <__aeabi_ddiv>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4620      	mov	r0, r4
 8002394:	4629      	mov	r1, r5
 8002396:	f7fd ffa1 	bl	80002dc <__adddf3>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691c      	ldr	r4, [r3, #16]
 80023a6:	f7fe fc27 	bl	8000bf8 <__aeabi_d2f>
 80023aa:	4603      	mov	r3, r0
 80023ac:	6023      	str	r3, [r4, #0]

	// Atualiza o Display LCD 16X2
	lcd16x2_i2c_update(ptr);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fa1c 	bl	80017ec <lcd16x2_i2c_update>

	// Protocolo de agregação em multi-camadas da potência produzida
	ptr->power_energy->frst_level[ptr->power_energy->frst_level_index++] = power_3s;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6919      	ldr	r1, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f893 239c 	ldrb.w	r2, [r3, #924]	; 0x39c
 80023c0:	1c50      	adds	r0, r2, #1
 80023c2:	b2c0      	uxtb	r0, r0
 80023c4:	f883 039c 	strb.w	r0, [r3, #924]	; 0x39c
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	3304      	adds	r3, #4
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

	if (ptr->power_energy->frst_level_index == RMS_THRD_LEVEL_LENGTH)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 80023dc:	2bc8      	cmp	r3, #200	; 0xc8
 80023de:	d151      	bne.n	8002484 <meas_compute_power_and_energy+0x174>
	{
		ptr->power_energy->scnd_level[ptr->power_energy->scnd_level_index++] = meas_quadratic_average(ptr->power_energy->frst_level, RMS_THRD_LEVEL_LENGTH);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	1d18      	adds	r0, r3, #4
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691c      	ldr	r4, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f893 239d 	ldrb.w	r2, [r3, #925]	; 0x39d
 80023f2:	1c51      	adds	r1, r2, #1
 80023f4:	b2c9      	uxtb	r1, r1
 80023f6:	f883 139d 	strb.w	r1, [r3, #925]	; 0x39d
 80023fa:	4615      	mov	r5, r2
 80023fc:	21c8      	movs	r1, #200	; 0xc8
 80023fe:	f000 f868 	bl	80024d2 <meas_quadratic_average>
 8002402:	eef0 7a40 	vmov.f32	s15, s0
 8002406:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4423      	add	r3, r4
 800240e:	3304      	adds	r3, #4
 8002410:	edc3 7a00 	vstr	s15, [r3]

		if (ptr->power_energy->scnd_level_index == RMS_FRTH_LEVEL_LENGTH)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f893 339d 	ldrb.w	r3, [r3, #925]	; 0x39d
 800241c:	2b06      	cmp	r3, #6
 800241e:	d12a      	bne.n	8002476 <meas_compute_power_and_energy+0x166>
		{
			ptr->power_energy->thrd_level[ptr->power_energy->thrd_level_index++] = meas_quadratic_average(ptr->power_energy->scnd_level, RMS_FRTH_LEVEL_LENGTH);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691c      	ldr	r4, [r3, #16]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f893 239e 	ldrb.w	r2, [r3, #926]	; 0x39e
 8002434:	1c51      	adds	r1, r2, #1
 8002436:	b2c9      	uxtb	r1, r1
 8002438:	f883 139e 	strb.w	r1, [r3, #926]	; 0x39e
 800243c:	4615      	mov	r5, r2
 800243e:	2106      	movs	r1, #6
 8002440:	f000 f847 	bl	80024d2 <meas_quadratic_average>
 8002444:	eef0 7a40 	vmov.f32	s15, s0
 8002448:	f105 03ce 	add.w	r3, r5, #206	; 0xce
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4423      	add	r3, r4
 8002450:	3304      	adds	r3, #4
 8002452:	edc3 7a00 	vstr	s15, [r3]

			if (ptr->power_energy->thrd_level_index == RMS_FFTH_LEVEL_LENGTH)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f893 339e 	ldrb.w	r3, [r3, #926]	; 0x39e
 800245e:	2b18      	cmp	r3, #24
 8002460:	d104      	bne.n	800246c <meas_compute_power_and_energy+0x15c>
				ptr->power_energy->thrd_level_index = 0;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e

			ptr->power_energy->scnd_level_index = 0;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 239d 	strb.w	r2, [r3, #925]	; 0x39d
		}

		ptr->power_energy->frst_level_index = 0;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c
 8002480:	e000      	b.n	8002484 <meas_compute_power_and_energy+0x174>
		return;
 8002482:	bf00      	nop
	}
}
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bdb0      	pop	{r4, r5, r7, pc}
 800248a:	bf00      	nop
 800248c:	f3af 8000 	nop.w
 8002490:	00000000 	.word	0x00000000
 8002494:	40ac2000 	.word	0x40ac2000
 8002498:	447a0000 	.word	0x447a0000

0800249c <meas_power_energy_interval>:

int meas_power_energy_interval(photovoltaic *ptr)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	ptr->pe_interval_cnt++;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80024a8:	3301      	adds	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	849a      	strh	r2, [r3, #36]	; 0x24

	if (ptr->pe_interval_cnt == POWER_ENERGY_INTERVAL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80024b4:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
 80024b8:	d104      	bne.n	80024c4 <meas_power_energy_interval+0x28>
	{
		ptr->pe_interval_cnt = 0;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	849a      	strh	r2, [r3, #36]	; 0x24

		return (1);
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <meas_power_energy_interval+0x2a>
	}

	return (0);
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <meas_quadratic_average>:

float meas_quadratic_average(float *ptr, int length)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
    float rms = 0.00;
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]

    for (int i=0; i<length; i++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	e016      	b.n	8002516 <meas_quadratic_average+0x44>
    	rms += ptr[i] * ptr[i];
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	4413      	add	r3, r2
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	ed97 7a03 	vldr	s14, [r7, #12]
 8002508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250c:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i=0; i<length; i++)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3301      	adds	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	dbe4      	blt.n	80024e8 <meas_quadratic_average+0x16>

    return (sqrt(rms / length));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002528:	ed97 7a03 	vldr	s14, [r7, #12]
 800252c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002530:	ee16 0a90 	vmov	r0, s13
 8002534:	f7fe f830 	bl	8000598 <__aeabi_f2d>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	ec43 2b10 	vmov	d0, r2, r3
 8002540:	f008 f854 	bl	800a5ec <sqrt>
 8002544:	ec53 2b10 	vmov	r2, r3, d0
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fb54 	bl	8000bf8 <__aeabi_d2f>
 8002550:	4603      	mov	r3, r0
 8002552:	ee07 3a90 	vmov	s15, r3
}
 8002556:	eeb0 0a67 	vmov.f32	s0, s15
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <objects_def_init>:
photovoltaic *cell;
digital_IOs  *relay_pos, *relay_neg, *led_output;
debug_mod	 *dbg;

void objects_def_init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af04      	add	r7, sp, #16
	dbg  = events_initialize_debug_mod("Debug Mod 1", GPIOC, CELL_1_DBG1_Pin, CELL_1_DBG2_Pin, CELL_1_DBG3_Pin);
 8002566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2340      	movs	r3, #64	; 0x40
 800256e:	2220      	movs	r2, #32
 8002570:	491e      	ldr	r1, [pc, #120]	; (80025ec <objects_def_init+0x8c>)
 8002572:	481f      	ldr	r0, [pc, #124]	; (80025f0 <objects_def_init+0x90>)
 8002574:	f7fe fd7c 	bl	8001070 <events_initialize_debug_mod>
 8002578:	4603      	mov	r3, r0
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <objects_def_init+0x94>)
 800257c:	6013      	str	r3, [r2, #0]

	relay_pos  = events_initialize_digital_ios("Output Relay (+)", GPIOA, CELL_1_OUT_POS_Pin, 0);
 800257e:	2300      	movs	r3, #0
 8002580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002584:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002588:	481b      	ldr	r0, [pc, #108]	; (80025f8 <objects_def_init+0x98>)
 800258a:	f7fe fdc5 	bl	8001118 <events_initialize_digital_ios>
 800258e:	4603      	mov	r3, r0
 8002590:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <objects_def_init+0x9c>)
 8002592:	6013      	str	r3, [r2, #0]
	relay_neg  = events_initialize_digital_ios("Output Relay (-)", GPIOA, CELL_1_OUT_NEG_Pin, 0);
 8002594:	2300      	movs	r3, #0
 8002596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800259a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800259e:	4818      	ldr	r0, [pc, #96]	; (8002600 <objects_def_init+0xa0>)
 80025a0:	f7fe fdba 	bl	8001118 <events_initialize_digital_ios>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <objects_def_init+0xa4>)
 80025a8:	6013      	str	r3, [r2, #0]
	led_output = events_initialize_digital_ios("Output LED", GPIOA, CELL_1_OUT_LED_Pin, 0);
 80025aa:	2300      	movs	r3, #0
 80025ac:	2220      	movs	r2, #32
 80025ae:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80025b2:	4815      	ldr	r0, [pc, #84]	; (8002608 <objects_def_init+0xa8>)
 80025b4:	f7fe fdb0 	bl	8001118 <events_initialize_digital_ios>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <objects_def_init+0xac>)
 80025bc:	6013      	str	r3, [r2, #0]

	cell = meas_initialize_objects("Photovoltaic Cell 1", &hadc1, &hadc2, relay_pos, relay_neg, led_output, dbg);
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <objects_def_init+0x9c>)
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <objects_def_init+0xa4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a11      	ldr	r2, [pc, #68]	; (800260c <objects_def_init+0xac>)
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	490a      	ldr	r1, [pc, #40]	; (80025f4 <objects_def_init+0x94>)
 80025cc:	6809      	ldr	r1, [r1, #0]
 80025ce:	9102      	str	r1, [sp, #8]
 80025d0:	9201      	str	r2, [sp, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <objects_def_init+0xb0>)
 80025d8:	490e      	ldr	r1, [pc, #56]	; (8002614 <objects_def_init+0xb4>)
 80025da:	480f      	ldr	r0, [pc, #60]	; (8002618 <objects_def_init+0xb8>)
 80025dc:	f7ff fa3e 	bl	8001a5c <meas_initialize_objects>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <objects_def_init+0xbc>)
 80025e4:	6013      	str	r3, [r2, #0]
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	48000800 	.word	0x48000800
 80025f0:	0800a968 	.word	0x0800a968
 80025f4:	200003a4 	.word	0x200003a4
 80025f8:	0800a974 	.word	0x0800a974
 80025fc:	200003a8 	.word	0x200003a8
 8002600:	0800a988 	.word	0x0800a988
 8002604:	200003b0 	.word	0x200003b0
 8002608:	0800a99c 	.word	0x0800a99c
 800260c:	200003ac 	.word	0x200003ac
 8002610:	20000214 	.word	0x20000214
 8002614:	200002ec 	.word	0x200002ec
 8002618:	0800a9a8 	.word	0x0800a9a8
 800261c:	200003b4 	.word	0x200003b4

08002620 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002630:	d105      	bne.n	800263e <HAL_ADC_ConvCpltCallback+0x1e>
		meas_sample(cell);
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_ADC_ConvCpltCallback+0x3c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fb82 	bl	8001d40 <meas_sample>
	else if (hadc->Instance == ADC5)
		meas_temperature(cell);
}
 800263c:	e009      	b.n	8002652 <HAL_ADC_ConvCpltCallback+0x32>
	else if (hadc->Instance == ADC5)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <HAL_ADC_ConvCpltCallback+0x40>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d104      	bne.n	8002652 <HAL_ADC_ConvCpltCallback+0x32>
		meas_temperature(cell);
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_ADC_ConvCpltCallback+0x3c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fae7 	bl	8001c20 <meas_temperature>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200003b4 	.word	0x200003b4
 8002660:	50000600 	.word	0x50000600

08002664 <objects_def_exti_gpio>:

void objects_def_exti_gpio(uint16_t GPIO_Pin)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == CELL_1_BTN_Pin)
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002674:	d104      	bne.n	8002680 <objects_def_exti_gpio+0x1c>
		meas_decouple_system(cell);
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <objects_def_exti_gpio+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff faaa 	bl	8001bd4 <meas_decouple_system>
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200003b4 	.word	0x200003b4

0800268c <objects_def_loop>:

void objects_def_loop(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	events_handler(cell);
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <objects_def_loop+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fd6d 	bl	8001174 <events_handler>
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200003b4 	.word	0x200003b4

080026a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_MspInit+0x44>)
 80026ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ae:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <HAL_MspInit+0x44>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6613      	str	r3, [r2, #96]	; 0x60
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_MspInit+0x44>)
 80026b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_MspInit+0x44>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_MspInit+0x44>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6593      	str	r3, [r2, #88]	; 0x58
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_MspInit+0x44>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80026da:	f003 fad5 	bl	8005c88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000

080026ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <NMI_Handler+0x4>

080026f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f6:	e7fe      	b.n	80026f6 <HardFault_Handler+0x4>

080026f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <MemManage_Handler+0x4>

080026fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <BusFault_Handler+0x4>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <UsageFault_Handler+0x4>

0800270a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002738:	f000 fa74 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}

08002740 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002744:	4803      	ldr	r0, [pc, #12]	; (8002754 <ADC1_2_IRQHandler+0x14>)
 8002746:	f001 f923 	bl	8003990 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800274a:	4803      	ldr	r0, [pc, #12]	; (8002758 <ADC1_2_IRQHandler+0x18>)
 800274c:	f001 f920 	bl	8003990 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200002ec 	.word	0x200002ec
 8002758:	20000214 	.word	0x20000214

0800275c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002762:	f004 fab9 	bl	8006cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200003b8 	.word	0x200003b8

08002770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <TIM2_IRQHandler+0x10>)
 8002776:	f004 faaf 	bl	8006cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000404 	.word	0x20000404

08002784 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002788:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800278c:	f002 fd28 	bl	80051e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}

08002794 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <ADC5_IRQHandler+0x10>)
 800279a:	f001 f8f9 	bl	8003990 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000280 	.word	0x20000280

080027a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
	return 1;
 80027ac:	2301      	movs	r3, #1
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_kill>:

int _kill(int pid, int sig)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027c2:	f004 ff63 	bl	800768c <__errno>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2216      	movs	r2, #22
 80027ca:	601a      	str	r2, [r3, #0]
	return -1;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_exit>:

void _exit (int status)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ffe7 	bl	80027b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ea:	e7fe      	b.n	80027ea <_exit+0x12>

080027ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e00a      	b.n	8002814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027fe:	f3af 8000 	nop.w
 8002802:	4601      	mov	r1, r0
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	60ba      	str	r2, [r7, #8]
 800280a:	b2ca      	uxtb	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3301      	adds	r3, #1
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	dbf0      	blt.n	80027fe <_read+0x12>
	}

return len;
 800281c:	687b      	ldr	r3, [r7, #4]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
	return -1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800284e:	605a      	str	r2, [r3, #4]
	return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <_isatty>:

int _isatty(int file)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
	return 1;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
	return 0;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <_sbrk+0x5c>)
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <_sbrk+0x60>)
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <_sbrk+0x64>)
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <_sbrk+0x68>)
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d207      	bcs.n	80028d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c0:	f004 fee4 	bl	800768c <__errno>
 80028c4:	4603      	mov	r3, r0
 80028c6:	220c      	movs	r2, #12
 80028c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ce:	e009      	b.n	80028e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <_sbrk+0x64>)
 80028e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20020000 	.word	0x20020000
 80028f0:	00000400 	.word	0x00000400
 80028f4:	20000208 	.word	0x20000208
 80028f8:	20000468 	.word	0x20000468

080028fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <SystemInit+0x20>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <SystemInit+0x20>)
 8002908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800290c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002926:	f107 0310 	add.w	r3, r7, #16
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <MX_TIM1_Init+0xa0>)
 8002940:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <MX_TIM1_Init+0xa4>)
 8002942:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <MX_TIM1_Init+0xa0>)
 8002946:	2277      	movs	r2, #119	; 0x77
 8002948:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <MX_TIM1_Init+0xa0>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1041;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <MX_TIM1_Init+0xa0>)
 8002952:	f240 4211 	movw	r2, #1041	; 0x411
 8002956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <MX_TIM1_Init+0xa0>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <MX_TIM1_Init+0xa0>)
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <MX_TIM1_Init+0xa0>)
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800296a:	4815      	ldr	r0, [pc, #84]	; (80029c0 <MX_TIM1_Init+0xa0>)
 800296c:	f004 f8e4 	bl	8006b38 <HAL_TIM_Base_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002976:	f7ff f86b 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800297a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	4619      	mov	r1, r3
 8002986:	480e      	ldr	r0, [pc, #56]	; (80029c0 <MX_TIM1_Init+0xa0>)
 8002988:	f004 fb26 	bl	8006fd8 <HAL_TIM_ConfigClockSource>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002992:	f7ff f85d 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4806      	ldr	r0, [pc, #24]	; (80029c0 <MX_TIM1_Init+0xa0>)
 80029a8:	f004 fd94 	bl	80074d4 <HAL_TIMEx_MasterConfigSynchronization>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80029b2:	f7ff f84d 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029b6:	bf00      	nop
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200003b8 	.word	0x200003b8
 80029c4:	40012c00 	.word	0x40012c00

080029c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ce:	f107 0310 	add.w	r3, r7, #16
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029e6:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <MX_TIM2_Init+0x98>)
 80029e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11999;
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <MX_TIM2_Init+0x98>)
 80029f0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80029f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <MX_TIM2_Init+0x98>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80029fc:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <MX_TIM2_Init+0x98>)
 80029fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <MX_TIM2_Init+0x98>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <MX_TIM2_Init+0x98>)
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a10:	4813      	ldr	r0, [pc, #76]	; (8002a60 <MX_TIM2_Init+0x98>)
 8002a12:	f004 f891 	bl	8006b38 <HAL_TIM_Base_Init>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002a1c:	f7ff f818 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a26:	f107 0310 	add.w	r3, r7, #16
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	480c      	ldr	r0, [pc, #48]	; (8002a60 <MX_TIM2_Init+0x98>)
 8002a2e:	f004 fad3 	bl	8006fd8 <HAL_TIM_ConfigClockSource>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002a38:	f7ff f80a 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4805      	ldr	r0, [pc, #20]	; (8002a60 <MX_TIM2_Init+0x98>)
 8002a4a:	f004 fd43 	bl	80074d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002a54:	f7fe fffc 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000404 	.word	0x20000404

08002a64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_TIM_Base_MspInit+0x78>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d114      	bne.n	8002aa0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7a:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a80:	6613      	str	r3, [r2, #96]	; 0x60
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	2019      	movs	r0, #25
 8002a94:	f002 f9d5 	bl	8004e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a98:	2019      	movs	r0, #25
 8002a9a:	f002 f9ec 	bl	8004e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a9e:	e018      	b.n	8002ad2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d113      	bne.n	8002ad2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_TIM_Base_MspInit+0x7c>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_TIM_Base_MspInit+0x7c>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_TIM_Base_MspInit+0x7c>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	201c      	movs	r0, #28
 8002ac8:	f002 f9bb 	bl	8004e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002acc:	201c      	movs	r0, #28
 8002ace:	f002 f9d2 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_ADC_Start(&hadc2);
 8002af6:	480a      	ldr	r0, [pc, #40]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002af8:	f000 fcfc 	bl	80034f4 <HAL_ADC_Start>
		HAL_ADC_Start_IT(&hadc1);
 8002afc:	4809      	ldr	r0, [pc, #36]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002afe:	f000 fddd 	bl	80036bc <HAL_ADC_Start_IT>
	}
	else if (htim->Instance == TIM2)
	{
		HAL_ADC_Start_IT(&hadc5);
	}
}
 8002b02:	e007      	b.n	8002b14 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if (htim->Instance == TIM2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d102      	bne.n	8002b14 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ADC_Start_IT(&hadc5);
 8002b0e:	4806      	ldr	r0, [pc, #24]	; (8002b28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002b10:	f000 fdd4 	bl	80036bc <HAL_ADC_Start_IT>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	20000214 	.word	0x20000214
 8002b24:	200002ec 	.word	0x200002ec
 8002b28:	20000280 	.word	0x20000280

08002b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b2c:	480d      	ldr	r0, [pc, #52]	; (8002b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b30:	480d      	ldr	r0, [pc, #52]	; (8002b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b32:	490e      	ldr	r1, [pc, #56]	; (8002b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <LoopForever+0xe>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b48:	4c0b      	ldr	r4, [pc, #44]	; (8002b78 <LoopForever+0x16>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b56:	f7ff fed1 	bl	80028fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f004 fd9d 	bl	8007698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b5e:	f7fe feb7 	bl	80018d0 <main>

08002b62 <LoopForever>:

LoopForever:
    b LoopForever
 8002b62:	e7fe      	b.n	8002b62 <LoopForever>
  ldr   r0, =_estack
 8002b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002b70:	0800adb4 	.word	0x0800adb4
  ldr r2, =_sbss
 8002b74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002b78:	20000464 	.word	0x20000464

08002b7c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC3_IRQHandler>

08002b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b88:	2003      	movs	r0, #3
 8002b8a:	f002 f94f 	bl	8004e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f000 f80e 	bl	8002bb0 <HAL_InitTick>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	71fb      	strb	r3, [r7, #7]
 8002b9e:	e001      	b.n	8002ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ba0:	f7ff fd80 	bl	80026a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ba4:	79fb      	ldrb	r3, [r7, #7]

}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002bbc:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_InitTick+0x68>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d022      	beq.n	8002c0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_InitTick+0x6c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <HAL_InitTick+0x68>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 f95a 	bl	8004e92 <HAL_SYSTICK_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10f      	bne.n	8002c04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	d809      	bhi.n	8002bfe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bea:	2200      	movs	r2, #0
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf2:	f002 f926 	bl	8004e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_InitTick+0x70>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	e007      	b.n	8002c0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e004      	b.n	8002c0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e001      	b.n	8002c0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_IncTick+0x1c>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_IncTick+0x20>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	4a03      	ldr	r2, [pc, #12]	; (8002c40 <HAL_IncTick+0x1c>)
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	20000450 	.word	0x20000450
 8002c44:	20000008 	.word	0x20000008

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000450 	.word	0x20000450

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff ffee 	bl	8002c48 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c78:	d004      	beq.n	8002c84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_Delay+0x40>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4413      	add	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c84:	bf00      	nop
 8002c86:	f7ff ffdf 	bl	8002c48 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d8f7      	bhi.n	8002c86 <HAL_Delay+0x26>
  {
  }
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3360      	adds	r3, #96	; 0x60
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <LL_ADC_SetOffset+0x44>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	03fff000 	.word	0x03fff000

08002d54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3360      	adds	r3, #96	; 0x60
 8002d62:	461a      	mov	r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3360      	adds	r3, #96	; 0x60
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b087      	sub	sp, #28
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3360      	adds	r3, #96	; 0x60
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3360      	adds	r3, #96	; 0x60
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	615a      	str	r2, [r3, #20]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b087      	sub	sp, #28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3330      	adds	r3, #48	; 0x30
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	4413      	add	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	211f      	movs	r1, #31
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	f003 011f 	and.w	r1, r3, #31
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3314      	adds	r3, #20
 8002efc:	461a      	mov	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	0e5b      	lsrs	r3, r3, #25
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	4413      	add	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	0d1b      	lsrs	r3, r3, #20
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2107      	movs	r1, #7
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	401a      	ands	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	0d1b      	lsrs	r3, r3, #20
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	401a      	ands	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0318 	and.w	r3, r3, #24
 8002f66:	4908      	ldr	r1, [pc, #32]	; (8002f88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f68:	40d9      	lsrs	r1, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	431a      	orrs	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	0007ffff 	.word	0x0007ffff

08002f8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 031f 	and.w	r3, r3, #31
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6093      	str	r3, [r2, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffc:	d101      	bne.n	8003002 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003024:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800304c:	d101      	bne.n	8003052 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800309c:	f043 0202 	orr.w	r2, r3, #2
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_IsEnabled+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_IsEnabled+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d101      	bne.n	80030ee <LL_ADC_IsDisableOngoing+0x18>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <LL_ADC_IsDisableOngoing+0x1a>
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800310c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003110:	f043 0204 	orr.w	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d101      	bne.n	800313c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b08      	cmp	r3, #8
 800315c:	d101      	bne.n	8003162 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1af      	b.n	80034ea <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7fd febf 	bl	8000f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff19 	bl	8002fe8 <LL_ADC_IsDeepPowerDownEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff feff 	bl	8002fc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff34 	bl	8003038 <LL_ADC_IsInternalRegulatorEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d115      	bne.n	8003202 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff ff18 	bl	8003010 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e0:	4b9f      	ldr	r3, [pc, #636]	; (8003460 <HAL_ADC_Init+0x2f0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	4a9f      	ldr	r2, [pc, #636]	; (8003464 <HAL_ADC_Init+0x2f4>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	3301      	adds	r3, #1
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f4:	e002      	b.n	80031fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f9      	bne.n	80031f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff ff16 	bl	8003038 <LL_ADC_IsInternalRegulatorEnabled>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10d      	bne.n	800322e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	f043 0210 	orr.w	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ff76 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003238:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 8148 	bne.w	80034d8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 8144 	bne.w	80034d8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003258:	f043 0202 	orr.w	r2, r3, #2
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff23 	bl	80030b0 <LL_ADC_IsEnabled>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d141      	bne.n	80032f4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003278:	d004      	beq.n	8003284 <HAL_ADC_Init+0x114>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a7a      	ldr	r2, [pc, #488]	; (8003468 <HAL_ADC_Init+0x2f8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d10f      	bne.n	80032a4 <HAL_ADC_Init+0x134>
 8003284:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003288:	f7ff ff12 	bl	80030b0 <LL_ADC_IsEnabled>
 800328c:	4604      	mov	r4, r0
 800328e:	4876      	ldr	r0, [pc, #472]	; (8003468 <HAL_ADC_Init+0x2f8>)
 8003290:	f7ff ff0e 	bl	80030b0 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e012      	b.n	80032ca <HAL_ADC_Init+0x15a>
 80032a4:	4871      	ldr	r0, [pc, #452]	; (800346c <HAL_ADC_Init+0x2fc>)
 80032a6:	f7ff ff03 	bl	80030b0 <LL_ADC_IsEnabled>
 80032aa:	4604      	mov	r4, r0
 80032ac:	4870      	ldr	r0, [pc, #448]	; (8003470 <HAL_ADC_Init+0x300>)
 80032ae:	f7ff feff 	bl	80030b0 <LL_ADC_IsEnabled>
 80032b2:	4603      	mov	r3, r0
 80032b4:	431c      	orrs	r4, r3
 80032b6:	486f      	ldr	r0, [pc, #444]	; (8003474 <HAL_ADC_Init+0x304>)
 80032b8:	f7ff fefa 	bl	80030b0 <LL_ADC_IsEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	4323      	orrs	r3, r4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d6:	d004      	beq.n	80032e2 <HAL_ADC_Init+0x172>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a62      	ldr	r2, [pc, #392]	; (8003468 <HAL_ADC_Init+0x2f8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_Init+0x176>
 80032e2:	4a65      	ldr	r2, [pc, #404]	; (8003478 <HAL_ADC_Init+0x308>)
 80032e4:	e000      	b.n	80032e8 <HAL_ADC_Init+0x178>
 80032e6:	4a65      	ldr	r2, [pc, #404]	; (800347c <HAL_ADC_Init+0x30c>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f7ff fcd8 	bl	8002ca4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7f5b      	ldrb	r3, [r3, #29]
 80032f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003304:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800330a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003312:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800331e:	2b01      	cmp	r3, #1
 8003320:	d106      	bne.n	8003330 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	045b      	lsls	r3, r3, #17
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_ADC_Init+0x310>)
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	69b9      	ldr	r1, [r7, #24]
 800335c:	430b      	orrs	r3, r1
 800335e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fed2 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003380:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fedf 	bl	800314a <LL_ADC_INJ_IsConversionOngoing>
 800338c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d17f      	bne.n	8003494 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d17c      	bne.n	8003494 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800339e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033a6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b6:	f023 0302 	bic.w	r3, r3, #2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	69b9      	ldr	r1, [r7, #24]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d017      	beq.n	80033fc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6911      	ldr	r1, [r2, #16]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80033fa:	e013      	b.n	8003424 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800340a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800341c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003420:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342a:	2b01      	cmp	r3, #1
 800342c:	d12a      	bne.n	8003484 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003450:	430a      	orrs	r2, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	611a      	str	r2, [r3, #16]
 800345e:	e019      	b.n	8003494 <HAL_ADC_Init+0x324>
 8003460:	20000000 	.word	0x20000000
 8003464:	053e2d63 	.word	0x053e2d63
 8003468:	50000100 	.word	0x50000100
 800346c:	50000400 	.word	0x50000400
 8003470:	50000500 	.word	0x50000500
 8003474:	50000600 	.word	0x50000600
 8003478:	50000300 	.word	0x50000300
 800347c:	50000700 	.word	0x50000700
 8003480:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10c      	bne.n	80034b6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f023 010f 	bic.w	r1, r3, #15
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	1e5a      	subs	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
 80034b4:	e007      	b.n	80034c6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 020f 	bic.w	r2, r2, #15
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	f043 0201 	orr.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80034d6:	e007      	b.n	80034e8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	f043 0210 	orr.w	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3724      	adds	r7, #36	; 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd90      	pop	{r4, r7, pc}
 80034f2:	bf00      	nop

080034f4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003504:	d004      	beq.n	8003510 <HAL_ADC_Start+0x1c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a67      	ldr	r2, [pc, #412]	; (80036a8 <HAL_ADC_Start+0x1b4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d101      	bne.n	8003514 <HAL_ADC_Start+0x20>
 8003510:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_ADC_Start+0x1b8>)
 8003512:	e000      	b.n	8003516 <HAL_ADC_Start+0x22>
 8003514:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_ADC_Start+0x1bc>)
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fd38 	bl	8002f8c <LL_ADC_GetMultimode>
 800351c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fdfe 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 80b4 	bne.w	8003698 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_ADC_Start+0x4a>
 800353a:	2302      	movs	r3, #2
 800353c:	e0af      	b.n	800369e <HAL_ADC_Start+0x1aa>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f001 f8d0 	bl	80046ec <ADC_Enable>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 809b 	bne.w	800368e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a4d      	ldr	r2, [pc, #308]	; (80036a8 <HAL_ADC_Start+0x1b4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_ADC_Start+0x96>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a4e      	ldr	r2, [pc, #312]	; (80036b4 <HAL_ADC_Start+0x1c0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d002      	beq.n	8003586 <HAL_ADC_Start+0x92>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	e003      	b.n	800358e <HAL_ADC_Start+0x9a>
 8003586:	4b4c      	ldr	r3, [pc, #304]	; (80036b8 <HAL_ADC_Start+0x1c4>)
 8003588:	e001      	b.n	800358e <HAL_ADC_Start+0x9a>
 800358a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	4293      	cmp	r3, r2
 8003594:	d002      	beq.n	800359c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b4:	d106      	bne.n	80035c4 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	f023 0206 	bic.w	r2, r3, #6
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	661a      	str	r2, [r3, #96]	; 0x60
 80035c2:	e002      	b.n	80035ca <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	221c      	movs	r2, #28
 80035d0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a32      	ldr	r2, [pc, #200]	; (80036a8 <HAL_ADC_Start+0x1b4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_ADC_Start+0x104>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a32      	ldr	r2, [pc, #200]	; (80036b4 <HAL_ADC_Start+0x1c0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d002      	beq.n	80035f4 <HAL_ADC_Start+0x100>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	e003      	b.n	80035fc <HAL_ADC_Start+0x108>
 80035f4:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <HAL_ADC_Start+0x1c4>)
 80035f6:	e001      	b.n	80035fc <HAL_ADC_Start+0x108>
 80035f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	4293      	cmp	r3, r2
 8003602:	d008      	beq.n	8003616 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b05      	cmp	r3, #5
 800360e:	d002      	beq.n	8003616 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b09      	cmp	r3, #9
 8003614:	d114      	bne.n	8003640 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800362c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fd5f 	bl	80030fc <LL_ADC_REG_StartConversion>
 800363e:	e02d      	b.n	800369c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <HAL_ADC_Start+0x1b4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_ADC_Start+0x176>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_ADC_Start+0x1c0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d002      	beq.n	8003666 <HAL_ADC_Start+0x172>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	e003      	b.n	800366e <HAL_ADC_Start+0x17a>
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <HAL_ADC_Start+0x1c4>)
 8003668:	e001      	b.n	800366e <HAL_ADC_Start+0x17a>
 800366a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800366e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00f      	beq.n	800369c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003684:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	65da      	str	r2, [r3, #92]	; 0x5c
 800368c:	e006      	b.n	800369c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003696:	e001      	b.n	800369c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003698:	2302      	movs	r3, #2
 800369a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800369c:	7dfb      	ldrb	r3, [r7, #23]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	50000100 	.word	0x50000100
 80036ac:	50000300 	.word	0x50000300
 80036b0:	50000700 	.word	0x50000700
 80036b4:	50000500 	.word	0x50000500
 80036b8:	50000400 	.word	0x50000400

080036bc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036cc:	d004      	beq.n	80036d8 <HAL_ADC_Start_IT+0x1c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a93      	ldr	r2, [pc, #588]	; (8003920 <HAL_ADC_Start_IT+0x264>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_Start_IT+0x20>
 80036d8:	4b92      	ldr	r3, [pc, #584]	; (8003924 <HAL_ADC_Start_IT+0x268>)
 80036da:	e000      	b.n	80036de <HAL_ADC_Start_IT+0x22>
 80036dc:	4b92      	ldr	r3, [pc, #584]	; (8003928 <HAL_ADC_Start_IT+0x26c>)
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fc54 	bl	8002f8c <LL_ADC_GetMultimode>
 80036e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fd1a 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 8134 	bne.w	8003960 <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_ADC_Start_IT+0x4a>
 8003702:	2302      	movs	r3, #2
 8003704:	e131      	b.n	800396a <HAL_ADC_Start_IT+0x2ae>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 ffec 	bl	80046ec <ADC_Enable>
 8003714:	4603      	mov	r3, r0
 8003716:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 811b 	bne.w	8003956 <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a79      	ldr	r2, [pc, #484]	; (8003920 <HAL_ADC_Start_IT+0x264>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_ADC_Start_IT+0x96>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7a      	ldr	r2, [pc, #488]	; (800392c <HAL_ADC_Start_IT+0x270>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d002      	beq.n	800374e <HAL_ADC_Start_IT+0x92>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	e003      	b.n	8003756 <HAL_ADC_Start_IT+0x9a>
 800374e:	4b78      	ldr	r3, [pc, #480]	; (8003930 <HAL_ADC_Start_IT+0x274>)
 8003750:	e001      	b.n	8003756 <HAL_ADC_Start_IT+0x9a>
 8003752:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4293      	cmp	r3, r2
 800375c:	d002      	beq.n	8003764 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d006      	beq.n	800378a <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	f023 0206 	bic.w	r2, r3, #6
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	661a      	str	r2, [r3, #96]	; 0x60
 8003788:	e002      	b.n	8003790 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	221c      	movs	r2, #28
 8003796:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 021c 	bic.w	r2, r2, #28
 80037ae:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d108      	bne.n	80037ca <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0208 	orr.w	r2, r2, #8
 80037c6:	605a      	str	r2, [r3, #4]
          break;
 80037c8:	e008      	b.n	80037dc <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0204 	orr.w	r2, r2, #4
 80037d8:	605a      	str	r2, [r3, #4]
          break;
 80037da:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0210 	orr.w	r2, r2, #16
 80037f2:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a49      	ldr	r2, [pc, #292]	; (8003920 <HAL_ADC_Start_IT+0x264>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_ADC_Start_IT+0x156>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a4a      	ldr	r2, [pc, #296]	; (800392c <HAL_ADC_Start_IT+0x270>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d002      	beq.n	800380e <HAL_ADC_Start_IT+0x152>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e003      	b.n	8003816 <HAL_ADC_Start_IT+0x15a>
 800380e:	4b48      	ldr	r3, [pc, #288]	; (8003930 <HAL_ADC_Start_IT+0x274>)
 8003810:	e001      	b.n	8003816 <HAL_ADC_Start_IT+0x15a>
 8003812:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	4293      	cmp	r3, r2
 800381c:	d008      	beq.n	8003830 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b05      	cmp	r3, #5
 8003828:	d002      	beq.n	8003830 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b09      	cmp	r3, #9
 800382e:	d13b      	bne.n	80038a8 <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02d      	beq.n	800389a <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b08      	cmp	r3, #8
 8003854:	d110      	bne.n	8003878 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0220 	bic.w	r2, r2, #32
 8003864:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003874:	605a      	str	r2, [r3, #4]
              break;
 8003876:	e011      	b.n	800389c <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003886:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0220 	orr.w	r2, r2, #32
 8003896:	605a      	str	r2, [r3, #4]
              break;
 8003898:	e000      	b.n	800389c <HAL_ADC_Start_IT+0x1e0>
          }
        }
 800389a:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fc2b 	bl	80030fc <LL_ADC_REG_StartConversion>
 80038a6:	e05f      	b.n	8003968 <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_ADC_Start_IT+0x264>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_ADC_Start_IT+0x216>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_ADC_Start_IT+0x270>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d002      	beq.n	80038ce <HAL_ADC_Start_IT+0x212>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	e003      	b.n	80038d6 <HAL_ADC_Start_IT+0x21a>
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_ADC_Start_IT+0x274>)
 80038d0:	e001      	b.n	80038d6 <HAL_ADC_Start_IT+0x21a>
 80038d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038d6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d040      	beq.n	8003966 <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d11b      	bne.n	8003934 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0220 	bic.w	r2, r2, #32
 800390a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391a:	605a      	str	r2, [r3, #4]
              break;
 800391c:	e024      	b.n	8003968 <HAL_ADC_Start_IT+0x2ac>
 800391e:	bf00      	nop
 8003920:	50000100 	.word	0x50000100
 8003924:	50000300 	.word	0x50000300
 8003928:	50000700 	.word	0x50000700
 800392c:	50000500 	.word	0x50000500
 8003930:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003942:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0220 	orr.w	r2, r2, #32
 8003952:	605a      	str	r2, [r3, #4]
              break;
 8003954:	e008      	b.n	8003968 <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800395e:	e003      	b.n	8003968 <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003960:	2302      	movs	r3, #2
 8003962:	75fb      	strb	r3, [r7, #23]
 8003964:	e000      	b.n	8003968 <HAL_ADC_Start_IT+0x2ac>
        }
 8003966:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8003968:	7dfb      	ldrb	r3, [r7, #23]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop

08003974 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003998:	2300      	movs	r3, #0
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b4:	d004      	beq.n	80039c0 <HAL_ADC_IRQHandler+0x30>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a95      	ldr	r2, [pc, #596]	; (8003c10 <HAL_ADC_IRQHandler+0x280>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_IRQHandler+0x34>
 80039c0:	4b94      	ldr	r3, [pc, #592]	; (8003c14 <HAL_ADC_IRQHandler+0x284>)
 80039c2:	e000      	b.n	80039c6 <HAL_ADC_IRQHandler+0x36>
 80039c4:	4b94      	ldr	r3, [pc, #592]	; (8003c18 <HAL_ADC_IRQHandler+0x288>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fae0 	bl	8002f8c <LL_ADC_GetMultimode>
 80039cc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d017      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x78>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d012      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f001 f834 	bl	8004a68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2202      	movs	r2, #2
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_ADC_IRQHandler+0x8c>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8094 	beq.w	8003b50 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 808e 	beq.w	8003b50 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff f9f9 	bl	8002e48 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d072      	beq.n	8003b42 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6b      	ldr	r2, [pc, #428]	; (8003c10 <HAL_ADC_IRQHandler+0x280>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_ADC_IRQHandler+0xea>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6c      	ldr	r2, [pc, #432]	; (8003c1c <HAL_ADC_IRQHandler+0x28c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d002      	beq.n	8003a76 <HAL_ADC_IRQHandler+0xe6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	e003      	b.n	8003a7e <HAL_ADC_IRQHandler+0xee>
 8003a76:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <HAL_ADC_IRQHandler+0x290>)
 8003a78:	e001      	b.n	8003a7e <HAL_ADC_IRQHandler+0xee>
 8003a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d008      	beq.n	8003a98 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d002      	beq.n	8003a98 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b09      	cmp	r3, #9
 8003a96:	d104      	bne.n	8003aa2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	e014      	b.n	8003acc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <HAL_ADC_IRQHandler+0x280>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_ADC_IRQHandler+0x130>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a5a      	ldr	r2, [pc, #360]	; (8003c1c <HAL_ADC_IRQHandler+0x28c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d002      	beq.n	8003abc <HAL_ADC_IRQHandler+0x12c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	e003      	b.n	8003ac4 <HAL_ADC_IRQHandler+0x134>
 8003abc:	4b58      	ldr	r3, [pc, #352]	; (8003c20 <HAL_ADC_IRQHandler+0x290>)
 8003abe:	e001      	b.n	8003ac4 <HAL_ADC_IRQHandler+0x134>
 8003ac0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ac4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d135      	bne.n	8003b42 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d12e      	bne.n	8003b42 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fb1b 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d11a      	bne.n	8003b2a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 020c 	bic.w	r2, r2, #12
 8003b02:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d112      	bne.n	8003b42 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b28:	e00b      	b.n	8003b42 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	f043 0210 	orr.w	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3a:	f043 0201 	orr.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fe fd6c 	bl	8002620 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	220c      	movs	r2, #12
 8003b4e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <HAL_ADC_IRQHandler+0x1d4>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80b2 	beq.w	8003cd4 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80ac 	beq.w	8003cd4 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff f994 	bl	8002ec6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003b9e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff f94f 	bl	8002e48 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003baa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <HAL_ADC_IRQHandler+0x280>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_ADC_IRQHandler+0x23a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <HAL_ADC_IRQHandler+0x28c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d002      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x236>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	e003      	b.n	8003bce <HAL_ADC_IRQHandler+0x23e>
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_ADC_IRQHandler+0x290>)
 8003bc8:	e001      	b.n	8003bce <HAL_ADC_IRQHandler+0x23e>
 8003bca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d008      	beq.n	8003be8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b06      	cmp	r3, #6
 8003be0:	d002      	beq.n	8003be8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b07      	cmp	r3, #7
 8003be6:	d104      	bne.n	8003bf2 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	e01e      	b.n	8003c30 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a06      	ldr	r2, [pc, #24]	; (8003c10 <HAL_ADC_IRQHandler+0x280>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <HAL_ADC_IRQHandler+0x294>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a06      	ldr	r2, [pc, #24]	; (8003c1c <HAL_ADC_IRQHandler+0x28c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d002      	beq.n	8003c0c <HAL_ADC_IRQHandler+0x27c>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e00d      	b.n	8003c28 <HAL_ADC_IRQHandler+0x298>
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <HAL_ADC_IRQHandler+0x290>)
 8003c0e:	e00b      	b.n	8003c28 <HAL_ADC_IRQHandler+0x298>
 8003c10:	50000100 	.word	0x50000100
 8003c14:	50000300 	.word	0x50000300
 8003c18:	50000700 	.word	0x50000700
 8003c1c:	50000500 	.word	0x50000500
 8003c20:	50000400 	.word	0x50000400
 8003c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c28:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d047      	beq.n	8003cc6 <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <HAL_ADC_IRQHandler+0x2c0>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d03f      	beq.n	8003cc6 <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d13a      	bne.n	8003cc6 <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d133      	bne.n	8003cc6 <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d12e      	bne.n	8003cc6 <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fa6c 	bl	800314a <LL_ADC_INJ_IsConversionOngoing>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11a      	bne.n	8003cae <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c86:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d112      	bne.n	8003cc6 <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cac:	e00b      	b.n	8003cc6 <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	f043 0210 	orr.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fea6 	bl	8004a18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2260      	movs	r2, #96	; 0x60
 8003cd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d011      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x372>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00c      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8a5 	bl	8003e44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2280      	movs	r2, #128	; 0x80
 8003d00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d012      	beq.n	8003d32 <HAL_ADC_IRQHandler+0x3a2>
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fe8c 	bl	8004a40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <HAL_ADC_IRQHandler+0x3d2>
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fe7e 	bl	8004a54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d043      	beq.n	8003df4 <HAL_ADC_IRQHandler+0x464>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d03e      	beq.n	8003df4 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
 8003d82:	e021      	b.n	8003dc8 <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d015      	beq.n	8003db6 <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d92:	d004      	beq.n	8003d9e <HAL_ADC_IRQHandler+0x40e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <HAL_ADC_IRQHandler+0x4a8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_IRQHandler+0x412>
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <HAL_ADC_IRQHandler+0x4ac>)
 8003da0:	e000      	b.n	8003da4 <HAL_ADC_IRQHandler+0x414>
 8003da2:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <HAL_ADC_IRQHandler+0x4b0>)
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff f8ff 	bl	8002fa8 <LL_ADC_GetMultiDMATransfer>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8003db0:	2301      	movs	r3, #1
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	e008      	b.n	8003dc8 <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d10e      	bne.n	8003dec <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	f043 0202 	orr.w	r2, r3, #2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f836 	bl	8003e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2210      	movs	r2, #16
 8003df2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d018      	beq.n	8003e30 <HAL_ADC_IRQHandler+0x4a0>
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	f043 0208 	orr.w	r2, r3, #8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fdfe 	bl	8004a2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003e30:	bf00      	nop
 8003e32:	3728      	adds	r7, #40	; 0x28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	50000100 	.word	0x50000100
 8003e3c:	50000300 	.word	0x50000300
 8003e40:	50000700 	.word	0x50000700

08003e44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b0b6      	sub	sp, #216	; 0xd8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d102      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x24>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	f000 bc13 	b.w	80046b6 <HAL_ADC_ConfigChannel+0x84a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f941 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 83f3 	bne.w	8004690 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f7fe ffd9 	bl	8002e6e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff f92f 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003ec6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff f93b 	bl	800314a <LL_ADC_INJ_IsConversionOngoing>
 8003ed4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ed8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f040 81d9 	bne.w	8004294 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 81d4 	bne.w	8004294 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef4:	d10f      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7fe fff3 	bl	8002eec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe ff87 	bl	8002e22 <LL_ADC_SetSamplingTimeCommonConfig>
 8003f14:	e00e      	b.n	8003f34 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f7fe ffe2 	bl	8002eec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe ff77 	bl	8002e22 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	08db      	lsrs	r3, r3, #3
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d022      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6919      	ldr	r1, [r3, #16]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f66:	f7fe fed1 	bl	8002d0c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6919      	ldr	r1, [r3, #16]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f7fe ff1d 	bl	8002db6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6919      	ldr	r1, [r3, #16]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	7f1b      	ldrb	r3, [r3, #28]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x126>
 8003f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f90:	e000      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x128>
 8003f92:	2300      	movs	r3, #0
 8003f94:	461a      	mov	r2, r3
 8003f96:	f7fe ff29 	bl	8002dec <LL_ADC_SetOffsetSaturation>
 8003f9a:	e17b      	b.n	8004294 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fed6 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x15c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fecb 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	f003 021f 	and.w	r2, r3, #31
 8003fc6:	e01e      	b.n	8004006 <HAL_ADC_ConfigChannel+0x19a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fec0 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	e004      	b.n	8004004 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <HAL_ADC_ConfigChannel+0x1b2>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0e9b      	lsrs	r3, r3, #26
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	e018      	b.n	8004050 <HAL_ADC_ConfigChannel+0x1e4>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800403a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004042:	2320      	movs	r3, #32
 8004044:	e004      	b.n	8004050 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004050:	429a      	cmp	r2, r3
 8004052:	d106      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2200      	movs	r2, #0
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe fe8f 	bl	8002d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe fe73 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 800406e:	4603      	mov	r3, r0
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <HAL_ADC_ConfigChannel+0x222>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fe68 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 8004084:	4603      	mov	r3, r0
 8004086:	0e9b      	lsrs	r3, r3, #26
 8004088:	f003 021f 	and.w	r2, r3, #31
 800408c:	e01e      	b.n	80040cc <HAL_ADC_ConfigChannel+0x260>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f7fe fe5d 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 800409a:	4603      	mov	r3, r0
 800409c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80040ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80040b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	e004      	b.n	80040ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80040c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x278>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	e018      	b.n	8004116 <HAL_ADC_ConfigChannel+0x2aa>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80040f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004108:	2320      	movs	r3, #32
 800410a:	e004      	b.n	8004116 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800410c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004116:	429a      	cmp	r2, r3
 8004118:	d106      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	2101      	movs	r1, #1
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fe2c 	bl	8002d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fe10 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 8004134:	4603      	mov	r3, r0
 8004136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x2e8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fe05 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 800414a:	4603      	mov	r3, r0
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	f003 021f 	and.w	r2, r3, #31
 8004152:	e01e      	b.n	8004192 <HAL_ADC_ConfigChannel+0x326>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2102      	movs	r1, #2
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fdfa 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 8004160:	4603      	mov	r3, r0
 8004162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800417a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004182:	2320      	movs	r3, #32
 8004184:	e004      	b.n	8004190 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x33e>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	0e9b      	lsrs	r3, r3, #26
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	e016      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x36c>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80041bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80041c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80041ca:	2320      	movs	r3, #32
 80041cc:	e004      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80041ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041d8:	429a      	cmp	r2, r3
 80041da:	d106      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2102      	movs	r1, #2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fdcb 	bl	8002d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2103      	movs	r1, #3
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe fdaf 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x3aa>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2103      	movs	r1, #3
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fda4 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 800420c:	4603      	mov	r3, r0
 800420e:	0e9b      	lsrs	r3, r3, #26
 8004210:	f003 021f 	and.w	r2, r3, #31
 8004214:	e017      	b.n	8004246 <HAL_ADC_ConfigChannel+0x3da>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2103      	movs	r1, #3
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe fd99 	bl	8002d54 <LL_ADC_GetOffsetChannel>
 8004222:	4603      	mov	r3, r0
 8004224:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800422e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004230:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004238:	2320      	movs	r3, #32
 800423a:	e003      	b.n	8004244 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800423c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <HAL_ADC_ConfigChannel+0x3f2>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0e9b      	lsrs	r3, r3, #26
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	e011      	b.n	8004282 <HAL_ADC_ConfigChannel+0x416>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800426c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800426e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004276:	2320      	movs	r3, #32
 8004278:	e003      	b.n	8004282 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004282:	429a      	cmp	r2, r3
 8004284:	d106      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	2103      	movs	r1, #3
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fd76 	bl	8002d80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe ff09 	bl	80030b0 <LL_ADC_IsEnabled>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 813d 	bne.w	8004520 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f7fe fe46 	bl	8002f44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4aa2      	ldr	r2, [pc, #648]	; (8004548 <HAL_ADC_ConfigChannel+0x6dc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	f040 812e 	bne.w	8004520 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x480>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	0e9b      	lsrs	r3, r3, #26
 80042da:	3301      	adds	r3, #1
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	2b09      	cmp	r3, #9
 80042e2:	bf94      	ite	ls
 80042e4:	2301      	movls	r3, #1
 80042e6:	2300      	movhi	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e019      	b.n	8004320 <HAL_ADC_ConfigChannel+0x4b4>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80042fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80042fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004304:	2320      	movs	r3, #32
 8004306:	e003      	b.n	8004310 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	3301      	adds	r3, #1
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2b09      	cmp	r3, #9
 8004318:	bf94      	ite	ls
 800431a:	2301      	movls	r3, #1
 800431c:	2300      	movhi	r3, #0
 800431e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004320:	2b00      	cmp	r3, #0
 8004322:	d079      	beq.n	8004418 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432c:	2b00      	cmp	r3, #0
 800432e:	d107      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x4d4>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0e9b      	lsrs	r3, r3, #26
 8004336:	3301      	adds	r3, #1
 8004338:	069b      	lsls	r3, r3, #26
 800433a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800433e:	e015      	b.n	800436c <HAL_ADC_ConfigChannel+0x500>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004348:	fa93 f3a3 	rbit	r3, r3
 800434c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004350:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004358:	2320      	movs	r3, #32
 800435a:	e003      	b.n	8004364 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800435c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435e:	fab3 f383 	clz	r3, r3
 8004362:	b2db      	uxtb	r3, r3
 8004364:	3301      	adds	r3, #1
 8004366:	069b      	lsls	r3, r3, #26
 8004368:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_ADC_ConfigChannel+0x520>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0e9b      	lsrs	r3, r3, #26
 800437e:	3301      	adds	r3, #1
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2101      	movs	r1, #1
 8004386:	fa01 f303 	lsl.w	r3, r1, r3
 800438a:	e017      	b.n	80043bc <HAL_ADC_ConfigChannel+0x550>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004394:	fa93 f3a3 	rbit	r3, r3
 8004398:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800439a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800439e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80043a4:	2320      	movs	r3, #32
 80043a6:	e003      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80043a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	2101      	movs	r1, #1
 80043b8:	fa01 f303 	lsl.w	r3, r1, r3
 80043bc:	ea42 0103 	orr.w	r1, r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x576>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	3301      	adds	r3, #1
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	4613      	mov	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4413      	add	r3, r2
 80043de:	051b      	lsls	r3, r3, #20
 80043e0:	e018      	b.n	8004414 <HAL_ADC_ConfigChannel+0x5a8>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80043f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80043f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80043fa:	2320      	movs	r3, #32
 80043fc:	e003      	b.n	8004406 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80043fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004400:	fab3 f383 	clz	r3, r3
 8004404:	b2db      	uxtb	r3, r3
 8004406:	3301      	adds	r3, #1
 8004408:	f003 021f 	and.w	r2, r3, #31
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004414:	430b      	orrs	r3, r1
 8004416:	e07e      	b.n	8004516 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004420:	2b00      	cmp	r3, #0
 8004422:	d107      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x5c8>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0e9b      	lsrs	r3, r3, #26
 800442a:	3301      	adds	r3, #1
 800442c:	069b      	lsls	r3, r3, #26
 800442e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004432:	e015      	b.n	8004460 <HAL_ADC_ConfigChannel+0x5f4>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800444c:	2320      	movs	r3, #32
 800444e:	e003      	b.n	8004458 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	fab3 f383 	clz	r3, r3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	3301      	adds	r3, #1
 800445a:	069b      	lsls	r3, r3, #26
 800445c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x614>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	0e9b      	lsrs	r3, r3, #26
 8004472:	3301      	adds	r3, #1
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	2101      	movs	r1, #1
 800447a:	fa01 f303 	lsl.w	r3, r1, r3
 800447e:	e017      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x644>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	fa93 f3a3 	rbit	r3, r3
 800448c:	61fb      	str	r3, [r7, #28]
  return result;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004498:	2320      	movs	r3, #32
 800449a:	e003      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	fab3 f383 	clz	r3, r3
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	3301      	adds	r3, #1
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	2101      	movs	r1, #1
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	ea42 0103 	orr.w	r1, r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10d      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x670>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	0e9b      	lsrs	r3, r3, #26
 80044c6:	3301      	adds	r3, #1
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	3b1e      	subs	r3, #30
 80044d4:	051b      	lsls	r3, r3, #20
 80044d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044da:	e01b      	b.n	8004514 <HAL_ADC_ConfigChannel+0x6a8>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	613b      	str	r3, [r7, #16]
  return result;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80044f4:	2320      	movs	r3, #32
 80044f6:	e003      	b.n	8004500 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	f003 021f 	and.w	r2, r3, #31
 8004506:	4613      	mov	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	3b1e      	subs	r3, #30
 800450e:	051b      	lsls	r3, r3, #20
 8004510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004514:	430b      	orrs	r3, r1
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	6892      	ldr	r2, [r2, #8]
 800451a:	4619      	mov	r1, r3
 800451c:	f7fe fce6 	bl	8002eec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_ADC_ConfigChannel+0x6e0>)
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80be 	beq.w	80046aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004536:	d004      	beq.n	8004542 <HAL_ADC_ConfigChannel+0x6d6>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <HAL_ADC_ConfigChannel+0x6e4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d10a      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x6ec>
 8004542:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_ADC_ConfigChannel+0x6e8>)
 8004544:	e009      	b.n	800455a <HAL_ADC_ConfigChannel+0x6ee>
 8004546:	bf00      	nop
 8004548:	407f0000 	.word	0x407f0000
 800454c:	80080000 	.word	0x80080000
 8004550:	50000100 	.word	0x50000100
 8004554:	50000300 	.word	0x50000300
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_ADC_ConfigChannel+0x854>)
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fbc8 	bl	8002cf0 <LL_ADC_GetCommonPathInternalCh>
 8004560:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a56      	ldr	r2, [pc, #344]	; (80046c4 <HAL_ADC_ConfigChannel+0x858>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_ADC_ConfigChannel+0x70c>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a55      	ldr	r2, [pc, #340]	; (80046c8 <HAL_ADC_ConfigChannel+0x85c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d13a      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800457c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d134      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800458c:	d005      	beq.n	800459a <HAL_ADC_ConfigChannel+0x72e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a4e      	ldr	r2, [pc, #312]	; (80046cc <HAL_ADC_ConfigChannel+0x860>)
 8004594:	4293      	cmp	r3, r2
 8004596:	f040 8085 	bne.w	80046a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a2:	d004      	beq.n	80045ae <HAL_ADC_ConfigChannel+0x742>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a49      	ldr	r2, [pc, #292]	; (80046d0 <HAL_ADC_ConfigChannel+0x864>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x746>
 80045ae:	4a49      	ldr	r2, [pc, #292]	; (80046d4 <HAL_ADC_ConfigChannel+0x868>)
 80045b0:	e000      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x748>
 80045b2:	4a43      	ldr	r2, [pc, #268]	; (80046c0 <HAL_ADC_ConfigChannel+0x854>)
 80045b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7fe fb83 	bl	8002cca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045c4:	4b44      	ldr	r3, [pc, #272]	; (80046d8 <HAL_ADC_ConfigChannel+0x86c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	4a44      	ldr	r2, [pc, #272]	; (80046dc <HAL_ADC_ConfigChannel+0x870>)
 80045cc:	fba2 2303 	umull	r2, r3, r2, r3
 80045d0:	099b      	lsrs	r3, r3, #6
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045de:	e002      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f9      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045ec:	e05a      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3b      	ldr	r2, [pc, #236]	; (80046e0 <HAL_ADC_ConfigChannel+0x874>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d125      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x7d8>
 80045f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d11f      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a31      	ldr	r2, [pc, #196]	; (80046d0 <HAL_ADC_ConfigChannel+0x864>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d104      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x7ac>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a34      	ldr	r2, [pc, #208]	; (80046e4 <HAL_ADC_ConfigChannel+0x878>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d047      	beq.n	80046a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004620:	d004      	beq.n	800462c <HAL_ADC_ConfigChannel+0x7c0>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <HAL_ADC_ConfigChannel+0x864>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x7c4>
 800462c:	4a29      	ldr	r2, [pc, #164]	; (80046d4 <HAL_ADC_ConfigChannel+0x868>)
 800462e:	e000      	b.n	8004632 <HAL_ADC_ConfigChannel+0x7c6>
 8004630:	4a23      	ldr	r2, [pc, #140]	; (80046c0 <HAL_ADC_ConfigChannel+0x854>)
 8004632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7fe fb44 	bl	8002cca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004642:	e031      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a27      	ldr	r2, [pc, #156]	; (80046e8 <HAL_ADC_ConfigChannel+0x87c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d12d      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800464e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d127      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <HAL_ADC_ConfigChannel+0x864>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800466c:	d004      	beq.n	8004678 <HAL_ADC_ConfigChannel+0x80c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_ADC_ConfigChannel+0x864>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_ADC_ConfigChannel+0x810>
 8004678:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <HAL_ADC_ConfigChannel+0x868>)
 800467a:	e000      	b.n	800467e <HAL_ADC_ConfigChannel+0x812>
 800467c:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <HAL_ADC_ConfigChannel+0x854>)
 800467e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7fe fb1e 	bl	8002cca <LL_ADC_SetCommonPathInternalCh>
 800468e:	e00c      	b.n	80046aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80046a2:	e002      	b.n	80046aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80046b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	37d8      	adds	r7, #216	; 0xd8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	50000700 	.word	0x50000700
 80046c4:	c3210000 	.word	0xc3210000
 80046c8:	90c00010 	.word	0x90c00010
 80046cc:	50000600 	.word	0x50000600
 80046d0:	50000100 	.word	0x50000100
 80046d4:	50000300 	.word	0x50000300
 80046d8:	20000000 	.word	0x20000000
 80046dc:	053e2d63 	.word	0x053e2d63
 80046e0:	c7520000 	.word	0xc7520000
 80046e4:	50000500 	.word	0x50000500
 80046e8:	cb840000 	.word	0xcb840000

080046ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fcd9 	bl	80030b0 <LL_ADC_IsEnabled>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d14d      	bne.n	80047a0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	4b28      	ldr	r3, [pc, #160]	; (80047ac <ADC_Enable+0xc0>)
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	f043 0210 	orr.w	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	f043 0201 	orr.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e039      	b.n	80047a2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fc94 	bl	8003060 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004738:	f7fe fa86 	bl	8002c48 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800473e:	e028      	b.n	8004792 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fcb3 	bl	80030b0 <LL_ADC_IsEnabled>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fc83 	bl	8003060 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800475a:	f7fe fa75 	bl	8002c48 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d914      	bls.n	8004792 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d00d      	beq.n	8004792 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	f043 0210 	orr.w	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004786:	f043 0201 	orr.w	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e007      	b.n	80047a2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	d1cf      	bne.n	8004740 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	8000003f 	.word	0x8000003f

080047b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fc8a 	bl	80030d6 <LL_ADC_IsDisableOngoing>
 80047c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fe fc71 	bl	80030b0 <LL_ADC_IsEnabled>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d047      	beq.n	8004864 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d144      	bne.n	8004864 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030d 	and.w	r3, r3, #13
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10c      	bne.n	8004802 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe fc4b 	bl	8003088 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2203      	movs	r2, #3
 80047f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047fa:	f7fe fa25 	bl	8002c48 <HAL_GetTick>
 80047fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004800:	e029      	b.n	8004856 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004806:	f043 0210 	orr.w	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004812:	f043 0201 	orr.w	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e023      	b.n	8004866 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800481e:	f7fe fa13 	bl	8002c48 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d914      	bls.n	8004856 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00d      	beq.n	8004856 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	f043 0210 	orr.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e007      	b.n	8004866 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1dc      	bne.n	800481e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <LL_ADC_IsEnabled>:
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <LL_ADC_IsEnabled+0x18>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <LL_ADC_IsEnabled+0x1a>
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_ADC_StartCalibration>:
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80048a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <LL_ADC_IsCalibrationOnGoing>:
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048da:	d101      	bne.n	80048e0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <LL_ADC_REG_IsConversionOngoing>:
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d101      	bne.n	8004906 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_ADCEx_Calibration_Start+0x1c>
 800492c:	2302      	movs	r3, #2
 800492e:	e04d      	b.n	80049cc <HAL_ADCEx_Calibration_Start+0xb8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff39 	bl	80047b0 <ADC_Disable>
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d136      	bne.n	80049b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004950:	f023 0302 	bic.w	r3, r3, #2
 8004954:	f043 0202 	orr.w	r2, r3, #2
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff ff96 	bl	8004894 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004968:	e014      	b.n	8004994 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	3301      	adds	r3, #1
 800496e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d90d      	bls.n	8004994 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	f023 0312 	bic.w	r3, r3, #18
 8004980:	f043 0210 	orr.w	r2, r3, #16
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e01b      	b.n	80049cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff ff94 	bl	80048c6 <LL_ADC_IsCalibrationOnGoing>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e2      	bne.n	800496a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a8:	f023 0303 	bic.w	r3, r3, #3
 80049ac:	f043 0201 	orr.w	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80049b4:	e005      	b.n	80049c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	0004de01 	.word	0x0004de01

080049d8 <HAL_ADCEx_MultiModeGetValue>:
  * @brief  Return the last ADC Master and Slave regular conversions results when in multimode configuration.
  * @param hadc ADC handle of ADC Master (handle of ADC Slave must not be used)
  * @retval The converted data values.
  */
uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef *hadc)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning if no assert_param check */
  /* and possible no usage in __LL_ADC_COMMON_INSTANCE() below               */
  UNUSED(hadc);

  /* Pointer to the common control register  */
  tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049e8:	d004      	beq.n	80049f4 <HAL_ADCEx_MultiModeGetValue+0x1c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a07      	ldr	r2, [pc, #28]	; (8004a0c <HAL_ADCEx_MultiModeGetValue+0x34>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d101      	bne.n	80049f8 <HAL_ADCEx_MultiModeGetValue+0x20>
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_ADCEx_MultiModeGetValue+0x38>)
 80049f6:	e000      	b.n	80049fa <HAL_ADCEx_MultiModeGetValue+0x22>
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_ADCEx_MultiModeGetValue+0x3c>)
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Return the multi mode conversion value */
  return tmpADC_Common->CDR;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68db      	ldr	r3, [r3, #12]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	50000100 	.word	0x50000100
 8004a10:	50000300 	.word	0x50000300
 8004a14:	50000700 	.word	0x50000700

08004a18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b0a1      	sub	sp, #132	; 0x84
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e0e7      	b.n	8004c6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ab2:	d102      	bne.n	8004aba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ab4:	4b6f      	ldr	r3, [pc, #444]	; (8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	e009      	b.n	8004ace <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a6e      	ldr	r2, [pc, #440]	; (8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d102      	bne.n	8004aca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004ac4:	4b6d      	ldr	r3, [pc, #436]	; (8004c7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	e001      	b.n	8004ace <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0be      	b.n	8004c6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fefd 	bl	80048ee <LL_ADC_REG_IsConversionOngoing>
 8004af4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fef7 	bl	80048ee <LL_ADC_REG_IsConversionOngoing>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f040 80a0 	bne.w	8004c48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f040 809c 	bne.w	8004c48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b18:	d004      	beq.n	8004b24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a55      	ldr	r2, [pc, #340]	; (8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004b24:	4b56      	ldr	r3, [pc, #344]	; (8004c80 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004b26:	e000      	b.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004b28:	4b56      	ldr	r3, [pc, #344]	; (8004c84 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004b2a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d04b      	beq.n	8004bcc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	6859      	ldr	r1, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b46:	035b      	lsls	r3, r3, #13
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b58:	d004      	beq.n	8004b64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a45      	ldr	r2, [pc, #276]	; (8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d10f      	bne.n	8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004b64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004b68:	f7ff fe81 	bl	800486e <LL_ADC_IsEnabled>
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	4841      	ldr	r0, [pc, #260]	; (8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b70:	f7ff fe7d 	bl	800486e <LL_ADC_IsEnabled>
 8004b74:	4603      	mov	r3, r0
 8004b76:	4323      	orrs	r3, r4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e012      	b.n	8004baa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004b84:	483c      	ldr	r0, [pc, #240]	; (8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b86:	f7ff fe72 	bl	800486e <LL_ADC_IsEnabled>
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	483b      	ldr	r0, [pc, #236]	; (8004c7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b8e:	f7ff fe6e 	bl	800486e <LL_ADC_IsEnabled>
 8004b92:	4603      	mov	r3, r0
 8004b94:	431c      	orrs	r4, r3
 8004b96:	483c      	ldr	r0, [pc, #240]	; (8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b98:	f7ff fe69 	bl	800486e <LL_ADC_IsEnabled>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4323      	orrs	r3, r4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d056      	beq.n	8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004bb6:	f023 030f 	bic.w	r3, r3, #15
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	6811      	ldr	r1, [r2, #0]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	6892      	ldr	r2, [r2, #8]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bca:	e047      	b.n	8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004be0:	d004      	beq.n	8004bec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d10f      	bne.n	8004c0c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004bec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004bf0:	f7ff fe3d 	bl	800486e <LL_ADC_IsEnabled>
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	481f      	ldr	r0, [pc, #124]	; (8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bf8:	f7ff fe39 	bl	800486e <LL_ADC_IsEnabled>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4323      	orrs	r3, r4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e012      	b.n	8004c32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004c0c:	481a      	ldr	r0, [pc, #104]	; (8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c0e:	f7ff fe2e 	bl	800486e <LL_ADC_IsEnabled>
 8004c12:	4604      	mov	r4, r0
 8004c14:	4819      	ldr	r0, [pc, #100]	; (8004c7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c16:	f7ff fe2a 	bl	800486e <LL_ADC_IsEnabled>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	431c      	orrs	r4, r3
 8004c1e:	481a      	ldr	r0, [pc, #104]	; (8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c20:	f7ff fe25 	bl	800486e <LL_ADC_IsEnabled>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4323      	orrs	r3, r4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d012      	beq.n	8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c3e:	f023 030f 	bic.w	r3, r3, #15
 8004c42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c44:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c46:	e009      	b.n	8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	f043 0220 	orr.w	r2, r3, #32
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004c5a:	e000      	b.n	8004c5e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3784      	adds	r7, #132	; 0x84
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd90      	pop	{r4, r7, pc}
 8004c72:	bf00      	nop
 8004c74:	50000100 	.word	0x50000100
 8004c78:	50000400 	.word	0x50000400
 8004c7c:	50000500 	.word	0x50000500
 8004c80:	50000300 	.word	0x50000300
 8004c84:	50000700 	.word	0x50000700
 8004c88:	50000600 	.word	0x50000600

08004c8c <__NVIC_SetPriorityGrouping>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cbe:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	60d3      	str	r3, [r2, #12]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	e000ed00 	.word	0xe000ed00

08004cd4 <__NVIC_GetPriorityGrouping>:
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <__NVIC_GetPriorityGrouping+0x18>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	f003 0307 	and.w	r3, r3, #7
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	e000ed00 	.word	0xe000ed00

08004cf0 <__NVIC_EnableIRQ>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	db0b      	blt.n	8004d1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	f003 021f 	and.w	r2, r3, #31
 8004d08:	4907      	ldr	r1, [pc, #28]	; (8004d28 <__NVIC_EnableIRQ+0x38>)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2001      	movs	r0, #1
 8004d12:	fa00 f202 	lsl.w	r2, r0, r2
 8004d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	e000e100 	.word	0xe000e100

08004d2c <__NVIC_SetPriority>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	6039      	str	r1, [r7, #0]
 8004d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	db0a      	blt.n	8004d56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	490c      	ldr	r1, [pc, #48]	; (8004d78 <__NVIC_SetPriority+0x4c>)
 8004d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4a:	0112      	lsls	r2, r2, #4
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	440b      	add	r3, r1
 8004d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d54:	e00a      	b.n	8004d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	4908      	ldr	r1, [pc, #32]	; (8004d7c <__NVIC_SetPriority+0x50>)
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	3b04      	subs	r3, #4
 8004d64:	0112      	lsls	r2, r2, #4
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	440b      	add	r3, r1
 8004d6a:	761a      	strb	r2, [r3, #24]
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000e100 	.word	0xe000e100
 8004d7c:	e000ed00 	.word	0xe000ed00

08004d80 <NVIC_EncodePriority>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	b089      	sub	sp, #36	; 0x24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f1c3 0307 	rsb	r3, r3, #7
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	bf28      	it	cs
 8004d9e:	2304      	movcs	r3, #4
 8004da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3304      	adds	r3, #4
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d902      	bls.n	8004db0 <NVIC_EncodePriority+0x30>
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3b03      	subs	r3, #3
 8004dae:	e000      	b.n	8004db2 <NVIC_EncodePriority+0x32>
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43da      	mvns	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd2:	43d9      	mvns	r1, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd8:	4313      	orrs	r3, r2
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3724      	adds	r7, #36	; 0x24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <SysTick_Config>:
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df8:	d301      	bcc.n	8004dfe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e00f      	b.n	8004e1e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <SysTick_Config+0x40>)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e06:	210f      	movs	r1, #15
 8004e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e0c:	f7ff ff8e 	bl	8004d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <SysTick_Config+0x40>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e16:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <SysTick_Config+0x40>)
 8004e18:	2207      	movs	r2, #7
 8004e1a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	e000e010 	.word	0xe000e010

08004e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff29 	bl	8004c8c <__NVIC_SetPriorityGrouping>
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	4603      	mov	r3, r0
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
 8004e4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e50:	f7ff ff40 	bl	8004cd4 <__NVIC_GetPriorityGrouping>
 8004e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	6978      	ldr	r0, [r7, #20]
 8004e5c:	f7ff ff90 	bl	8004d80 <NVIC_EncodePriority>
 8004e60:	4602      	mov	r2, r0
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e66:	4611      	mov	r1, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff ff5f 	bl	8004d2c <__NVIC_SetPriority>
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff33 	bl	8004cf0 <__NVIC_EnableIRQ>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff ffa4 	bl	8004de8 <SysTick_Config>
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004eba:	e15a      	b.n	8005172 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	4013      	ands	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 814c 	beq.w	800516c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d00b      	beq.n	8004ef4 <HAL_GPIO_Init+0x48>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d007      	beq.n	8004ef4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ee8:	2b11      	cmp	r3, #17
 8004eea:	d003      	beq.n	8004ef4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b12      	cmp	r3, #18
 8004ef2:	d130      	bne.n	8004f56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	2203      	movs	r2, #3
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43db      	mvns	r3, r3
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4013      	ands	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	091b      	lsrs	r3, r3, #4
 8004f40:	f003 0201 	and.w	r2, r3, #1
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	2203      	movs	r2, #3
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_Init+0xea>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b12      	cmp	r3, #18
 8004f94:	d123      	bne.n	8004fde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	08da      	lsrs	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3208      	adds	r2, #8
 8004f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	220f      	movs	r2, #15
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	08da      	lsrs	r2, r3, #3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3208      	adds	r2, #8
 8004fd8:	6939      	ldr	r1, [r7, #16]
 8004fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	2203      	movs	r2, #3
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0203 	and.w	r2, r3, #3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80a6 	beq.w	800516c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005020:	4b5b      	ldr	r3, [pc, #364]	; (8005190 <HAL_GPIO_Init+0x2e4>)
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	4a5a      	ldr	r2, [pc, #360]	; (8005190 <HAL_GPIO_Init+0x2e4>)
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	6613      	str	r3, [r2, #96]	; 0x60
 800502c:	4b58      	ldr	r3, [pc, #352]	; (8005190 <HAL_GPIO_Init+0x2e4>)
 800502e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005038:	4a56      	ldr	r2, [pc, #344]	; (8005194 <HAL_GPIO_Init+0x2e8>)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	089b      	lsrs	r3, r3, #2
 800503e:	3302      	adds	r3, #2
 8005040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	220f      	movs	r2, #15
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005062:	d01f      	beq.n	80050a4 <HAL_GPIO_Init+0x1f8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a4c      	ldr	r2, [pc, #304]	; (8005198 <HAL_GPIO_Init+0x2ec>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d019      	beq.n	80050a0 <HAL_GPIO_Init+0x1f4>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a4b      	ldr	r2, [pc, #300]	; (800519c <HAL_GPIO_Init+0x2f0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_GPIO_Init+0x1f0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a4a      	ldr	r2, [pc, #296]	; (80051a0 <HAL_GPIO_Init+0x2f4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00d      	beq.n	8005098 <HAL_GPIO_Init+0x1ec>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a49      	ldr	r2, [pc, #292]	; (80051a4 <HAL_GPIO_Init+0x2f8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d007      	beq.n	8005094 <HAL_GPIO_Init+0x1e8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a48      	ldr	r2, [pc, #288]	; (80051a8 <HAL_GPIO_Init+0x2fc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d101      	bne.n	8005090 <HAL_GPIO_Init+0x1e4>
 800508c:	2305      	movs	r3, #5
 800508e:	e00a      	b.n	80050a6 <HAL_GPIO_Init+0x1fa>
 8005090:	2306      	movs	r3, #6
 8005092:	e008      	b.n	80050a6 <HAL_GPIO_Init+0x1fa>
 8005094:	2304      	movs	r3, #4
 8005096:	e006      	b.n	80050a6 <HAL_GPIO_Init+0x1fa>
 8005098:	2303      	movs	r3, #3
 800509a:	e004      	b.n	80050a6 <HAL_GPIO_Init+0x1fa>
 800509c:	2302      	movs	r3, #2
 800509e:	e002      	b.n	80050a6 <HAL_GPIO_Init+0x1fa>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_GPIO_Init+0x1fa>
 80050a4:	2300      	movs	r3, #0
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	f002 0203 	and.w	r2, r2, #3
 80050ac:	0092      	lsls	r2, r2, #2
 80050ae:	4093      	lsls	r3, r2
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050b6:	4937      	ldr	r1, [pc, #220]	; (8005194 <HAL_GPIO_Init+0x2e8>)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	3302      	adds	r3, #2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050c4:	4b39      	ldr	r3, [pc, #228]	; (80051ac <HAL_GPIO_Init+0x300>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4013      	ands	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050e8:	4a30      	ldr	r2, [pc, #192]	; (80051ac <HAL_GPIO_Init+0x300>)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80050ee:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <HAL_GPIO_Init+0x300>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	43db      	mvns	r3, r3
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4013      	ands	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005112:	4a26      	ldr	r2, [pc, #152]	; (80051ac <HAL_GPIO_Init+0x300>)
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005118:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_GPIO_Init+0x300>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	43db      	mvns	r3, r3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4013      	ands	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800513c:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <HAL_GPIO_Init+0x300>)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005142:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <HAL_GPIO_Init+0x300>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	43db      	mvns	r3, r3
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005166:	4a11      	ldr	r2, [pc, #68]	; (80051ac <HAL_GPIO_Init+0x300>)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3301      	adds	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	f47f ae9d 	bne.w	8004ebc <HAL_GPIO_Init+0x10>
  }
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	40021000 	.word	0x40021000
 8005194:	40010000 	.word	0x40010000
 8005198:	48000400 	.word	0x48000400
 800519c:	48000800 	.word	0x48000800
 80051a0:	48000c00 	.word	0x48000c00
 80051a4:	48001000 	.word	0x48001000
 80051a8:	48001400 	.word	0x48001400
 80051ac:	40010400 	.word	0x40010400

080051b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	807b      	strh	r3, [r7, #2]
 80051bc:	4613      	mov	r3, r2
 80051be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051c0:	787b      	ldrb	r3, [r7, #1]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051c6:	887a      	ldrh	r2, [r7, #2]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051cc:	e002      	b.n	80051d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051ce:	887a      	ldrh	r2, [r7, #2]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051ea:	4b08      	ldr	r3, [pc, #32]	; (800520c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051f6:	4a05      	ldr	r2, [pc, #20]	; (800520c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fc f93a 	bl	8001478 <HAL_GPIO_EXTI_Callback>
  }
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40010400 	.word	0x40010400

08005210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e081      	b.n	8005326 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fc f96c 	bl	8001514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2224      	movs	r2, #36	; 0x24
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0201 	bic.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d107      	bne.n	800528a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	e006      	b.n	8005298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d104      	bne.n	80052aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	ea42 0103 	orr.w	r1, r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	021a      	lsls	r2, r3, #8
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69d9      	ldr	r1, [r3, #28]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	461a      	mov	r2, r3
 800533c:	460b      	mov	r3, r1
 800533e:	817b      	strh	r3, [r7, #10]
 8005340:	4613      	mov	r3, r2
 8005342:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b20      	cmp	r3, #32
 800534e:	f040 80da 	bne.w	8005506 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_I2C_Master_Transmit+0x30>
 800535c:	2302      	movs	r3, #2
 800535e:	e0d3      	b.n	8005508 <HAL_I2C_Master_Transmit+0x1d8>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005368:	f7fd fc6e 	bl	8002c48 <HAL_GetTick>
 800536c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	2319      	movs	r3, #25
 8005374:	2201      	movs	r2, #1
 8005376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f9f7 	bl	800576e <I2C_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0be      	b.n	8005508 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2221      	movs	r2, #33	; 0x21
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2210      	movs	r2, #16
 8005396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	893a      	ldrh	r2, [r7, #8]
 80053aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2bff      	cmp	r3, #255	; 0xff
 80053ba:	d90e      	bls.n	80053da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	22ff      	movs	r2, #255	; 0xff
 80053c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	8979      	ldrh	r1, [r7, #10]
 80053ca:	4b51      	ldr	r3, [pc, #324]	; (8005510 <HAL_I2C_Master_Transmit+0x1e0>)
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 faee 	bl	80059b4 <I2C_TransferConfig>
 80053d8:	e06c      	b.n	80054b4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	8979      	ldrh	r1, [r7, #10]
 80053ec:	4b48      	ldr	r3, [pc, #288]	; (8005510 <HAL_I2C_Master_Transmit+0x1e0>)
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fadd 	bl	80059b4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80053fa:	e05b      	b.n	80054b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	6a39      	ldr	r1, [r7, #32]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f9f4 	bl	80057ee <I2C_WaitOnTXISFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e07b      	b.n	8005508 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d034      	beq.n	80054b4 <HAL_I2C_Master_Transmit+0x184>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544e:	2b00      	cmp	r3, #0
 8005450:	d130      	bne.n	80054b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2200      	movs	r2, #0
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f986 	bl	800576e <I2C_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e04d      	b.n	8005508 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	2bff      	cmp	r3, #255	; 0xff
 8005474:	d90e      	bls.n	8005494 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	22ff      	movs	r2, #255	; 0xff
 800547a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005480:	b2da      	uxtb	r2, r3
 8005482:	8979      	ldrh	r1, [r7, #10]
 8005484:	2300      	movs	r3, #0
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fa91 	bl	80059b4 <I2C_TransferConfig>
 8005492:	e00f      	b.n	80054b4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	8979      	ldrh	r1, [r7, #10]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fa80 	bl	80059b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d19e      	bne.n	80053fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	6a39      	ldr	r1, [r7, #32]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f9d3 	bl	800586e <I2C_WaitOnSTOPFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e01a      	b.n	8005508 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2220      	movs	r2, #32
 80054d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6859      	ldr	r1, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_I2C_Master_Transmit+0x1e4>)
 80054e6:	400b      	ands	r3, r1
 80054e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	80002000 	.word	0x80002000
 8005514:	fe00e800 	.word	0xfe00e800

08005518 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	460b      	mov	r3, r1
 8005526:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b20      	cmp	r3, #32
 8005536:	f040 80f1 	bne.w	800571c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005548:	d101      	bne.n	800554e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
 800554c:	e0e7      	b.n	800571e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_I2C_IsDeviceReady+0x44>
 8005558:	2302      	movs	r3, #2
 800555a:	e0e0      	b.n	800571e <HAL_I2C_IsDeviceReady+0x206>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2224      	movs	r2, #36	; 0x24
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d107      	bne.n	800558a <HAL_I2C_IsDeviceReady+0x72>
 800557a:	897b      	ldrh	r3, [r7, #10]
 800557c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005588:	e004      	b.n	8005594 <HAL_I2C_IsDeviceReady+0x7c>
 800558a:	897b      	ldrh	r3, [r7, #10]
 800558c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005590:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800559a:	f7fd fb55 	bl	8002c48 <HAL_GetTick>
 800559e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80055cc:	e034      	b.n	8005638 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d4:	d01a      	beq.n	800560c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fd fb37 	bl	8002c48 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <HAL_I2C_IsDeviceReady+0xd4>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10f      	bne.n	800560c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e088      	b.n	800571e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b20      	cmp	r3, #32
 8005618:	bf0c      	ite	eq
 800561a:	2301      	moveq	r3, #1
 800561c:	2300      	movne	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b10      	cmp	r3, #16
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005638:	7ffb      	ldrb	r3, [r7, #31]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d102      	bne.n	8005644 <HAL_I2C_IsDeviceReady+0x12c>
 800563e:	7fbb      	ldrb	r3, [r7, #30]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0c4      	beq.n	80055ce <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	2b10      	cmp	r3, #16
 8005650:	d01a      	beq.n	8005688 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2200      	movs	r2, #0
 800565a:	2120      	movs	r1, #32
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f886 	bl	800576e <I2C_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e058      	b.n	800571e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2220      	movs	r2, #32
 8005672:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	e04a      	b.n	800571e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	2120      	movs	r1, #32
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f86b 	bl	800576e <I2C_WaitOnFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e03d      	b.n	800571e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2210      	movs	r2, #16
 80056a8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2220      	movs	r2, #32
 80056b0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d118      	bne.n	80056ec <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2200      	movs	r2, #0
 80056d2:	2120      	movs	r1, #32
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f84a 	bl	800576e <I2C_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e01c      	b.n	800571e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2220      	movs	r2, #32
 80056ea:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	3301      	adds	r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	f63f af3b 	bhi.w	8005572 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d103      	bne.n	8005744 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2200      	movs	r2, #0
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d007      	beq.n	8005762 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	619a      	str	r2, [r3, #24]
  }
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	4613      	mov	r3, r2
 800577c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800577e:	e022      	b.n	80057c6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005786:	d01e      	beq.n	80057c6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005788:	f7fd fa5e 	bl	8002c48 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d113      	bne.n	80057c6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e00f      	b.n	80057e6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4013      	ands	r3, r2
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	bf0c      	ite	eq
 80057d6:	2301      	moveq	r3, #1
 80057d8:	2300      	movne	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d0cd      	beq.n	8005780 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057fa:	e02c      	b.n	8005856 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f871 	bl	80058e8 <I2C_IsAcknowledgeFailed>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e02a      	b.n	8005866 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005816:	d01e      	beq.n	8005856 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005818:	f7fd fa16 	bl	8002c48 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d113      	bne.n	8005856 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	f043 0220 	orr.w	r2, r3, #32
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e007      	b.n	8005866 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b02      	cmp	r3, #2
 8005862:	d1cb      	bne.n	80057fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800587a:	e028      	b.n	80058ce <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f831 	bl	80058e8 <I2C_IsAcknowledgeFailed>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e026      	b.n	80058de <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005890:	f7fd f9da 	bl	8002c48 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d113      	bne.n	80058ce <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e007      	b.n	80058de <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d1cf      	bne.n	800587c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d151      	bne.n	80059a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005902:	e022      	b.n	800594a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800590a:	d01e      	beq.n	800594a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590c:	f7fd f99c 	bl	8002c48 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <I2C_IsAcknowledgeFailed+0x3a>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d113      	bne.n	800594a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	f043 0220 	orr.w	r2, r3, #32
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e02e      	b.n	80059a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b20      	cmp	r3, #32
 8005956:	d1d5      	bne.n	8005904 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2210      	movs	r2, #16
 800595e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2220      	movs	r2, #32
 8005966:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff fedc 	bl	8005726 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6859      	ldr	r1, [r3, #4]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800597a:	400b      	ands	r3, r1
 800597c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	f043 0204 	orr.w	r2, r3, #4
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	fe00e800 	.word	0xfe00e800

080059b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	817b      	strh	r3, [r7, #10]
 80059c2:	4613      	mov	r3, r2
 80059c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	0d5b      	lsrs	r3, r3, #21
 80059d0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80059d4:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <I2C_TransferConfig+0x58>)
 80059d6:	430b      	orrs	r3, r1
 80059d8:	43db      	mvns	r3, r3
 80059da:	ea02 0103 	and.w	r1, r2, r3
 80059de:	897b      	ldrh	r3, [r7, #10]
 80059e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059e4:	7a7b      	ldrb	r3, [r7, #9]
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	03ff63ff 	.word	0x03ff63ff

08005a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d138      	bne.n	8005a98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e032      	b.n	8005a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2224      	movs	r2, #36	; 0x24
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0201 	bic.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6819      	ldr	r1, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e000      	b.n	8005a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a98:	2302      	movs	r3, #2
  }
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d139      	bne.n	8005b30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e033      	b.n	8005b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2224      	movs	r2, #36	; 0x24
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005af8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d141      	bne.n	8005bd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b4e:	4b4b      	ldr	r3, [pc, #300]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5a:	d131      	bne.n	8005bc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b5c:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b62:	4a46      	ldr	r2, [pc, #280]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b6c:	4b43      	ldr	r3, [pc, #268]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b74:	4a41      	ldr	r2, [pc, #260]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b7c:	4b40      	ldr	r3, [pc, #256]	; (8005c80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2232      	movs	r2, #50	; 0x32
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	4a3f      	ldr	r2, [pc, #252]	; (8005c84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b88:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8c:	0c9b      	lsrs	r3, r3, #18
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b92:	e002      	b.n	8005b9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b9a:	4b38      	ldr	r3, [pc, #224]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba6:	d102      	bne.n	8005bae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f2      	bne.n	8005b94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bae:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d158      	bne.n	8005c6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e057      	b.n	8005c70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bc0:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc6:	4a2d      	ldr	r2, [pc, #180]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005bd0:	e04d      	b.n	8005c6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd8:	d141      	bne.n	8005c5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bda:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be6:	d131      	bne.n	8005c4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005be8:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bee:	4a23      	ldr	r2, [pc, #140]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bf8:	4b20      	ldr	r3, [pc, #128]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c00:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c08:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2232      	movs	r2, #50	; 0x32
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c14:	fba2 2303 	umull	r2, r3, r2, r3
 8005c18:	0c9b      	lsrs	r3, r3, #18
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c1e:	e002      	b.n	8005c26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c26:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c32:	d102      	bne.n	8005c3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f2      	bne.n	8005c20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c3a:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c46:	d112      	bne.n	8005c6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e011      	b.n	8005c70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c52:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c5c:	e007      	b.n	8005c6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c66:	4a05      	ldr	r2, [pc, #20]	; (8005c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	20000000 	.word	0x20000000
 8005c84:	431bde83 	.word	0x431bde83

08005c88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	4a04      	ldr	r2, [pc, #16]	; (8005ca4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c96:	6093      	str	r3, [r2, #8]
}
 8005c98:	bf00      	nop
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40007000 	.word	0x40007000

08005ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e308      	b.n	80062cc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d075      	beq.n	8005db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc6:	4ba3      	ldr	r3, [pc, #652]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cd0:	4ba0      	ldr	r3, [pc, #640]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b0c      	cmp	r3, #12
 8005cde:	d102      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x3e>
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d002      	beq.n	8005cec <HAL_RCC_OscConfig+0x44>
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d10b      	bne.n	8005d04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cec:	4b99      	ldr	r3, [pc, #612]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05b      	beq.n	8005db0 <HAL_RCC_OscConfig+0x108>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d157      	bne.n	8005db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e2e3      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0c:	d106      	bne.n	8005d1c <HAL_RCC_OscConfig+0x74>
 8005d0e:	4b91      	ldr	r3, [pc, #580]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a90      	ldr	r2, [pc, #576]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	e01d      	b.n	8005d58 <HAL_RCC_OscConfig+0xb0>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d24:	d10c      	bne.n	8005d40 <HAL_RCC_OscConfig+0x98>
 8005d26:	4b8b      	ldr	r3, [pc, #556]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a8a      	ldr	r2, [pc, #552]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	4b88      	ldr	r3, [pc, #544]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a87      	ldr	r2, [pc, #540]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e00b      	b.n	8005d58 <HAL_RCC_OscConfig+0xb0>
 8005d40:	4b84      	ldr	r3, [pc, #528]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a83      	ldr	r2, [pc, #524]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	4b81      	ldr	r3, [pc, #516]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a80      	ldr	r2, [pc, #512]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d013      	beq.n	8005d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fc ff72 	bl	8002c48 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d68:	f7fc ff6e 	bl	8002c48 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b64      	cmp	r3, #100	; 0x64
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e2a8      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d7a:	4b76      	ldr	r3, [pc, #472]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0xc0>
 8005d86:	e014      	b.n	8005db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fc ff5e 	bl	8002c48 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d90:	f7fc ff5a 	bl	8002c48 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b64      	cmp	r3, #100	; 0x64
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e294      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005da2:	4b6c      	ldr	r3, [pc, #432]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0xe8>
 8005dae:	e000      	b.n	8005db2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d075      	beq.n	8005eaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dc8:	4b62      	ldr	r3, [pc, #392]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b0c      	cmp	r3, #12
 8005dd6:	d102      	bne.n	8005dde <HAL_RCC_OscConfig+0x136>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d002      	beq.n	8005de4 <HAL_RCC_OscConfig+0x13c>
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d11f      	bne.n	8005e24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de4:	4b5b      	ldr	r3, [pc, #364]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_RCC_OscConfig+0x154>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e267      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfc:	4b55      	ldr	r3, [pc, #340]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	061b      	lsls	r3, r3, #24
 8005e0a:	4952      	ldr	r1, [pc, #328]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e10:	4b51      	ldr	r3, [pc, #324]	; (8005f58 <HAL_RCC_OscConfig+0x2b0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fc fecb 	bl	8002bb0 <HAL_InitTick>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d043      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e253      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d023      	beq.n	8005e74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e2c:	4b49      	ldr	r3, [pc, #292]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a48      	ldr	r2, [pc, #288]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7fc ff06 	bl	8002c48 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e40:	f7fc ff02 	bl	8002c48 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e23c      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e52:	4b40      	ldr	r3, [pc, #256]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5e:	4b3d      	ldr	r3, [pc, #244]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	061b      	lsls	r3, r3, #24
 8005e6c:	4939      	ldr	r1, [pc, #228]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	604b      	str	r3, [r1, #4]
 8005e72:	e01a      	b.n	8005eaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e74:	4b37      	ldr	r3, [pc, #220]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a36      	ldr	r2, [pc, #216]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fc fee2 	bl	8002c48 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e88:	f7fc fede 	bl	8002c48 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e218      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e9a:	4b2e      	ldr	r3, [pc, #184]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x1e0>
 8005ea6:	e000      	b.n	8005eaa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ea8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d03c      	beq.n	8005f30 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01c      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ebe:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec4:	4a23      	ldr	r2, [pc, #140]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005ec6:	f043 0301 	orr.w	r3, r3, #1
 8005eca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ece:	f7fc febb 	bl	8002c48 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ed6:	f7fc feb7 	bl	8002c48 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e1f1      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ee8:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0ef      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x22e>
 8005ef6:	e01b      	b.n	8005f30 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ef8:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005efe:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f08:	f7fc fe9e 	bl	8002c48 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f10:	f7fc fe9a 	bl	8002c48 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e1d4      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1ef      	bne.n	8005f10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80ab 	beq.w	8006094 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f42:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_RCC_OscConfig+0x2b4>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e005      	b.n	8005f5e <HAL_RCC_OscConfig+0x2b6>
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000
 8005f58:	20000004 	.word	0x20000004
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f62:	4baf      	ldr	r3, [pc, #700]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8005f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f66:	4aae      	ldr	r2, [pc, #696]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f6e:	4bac      	ldr	r3, [pc, #688]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f7e:	4ba9      	ldr	r3, [pc, #676]	; (8006224 <HAL_RCC_OscConfig+0x57c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d118      	bne.n	8005fbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f8a:	4ba6      	ldr	r3, [pc, #664]	; (8006224 <HAL_RCC_OscConfig+0x57c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4aa5      	ldr	r2, [pc, #660]	; (8006224 <HAL_RCC_OscConfig+0x57c>)
 8005f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f96:	f7fc fe57 	bl	8002c48 <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f9e:	f7fc fe53 	bl	8002c48 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e18d      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb0:	4b9c      	ldr	r3, [pc, #624]	; (8006224 <HAL_RCC_OscConfig+0x57c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0f0      	beq.n	8005f9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d108      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x32e>
 8005fc4:	4b96      	ldr	r3, [pc, #600]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fca:	4a95      	ldr	r2, [pc, #596]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fd4:	e024      	b.n	8006020 <HAL_RCC_OscConfig+0x378>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b05      	cmp	r3, #5
 8005fdc:	d110      	bne.n	8006000 <HAL_RCC_OscConfig+0x358>
 8005fde:	4b90      	ldr	r3, [pc, #576]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe4:	4a8e      	ldr	r2, [pc, #568]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8005fe6:	f043 0304 	orr.w	r3, r3, #4
 8005fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fee:	4b8c      	ldr	r3, [pc, #560]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8005ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff4:	4a8a      	ldr	r2, [pc, #552]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ffe:	e00f      	b.n	8006020 <HAL_RCC_OscConfig+0x378>
 8006000:	4b87      	ldr	r3, [pc, #540]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006006:	4a86      	ldr	r2, [pc, #536]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006010:	4b83      	ldr	r3, [pc, #524]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006016:	4a82      	ldr	r2, [pc, #520]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d016      	beq.n	8006056 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006028:	f7fc fe0e 	bl	8002c48 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800602e:	e00a      	b.n	8006046 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006030:	f7fc fe0a 	bl	8002c48 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f241 3288 	movw	r2, #5000	; 0x1388
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e142      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006046:	4b76      	ldr	r3, [pc, #472]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0ed      	beq.n	8006030 <HAL_RCC_OscConfig+0x388>
 8006054:	e015      	b.n	8006082 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006056:	f7fc fdf7 	bl	8002c48 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800605c:	e00a      	b.n	8006074 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605e:	f7fc fdf3 	bl	8002c48 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	f241 3288 	movw	r2, #5000	; 0x1388
 800606c:	4293      	cmp	r3, r2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e12b      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006074:	4b6a      	ldr	r3, [pc, #424]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1ed      	bne.n	800605e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006082:	7ffb      	ldrb	r3, [r7, #31]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d105      	bne.n	8006094 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006088:	4b65      	ldr	r3, [pc, #404]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	4a64      	ldr	r2, [pc, #400]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 800608e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006092:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d03c      	beq.n	800611a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01c      	beq.n	80060e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060a8:	4b5d      	ldr	r3, [pc, #372]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80060aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060ae:	4a5c      	ldr	r2, [pc, #368]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b8:	f7fc fdc6 	bl	8002c48 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060c0:	f7fc fdc2 	bl	8002c48 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e0fc      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060d2:	4b53      	ldr	r3, [pc, #332]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80060d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0ef      	beq.n	80060c0 <HAL_RCC_OscConfig+0x418>
 80060e0:	e01b      	b.n	800611a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060e2:	4b4f      	ldr	r3, [pc, #316]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80060e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060e8:	4a4d      	ldr	r2, [pc, #308]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f2:	f7fc fda9 	bl	8002c48 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060fa:	f7fc fda5 	bl	8002c48 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e0df      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800610c:	4b44      	ldr	r3, [pc, #272]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 800610e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1ef      	bne.n	80060fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 80d3 	beq.w	80062ca <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006124:	4b3e      	ldr	r3, [pc, #248]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 030c 	and.w	r3, r3, #12
 800612c:	2b0c      	cmp	r3, #12
 800612e:	f000 808d 	beq.w	800624c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d15a      	bne.n	80061f0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613a:	4b39      	ldr	r3, [pc, #228]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a38      	ldr	r2, [pc, #224]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006146:	f7fc fd7f 	bl	8002c48 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800614e:	f7fc fd7b 	bl	8002c48 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e0b5      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006160:	4b2f      	ldr	r3, [pc, #188]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f0      	bne.n	800614e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800616c:	4b2c      	ldr	r3, [pc, #176]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	4b2d      	ldr	r3, [pc, #180]	; (8006228 <HAL_RCC_OscConfig+0x580>)
 8006172:	4013      	ands	r3, r2
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6a11      	ldr	r1, [r2, #32]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800617c:	3a01      	subs	r2, #1
 800617e:	0112      	lsls	r2, r2, #4
 8006180:	4311      	orrs	r1, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006186:	0212      	lsls	r2, r2, #8
 8006188:	4311      	orrs	r1, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800618e:	0852      	lsrs	r2, r2, #1
 8006190:	3a01      	subs	r2, #1
 8006192:	0552      	lsls	r2, r2, #21
 8006194:	4311      	orrs	r1, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800619a:	0852      	lsrs	r2, r2, #1
 800619c:	3a01      	subs	r2, #1
 800619e:	0652      	lsls	r2, r2, #25
 80061a0:	4311      	orrs	r1, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061a6:	06d2      	lsls	r2, r2, #27
 80061a8:	430a      	orrs	r2, r1
 80061aa:	491d      	ldr	r1, [pc, #116]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b0:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1a      	ldr	r2, [pc, #104]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80061b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061bc:	4b18      	ldr	r3, [pc, #96]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4a17      	ldr	r2, [pc, #92]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80061c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c8:	f7fc fd3e 	bl	8002c48 <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d0:	f7fc fd3a 	bl	8002c48 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e074      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061e2:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0f0      	beq.n	80061d0 <HAL_RCC_OscConfig+0x528>
 80061ee:	e06c      	b.n	80062ca <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a0a      	ldr	r2, [pc, #40]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80061f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80061fc:	4b08      	ldr	r3, [pc, #32]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	4a07      	ldr	r2, [pc, #28]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4a04      	ldr	r2, [pc, #16]	; (8006220 <HAL_RCC_OscConfig+0x578>)
 800620e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006218:	f7fc fd16 	bl	8002c48 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800621e:	e00e      	b.n	800623e <HAL_RCC_OscConfig+0x596>
 8006220:	40021000 	.word	0x40021000
 8006224:	40007000 	.word	0x40007000
 8006228:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800622c:	f7fc fd0c 	bl	8002c48 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e046      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800623e:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <HAL_RCC_OscConfig+0x62c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x584>
 800624a:	e03e      	b.n	80062ca <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e039      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006258:	4b1e      	ldr	r3, [pc, #120]	; (80062d4 <HAL_RCC_OscConfig+0x62c>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f003 0203 	and.w	r2, r3, #3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	429a      	cmp	r2, r3
 800626a:	d12c      	bne.n	80062c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	3b01      	subs	r3, #1
 8006278:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627a:	429a      	cmp	r2, r3
 800627c:	d123      	bne.n	80062c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800628a:	429a      	cmp	r2, r3
 800628c:	d11b      	bne.n	80062c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800629a:	429a      	cmp	r2, r3
 800629c:	d113      	bne.n	80062c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	3b01      	subs	r3, #1
 80062ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d109      	bne.n	80062c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	3b01      	subs	r3, #1
 80062c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d001      	beq.n	80062ca <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40021000 	.word	0x40021000

080062d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e11e      	b.n	800652e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062f0:	4b91      	ldr	r3, [pc, #580]	; (8006538 <HAL_RCC_ClockConfig+0x260>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d910      	bls.n	8006320 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fe:	4b8e      	ldr	r3, [pc, #568]	; (8006538 <HAL_RCC_ClockConfig+0x260>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f023 020f 	bic.w	r2, r3, #15
 8006306:	498c      	ldr	r1, [pc, #560]	; (8006538 <HAL_RCC_ClockConfig+0x260>)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	4313      	orrs	r3, r2
 800630c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800630e:	4b8a      	ldr	r3, [pc, #552]	; (8006538 <HAL_RCC_ClockConfig+0x260>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d001      	beq.n	8006320 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e106      	b.n	800652e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d073      	beq.n	8006414 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b03      	cmp	r3, #3
 8006332:	d129      	bne.n	8006388 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006334:	4b81      	ldr	r3, [pc, #516]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0f4      	b.n	800652e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006344:	f000 f966 	bl	8006614 <RCC_GetSysClockFreqFromPLLSource>
 8006348:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4a7c      	ldr	r2, [pc, #496]	; (8006540 <HAL_RCC_ClockConfig+0x268>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d93f      	bls.n	80063d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006352:	4b7a      	ldr	r3, [pc, #488]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006366:	2b00      	cmp	r3, #0
 8006368:	d033      	beq.n	80063d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800636e:	2b00      	cmp	r3, #0
 8006370:	d12f      	bne.n	80063d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006372:	4b72      	ldr	r3, [pc, #456]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800637a:	4a70      	ldr	r2, [pc, #448]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 800637c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006380:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006382:	2380      	movs	r3, #128	; 0x80
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	e024      	b.n	80063d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d107      	bne.n	80063a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006390:	4b6a      	ldr	r3, [pc, #424]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0c6      	b.n	800652e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063a0:	4b66      	ldr	r3, [pc, #408]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0be      	b.n	800652e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80063b0:	f000 f8ce 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 80063b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4a61      	ldr	r2, [pc, #388]	; (8006540 <HAL_RCC_ClockConfig+0x268>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d909      	bls.n	80063d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063be:	4b5f      	ldr	r3, [pc, #380]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c6:	4a5d      	ldr	r2, [pc, #372]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 80063c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80063ce:	2380      	movs	r3, #128	; 0x80
 80063d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063d2:	4b5a      	ldr	r3, [pc, #360]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f023 0203 	bic.w	r2, r3, #3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	4957      	ldr	r1, [pc, #348]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063e4:	f7fc fc30 	bl	8002c48 <HAL_GetTick>
 80063e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ea:	e00a      	b.n	8006402 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ec:	f7fc fc2c 	bl	8002c48 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e095      	b.n	800652e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006402:	4b4e      	ldr	r3, [pc, #312]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 020c 	and.w	r2, r3, #12
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	429a      	cmp	r2, r3
 8006412:	d1eb      	bne.n	80063ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d023      	beq.n	8006468 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800642c:	4b43      	ldr	r3, [pc, #268]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	4a42      	ldr	r2, [pc, #264]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006436:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006444:	4b3d      	ldr	r3, [pc, #244]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800644c:	4a3b      	ldr	r2, [pc, #236]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 800644e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006452:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006454:	4b39      	ldr	r3, [pc, #228]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	4936      	ldr	r1, [pc, #216]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006462:	4313      	orrs	r3, r2
 8006464:	608b      	str	r3, [r1, #8]
 8006466:	e008      	b.n	800647a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2b80      	cmp	r3, #128	; 0x80
 800646c:	d105      	bne.n	800647a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800646e:	4b33      	ldr	r3, [pc, #204]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	4a32      	ldr	r2, [pc, #200]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 8006474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006478:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800647a:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <HAL_RCC_ClockConfig+0x260>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d21d      	bcs.n	80064c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006488:	4b2b      	ldr	r3, [pc, #172]	; (8006538 <HAL_RCC_ClockConfig+0x260>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f023 020f 	bic.w	r2, r3, #15
 8006490:	4929      	ldr	r1, [pc, #164]	; (8006538 <HAL_RCC_ClockConfig+0x260>)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006498:	f7fc fbd6 	bl	8002c48 <HAL_GetTick>
 800649c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800649e:	e00a      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a0:	f7fc fbd2 	bl	8002c48 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e03b      	b.n	800652e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b6:	4b20      	ldr	r3, [pc, #128]	; (8006538 <HAL_RCC_ClockConfig+0x260>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d1ed      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064d0:	4b1a      	ldr	r3, [pc, #104]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	4917      	ldr	r1, [pc, #92]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	490f      	ldr	r1, [pc, #60]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006502:	f000 f825 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 8006506:	4602      	mov	r2, r0
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <HAL_RCC_ClockConfig+0x264>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	091b      	lsrs	r3, r3, #4
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	490c      	ldr	r1, [pc, #48]	; (8006544 <HAL_RCC_ClockConfig+0x26c>)
 8006514:	5ccb      	ldrb	r3, [r1, r3]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	fa22 f303 	lsr.w	r3, r2, r3
 800651e:	4a0a      	ldr	r2, [pc, #40]	; (8006548 <HAL_RCC_ClockConfig+0x270>)
 8006520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006522:	4b0a      	ldr	r3, [pc, #40]	; (800654c <HAL_RCC_ClockConfig+0x274>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7fc fb42 	bl	8002bb0 <HAL_InitTick>
 800652c:	4603      	mov	r3, r0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40022000 	.word	0x40022000
 800653c:	40021000 	.word	0x40021000
 8006540:	04c4b400 	.word	0x04c4b400
 8006544:	0800a9bc 	.word	0x0800a9bc
 8006548:	20000000 	.word	0x20000000
 800654c:	20000004 	.word	0x20000004

08006550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006556:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 030c 	and.w	r3, r3, #12
 800655e:	2b04      	cmp	r3, #4
 8006560:	d102      	bne.n	8006568 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006562:	4b2a      	ldr	r3, [pc, #168]	; (800660c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	e047      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006568:	4b27      	ldr	r3, [pc, #156]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb8>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b08      	cmp	r3, #8
 8006572:	d102      	bne.n	800657a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006574:	4b26      	ldr	r3, [pc, #152]	; (8006610 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	e03e      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800657a:	4b23      	ldr	r3, [pc, #140]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb8>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	2b0c      	cmp	r3, #12
 8006584:	d136      	bne.n	80065f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006586:	4b20      	ldr	r3, [pc, #128]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006590:	4b1d      	ldr	r3, [pc, #116]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	3301      	adds	r3, #1
 800659c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d10c      	bne.n	80065be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065a4:	4a1a      	ldr	r2, [pc, #104]	; (8006610 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	4a16      	ldr	r2, [pc, #88]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ae:	68d2      	ldr	r2, [r2, #12]
 80065b0:	0a12      	lsrs	r2, r2, #8
 80065b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	617b      	str	r3, [r7, #20]
      break;
 80065bc:	e00c      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065be:	4a13      	ldr	r2, [pc, #76]	; (800660c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c6:	4a10      	ldr	r2, [pc, #64]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065c8:	68d2      	ldr	r2, [r2, #12]
 80065ca:	0a12      	lsrs	r2, r2, #8
 80065cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065d0:	fb02 f303 	mul.w	r3, r2, r3
 80065d4:	617b      	str	r3, [r7, #20]
      break;
 80065d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	0e5b      	lsrs	r3, r3, #25
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	3301      	adds	r3, #1
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	e001      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80065f8:	693b      	ldr	r3, [r7, #16]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40021000 	.word	0x40021000
 800660c:	00f42400 	.word	0x00f42400
 8006610:	016e3600 	.word	0x016e3600

08006614 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800661a:	4b1e      	ldr	r3, [pc, #120]	; (8006694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006624:	4b1b      	ldr	r3, [pc, #108]	; (8006694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	3301      	adds	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d10c      	bne.n	8006652 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006638:	4a17      	ldr	r2, [pc, #92]	; (8006698 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006640:	4a14      	ldr	r2, [pc, #80]	; (8006694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006642:	68d2      	ldr	r2, [r2, #12]
 8006644:	0a12      	lsrs	r2, r2, #8
 8006646:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	617b      	str	r3, [r7, #20]
    break;
 8006650:	e00c      	b.n	800666c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006652:	4a12      	ldr	r2, [pc, #72]	; (800669c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	fbb2 f3f3 	udiv	r3, r2, r3
 800665a:	4a0e      	ldr	r2, [pc, #56]	; (8006694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800665c:	68d2      	ldr	r2, [r2, #12]
 800665e:	0a12      	lsrs	r2, r2, #8
 8006660:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006664:	fb02 f303 	mul.w	r3, r2, r3
 8006668:	617b      	str	r3, [r7, #20]
    break;
 800666a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	0e5b      	lsrs	r3, r3, #25
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	3301      	adds	r3, #1
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006686:	687b      	ldr	r3, [r7, #4]
}
 8006688:	4618      	mov	r0, r3
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40021000 	.word	0x40021000
 8006698:	016e3600 	.word	0x016e3600
 800669c:	00f42400 	.word	0x00f42400

080066a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066a8:	2300      	movs	r3, #0
 80066aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066ac:	2300      	movs	r3, #0
 80066ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8098 	beq.w	80067ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066be:	2300      	movs	r3, #0
 80066c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066c2:	4b43      	ldr	r3, [pc, #268]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10d      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ce:	4b40      	ldr	r3, [pc, #256]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	4a3f      	ldr	r2, [pc, #252]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d8:	6593      	str	r3, [r2, #88]	; 0x58
 80066da:	4b3d      	ldr	r3, [pc, #244]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e2:	60bb      	str	r3, [r7, #8]
 80066e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066e6:	2301      	movs	r3, #1
 80066e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066ea:	4b3a      	ldr	r3, [pc, #232]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a39      	ldr	r2, [pc, #228]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066f6:	f7fc faa7 	bl	8002c48 <HAL_GetTick>
 80066fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066fc:	e009      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066fe:	f7fc faa3 	bl	8002c48 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d902      	bls.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	74fb      	strb	r3, [r7, #19]
        break;
 8006710:	e005      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006712:	4b30      	ldr	r3, [pc, #192]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0ef      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800671e:	7cfb      	ldrb	r3, [r7, #19]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d159      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006724:	4b2a      	ldr	r3, [pc, #168]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01e      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	429a      	cmp	r2, r3
 800673e:	d019      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006740:	4b23      	ldr	r3, [pc, #140]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800674c:	4b20      	ldr	r3, [pc, #128]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006752:	4a1f      	ldr	r2, [pc, #124]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800675c:	4b1c      	ldr	r3, [pc, #112]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006762:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800676c:	4a18      	ldr	r2, [pc, #96]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d016      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fc fa63 	bl	8002c48 <HAL_GetTick>
 8006782:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006784:	e00b      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006786:	f7fc fa5f 	bl	8002c48 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f241 3288 	movw	r2, #5000	; 0x1388
 8006794:	4293      	cmp	r3, r2
 8006796:	d902      	bls.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	74fb      	strb	r3, [r7, #19]
            break;
 800679c:	e006      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0ec      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067ac:	7cfb      	ldrb	r3, [r7, #19]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10b      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c0:	4903      	ldr	r1, [pc, #12]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067c8:	e008      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067ca:	7cfb      	ldrb	r3, [r7, #19]
 80067cc:	74bb      	strb	r3, [r7, #18]
 80067ce:	e005      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067d0:	40021000 	.word	0x40021000
 80067d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	7cfb      	ldrb	r3, [r7, #19]
 80067da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067dc:	7c7b      	ldrb	r3, [r7, #17]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d105      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067e2:	4baf      	ldr	r3, [pc, #700]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	4aae      	ldr	r2, [pc, #696]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067fa:	4ba9      	ldr	r3, [pc, #676]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	f023 0203 	bic.w	r2, r3, #3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	49a5      	ldr	r1, [pc, #660]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800681c:	4ba0      	ldr	r3, [pc, #640]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	f023 020c 	bic.w	r2, r3, #12
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	499d      	ldr	r1, [pc, #628]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800683e:	4b98      	ldr	r3, [pc, #608]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4994      	ldr	r1, [pc, #592]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006860:	4b8f      	ldr	r3, [pc, #572]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	498c      	ldr	r1, [pc, #560]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0310 	and.w	r3, r3, #16
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006882:	4b87      	ldr	r3, [pc, #540]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	4983      	ldr	r1, [pc, #524]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068a4:	4b7e      	ldr	r3, [pc, #504]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	497b      	ldr	r1, [pc, #492]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068c6:	4b76      	ldr	r3, [pc, #472]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	4972      	ldr	r1, [pc, #456]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068e8:	4b6d      	ldr	r3, [pc, #436]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	496a      	ldr	r1, [pc, #424]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800690a:	4b65      	ldr	r3, [pc, #404]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	4961      	ldr	r1, [pc, #388]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800692c:	4b5c      	ldr	r3, [pc, #368]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800692e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006932:	f023 0203 	bic.w	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	4959      	ldr	r1, [pc, #356]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800693c:	4313      	orrs	r3, r2
 800693e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800694e:	4b54      	ldr	r3, [pc, #336]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006954:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	4950      	ldr	r1, [pc, #320]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696c:	2b00      	cmp	r3, #0
 800696e:	d015      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006970:	4b4b      	ldr	r3, [pc, #300]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006976:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	4948      	ldr	r1, [pc, #288]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006980:	4313      	orrs	r3, r2
 8006982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698e:	d105      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006990:	4b43      	ldr	r3, [pc, #268]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4a42      	ldr	r2, [pc, #264]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800699a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d015      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069a8:	4b3d      	ldr	r3, [pc, #244]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b6:	493a      	ldr	r1, [pc, #232]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c6:	d105      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c8:	4b35      	ldr	r3, [pc, #212]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4a34      	ldr	r2, [pc, #208]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d015      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069e0:	4b2f      	ldr	r3, [pc, #188]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	492c      	ldr	r1, [pc, #176]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069fe:	d105      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a00:	4b27      	ldr	r3, [pc, #156]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d015      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a18:	4b21      	ldr	r3, [pc, #132]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	491e      	ldr	r1, [pc, #120]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a36:	d105      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a38:	4b19      	ldr	r3, [pc, #100]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4a18      	ldr	r2, [pc, #96]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d015      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a50:	4b13      	ldr	r3, [pc, #76]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	4910      	ldr	r1, [pc, #64]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a6e:	d105      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d018      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a96:	4902      	ldr	r1, [pc, #8]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006a9e:	e001      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006aa0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aac:	d105      	bne.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006aae:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	4a20      	ldr	r2, [pc, #128]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d015      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006acc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad4:	4917      	ldr	r1, [pc, #92]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae4:	d105      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ae6:	4b13      	ldr	r3, [pc, #76]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	4a12      	ldr	r2, [pc, #72]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d015      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006afe:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0c:	4909      	ldr	r1, [pc, #36]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b1c:	d105      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	4a04      	ldr	r2, [pc, #16]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b28:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40021000 	.word	0x40021000

08006b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e049      	b.n	8006bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fb ff80 	bl	8002a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f000 fb68 	bl	800724c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d001      	beq.n	8006c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e054      	b.n	8006caa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d022      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x80>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2a:	d01d      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x80>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a22      	ldr	r2, [pc, #136]	; (8006cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d018      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x80>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a21      	ldr	r2, [pc, #132]	; (8006cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x80>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x80>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d009      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x80>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1c      	ldr	r2, [pc, #112]	; (8006ccc <HAL_TIM_Base_Start_IT+0xe4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x80>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d115      	bne.n	8006c94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	4b19      	ldr	r3, [pc, #100]	; (8006cd4 <HAL_TIM_Base_Start_IT+0xec>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d015      	beq.n	8006ca6 <HAL_TIM_Base_Start_IT+0xbe>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d011      	beq.n	8006ca6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c92:	e008      	b.n	8006ca6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e000      	b.n	8006ca8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40012c00 	.word	0x40012c00
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40015000 	.word	0x40015000
 8006cd4:	00010007 	.word	0x00010007

08006cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d122      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d11b      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0202 	mvn.w	r2, #2
 8006d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa78 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006d20:	e005      	b.n	8006d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa6a 	bl	80071fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fa7b 	bl	8007224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d122      	bne.n	8006d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d11b      	bne.n	8006d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0204 	mvn.w	r2, #4
 8006d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa4e 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006d74:	e005      	b.n	8006d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fa40 	bl	80071fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fa51 	bl	8007224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d122      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d11b      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0208 	mvn.w	r2, #8
 8006dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2204      	movs	r2, #4
 8006db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa24 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006dc8:	e005      	b.n	8006dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa16 	bl	80071fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fa27 	bl	8007224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f003 0310 	and.w	r3, r3, #16
 8006de6:	2b10      	cmp	r3, #16
 8006de8:	d122      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b10      	cmp	r3, #16
 8006df6:	d11b      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f06f 0210 	mvn.w	r2, #16
 8006e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2208      	movs	r2, #8
 8006e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9fa 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006e1c:	e005      	b.n	8006e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f9ec 	bl	80071fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f9fd 	bl	8007224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d10e      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d107      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f06f 0201 	mvn.w	r2, #1
 8006e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fb fe44 	bl	8002ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e66:	2b80      	cmp	r3, #128	; 0x80
 8006e68:	d10e      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e74:	2b80      	cmp	r3, #128	; 0x80
 8006e76:	d107      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fbc6 	bl	8007614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e96:	d10e      	bne.n	8006eb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b80      	cmp	r3, #128	; 0x80
 8006ea4:	d107      	bne.n	8006eb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fbb9 	bl	8007628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	d10e      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ece:	2b40      	cmp	r3, #64	; 0x40
 8006ed0:	d107      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f9ab 	bl	8007238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d10e      	bne.n	8006f0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	d107      	bne.n	8006f0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f06f 0220 	mvn.w	r2, #32
 8006f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fb79 	bl	8007600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1c:	d10f      	bne.n	8006f3e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f2c:	d107      	bne.n	8006f3e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fb7f 	bl	800763c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f4c:	d10f      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f5c:	d107      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fb71 	bl	8007650 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f7c:	d10f      	bne.n	8006f9e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f8c:	d107      	bne.n	8006f9e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb63 	bl	8007664 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fac:	d10f      	bne.n	8006fce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fbc:	d107      	bne.n	8006fce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fb55 	bl	8007678 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_TIM_ConfigClockSource+0x18>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e0f5      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x204>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800700e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800701a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a6e      	ldr	r2, [pc, #440]	; (80071e4 <HAL_TIM_ConfigClockSource+0x20c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	f000 80c1 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 8007030:	4a6c      	ldr	r2, [pc, #432]	; (80071e4 <HAL_TIM_ConfigClockSource+0x20c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	f200 80c6 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 8007038:	4a6b      	ldr	r2, [pc, #428]	; (80071e8 <HAL_TIM_ConfigClockSource+0x210>)
 800703a:	4293      	cmp	r3, r2
 800703c:	f000 80b9 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 8007040:	4a69      	ldr	r2, [pc, #420]	; (80071e8 <HAL_TIM_ConfigClockSource+0x210>)
 8007042:	4293      	cmp	r3, r2
 8007044:	f200 80be 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 8007048:	4a68      	ldr	r2, [pc, #416]	; (80071ec <HAL_TIM_ConfigClockSource+0x214>)
 800704a:	4293      	cmp	r3, r2
 800704c:	f000 80b1 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 8007050:	4a66      	ldr	r2, [pc, #408]	; (80071ec <HAL_TIM_ConfigClockSource+0x214>)
 8007052:	4293      	cmp	r3, r2
 8007054:	f200 80b6 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 8007058:	4a65      	ldr	r2, [pc, #404]	; (80071f0 <HAL_TIM_ConfigClockSource+0x218>)
 800705a:	4293      	cmp	r3, r2
 800705c:	f000 80a9 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 8007060:	4a63      	ldr	r2, [pc, #396]	; (80071f0 <HAL_TIM_ConfigClockSource+0x218>)
 8007062:	4293      	cmp	r3, r2
 8007064:	f200 80ae 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 8007068:	4a62      	ldr	r2, [pc, #392]	; (80071f4 <HAL_TIM_ConfigClockSource+0x21c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	f000 80a1 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 8007070:	4a60      	ldr	r2, [pc, #384]	; (80071f4 <HAL_TIM_ConfigClockSource+0x21c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	f200 80a6 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 8007078:	4a5f      	ldr	r2, [pc, #380]	; (80071f8 <HAL_TIM_ConfigClockSource+0x220>)
 800707a:	4293      	cmp	r3, r2
 800707c:	f000 8099 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 8007080:	4a5d      	ldr	r2, [pc, #372]	; (80071f8 <HAL_TIM_ConfigClockSource+0x220>)
 8007082:	4293      	cmp	r3, r2
 8007084:	f200 809e 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 8007088:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800708c:	f000 8091 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 8007090:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007094:	f200 8096 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 8007098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800709c:	f000 8089 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 80070a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a4:	f200 808e 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 80070a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ac:	d03e      	beq.n	800712c <HAL_TIM_ConfigClockSource+0x154>
 80070ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b2:	f200 8087 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ba:	f000 8085 	beq.w	80071c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c2:	d87f      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 80070c4:	2b70      	cmp	r3, #112	; 0x70
 80070c6:	d01a      	beq.n	80070fe <HAL_TIM_ConfigClockSource+0x126>
 80070c8:	2b70      	cmp	r3, #112	; 0x70
 80070ca:	d87b      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 80070cc:	2b60      	cmp	r3, #96	; 0x60
 80070ce:	d050      	beq.n	8007172 <HAL_TIM_ConfigClockSource+0x19a>
 80070d0:	2b60      	cmp	r3, #96	; 0x60
 80070d2:	d877      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 80070d4:	2b50      	cmp	r3, #80	; 0x50
 80070d6:	d03c      	beq.n	8007152 <HAL_TIM_ConfigClockSource+0x17a>
 80070d8:	2b50      	cmp	r3, #80	; 0x50
 80070da:	d873      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d058      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x1ba>
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d86f      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 80070e4:	2b30      	cmp	r3, #48	; 0x30
 80070e6:	d064      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 80070e8:	2b30      	cmp	r3, #48	; 0x30
 80070ea:	d86b      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d060      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d867      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d05c      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d05a      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80070fc:	e062      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	6899      	ldr	r1, [r3, #8]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f000 f9c1 	bl	8007494 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007120:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	609a      	str	r2, [r3, #8]
      break;
 800712a:	e04e      	b.n	80071ca <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	6899      	ldr	r1, [r3, #8]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f000 f9aa 	bl	8007494 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800714e:	609a      	str	r2, [r3, #8]
      break;
 8007150:	e03b      	b.n	80071ca <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	6859      	ldr	r1, [r3, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	461a      	mov	r2, r3
 8007160:	f000 f91c 	bl	800739c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2150      	movs	r1, #80	; 0x50
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f975 	bl	800745a <TIM_ITRx_SetConfig>
      break;
 8007170:	e02b      	b.n	80071ca <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	6859      	ldr	r1, [r3, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	461a      	mov	r2, r3
 8007180:	f000 f93b 	bl	80073fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2160      	movs	r1, #96	; 0x60
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f965 	bl	800745a <TIM_ITRx_SetConfig>
      break;
 8007190:	e01b      	b.n	80071ca <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6859      	ldr	r1, [r3, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	461a      	mov	r2, r3
 80071a0:	f000 f8fc 	bl	800739c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2140      	movs	r1, #64	; 0x40
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f955 	bl	800745a <TIM_ITRx_SetConfig>
      break;
 80071b0:	e00b      	b.n	80071ca <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f000 f94c 	bl	800745a <TIM_ITRx_SetConfig>
        break;
 80071c2:	e002      	b.n	80071ca <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80071c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	00100070 	.word	0x00100070
 80071e8:	00100060 	.word	0x00100060
 80071ec:	00100050 	.word	0x00100050
 80071f0:	00100040 	.word	0x00100040
 80071f4:	00100030 	.word	0x00100030
 80071f8:	00100020 	.word	0x00100020

080071fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a46      	ldr	r2, [pc, #280]	; (8007378 <TIM_Base_SetConfig+0x12c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d017      	beq.n	8007294 <TIM_Base_SetConfig+0x48>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726a:	d013      	beq.n	8007294 <TIM_Base_SetConfig+0x48>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a43      	ldr	r2, [pc, #268]	; (800737c <TIM_Base_SetConfig+0x130>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00f      	beq.n	8007294 <TIM_Base_SetConfig+0x48>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a42      	ldr	r2, [pc, #264]	; (8007380 <TIM_Base_SetConfig+0x134>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00b      	beq.n	8007294 <TIM_Base_SetConfig+0x48>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a41      	ldr	r2, [pc, #260]	; (8007384 <TIM_Base_SetConfig+0x138>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_Base_SetConfig+0x48>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a40      	ldr	r2, [pc, #256]	; (8007388 <TIM_Base_SetConfig+0x13c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_Base_SetConfig+0x48>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a3f      	ldr	r2, [pc, #252]	; (800738c <TIM_Base_SetConfig+0x140>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d108      	bne.n	80072a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a33      	ldr	r2, [pc, #204]	; (8007378 <TIM_Base_SetConfig+0x12c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d023      	beq.n	80072f6 <TIM_Base_SetConfig+0xaa>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b4:	d01f      	beq.n	80072f6 <TIM_Base_SetConfig+0xaa>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a30      	ldr	r2, [pc, #192]	; (800737c <TIM_Base_SetConfig+0x130>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d01b      	beq.n	80072f6 <TIM_Base_SetConfig+0xaa>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2f      	ldr	r2, [pc, #188]	; (8007380 <TIM_Base_SetConfig+0x134>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d017      	beq.n	80072f6 <TIM_Base_SetConfig+0xaa>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a2e      	ldr	r2, [pc, #184]	; (8007384 <TIM_Base_SetConfig+0x138>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d013      	beq.n	80072f6 <TIM_Base_SetConfig+0xaa>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a2d      	ldr	r2, [pc, #180]	; (8007388 <TIM_Base_SetConfig+0x13c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00f      	beq.n	80072f6 <TIM_Base_SetConfig+0xaa>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a2d      	ldr	r2, [pc, #180]	; (8007390 <TIM_Base_SetConfig+0x144>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00b      	beq.n	80072f6 <TIM_Base_SetConfig+0xaa>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a2c      	ldr	r2, [pc, #176]	; (8007394 <TIM_Base_SetConfig+0x148>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d007      	beq.n	80072f6 <TIM_Base_SetConfig+0xaa>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a2b      	ldr	r2, [pc, #172]	; (8007398 <TIM_Base_SetConfig+0x14c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d003      	beq.n	80072f6 <TIM_Base_SetConfig+0xaa>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a26      	ldr	r2, [pc, #152]	; (800738c <TIM_Base_SetConfig+0x140>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d108      	bne.n	8007308 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a12      	ldr	r2, [pc, #72]	; (8007378 <TIM_Base_SetConfig+0x12c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d013      	beq.n	800735c <TIM_Base_SetConfig+0x110>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a14      	ldr	r2, [pc, #80]	; (8007388 <TIM_Base_SetConfig+0x13c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00f      	beq.n	800735c <TIM_Base_SetConfig+0x110>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a14      	ldr	r2, [pc, #80]	; (8007390 <TIM_Base_SetConfig+0x144>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00b      	beq.n	800735c <TIM_Base_SetConfig+0x110>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a13      	ldr	r2, [pc, #76]	; (8007394 <TIM_Base_SetConfig+0x148>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d007      	beq.n	800735c <TIM_Base_SetConfig+0x110>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a12      	ldr	r2, [pc, #72]	; (8007398 <TIM_Base_SetConfig+0x14c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_Base_SetConfig+0x110>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a0d      	ldr	r2, [pc, #52]	; (800738c <TIM_Base_SetConfig+0x140>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d103      	bne.n	8007364 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	615a      	str	r2, [r3, #20]
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40000400 	.word	0x40000400
 8007380:	40000800 	.word	0x40000800
 8007384:	40000c00 	.word	0x40000c00
 8007388:	40013400 	.word	0x40013400
 800738c:	40015000 	.word	0x40015000
 8007390:	40014000 	.word	0x40014000
 8007394:	40014400 	.word	0x40014400
 8007398:	40014800 	.word	0x40014800

0800739c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f023 0201 	bic.w	r2, r3, #1
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f023 030a 	bic.w	r3, r3, #10
 80073d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	621a      	str	r2, [r3, #32]
}
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b087      	sub	sp, #28
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f023 0210 	bic.w	r2, r3, #16
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	031b      	lsls	r3, r3, #12
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4313      	orrs	r3, r2
 800742e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	f043 0307 	orr.w	r3, r3, #7
 8007480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	609a      	str	r2, [r3, #8]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	021a      	lsls	r2, r3, #8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	609a      	str	r2, [r3, #8]
}
 80074c8:	bf00      	nop
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e074      	b.n	80075d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a34      	ldr	r2, [pc, #208]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d009      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a33      	ldr	r2, [pc, #204]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d004      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a31      	ldr	r2, [pc, #196]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d108      	bne.n	800753c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a21      	ldr	r2, [pc, #132]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d022      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756c:	d01d      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d018      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1d      	ldr	r2, [pc, #116]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d013      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1c      	ldr	r2, [pc, #112]	; (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00e      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d009      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a11      	ldr	r2, [pc, #68]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d10c      	bne.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40012c00 	.word	0x40012c00
 80075e8:	40013400 	.word	0x40013400
 80075ec:	40015000 	.word	0x40015000
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800
 80075f8:	40000c00 	.word	0x40000c00
 80075fc:	40014000 	.word	0x40014000

08007600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <__errno>:
 800768c:	4b01      	ldr	r3, [pc, #4]	; (8007694 <__errno+0x8>)
 800768e:	6818      	ldr	r0, [r3, #0]
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	2000000c 	.word	0x2000000c

08007698 <__libc_init_array>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	4d0d      	ldr	r5, [pc, #52]	; (80076d0 <__libc_init_array+0x38>)
 800769c:	4c0d      	ldr	r4, [pc, #52]	; (80076d4 <__libc_init_array+0x3c>)
 800769e:	1b64      	subs	r4, r4, r5
 80076a0:	10a4      	asrs	r4, r4, #2
 80076a2:	2600      	movs	r6, #0
 80076a4:	42a6      	cmp	r6, r4
 80076a6:	d109      	bne.n	80076bc <__libc_init_array+0x24>
 80076a8:	4d0b      	ldr	r5, [pc, #44]	; (80076d8 <__libc_init_array+0x40>)
 80076aa:	4c0c      	ldr	r4, [pc, #48]	; (80076dc <__libc_init_array+0x44>)
 80076ac:	f003 f886 	bl	800a7bc <_init>
 80076b0:	1b64      	subs	r4, r4, r5
 80076b2:	10a4      	asrs	r4, r4, #2
 80076b4:	2600      	movs	r6, #0
 80076b6:	42a6      	cmp	r6, r4
 80076b8:	d105      	bne.n	80076c6 <__libc_init_array+0x2e>
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c0:	4798      	blx	r3
 80076c2:	3601      	adds	r6, #1
 80076c4:	e7ee      	b.n	80076a4 <__libc_init_array+0xc>
 80076c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ca:	4798      	blx	r3
 80076cc:	3601      	adds	r6, #1
 80076ce:	e7f2      	b.n	80076b6 <__libc_init_array+0x1e>
 80076d0:	0800adac 	.word	0x0800adac
 80076d4:	0800adac 	.word	0x0800adac
 80076d8:	0800adac 	.word	0x0800adac
 80076dc:	0800adb0 	.word	0x0800adb0

080076e0 <malloc>:
 80076e0:	4b02      	ldr	r3, [pc, #8]	; (80076ec <malloc+0xc>)
 80076e2:	4601      	mov	r1, r0
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	f000 b85b 	b.w	80077a0 <_malloc_r>
 80076ea:	bf00      	nop
 80076ec:	2000000c 	.word	0x2000000c

080076f0 <memset>:
 80076f0:	4402      	add	r2, r0
 80076f2:	4603      	mov	r3, r0
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d100      	bne.n	80076fa <memset+0xa>
 80076f8:	4770      	bx	lr
 80076fa:	f803 1b01 	strb.w	r1, [r3], #1
 80076fe:	e7f9      	b.n	80076f4 <memset+0x4>

08007700 <_free_r>:
 8007700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007702:	2900      	cmp	r1, #0
 8007704:	d048      	beq.n	8007798 <_free_r+0x98>
 8007706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770a:	9001      	str	r0, [sp, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f1a1 0404 	sub.w	r4, r1, #4
 8007712:	bfb8      	it	lt
 8007714:	18e4      	addlt	r4, r4, r3
 8007716:	f001 ff45 	bl	80095a4 <__malloc_lock>
 800771a:	4a20      	ldr	r2, [pc, #128]	; (800779c <_free_r+0x9c>)
 800771c:	9801      	ldr	r0, [sp, #4]
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	4615      	mov	r5, r2
 8007722:	b933      	cbnz	r3, 8007732 <_free_r+0x32>
 8007724:	6063      	str	r3, [r4, #4]
 8007726:	6014      	str	r4, [r2, #0]
 8007728:	b003      	add	sp, #12
 800772a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800772e:	f001 bf3f 	b.w	80095b0 <__malloc_unlock>
 8007732:	42a3      	cmp	r3, r4
 8007734:	d90b      	bls.n	800774e <_free_r+0x4e>
 8007736:	6821      	ldr	r1, [r4, #0]
 8007738:	1862      	adds	r2, r4, r1
 800773a:	4293      	cmp	r3, r2
 800773c:	bf04      	itt	eq
 800773e:	681a      	ldreq	r2, [r3, #0]
 8007740:	685b      	ldreq	r3, [r3, #4]
 8007742:	6063      	str	r3, [r4, #4]
 8007744:	bf04      	itt	eq
 8007746:	1852      	addeq	r2, r2, r1
 8007748:	6022      	streq	r2, [r4, #0]
 800774a:	602c      	str	r4, [r5, #0]
 800774c:	e7ec      	b.n	8007728 <_free_r+0x28>
 800774e:	461a      	mov	r2, r3
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	b10b      	cbz	r3, 8007758 <_free_r+0x58>
 8007754:	42a3      	cmp	r3, r4
 8007756:	d9fa      	bls.n	800774e <_free_r+0x4e>
 8007758:	6811      	ldr	r1, [r2, #0]
 800775a:	1855      	adds	r5, r2, r1
 800775c:	42a5      	cmp	r5, r4
 800775e:	d10b      	bne.n	8007778 <_free_r+0x78>
 8007760:	6824      	ldr	r4, [r4, #0]
 8007762:	4421      	add	r1, r4
 8007764:	1854      	adds	r4, r2, r1
 8007766:	42a3      	cmp	r3, r4
 8007768:	6011      	str	r1, [r2, #0]
 800776a:	d1dd      	bne.n	8007728 <_free_r+0x28>
 800776c:	681c      	ldr	r4, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	6053      	str	r3, [r2, #4]
 8007772:	4421      	add	r1, r4
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	e7d7      	b.n	8007728 <_free_r+0x28>
 8007778:	d902      	bls.n	8007780 <_free_r+0x80>
 800777a:	230c      	movs	r3, #12
 800777c:	6003      	str	r3, [r0, #0]
 800777e:	e7d3      	b.n	8007728 <_free_r+0x28>
 8007780:	6825      	ldr	r5, [r4, #0]
 8007782:	1961      	adds	r1, r4, r5
 8007784:	428b      	cmp	r3, r1
 8007786:	bf04      	itt	eq
 8007788:	6819      	ldreq	r1, [r3, #0]
 800778a:	685b      	ldreq	r3, [r3, #4]
 800778c:	6063      	str	r3, [r4, #4]
 800778e:	bf04      	itt	eq
 8007790:	1949      	addeq	r1, r1, r5
 8007792:	6021      	streq	r1, [r4, #0]
 8007794:	6054      	str	r4, [r2, #4]
 8007796:	e7c7      	b.n	8007728 <_free_r+0x28>
 8007798:	b003      	add	sp, #12
 800779a:	bd30      	pop	{r4, r5, pc}
 800779c:	2000020c 	.word	0x2000020c

080077a0 <_malloc_r>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	1ccd      	adds	r5, r1, #3
 80077a4:	f025 0503 	bic.w	r5, r5, #3
 80077a8:	3508      	adds	r5, #8
 80077aa:	2d0c      	cmp	r5, #12
 80077ac:	bf38      	it	cc
 80077ae:	250c      	movcc	r5, #12
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	4606      	mov	r6, r0
 80077b4:	db01      	blt.n	80077ba <_malloc_r+0x1a>
 80077b6:	42a9      	cmp	r1, r5
 80077b8:	d903      	bls.n	80077c2 <_malloc_r+0x22>
 80077ba:	230c      	movs	r3, #12
 80077bc:	6033      	str	r3, [r6, #0]
 80077be:	2000      	movs	r0, #0
 80077c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c2:	f001 feef 	bl	80095a4 <__malloc_lock>
 80077c6:	4921      	ldr	r1, [pc, #132]	; (800784c <_malloc_r+0xac>)
 80077c8:	680a      	ldr	r2, [r1, #0]
 80077ca:	4614      	mov	r4, r2
 80077cc:	b99c      	cbnz	r4, 80077f6 <_malloc_r+0x56>
 80077ce:	4f20      	ldr	r7, [pc, #128]	; (8007850 <_malloc_r+0xb0>)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	b923      	cbnz	r3, 80077de <_malloc_r+0x3e>
 80077d4:	4621      	mov	r1, r4
 80077d6:	4630      	mov	r0, r6
 80077d8:	f000 fd4a 	bl	8008270 <_sbrk_r>
 80077dc:	6038      	str	r0, [r7, #0]
 80077de:	4629      	mov	r1, r5
 80077e0:	4630      	mov	r0, r6
 80077e2:	f000 fd45 	bl	8008270 <_sbrk_r>
 80077e6:	1c43      	adds	r3, r0, #1
 80077e8:	d123      	bne.n	8007832 <_malloc_r+0x92>
 80077ea:	230c      	movs	r3, #12
 80077ec:	6033      	str	r3, [r6, #0]
 80077ee:	4630      	mov	r0, r6
 80077f0:	f001 fede 	bl	80095b0 <__malloc_unlock>
 80077f4:	e7e3      	b.n	80077be <_malloc_r+0x1e>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	1b5b      	subs	r3, r3, r5
 80077fa:	d417      	bmi.n	800782c <_malloc_r+0x8c>
 80077fc:	2b0b      	cmp	r3, #11
 80077fe:	d903      	bls.n	8007808 <_malloc_r+0x68>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	441c      	add	r4, r3
 8007804:	6025      	str	r5, [r4, #0]
 8007806:	e004      	b.n	8007812 <_malloc_r+0x72>
 8007808:	6863      	ldr	r3, [r4, #4]
 800780a:	42a2      	cmp	r2, r4
 800780c:	bf0c      	ite	eq
 800780e:	600b      	streq	r3, [r1, #0]
 8007810:	6053      	strne	r3, [r2, #4]
 8007812:	4630      	mov	r0, r6
 8007814:	f001 fecc 	bl	80095b0 <__malloc_unlock>
 8007818:	f104 000b 	add.w	r0, r4, #11
 800781c:	1d23      	adds	r3, r4, #4
 800781e:	f020 0007 	bic.w	r0, r0, #7
 8007822:	1ac2      	subs	r2, r0, r3
 8007824:	d0cc      	beq.n	80077c0 <_malloc_r+0x20>
 8007826:	1a1b      	subs	r3, r3, r0
 8007828:	50a3      	str	r3, [r4, r2]
 800782a:	e7c9      	b.n	80077c0 <_malloc_r+0x20>
 800782c:	4622      	mov	r2, r4
 800782e:	6864      	ldr	r4, [r4, #4]
 8007830:	e7cc      	b.n	80077cc <_malloc_r+0x2c>
 8007832:	1cc4      	adds	r4, r0, #3
 8007834:	f024 0403 	bic.w	r4, r4, #3
 8007838:	42a0      	cmp	r0, r4
 800783a:	d0e3      	beq.n	8007804 <_malloc_r+0x64>
 800783c:	1a21      	subs	r1, r4, r0
 800783e:	4630      	mov	r0, r6
 8007840:	f000 fd16 	bl	8008270 <_sbrk_r>
 8007844:	3001      	adds	r0, #1
 8007846:	d1dd      	bne.n	8007804 <_malloc_r+0x64>
 8007848:	e7cf      	b.n	80077ea <_malloc_r+0x4a>
 800784a:	bf00      	nop
 800784c:	2000020c 	.word	0x2000020c
 8007850:	20000210 	.word	0x20000210

08007854 <__cvt>:
 8007854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	ec55 4b10 	vmov	r4, r5, d0
 800785c:	2d00      	cmp	r5, #0
 800785e:	460e      	mov	r6, r1
 8007860:	4619      	mov	r1, r3
 8007862:	462b      	mov	r3, r5
 8007864:	bfbb      	ittet	lt
 8007866:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800786a:	461d      	movlt	r5, r3
 800786c:	2300      	movge	r3, #0
 800786e:	232d      	movlt	r3, #45	; 0x2d
 8007870:	700b      	strb	r3, [r1, #0]
 8007872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007874:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007878:	4691      	mov	r9, r2
 800787a:	f023 0820 	bic.w	r8, r3, #32
 800787e:	bfbc      	itt	lt
 8007880:	4622      	movlt	r2, r4
 8007882:	4614      	movlt	r4, r2
 8007884:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007888:	d005      	beq.n	8007896 <__cvt+0x42>
 800788a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800788e:	d100      	bne.n	8007892 <__cvt+0x3e>
 8007890:	3601      	adds	r6, #1
 8007892:	2102      	movs	r1, #2
 8007894:	e000      	b.n	8007898 <__cvt+0x44>
 8007896:	2103      	movs	r1, #3
 8007898:	ab03      	add	r3, sp, #12
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	ab02      	add	r3, sp, #8
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	ec45 4b10 	vmov	d0, r4, r5
 80078a4:	4653      	mov	r3, sl
 80078a6:	4632      	mov	r2, r6
 80078a8:	f000 fe5e 	bl	8008568 <_dtoa_r>
 80078ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078b0:	4607      	mov	r7, r0
 80078b2:	d102      	bne.n	80078ba <__cvt+0x66>
 80078b4:	f019 0f01 	tst.w	r9, #1
 80078b8:	d022      	beq.n	8007900 <__cvt+0xac>
 80078ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078be:	eb07 0906 	add.w	r9, r7, r6
 80078c2:	d110      	bne.n	80078e6 <__cvt+0x92>
 80078c4:	783b      	ldrb	r3, [r7, #0]
 80078c6:	2b30      	cmp	r3, #48	; 0x30
 80078c8:	d10a      	bne.n	80078e0 <__cvt+0x8c>
 80078ca:	2200      	movs	r2, #0
 80078cc:	2300      	movs	r3, #0
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f9 f921 	bl	8000b18 <__aeabi_dcmpeq>
 80078d6:	b918      	cbnz	r0, 80078e0 <__cvt+0x8c>
 80078d8:	f1c6 0601 	rsb	r6, r6, #1
 80078dc:	f8ca 6000 	str.w	r6, [sl]
 80078e0:	f8da 3000 	ldr.w	r3, [sl]
 80078e4:	4499      	add	r9, r3
 80078e6:	2200      	movs	r2, #0
 80078e8:	2300      	movs	r3, #0
 80078ea:	4620      	mov	r0, r4
 80078ec:	4629      	mov	r1, r5
 80078ee:	f7f9 f913 	bl	8000b18 <__aeabi_dcmpeq>
 80078f2:	b108      	cbz	r0, 80078f8 <__cvt+0xa4>
 80078f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80078f8:	2230      	movs	r2, #48	; 0x30
 80078fa:	9b03      	ldr	r3, [sp, #12]
 80078fc:	454b      	cmp	r3, r9
 80078fe:	d307      	bcc.n	8007910 <__cvt+0xbc>
 8007900:	9b03      	ldr	r3, [sp, #12]
 8007902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007904:	1bdb      	subs	r3, r3, r7
 8007906:	4638      	mov	r0, r7
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	b004      	add	sp, #16
 800790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007910:	1c59      	adds	r1, r3, #1
 8007912:	9103      	str	r1, [sp, #12]
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	e7f0      	b.n	80078fa <__cvt+0xa6>

08007918 <__exponent>:
 8007918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800791a:	4603      	mov	r3, r0
 800791c:	2900      	cmp	r1, #0
 800791e:	bfb8      	it	lt
 8007920:	4249      	neglt	r1, r1
 8007922:	f803 2b02 	strb.w	r2, [r3], #2
 8007926:	bfb4      	ite	lt
 8007928:	222d      	movlt	r2, #45	; 0x2d
 800792a:	222b      	movge	r2, #43	; 0x2b
 800792c:	2909      	cmp	r1, #9
 800792e:	7042      	strb	r2, [r0, #1]
 8007930:	dd2a      	ble.n	8007988 <__exponent+0x70>
 8007932:	f10d 0407 	add.w	r4, sp, #7
 8007936:	46a4      	mov	ip, r4
 8007938:	270a      	movs	r7, #10
 800793a:	46a6      	mov	lr, r4
 800793c:	460a      	mov	r2, r1
 800793e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007942:	fb07 1516 	mls	r5, r7, r6, r1
 8007946:	3530      	adds	r5, #48	; 0x30
 8007948:	2a63      	cmp	r2, #99	; 0x63
 800794a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800794e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007952:	4631      	mov	r1, r6
 8007954:	dcf1      	bgt.n	800793a <__exponent+0x22>
 8007956:	3130      	adds	r1, #48	; 0x30
 8007958:	f1ae 0502 	sub.w	r5, lr, #2
 800795c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007960:	1c44      	adds	r4, r0, #1
 8007962:	4629      	mov	r1, r5
 8007964:	4561      	cmp	r1, ip
 8007966:	d30a      	bcc.n	800797e <__exponent+0x66>
 8007968:	f10d 0209 	add.w	r2, sp, #9
 800796c:	eba2 020e 	sub.w	r2, r2, lr
 8007970:	4565      	cmp	r5, ip
 8007972:	bf88      	it	hi
 8007974:	2200      	movhi	r2, #0
 8007976:	4413      	add	r3, r2
 8007978:	1a18      	subs	r0, r3, r0
 800797a:	b003      	add	sp, #12
 800797c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800797e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007982:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007986:	e7ed      	b.n	8007964 <__exponent+0x4c>
 8007988:	2330      	movs	r3, #48	; 0x30
 800798a:	3130      	adds	r1, #48	; 0x30
 800798c:	7083      	strb	r3, [r0, #2]
 800798e:	70c1      	strb	r1, [r0, #3]
 8007990:	1d03      	adds	r3, r0, #4
 8007992:	e7f1      	b.n	8007978 <__exponent+0x60>

08007994 <_printf_float>:
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	ed2d 8b02 	vpush	{d8}
 800799c:	b08d      	sub	sp, #52	; 0x34
 800799e:	460c      	mov	r4, r1
 80079a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079a4:	4616      	mov	r6, r2
 80079a6:	461f      	mov	r7, r3
 80079a8:	4605      	mov	r5, r0
 80079aa:	f001 fd81 	bl	80094b0 <_localeconv_r>
 80079ae:	f8d0 a000 	ldr.w	sl, [r0]
 80079b2:	4650      	mov	r0, sl
 80079b4:	f7f8 fc34 	bl	8000220 <strlen>
 80079b8:	2300      	movs	r3, #0
 80079ba:	930a      	str	r3, [sp, #40]	; 0x28
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	9305      	str	r3, [sp, #20]
 80079c0:	f8d8 3000 	ldr.w	r3, [r8]
 80079c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80079c8:	3307      	adds	r3, #7
 80079ca:	f023 0307 	bic.w	r3, r3, #7
 80079ce:	f103 0208 	add.w	r2, r3, #8
 80079d2:	f8c8 2000 	str.w	r2, [r8]
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079e6:	9307      	str	r3, [sp, #28]
 80079e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80079ec:	ee08 0a10 	vmov	s16, r0
 80079f0:	4b9f      	ldr	r3, [pc, #636]	; (8007c70 <_printf_float+0x2dc>)
 80079f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079fa:	f7f9 f8bf 	bl	8000b7c <__aeabi_dcmpun>
 80079fe:	bb88      	cbnz	r0, 8007a64 <_printf_float+0xd0>
 8007a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a04:	4b9a      	ldr	r3, [pc, #616]	; (8007c70 <_printf_float+0x2dc>)
 8007a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a0a:	f7f9 f899 	bl	8000b40 <__aeabi_dcmple>
 8007a0e:	bb48      	cbnz	r0, 8007a64 <_printf_float+0xd0>
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	4640      	mov	r0, r8
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f9 f888 	bl	8000b2c <__aeabi_dcmplt>
 8007a1c:	b110      	cbz	r0, 8007a24 <_printf_float+0x90>
 8007a1e:	232d      	movs	r3, #45	; 0x2d
 8007a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a24:	4b93      	ldr	r3, [pc, #588]	; (8007c74 <_printf_float+0x2e0>)
 8007a26:	4894      	ldr	r0, [pc, #592]	; (8007c78 <_printf_float+0x2e4>)
 8007a28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a2c:	bf94      	ite	ls
 8007a2e:	4698      	movls	r8, r3
 8007a30:	4680      	movhi	r8, r0
 8007a32:	2303      	movs	r3, #3
 8007a34:	6123      	str	r3, [r4, #16]
 8007a36:	9b05      	ldr	r3, [sp, #20]
 8007a38:	f023 0204 	bic.w	r2, r3, #4
 8007a3c:	6022      	str	r2, [r4, #0]
 8007a3e:	f04f 0900 	mov.w	r9, #0
 8007a42:	9700      	str	r7, [sp, #0]
 8007a44:	4633      	mov	r3, r6
 8007a46:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 f9d8 	bl	8007e00 <_printf_common>
 8007a50:	3001      	adds	r0, #1
 8007a52:	f040 8090 	bne.w	8007b76 <_printf_float+0x1e2>
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a5a:	b00d      	add	sp, #52	; 0x34
 8007a5c:	ecbd 8b02 	vpop	{d8}
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a64:	4642      	mov	r2, r8
 8007a66:	464b      	mov	r3, r9
 8007a68:	4640      	mov	r0, r8
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	f7f9 f886 	bl	8000b7c <__aeabi_dcmpun>
 8007a70:	b140      	cbz	r0, 8007a84 <_printf_float+0xf0>
 8007a72:	464b      	mov	r3, r9
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bfbc      	itt	lt
 8007a78:	232d      	movlt	r3, #45	; 0x2d
 8007a7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a7e:	487f      	ldr	r0, [pc, #508]	; (8007c7c <_printf_float+0x2e8>)
 8007a80:	4b7f      	ldr	r3, [pc, #508]	; (8007c80 <_printf_float+0x2ec>)
 8007a82:	e7d1      	b.n	8007a28 <_printf_float+0x94>
 8007a84:	6863      	ldr	r3, [r4, #4]
 8007a86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a8a:	9206      	str	r2, [sp, #24]
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	d13f      	bne.n	8007b10 <_printf_float+0x17c>
 8007a90:	2306      	movs	r3, #6
 8007a92:	6063      	str	r3, [r4, #4]
 8007a94:	9b05      	ldr	r3, [sp, #20]
 8007a96:	6861      	ldr	r1, [r4, #4]
 8007a98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9303      	str	r3, [sp, #12]
 8007aa0:	ab0a      	add	r3, sp, #40	; 0x28
 8007aa2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007aa6:	ab09      	add	r3, sp, #36	; 0x24
 8007aa8:	ec49 8b10 	vmov	d0, r8, r9
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	6022      	str	r2, [r4, #0]
 8007ab0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f7ff fecd 	bl	8007854 <__cvt>
 8007aba:	9b06      	ldr	r3, [sp, #24]
 8007abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007abe:	2b47      	cmp	r3, #71	; 0x47
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	d108      	bne.n	8007ad6 <_printf_float+0x142>
 8007ac4:	1cc8      	adds	r0, r1, #3
 8007ac6:	db02      	blt.n	8007ace <_printf_float+0x13a>
 8007ac8:	6863      	ldr	r3, [r4, #4]
 8007aca:	4299      	cmp	r1, r3
 8007acc:	dd41      	ble.n	8007b52 <_printf_float+0x1be>
 8007ace:	f1ab 0b02 	sub.w	fp, fp, #2
 8007ad2:	fa5f fb8b 	uxtb.w	fp, fp
 8007ad6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ada:	d820      	bhi.n	8007b1e <_printf_float+0x18a>
 8007adc:	3901      	subs	r1, #1
 8007ade:	465a      	mov	r2, fp
 8007ae0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ae4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ae6:	f7ff ff17 	bl	8007918 <__exponent>
 8007aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aec:	1813      	adds	r3, r2, r0
 8007aee:	2a01      	cmp	r2, #1
 8007af0:	4681      	mov	r9, r0
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	dc02      	bgt.n	8007afc <_printf_float+0x168>
 8007af6:	6822      	ldr	r2, [r4, #0]
 8007af8:	07d2      	lsls	r2, r2, #31
 8007afa:	d501      	bpl.n	8007b00 <_printf_float+0x16c>
 8007afc:	3301      	adds	r3, #1
 8007afe:	6123      	str	r3, [r4, #16]
 8007b00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d09c      	beq.n	8007a42 <_printf_float+0xae>
 8007b08:	232d      	movs	r3, #45	; 0x2d
 8007b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b0e:	e798      	b.n	8007a42 <_printf_float+0xae>
 8007b10:	9a06      	ldr	r2, [sp, #24]
 8007b12:	2a47      	cmp	r2, #71	; 0x47
 8007b14:	d1be      	bne.n	8007a94 <_printf_float+0x100>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1bc      	bne.n	8007a94 <_printf_float+0x100>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e7b9      	b.n	8007a92 <_printf_float+0xfe>
 8007b1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b22:	d118      	bne.n	8007b56 <_printf_float+0x1c2>
 8007b24:	2900      	cmp	r1, #0
 8007b26:	6863      	ldr	r3, [r4, #4]
 8007b28:	dd0b      	ble.n	8007b42 <_printf_float+0x1ae>
 8007b2a:	6121      	str	r1, [r4, #16]
 8007b2c:	b913      	cbnz	r3, 8007b34 <_printf_float+0x1a0>
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	07d0      	lsls	r0, r2, #31
 8007b32:	d502      	bpl.n	8007b3a <_printf_float+0x1a6>
 8007b34:	3301      	adds	r3, #1
 8007b36:	440b      	add	r3, r1
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b3c:	f04f 0900 	mov.w	r9, #0
 8007b40:	e7de      	b.n	8007b00 <_printf_float+0x16c>
 8007b42:	b913      	cbnz	r3, 8007b4a <_printf_float+0x1b6>
 8007b44:	6822      	ldr	r2, [r4, #0]
 8007b46:	07d2      	lsls	r2, r2, #31
 8007b48:	d501      	bpl.n	8007b4e <_printf_float+0x1ba>
 8007b4a:	3302      	adds	r3, #2
 8007b4c:	e7f4      	b.n	8007b38 <_printf_float+0x1a4>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e7f2      	b.n	8007b38 <_printf_float+0x1a4>
 8007b52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b58:	4299      	cmp	r1, r3
 8007b5a:	db05      	blt.n	8007b68 <_printf_float+0x1d4>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	6121      	str	r1, [r4, #16]
 8007b60:	07d8      	lsls	r0, r3, #31
 8007b62:	d5ea      	bpl.n	8007b3a <_printf_float+0x1a6>
 8007b64:	1c4b      	adds	r3, r1, #1
 8007b66:	e7e7      	b.n	8007b38 <_printf_float+0x1a4>
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	bfd4      	ite	le
 8007b6c:	f1c1 0202 	rsble	r2, r1, #2
 8007b70:	2201      	movgt	r2, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	e7e0      	b.n	8007b38 <_printf_float+0x1a4>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	055a      	lsls	r2, r3, #21
 8007b7a:	d407      	bmi.n	8007b8c <_printf_float+0x1f8>
 8007b7c:	6923      	ldr	r3, [r4, #16]
 8007b7e:	4642      	mov	r2, r8
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	d12c      	bne.n	8007be4 <_printf_float+0x250>
 8007b8a:	e764      	b.n	8007a56 <_printf_float+0xc2>
 8007b8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b90:	f240 80e0 	bls.w	8007d54 <_printf_float+0x3c0>
 8007b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f7f8 ffbc 	bl	8000b18 <__aeabi_dcmpeq>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d034      	beq.n	8007c0e <_printf_float+0x27a>
 8007ba4:	4a37      	ldr	r2, [pc, #220]	; (8007c84 <_printf_float+0x2f0>)
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b8      	blx	r7
 8007bae:	3001      	adds	r0, #1
 8007bb0:	f43f af51 	beq.w	8007a56 <_printf_float+0xc2>
 8007bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	db02      	blt.n	8007bc2 <_printf_float+0x22e>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	07d8      	lsls	r0, r3, #31
 8007bc0:	d510      	bpl.n	8007be4 <_printf_float+0x250>
 8007bc2:	ee18 3a10 	vmov	r3, s16
 8007bc6:	4652      	mov	r2, sl
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b8      	blx	r7
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f43f af41 	beq.w	8007a56 <_printf_float+0xc2>
 8007bd4:	f04f 0800 	mov.w	r8, #0
 8007bd8:	f104 091a 	add.w	r9, r4, #26
 8007bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bde:	3b01      	subs	r3, #1
 8007be0:	4543      	cmp	r3, r8
 8007be2:	dc09      	bgt.n	8007bf8 <_printf_float+0x264>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	079b      	lsls	r3, r3, #30
 8007be8:	f100 8105 	bmi.w	8007df6 <_printf_float+0x462>
 8007bec:	68e0      	ldr	r0, [r4, #12]
 8007bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf0:	4298      	cmp	r0, r3
 8007bf2:	bfb8      	it	lt
 8007bf4:	4618      	movlt	r0, r3
 8007bf6:	e730      	b.n	8007a5a <_printf_float+0xc6>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	464a      	mov	r2, r9
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	f43f af27 	beq.w	8007a56 <_printf_float+0xc2>
 8007c08:	f108 0801 	add.w	r8, r8, #1
 8007c0c:	e7e6      	b.n	8007bdc <_printf_float+0x248>
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dc39      	bgt.n	8007c88 <_printf_float+0x2f4>
 8007c14:	4a1b      	ldr	r2, [pc, #108]	; (8007c84 <_printf_float+0x2f0>)
 8007c16:	2301      	movs	r3, #1
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f43f af19 	beq.w	8007a56 <_printf_float+0xc2>
 8007c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	d102      	bne.n	8007c32 <_printf_float+0x29e>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	07d9      	lsls	r1, r3, #31
 8007c30:	d5d8      	bpl.n	8007be4 <_printf_float+0x250>
 8007c32:	ee18 3a10 	vmov	r3, s16
 8007c36:	4652      	mov	r2, sl
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b8      	blx	r7
 8007c3e:	3001      	adds	r0, #1
 8007c40:	f43f af09 	beq.w	8007a56 <_printf_float+0xc2>
 8007c44:	f04f 0900 	mov.w	r9, #0
 8007c48:	f104 0a1a 	add.w	sl, r4, #26
 8007c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4e:	425b      	negs	r3, r3
 8007c50:	454b      	cmp	r3, r9
 8007c52:	dc01      	bgt.n	8007c58 <_printf_float+0x2c4>
 8007c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c56:	e792      	b.n	8007b7e <_printf_float+0x1ea>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4652      	mov	r2, sl
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f aef7 	beq.w	8007a56 <_printf_float+0xc2>
 8007c68:	f109 0901 	add.w	r9, r9, #1
 8007c6c:	e7ee      	b.n	8007c4c <_printf_float+0x2b8>
 8007c6e:	bf00      	nop
 8007c70:	7fefffff 	.word	0x7fefffff
 8007c74:	0800a9d0 	.word	0x0800a9d0
 8007c78:	0800a9d4 	.word	0x0800a9d4
 8007c7c:	0800a9dc 	.word	0x0800a9dc
 8007c80:	0800a9d8 	.word	0x0800a9d8
 8007c84:	0800a9e0 	.word	0x0800a9e0
 8007c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	bfa8      	it	ge
 8007c90:	461a      	movge	r2, r3
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	4691      	mov	r9, r2
 8007c96:	dc37      	bgt.n	8007d08 <_printf_float+0x374>
 8007c98:	f04f 0b00 	mov.w	fp, #0
 8007c9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ca0:	f104 021a 	add.w	r2, r4, #26
 8007ca4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ca6:	9305      	str	r3, [sp, #20]
 8007ca8:	eba3 0309 	sub.w	r3, r3, r9
 8007cac:	455b      	cmp	r3, fp
 8007cae:	dc33      	bgt.n	8007d18 <_printf_float+0x384>
 8007cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	db3b      	blt.n	8007d30 <_printf_float+0x39c>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	07da      	lsls	r2, r3, #31
 8007cbc:	d438      	bmi.n	8007d30 <_printf_float+0x39c>
 8007cbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cc0:	9b05      	ldr	r3, [sp, #20]
 8007cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	eba2 0901 	sub.w	r9, r2, r1
 8007cca:	4599      	cmp	r9, r3
 8007ccc:	bfa8      	it	ge
 8007cce:	4699      	movge	r9, r3
 8007cd0:	f1b9 0f00 	cmp.w	r9, #0
 8007cd4:	dc35      	bgt.n	8007d42 <_printf_float+0x3ae>
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cde:	f104 0a1a 	add.w	sl, r4, #26
 8007ce2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	eba3 0309 	sub.w	r3, r3, r9
 8007cec:	4543      	cmp	r3, r8
 8007cee:	f77f af79 	ble.w	8007be4 <_printf_float+0x250>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	4652      	mov	r2, sl
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	47b8      	blx	r7
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	f43f aeaa 	beq.w	8007a56 <_printf_float+0xc2>
 8007d02:	f108 0801 	add.w	r8, r8, #1
 8007d06:	e7ec      	b.n	8007ce2 <_printf_float+0x34e>
 8007d08:	4613      	mov	r3, r2
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4642      	mov	r2, r8
 8007d0e:	4628      	mov	r0, r5
 8007d10:	47b8      	blx	r7
 8007d12:	3001      	adds	r0, #1
 8007d14:	d1c0      	bne.n	8007c98 <_printf_float+0x304>
 8007d16:	e69e      	b.n	8007a56 <_printf_float+0xc2>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	9205      	str	r2, [sp, #20]
 8007d20:	47b8      	blx	r7
 8007d22:	3001      	adds	r0, #1
 8007d24:	f43f ae97 	beq.w	8007a56 <_printf_float+0xc2>
 8007d28:	9a05      	ldr	r2, [sp, #20]
 8007d2a:	f10b 0b01 	add.w	fp, fp, #1
 8007d2e:	e7b9      	b.n	8007ca4 <_printf_float+0x310>
 8007d30:	ee18 3a10 	vmov	r3, s16
 8007d34:	4652      	mov	r2, sl
 8007d36:	4631      	mov	r1, r6
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b8      	blx	r7
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d1be      	bne.n	8007cbe <_printf_float+0x32a>
 8007d40:	e689      	b.n	8007a56 <_printf_float+0xc2>
 8007d42:	9a05      	ldr	r2, [sp, #20]
 8007d44:	464b      	mov	r3, r9
 8007d46:	4442      	add	r2, r8
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	47b8      	blx	r7
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d1c1      	bne.n	8007cd6 <_printf_float+0x342>
 8007d52:	e680      	b.n	8007a56 <_printf_float+0xc2>
 8007d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d56:	2a01      	cmp	r2, #1
 8007d58:	dc01      	bgt.n	8007d5e <_printf_float+0x3ca>
 8007d5a:	07db      	lsls	r3, r3, #31
 8007d5c:	d538      	bpl.n	8007dd0 <_printf_float+0x43c>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4642      	mov	r2, r8
 8007d62:	4631      	mov	r1, r6
 8007d64:	4628      	mov	r0, r5
 8007d66:	47b8      	blx	r7
 8007d68:	3001      	adds	r0, #1
 8007d6a:	f43f ae74 	beq.w	8007a56 <_printf_float+0xc2>
 8007d6e:	ee18 3a10 	vmov	r3, s16
 8007d72:	4652      	mov	r2, sl
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f ae6b 	beq.w	8007a56 <_printf_float+0xc2>
 8007d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d84:	2200      	movs	r2, #0
 8007d86:	2300      	movs	r3, #0
 8007d88:	f7f8 fec6 	bl	8000b18 <__aeabi_dcmpeq>
 8007d8c:	b9d8      	cbnz	r0, 8007dc6 <_printf_float+0x432>
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	f108 0201 	add.w	r2, r8, #1
 8007d94:	3b01      	subs	r3, #1
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b8      	blx	r7
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d10e      	bne.n	8007dbe <_printf_float+0x42a>
 8007da0:	e659      	b.n	8007a56 <_printf_float+0xc2>
 8007da2:	2301      	movs	r3, #1
 8007da4:	4652      	mov	r2, sl
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	f43f ae52 	beq.w	8007a56 <_printf_float+0xc2>
 8007db2:	f108 0801 	add.w	r8, r8, #1
 8007db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db8:	3b01      	subs	r3, #1
 8007dba:	4543      	cmp	r3, r8
 8007dbc:	dcf1      	bgt.n	8007da2 <_printf_float+0x40e>
 8007dbe:	464b      	mov	r3, r9
 8007dc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dc4:	e6dc      	b.n	8007b80 <_printf_float+0x1ec>
 8007dc6:	f04f 0800 	mov.w	r8, #0
 8007dca:	f104 0a1a 	add.w	sl, r4, #26
 8007dce:	e7f2      	b.n	8007db6 <_printf_float+0x422>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	e7df      	b.n	8007d96 <_printf_float+0x402>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	464a      	mov	r2, r9
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	f43f ae38 	beq.w	8007a56 <_printf_float+0xc2>
 8007de6:	f108 0801 	add.w	r8, r8, #1
 8007dea:	68e3      	ldr	r3, [r4, #12]
 8007dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dee:	1a5b      	subs	r3, r3, r1
 8007df0:	4543      	cmp	r3, r8
 8007df2:	dcf0      	bgt.n	8007dd6 <_printf_float+0x442>
 8007df4:	e6fa      	b.n	8007bec <_printf_float+0x258>
 8007df6:	f04f 0800 	mov.w	r8, #0
 8007dfa:	f104 0919 	add.w	r9, r4, #25
 8007dfe:	e7f4      	b.n	8007dea <_printf_float+0x456>

08007e00 <_printf_common>:
 8007e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	4616      	mov	r6, r2
 8007e06:	4699      	mov	r9, r3
 8007e08:	688a      	ldr	r2, [r1, #8]
 8007e0a:	690b      	ldr	r3, [r1, #16]
 8007e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	bfb8      	it	lt
 8007e14:	4613      	movlt	r3, r2
 8007e16:	6033      	str	r3, [r6, #0]
 8007e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	460c      	mov	r4, r1
 8007e20:	b10a      	cbz	r2, 8007e26 <_printf_common+0x26>
 8007e22:	3301      	adds	r3, #1
 8007e24:	6033      	str	r3, [r6, #0]
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	0699      	lsls	r1, r3, #26
 8007e2a:	bf42      	ittt	mi
 8007e2c:	6833      	ldrmi	r3, [r6, #0]
 8007e2e:	3302      	addmi	r3, #2
 8007e30:	6033      	strmi	r3, [r6, #0]
 8007e32:	6825      	ldr	r5, [r4, #0]
 8007e34:	f015 0506 	ands.w	r5, r5, #6
 8007e38:	d106      	bne.n	8007e48 <_printf_common+0x48>
 8007e3a:	f104 0a19 	add.w	sl, r4, #25
 8007e3e:	68e3      	ldr	r3, [r4, #12]
 8007e40:	6832      	ldr	r2, [r6, #0]
 8007e42:	1a9b      	subs	r3, r3, r2
 8007e44:	42ab      	cmp	r3, r5
 8007e46:	dc26      	bgt.n	8007e96 <_printf_common+0x96>
 8007e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e4c:	1e13      	subs	r3, r2, #0
 8007e4e:	6822      	ldr	r2, [r4, #0]
 8007e50:	bf18      	it	ne
 8007e52:	2301      	movne	r3, #1
 8007e54:	0692      	lsls	r2, r2, #26
 8007e56:	d42b      	bmi.n	8007eb0 <_printf_common+0xb0>
 8007e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	4638      	mov	r0, r7
 8007e60:	47c0      	blx	r8
 8007e62:	3001      	adds	r0, #1
 8007e64:	d01e      	beq.n	8007ea4 <_printf_common+0xa4>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	68e5      	ldr	r5, [r4, #12]
 8007e6a:	6832      	ldr	r2, [r6, #0]
 8007e6c:	f003 0306 	and.w	r3, r3, #6
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	bf08      	it	eq
 8007e74:	1aad      	subeq	r5, r5, r2
 8007e76:	68a3      	ldr	r3, [r4, #8]
 8007e78:	6922      	ldr	r2, [r4, #16]
 8007e7a:	bf0c      	ite	eq
 8007e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e80:	2500      	movne	r5, #0
 8007e82:	4293      	cmp	r3, r2
 8007e84:	bfc4      	itt	gt
 8007e86:	1a9b      	subgt	r3, r3, r2
 8007e88:	18ed      	addgt	r5, r5, r3
 8007e8a:	2600      	movs	r6, #0
 8007e8c:	341a      	adds	r4, #26
 8007e8e:	42b5      	cmp	r5, r6
 8007e90:	d11a      	bne.n	8007ec8 <_printf_common+0xc8>
 8007e92:	2000      	movs	r0, #0
 8007e94:	e008      	b.n	8007ea8 <_printf_common+0xa8>
 8007e96:	2301      	movs	r3, #1
 8007e98:	4652      	mov	r2, sl
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	47c0      	blx	r8
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d103      	bne.n	8007eac <_printf_common+0xac>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eac:	3501      	adds	r5, #1
 8007eae:	e7c6      	b.n	8007e3e <_printf_common+0x3e>
 8007eb0:	18e1      	adds	r1, r4, r3
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	2030      	movs	r0, #48	; 0x30
 8007eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eba:	4422      	add	r2, r4
 8007ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec4:	3302      	adds	r3, #2
 8007ec6:	e7c7      	b.n	8007e58 <_printf_common+0x58>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	4622      	mov	r2, r4
 8007ecc:	4649      	mov	r1, r9
 8007ece:	4638      	mov	r0, r7
 8007ed0:	47c0      	blx	r8
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d0e6      	beq.n	8007ea4 <_printf_common+0xa4>
 8007ed6:	3601      	adds	r6, #1
 8007ed8:	e7d9      	b.n	8007e8e <_printf_common+0x8e>
	...

08007edc <_printf_i>:
 8007edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	4691      	mov	r9, r2
 8007ee4:	7e27      	ldrb	r7, [r4, #24]
 8007ee6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ee8:	2f78      	cmp	r7, #120	; 0x78
 8007eea:	4680      	mov	r8, r0
 8007eec:	469a      	mov	sl, r3
 8007eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ef2:	d807      	bhi.n	8007f04 <_printf_i+0x28>
 8007ef4:	2f62      	cmp	r7, #98	; 0x62
 8007ef6:	d80a      	bhi.n	8007f0e <_printf_i+0x32>
 8007ef8:	2f00      	cmp	r7, #0
 8007efa:	f000 80d8 	beq.w	80080ae <_printf_i+0x1d2>
 8007efe:	2f58      	cmp	r7, #88	; 0x58
 8007f00:	f000 80a3 	beq.w	800804a <_printf_i+0x16e>
 8007f04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f0c:	e03a      	b.n	8007f84 <_printf_i+0xa8>
 8007f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f12:	2b15      	cmp	r3, #21
 8007f14:	d8f6      	bhi.n	8007f04 <_printf_i+0x28>
 8007f16:	a001      	add	r0, pc, #4	; (adr r0, 8007f1c <_printf_i+0x40>)
 8007f18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007f1c:	08007f75 	.word	0x08007f75
 8007f20:	08007f89 	.word	0x08007f89
 8007f24:	08007f05 	.word	0x08007f05
 8007f28:	08007f05 	.word	0x08007f05
 8007f2c:	08007f05 	.word	0x08007f05
 8007f30:	08007f05 	.word	0x08007f05
 8007f34:	08007f89 	.word	0x08007f89
 8007f38:	08007f05 	.word	0x08007f05
 8007f3c:	08007f05 	.word	0x08007f05
 8007f40:	08007f05 	.word	0x08007f05
 8007f44:	08007f05 	.word	0x08007f05
 8007f48:	08008095 	.word	0x08008095
 8007f4c:	08007fb9 	.word	0x08007fb9
 8007f50:	08008077 	.word	0x08008077
 8007f54:	08007f05 	.word	0x08007f05
 8007f58:	08007f05 	.word	0x08007f05
 8007f5c:	080080b7 	.word	0x080080b7
 8007f60:	08007f05 	.word	0x08007f05
 8007f64:	08007fb9 	.word	0x08007fb9
 8007f68:	08007f05 	.word	0x08007f05
 8007f6c:	08007f05 	.word	0x08007f05
 8007f70:	0800807f 	.word	0x0800807f
 8007f74:	680b      	ldr	r3, [r1, #0]
 8007f76:	1d1a      	adds	r2, r3, #4
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	600a      	str	r2, [r1, #0]
 8007f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f84:	2301      	movs	r3, #1
 8007f86:	e0a3      	b.n	80080d0 <_printf_i+0x1f4>
 8007f88:	6825      	ldr	r5, [r4, #0]
 8007f8a:	6808      	ldr	r0, [r1, #0]
 8007f8c:	062e      	lsls	r6, r5, #24
 8007f8e:	f100 0304 	add.w	r3, r0, #4
 8007f92:	d50a      	bpl.n	8007faa <_printf_i+0xce>
 8007f94:	6805      	ldr	r5, [r0, #0]
 8007f96:	600b      	str	r3, [r1, #0]
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	da03      	bge.n	8007fa4 <_printf_i+0xc8>
 8007f9c:	232d      	movs	r3, #45	; 0x2d
 8007f9e:	426d      	negs	r5, r5
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa4:	485e      	ldr	r0, [pc, #376]	; (8008120 <_printf_i+0x244>)
 8007fa6:	230a      	movs	r3, #10
 8007fa8:	e019      	b.n	8007fde <_printf_i+0x102>
 8007faa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007fae:	6805      	ldr	r5, [r0, #0]
 8007fb0:	600b      	str	r3, [r1, #0]
 8007fb2:	bf18      	it	ne
 8007fb4:	b22d      	sxthne	r5, r5
 8007fb6:	e7ef      	b.n	8007f98 <_printf_i+0xbc>
 8007fb8:	680b      	ldr	r3, [r1, #0]
 8007fba:	6825      	ldr	r5, [r4, #0]
 8007fbc:	1d18      	adds	r0, r3, #4
 8007fbe:	6008      	str	r0, [r1, #0]
 8007fc0:	0628      	lsls	r0, r5, #24
 8007fc2:	d501      	bpl.n	8007fc8 <_printf_i+0xec>
 8007fc4:	681d      	ldr	r5, [r3, #0]
 8007fc6:	e002      	b.n	8007fce <_printf_i+0xf2>
 8007fc8:	0669      	lsls	r1, r5, #25
 8007fca:	d5fb      	bpl.n	8007fc4 <_printf_i+0xe8>
 8007fcc:	881d      	ldrh	r5, [r3, #0]
 8007fce:	4854      	ldr	r0, [pc, #336]	; (8008120 <_printf_i+0x244>)
 8007fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8007fd2:	bf0c      	ite	eq
 8007fd4:	2308      	moveq	r3, #8
 8007fd6:	230a      	movne	r3, #10
 8007fd8:	2100      	movs	r1, #0
 8007fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fde:	6866      	ldr	r6, [r4, #4]
 8007fe0:	60a6      	str	r6, [r4, #8]
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	bfa2      	ittt	ge
 8007fe6:	6821      	ldrge	r1, [r4, #0]
 8007fe8:	f021 0104 	bicge.w	r1, r1, #4
 8007fec:	6021      	strge	r1, [r4, #0]
 8007fee:	b90d      	cbnz	r5, 8007ff4 <_printf_i+0x118>
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	d04d      	beq.n	8008090 <_printf_i+0x1b4>
 8007ff4:	4616      	mov	r6, r2
 8007ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8007ffe:	5dc7      	ldrb	r7, [r0, r7]
 8008000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008004:	462f      	mov	r7, r5
 8008006:	42bb      	cmp	r3, r7
 8008008:	460d      	mov	r5, r1
 800800a:	d9f4      	bls.n	8007ff6 <_printf_i+0x11a>
 800800c:	2b08      	cmp	r3, #8
 800800e:	d10b      	bne.n	8008028 <_printf_i+0x14c>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	07df      	lsls	r7, r3, #31
 8008014:	d508      	bpl.n	8008028 <_printf_i+0x14c>
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	4299      	cmp	r1, r3
 800801c:	bfde      	ittt	le
 800801e:	2330      	movle	r3, #48	; 0x30
 8008020:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008024:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008028:	1b92      	subs	r2, r2, r6
 800802a:	6122      	str	r2, [r4, #16]
 800802c:	f8cd a000 	str.w	sl, [sp]
 8008030:	464b      	mov	r3, r9
 8008032:	aa03      	add	r2, sp, #12
 8008034:	4621      	mov	r1, r4
 8008036:	4640      	mov	r0, r8
 8008038:	f7ff fee2 	bl	8007e00 <_printf_common>
 800803c:	3001      	adds	r0, #1
 800803e:	d14c      	bne.n	80080da <_printf_i+0x1fe>
 8008040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008044:	b004      	add	sp, #16
 8008046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804a:	4835      	ldr	r0, [pc, #212]	; (8008120 <_printf_i+0x244>)
 800804c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	680e      	ldr	r6, [r1, #0]
 8008054:	061f      	lsls	r7, r3, #24
 8008056:	f856 5b04 	ldr.w	r5, [r6], #4
 800805a:	600e      	str	r6, [r1, #0]
 800805c:	d514      	bpl.n	8008088 <_printf_i+0x1ac>
 800805e:	07d9      	lsls	r1, r3, #31
 8008060:	bf44      	itt	mi
 8008062:	f043 0320 	orrmi.w	r3, r3, #32
 8008066:	6023      	strmi	r3, [r4, #0]
 8008068:	b91d      	cbnz	r5, 8008072 <_printf_i+0x196>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	f023 0320 	bic.w	r3, r3, #32
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	2310      	movs	r3, #16
 8008074:	e7b0      	b.n	8007fd8 <_printf_i+0xfc>
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	f043 0320 	orr.w	r3, r3, #32
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	2378      	movs	r3, #120	; 0x78
 8008080:	4828      	ldr	r0, [pc, #160]	; (8008124 <_printf_i+0x248>)
 8008082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008086:	e7e3      	b.n	8008050 <_printf_i+0x174>
 8008088:	065e      	lsls	r6, r3, #25
 800808a:	bf48      	it	mi
 800808c:	b2ad      	uxthmi	r5, r5
 800808e:	e7e6      	b.n	800805e <_printf_i+0x182>
 8008090:	4616      	mov	r6, r2
 8008092:	e7bb      	b.n	800800c <_printf_i+0x130>
 8008094:	680b      	ldr	r3, [r1, #0]
 8008096:	6826      	ldr	r6, [r4, #0]
 8008098:	6960      	ldr	r0, [r4, #20]
 800809a:	1d1d      	adds	r5, r3, #4
 800809c:	600d      	str	r5, [r1, #0]
 800809e:	0635      	lsls	r5, r6, #24
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	d501      	bpl.n	80080a8 <_printf_i+0x1cc>
 80080a4:	6018      	str	r0, [r3, #0]
 80080a6:	e002      	b.n	80080ae <_printf_i+0x1d2>
 80080a8:	0671      	lsls	r1, r6, #25
 80080aa:	d5fb      	bpl.n	80080a4 <_printf_i+0x1c8>
 80080ac:	8018      	strh	r0, [r3, #0]
 80080ae:	2300      	movs	r3, #0
 80080b0:	6123      	str	r3, [r4, #16]
 80080b2:	4616      	mov	r6, r2
 80080b4:	e7ba      	b.n	800802c <_printf_i+0x150>
 80080b6:	680b      	ldr	r3, [r1, #0]
 80080b8:	1d1a      	adds	r2, r3, #4
 80080ba:	600a      	str	r2, [r1, #0]
 80080bc:	681e      	ldr	r6, [r3, #0]
 80080be:	6862      	ldr	r2, [r4, #4]
 80080c0:	2100      	movs	r1, #0
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7f8 f8b4 	bl	8000230 <memchr>
 80080c8:	b108      	cbz	r0, 80080ce <_printf_i+0x1f2>
 80080ca:	1b80      	subs	r0, r0, r6
 80080cc:	6060      	str	r0, [r4, #4]
 80080ce:	6863      	ldr	r3, [r4, #4]
 80080d0:	6123      	str	r3, [r4, #16]
 80080d2:	2300      	movs	r3, #0
 80080d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d8:	e7a8      	b.n	800802c <_printf_i+0x150>
 80080da:	6923      	ldr	r3, [r4, #16]
 80080dc:	4632      	mov	r2, r6
 80080de:	4649      	mov	r1, r9
 80080e0:	4640      	mov	r0, r8
 80080e2:	47d0      	blx	sl
 80080e4:	3001      	adds	r0, #1
 80080e6:	d0ab      	beq.n	8008040 <_printf_i+0x164>
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	079b      	lsls	r3, r3, #30
 80080ec:	d413      	bmi.n	8008116 <_printf_i+0x23a>
 80080ee:	68e0      	ldr	r0, [r4, #12]
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	4298      	cmp	r0, r3
 80080f4:	bfb8      	it	lt
 80080f6:	4618      	movlt	r0, r3
 80080f8:	e7a4      	b.n	8008044 <_printf_i+0x168>
 80080fa:	2301      	movs	r3, #1
 80080fc:	4632      	mov	r2, r6
 80080fe:	4649      	mov	r1, r9
 8008100:	4640      	mov	r0, r8
 8008102:	47d0      	blx	sl
 8008104:	3001      	adds	r0, #1
 8008106:	d09b      	beq.n	8008040 <_printf_i+0x164>
 8008108:	3501      	adds	r5, #1
 800810a:	68e3      	ldr	r3, [r4, #12]
 800810c:	9903      	ldr	r1, [sp, #12]
 800810e:	1a5b      	subs	r3, r3, r1
 8008110:	42ab      	cmp	r3, r5
 8008112:	dcf2      	bgt.n	80080fa <_printf_i+0x21e>
 8008114:	e7eb      	b.n	80080ee <_printf_i+0x212>
 8008116:	2500      	movs	r5, #0
 8008118:	f104 0619 	add.w	r6, r4, #25
 800811c:	e7f5      	b.n	800810a <_printf_i+0x22e>
 800811e:	bf00      	nop
 8008120:	0800a9e2 	.word	0x0800a9e2
 8008124:	0800a9f3 	.word	0x0800a9f3

08008128 <iprintf>:
 8008128:	b40f      	push	{r0, r1, r2, r3}
 800812a:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <iprintf+0x2c>)
 800812c:	b513      	push	{r0, r1, r4, lr}
 800812e:	681c      	ldr	r4, [r3, #0]
 8008130:	b124      	cbz	r4, 800813c <iprintf+0x14>
 8008132:	69a3      	ldr	r3, [r4, #24]
 8008134:	b913      	cbnz	r3, 800813c <iprintf+0x14>
 8008136:	4620      	mov	r0, r4
 8008138:	f001 f91c 	bl	8009374 <__sinit>
 800813c:	ab05      	add	r3, sp, #20
 800813e:	9a04      	ldr	r2, [sp, #16]
 8008140:	68a1      	ldr	r1, [r4, #8]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	4620      	mov	r0, r4
 8008146:	f001 ff4b 	bl	8009fe0 <_vfiprintf_r>
 800814a:	b002      	add	sp, #8
 800814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008150:	b004      	add	sp, #16
 8008152:	4770      	bx	lr
 8008154:	2000000c 	.word	0x2000000c

08008158 <putchar>:
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <putchar+0x28>)
 800815a:	b513      	push	{r0, r1, r4, lr}
 800815c:	681c      	ldr	r4, [r3, #0]
 800815e:	4601      	mov	r1, r0
 8008160:	b134      	cbz	r4, 8008170 <putchar+0x18>
 8008162:	69a3      	ldr	r3, [r4, #24]
 8008164:	b923      	cbnz	r3, 8008170 <putchar+0x18>
 8008166:	9001      	str	r0, [sp, #4]
 8008168:	4620      	mov	r0, r4
 800816a:	f001 f903 	bl	8009374 <__sinit>
 800816e:	9901      	ldr	r1, [sp, #4]
 8008170:	68a2      	ldr	r2, [r4, #8]
 8008172:	4620      	mov	r0, r4
 8008174:	b002      	add	sp, #8
 8008176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817a:	f002 b861 	b.w	800a240 <_putc_r>
 800817e:	bf00      	nop
 8008180:	2000000c 	.word	0x2000000c

08008184 <_puts_r>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	460e      	mov	r6, r1
 8008188:	4605      	mov	r5, r0
 800818a:	b118      	cbz	r0, 8008194 <_puts_r+0x10>
 800818c:	6983      	ldr	r3, [r0, #24]
 800818e:	b90b      	cbnz	r3, 8008194 <_puts_r+0x10>
 8008190:	f001 f8f0 	bl	8009374 <__sinit>
 8008194:	69ab      	ldr	r3, [r5, #24]
 8008196:	68ac      	ldr	r4, [r5, #8]
 8008198:	b913      	cbnz	r3, 80081a0 <_puts_r+0x1c>
 800819a:	4628      	mov	r0, r5
 800819c:	f001 f8ea 	bl	8009374 <__sinit>
 80081a0:	4b2c      	ldr	r3, [pc, #176]	; (8008254 <_puts_r+0xd0>)
 80081a2:	429c      	cmp	r4, r3
 80081a4:	d120      	bne.n	80081e8 <_puts_r+0x64>
 80081a6:	686c      	ldr	r4, [r5, #4]
 80081a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081aa:	07db      	lsls	r3, r3, #31
 80081ac:	d405      	bmi.n	80081ba <_puts_r+0x36>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	0598      	lsls	r0, r3, #22
 80081b2:	d402      	bmi.n	80081ba <_puts_r+0x36>
 80081b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081b6:	f001 f980 	bl	80094ba <__retarget_lock_acquire_recursive>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	0719      	lsls	r1, r3, #28
 80081be:	d51d      	bpl.n	80081fc <_puts_r+0x78>
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	b1db      	cbz	r3, 80081fc <_puts_r+0x78>
 80081c4:	3e01      	subs	r6, #1
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081cc:	3b01      	subs	r3, #1
 80081ce:	60a3      	str	r3, [r4, #8]
 80081d0:	bb39      	cbnz	r1, 8008222 <_puts_r+0x9e>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	da38      	bge.n	8008248 <_puts_r+0xc4>
 80081d6:	4622      	mov	r2, r4
 80081d8:	210a      	movs	r1, #10
 80081da:	4628      	mov	r0, r5
 80081dc:	f000 f878 	bl	80082d0 <__swbuf_r>
 80081e0:	3001      	adds	r0, #1
 80081e2:	d011      	beq.n	8008208 <_puts_r+0x84>
 80081e4:	250a      	movs	r5, #10
 80081e6:	e011      	b.n	800820c <_puts_r+0x88>
 80081e8:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <_puts_r+0xd4>)
 80081ea:	429c      	cmp	r4, r3
 80081ec:	d101      	bne.n	80081f2 <_puts_r+0x6e>
 80081ee:	68ac      	ldr	r4, [r5, #8]
 80081f0:	e7da      	b.n	80081a8 <_puts_r+0x24>
 80081f2:	4b1a      	ldr	r3, [pc, #104]	; (800825c <_puts_r+0xd8>)
 80081f4:	429c      	cmp	r4, r3
 80081f6:	bf08      	it	eq
 80081f8:	68ec      	ldreq	r4, [r5, #12]
 80081fa:	e7d5      	b.n	80081a8 <_puts_r+0x24>
 80081fc:	4621      	mov	r1, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 f8b8 	bl	8008374 <__swsetup_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	d0dd      	beq.n	80081c4 <_puts_r+0x40>
 8008208:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800820c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800820e:	07da      	lsls	r2, r3, #31
 8008210:	d405      	bmi.n	800821e <_puts_r+0x9a>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	059b      	lsls	r3, r3, #22
 8008216:	d402      	bmi.n	800821e <_puts_r+0x9a>
 8008218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800821a:	f001 f94f 	bl	80094bc <__retarget_lock_release_recursive>
 800821e:	4628      	mov	r0, r5
 8008220:	bd70      	pop	{r4, r5, r6, pc}
 8008222:	2b00      	cmp	r3, #0
 8008224:	da04      	bge.n	8008230 <_puts_r+0xac>
 8008226:	69a2      	ldr	r2, [r4, #24]
 8008228:	429a      	cmp	r2, r3
 800822a:	dc06      	bgt.n	800823a <_puts_r+0xb6>
 800822c:	290a      	cmp	r1, #10
 800822e:	d004      	beq.n	800823a <_puts_r+0xb6>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	6022      	str	r2, [r4, #0]
 8008236:	7019      	strb	r1, [r3, #0]
 8008238:	e7c5      	b.n	80081c6 <_puts_r+0x42>
 800823a:	4622      	mov	r2, r4
 800823c:	4628      	mov	r0, r5
 800823e:	f000 f847 	bl	80082d0 <__swbuf_r>
 8008242:	3001      	adds	r0, #1
 8008244:	d1bf      	bne.n	80081c6 <_puts_r+0x42>
 8008246:	e7df      	b.n	8008208 <_puts_r+0x84>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	250a      	movs	r5, #10
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	6022      	str	r2, [r4, #0]
 8008250:	701d      	strb	r5, [r3, #0]
 8008252:	e7db      	b.n	800820c <_puts_r+0x88>
 8008254:	0800aab8 	.word	0x0800aab8
 8008258:	0800aad8 	.word	0x0800aad8
 800825c:	0800aa98 	.word	0x0800aa98

08008260 <puts>:
 8008260:	4b02      	ldr	r3, [pc, #8]	; (800826c <puts+0xc>)
 8008262:	4601      	mov	r1, r0
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	f7ff bf8d 	b.w	8008184 <_puts_r>
 800826a:	bf00      	nop
 800826c:	2000000c 	.word	0x2000000c

08008270 <_sbrk_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d06      	ldr	r5, [pc, #24]	; (800828c <_sbrk_r+0x1c>)
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	f7fa fb08 	bl	8002890 <_sbrk>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_sbrk_r+0x1a>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_sbrk_r+0x1a>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	20000460 	.word	0x20000460

08008290 <_vsiprintf_r>:
 8008290:	b500      	push	{lr}
 8008292:	b09b      	sub	sp, #108	; 0x6c
 8008294:	9100      	str	r1, [sp, #0]
 8008296:	9104      	str	r1, [sp, #16]
 8008298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800829c:	9105      	str	r1, [sp, #20]
 800829e:	9102      	str	r1, [sp, #8]
 80082a0:	4905      	ldr	r1, [pc, #20]	; (80082b8 <_vsiprintf_r+0x28>)
 80082a2:	9103      	str	r1, [sp, #12]
 80082a4:	4669      	mov	r1, sp
 80082a6:	f001 fd71 	bl	8009d8c <_svfiprintf_r>
 80082aa:	9b00      	ldr	r3, [sp, #0]
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
 80082b0:	b01b      	add	sp, #108	; 0x6c
 80082b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80082b6:	bf00      	nop
 80082b8:	ffff0208 	.word	0xffff0208

080082bc <vsiprintf>:
 80082bc:	4613      	mov	r3, r2
 80082be:	460a      	mov	r2, r1
 80082c0:	4601      	mov	r1, r0
 80082c2:	4802      	ldr	r0, [pc, #8]	; (80082cc <vsiprintf+0x10>)
 80082c4:	6800      	ldr	r0, [r0, #0]
 80082c6:	f7ff bfe3 	b.w	8008290 <_vsiprintf_r>
 80082ca:	bf00      	nop
 80082cc:	2000000c 	.word	0x2000000c

080082d0 <__swbuf_r>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	460e      	mov	r6, r1
 80082d4:	4614      	mov	r4, r2
 80082d6:	4605      	mov	r5, r0
 80082d8:	b118      	cbz	r0, 80082e2 <__swbuf_r+0x12>
 80082da:	6983      	ldr	r3, [r0, #24]
 80082dc:	b90b      	cbnz	r3, 80082e2 <__swbuf_r+0x12>
 80082de:	f001 f849 	bl	8009374 <__sinit>
 80082e2:	4b21      	ldr	r3, [pc, #132]	; (8008368 <__swbuf_r+0x98>)
 80082e4:	429c      	cmp	r4, r3
 80082e6:	d12b      	bne.n	8008340 <__swbuf_r+0x70>
 80082e8:	686c      	ldr	r4, [r5, #4]
 80082ea:	69a3      	ldr	r3, [r4, #24]
 80082ec:	60a3      	str	r3, [r4, #8]
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	071a      	lsls	r2, r3, #28
 80082f2:	d52f      	bpl.n	8008354 <__swbuf_r+0x84>
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	b36b      	cbz	r3, 8008354 <__swbuf_r+0x84>
 80082f8:	6923      	ldr	r3, [r4, #16]
 80082fa:	6820      	ldr	r0, [r4, #0]
 80082fc:	1ac0      	subs	r0, r0, r3
 80082fe:	6963      	ldr	r3, [r4, #20]
 8008300:	b2f6      	uxtb	r6, r6
 8008302:	4283      	cmp	r3, r0
 8008304:	4637      	mov	r7, r6
 8008306:	dc04      	bgt.n	8008312 <__swbuf_r+0x42>
 8008308:	4621      	mov	r1, r4
 800830a:	4628      	mov	r0, r5
 800830c:	f000 ff9e 	bl	800924c <_fflush_r>
 8008310:	bb30      	cbnz	r0, 8008360 <__swbuf_r+0x90>
 8008312:	68a3      	ldr	r3, [r4, #8]
 8008314:	3b01      	subs	r3, #1
 8008316:	60a3      	str	r3, [r4, #8]
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	6022      	str	r2, [r4, #0]
 800831e:	701e      	strb	r6, [r3, #0]
 8008320:	6963      	ldr	r3, [r4, #20]
 8008322:	3001      	adds	r0, #1
 8008324:	4283      	cmp	r3, r0
 8008326:	d004      	beq.n	8008332 <__swbuf_r+0x62>
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	07db      	lsls	r3, r3, #31
 800832c:	d506      	bpl.n	800833c <__swbuf_r+0x6c>
 800832e:	2e0a      	cmp	r6, #10
 8008330:	d104      	bne.n	800833c <__swbuf_r+0x6c>
 8008332:	4621      	mov	r1, r4
 8008334:	4628      	mov	r0, r5
 8008336:	f000 ff89 	bl	800924c <_fflush_r>
 800833a:	b988      	cbnz	r0, 8008360 <__swbuf_r+0x90>
 800833c:	4638      	mov	r0, r7
 800833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <__swbuf_r+0x9c>)
 8008342:	429c      	cmp	r4, r3
 8008344:	d101      	bne.n	800834a <__swbuf_r+0x7a>
 8008346:	68ac      	ldr	r4, [r5, #8]
 8008348:	e7cf      	b.n	80082ea <__swbuf_r+0x1a>
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <__swbuf_r+0xa0>)
 800834c:	429c      	cmp	r4, r3
 800834e:	bf08      	it	eq
 8008350:	68ec      	ldreq	r4, [r5, #12]
 8008352:	e7ca      	b.n	80082ea <__swbuf_r+0x1a>
 8008354:	4621      	mov	r1, r4
 8008356:	4628      	mov	r0, r5
 8008358:	f000 f80c 	bl	8008374 <__swsetup_r>
 800835c:	2800      	cmp	r0, #0
 800835e:	d0cb      	beq.n	80082f8 <__swbuf_r+0x28>
 8008360:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008364:	e7ea      	b.n	800833c <__swbuf_r+0x6c>
 8008366:	bf00      	nop
 8008368:	0800aab8 	.word	0x0800aab8
 800836c:	0800aad8 	.word	0x0800aad8
 8008370:	0800aa98 	.word	0x0800aa98

08008374 <__swsetup_r>:
 8008374:	4b32      	ldr	r3, [pc, #200]	; (8008440 <__swsetup_r+0xcc>)
 8008376:	b570      	push	{r4, r5, r6, lr}
 8008378:	681d      	ldr	r5, [r3, #0]
 800837a:	4606      	mov	r6, r0
 800837c:	460c      	mov	r4, r1
 800837e:	b125      	cbz	r5, 800838a <__swsetup_r+0x16>
 8008380:	69ab      	ldr	r3, [r5, #24]
 8008382:	b913      	cbnz	r3, 800838a <__swsetup_r+0x16>
 8008384:	4628      	mov	r0, r5
 8008386:	f000 fff5 	bl	8009374 <__sinit>
 800838a:	4b2e      	ldr	r3, [pc, #184]	; (8008444 <__swsetup_r+0xd0>)
 800838c:	429c      	cmp	r4, r3
 800838e:	d10f      	bne.n	80083b0 <__swsetup_r+0x3c>
 8008390:	686c      	ldr	r4, [r5, #4]
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008398:	0719      	lsls	r1, r3, #28
 800839a:	d42c      	bmi.n	80083f6 <__swsetup_r+0x82>
 800839c:	06dd      	lsls	r5, r3, #27
 800839e:	d411      	bmi.n	80083c4 <__swsetup_r+0x50>
 80083a0:	2309      	movs	r3, #9
 80083a2:	6033      	str	r3, [r6, #0]
 80083a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ae:	e03e      	b.n	800842e <__swsetup_r+0xba>
 80083b0:	4b25      	ldr	r3, [pc, #148]	; (8008448 <__swsetup_r+0xd4>)
 80083b2:	429c      	cmp	r4, r3
 80083b4:	d101      	bne.n	80083ba <__swsetup_r+0x46>
 80083b6:	68ac      	ldr	r4, [r5, #8]
 80083b8:	e7eb      	b.n	8008392 <__swsetup_r+0x1e>
 80083ba:	4b24      	ldr	r3, [pc, #144]	; (800844c <__swsetup_r+0xd8>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	bf08      	it	eq
 80083c0:	68ec      	ldreq	r4, [r5, #12]
 80083c2:	e7e6      	b.n	8008392 <__swsetup_r+0x1e>
 80083c4:	0758      	lsls	r0, r3, #29
 80083c6:	d512      	bpl.n	80083ee <__swsetup_r+0x7a>
 80083c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ca:	b141      	cbz	r1, 80083de <__swsetup_r+0x6a>
 80083cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083d0:	4299      	cmp	r1, r3
 80083d2:	d002      	beq.n	80083da <__swsetup_r+0x66>
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7ff f993 	bl	8007700 <_free_r>
 80083da:	2300      	movs	r3, #0
 80083dc:	6363      	str	r3, [r4, #52]	; 0x34
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	2300      	movs	r3, #0
 80083e8:	6063      	str	r3, [r4, #4]
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f043 0308 	orr.w	r3, r3, #8
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	b94b      	cbnz	r3, 800840e <__swsetup_r+0x9a>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008404:	d003      	beq.n	800840e <__swsetup_r+0x9a>
 8008406:	4621      	mov	r1, r4
 8008408:	4630      	mov	r0, r6
 800840a:	f001 f87d 	bl	8009508 <__smakebuf_r>
 800840e:	89a0      	ldrh	r0, [r4, #12]
 8008410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008414:	f010 0301 	ands.w	r3, r0, #1
 8008418:	d00a      	beq.n	8008430 <__swsetup_r+0xbc>
 800841a:	2300      	movs	r3, #0
 800841c:	60a3      	str	r3, [r4, #8]
 800841e:	6963      	ldr	r3, [r4, #20]
 8008420:	425b      	negs	r3, r3
 8008422:	61a3      	str	r3, [r4, #24]
 8008424:	6923      	ldr	r3, [r4, #16]
 8008426:	b943      	cbnz	r3, 800843a <__swsetup_r+0xc6>
 8008428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800842c:	d1ba      	bne.n	80083a4 <__swsetup_r+0x30>
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	0781      	lsls	r1, r0, #30
 8008432:	bf58      	it	pl
 8008434:	6963      	ldrpl	r3, [r4, #20]
 8008436:	60a3      	str	r3, [r4, #8]
 8008438:	e7f4      	b.n	8008424 <__swsetup_r+0xb0>
 800843a:	2000      	movs	r0, #0
 800843c:	e7f7      	b.n	800842e <__swsetup_r+0xba>
 800843e:	bf00      	nop
 8008440:	2000000c 	.word	0x2000000c
 8008444:	0800aab8 	.word	0x0800aab8
 8008448:	0800aad8 	.word	0x0800aad8
 800844c:	0800aa98 	.word	0x0800aa98

08008450 <quorem>:
 8008450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	6903      	ldr	r3, [r0, #16]
 8008456:	690c      	ldr	r4, [r1, #16]
 8008458:	42a3      	cmp	r3, r4
 800845a:	4607      	mov	r7, r0
 800845c:	f2c0 8081 	blt.w	8008562 <quorem+0x112>
 8008460:	3c01      	subs	r4, #1
 8008462:	f101 0814 	add.w	r8, r1, #20
 8008466:	f100 0514 	add.w	r5, r0, #20
 800846a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008478:	3301      	adds	r3, #1
 800847a:	429a      	cmp	r2, r3
 800847c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008480:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008484:	fbb2 f6f3 	udiv	r6, r2, r3
 8008488:	d331      	bcc.n	80084ee <quorem+0x9e>
 800848a:	f04f 0e00 	mov.w	lr, #0
 800848e:	4640      	mov	r0, r8
 8008490:	46ac      	mov	ip, r5
 8008492:	46f2      	mov	sl, lr
 8008494:	f850 2b04 	ldr.w	r2, [r0], #4
 8008498:	b293      	uxth	r3, r2
 800849a:	fb06 e303 	mla	r3, r6, r3, lr
 800849e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	ebaa 0303 	sub.w	r3, sl, r3
 80084a8:	0c12      	lsrs	r2, r2, #16
 80084aa:	f8dc a000 	ldr.w	sl, [ip]
 80084ae:	fb06 e202 	mla	r2, r6, r2, lr
 80084b2:	fa13 f38a 	uxtah	r3, r3, sl
 80084b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084ba:	fa1f fa82 	uxth.w	sl, r2
 80084be:	f8dc 2000 	ldr.w	r2, [ip]
 80084c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80084c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084d0:	4581      	cmp	r9, r0
 80084d2:	f84c 3b04 	str.w	r3, [ip], #4
 80084d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084da:	d2db      	bcs.n	8008494 <quorem+0x44>
 80084dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80084e0:	b92b      	cbnz	r3, 80084ee <quorem+0x9e>
 80084e2:	9b01      	ldr	r3, [sp, #4]
 80084e4:	3b04      	subs	r3, #4
 80084e6:	429d      	cmp	r5, r3
 80084e8:	461a      	mov	r2, r3
 80084ea:	d32e      	bcc.n	800854a <quorem+0xfa>
 80084ec:	613c      	str	r4, [r7, #16]
 80084ee:	4638      	mov	r0, r7
 80084f0:	f001 fae2 	bl	8009ab8 <__mcmp>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	db24      	blt.n	8008542 <quorem+0xf2>
 80084f8:	3601      	adds	r6, #1
 80084fa:	4628      	mov	r0, r5
 80084fc:	f04f 0c00 	mov.w	ip, #0
 8008500:	f858 2b04 	ldr.w	r2, [r8], #4
 8008504:	f8d0 e000 	ldr.w	lr, [r0]
 8008508:	b293      	uxth	r3, r2
 800850a:	ebac 0303 	sub.w	r3, ip, r3
 800850e:	0c12      	lsrs	r2, r2, #16
 8008510:	fa13 f38e 	uxtah	r3, r3, lr
 8008514:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008518:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800851c:	b29b      	uxth	r3, r3
 800851e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008522:	45c1      	cmp	r9, r8
 8008524:	f840 3b04 	str.w	r3, [r0], #4
 8008528:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800852c:	d2e8      	bcs.n	8008500 <quorem+0xb0>
 800852e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008536:	b922      	cbnz	r2, 8008542 <quorem+0xf2>
 8008538:	3b04      	subs	r3, #4
 800853a:	429d      	cmp	r5, r3
 800853c:	461a      	mov	r2, r3
 800853e:	d30a      	bcc.n	8008556 <quorem+0x106>
 8008540:	613c      	str	r4, [r7, #16]
 8008542:	4630      	mov	r0, r6
 8008544:	b003      	add	sp, #12
 8008546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	3b04      	subs	r3, #4
 800854e:	2a00      	cmp	r2, #0
 8008550:	d1cc      	bne.n	80084ec <quorem+0x9c>
 8008552:	3c01      	subs	r4, #1
 8008554:	e7c7      	b.n	80084e6 <quorem+0x96>
 8008556:	6812      	ldr	r2, [r2, #0]
 8008558:	3b04      	subs	r3, #4
 800855a:	2a00      	cmp	r2, #0
 800855c:	d1f0      	bne.n	8008540 <quorem+0xf0>
 800855e:	3c01      	subs	r4, #1
 8008560:	e7eb      	b.n	800853a <quorem+0xea>
 8008562:	2000      	movs	r0, #0
 8008564:	e7ee      	b.n	8008544 <quorem+0xf4>
	...

08008568 <_dtoa_r>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	ed2d 8b02 	vpush	{d8}
 8008570:	ec57 6b10 	vmov	r6, r7, d0
 8008574:	b095      	sub	sp, #84	; 0x54
 8008576:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008578:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800857c:	9105      	str	r1, [sp, #20]
 800857e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008582:	4604      	mov	r4, r0
 8008584:	9209      	str	r2, [sp, #36]	; 0x24
 8008586:	930f      	str	r3, [sp, #60]	; 0x3c
 8008588:	b975      	cbnz	r5, 80085a8 <_dtoa_r+0x40>
 800858a:	2010      	movs	r0, #16
 800858c:	f7ff f8a8 	bl	80076e0 <malloc>
 8008590:	4602      	mov	r2, r0
 8008592:	6260      	str	r0, [r4, #36]	; 0x24
 8008594:	b920      	cbnz	r0, 80085a0 <_dtoa_r+0x38>
 8008596:	4bb2      	ldr	r3, [pc, #712]	; (8008860 <_dtoa_r+0x2f8>)
 8008598:	21ea      	movs	r1, #234	; 0xea
 800859a:	48b2      	ldr	r0, [pc, #712]	; (8008864 <_dtoa_r+0x2fc>)
 800859c:	f001 feee 	bl	800a37c <__assert_func>
 80085a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085a4:	6005      	str	r5, [r0, #0]
 80085a6:	60c5      	str	r5, [r0, #12]
 80085a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085aa:	6819      	ldr	r1, [r3, #0]
 80085ac:	b151      	cbz	r1, 80085c4 <_dtoa_r+0x5c>
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	604a      	str	r2, [r1, #4]
 80085b2:	2301      	movs	r3, #1
 80085b4:	4093      	lsls	r3, r2
 80085b6:	608b      	str	r3, [r1, #8]
 80085b8:	4620      	mov	r0, r4
 80085ba:	f001 f83f 	bl	800963c <_Bfree>
 80085be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	1e3b      	subs	r3, r7, #0
 80085c6:	bfb9      	ittee	lt
 80085c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80085cc:	9303      	strlt	r3, [sp, #12]
 80085ce:	2300      	movge	r3, #0
 80085d0:	f8c8 3000 	strge.w	r3, [r8]
 80085d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80085d8:	4ba3      	ldr	r3, [pc, #652]	; (8008868 <_dtoa_r+0x300>)
 80085da:	bfbc      	itt	lt
 80085dc:	2201      	movlt	r2, #1
 80085de:	f8c8 2000 	strlt.w	r2, [r8]
 80085e2:	ea33 0309 	bics.w	r3, r3, r9
 80085e6:	d11b      	bne.n	8008620 <_dtoa_r+0xb8>
 80085e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085f4:	4333      	orrs	r3, r6
 80085f6:	f000 857a 	beq.w	80090ee <_dtoa_r+0xb86>
 80085fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085fc:	b963      	cbnz	r3, 8008618 <_dtoa_r+0xb0>
 80085fe:	4b9b      	ldr	r3, [pc, #620]	; (800886c <_dtoa_r+0x304>)
 8008600:	e024      	b.n	800864c <_dtoa_r+0xe4>
 8008602:	4b9b      	ldr	r3, [pc, #620]	; (8008870 <_dtoa_r+0x308>)
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	3308      	adds	r3, #8
 8008608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	9800      	ldr	r0, [sp, #0]
 800860e:	b015      	add	sp, #84	; 0x54
 8008610:	ecbd 8b02 	vpop	{d8}
 8008614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008618:	4b94      	ldr	r3, [pc, #592]	; (800886c <_dtoa_r+0x304>)
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	3303      	adds	r3, #3
 800861e:	e7f3      	b.n	8008608 <_dtoa_r+0xa0>
 8008620:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008624:	2200      	movs	r2, #0
 8008626:	ec51 0b17 	vmov	r0, r1, d7
 800862a:	2300      	movs	r3, #0
 800862c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008630:	f7f8 fa72 	bl	8000b18 <__aeabi_dcmpeq>
 8008634:	4680      	mov	r8, r0
 8008636:	b158      	cbz	r0, 8008650 <_dtoa_r+0xe8>
 8008638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800863a:	2301      	movs	r3, #1
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8551 	beq.w	80090e8 <_dtoa_r+0xb80>
 8008646:	488b      	ldr	r0, [pc, #556]	; (8008874 <_dtoa_r+0x30c>)
 8008648:	6018      	str	r0, [r3, #0]
 800864a:	1e43      	subs	r3, r0, #1
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	e7dd      	b.n	800860c <_dtoa_r+0xa4>
 8008650:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008654:	aa12      	add	r2, sp, #72	; 0x48
 8008656:	a913      	add	r1, sp, #76	; 0x4c
 8008658:	4620      	mov	r0, r4
 800865a:	f001 fad1 	bl	8009c00 <__d2b>
 800865e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008662:	4683      	mov	fp, r0
 8008664:	2d00      	cmp	r5, #0
 8008666:	d07c      	beq.n	8008762 <_dtoa_r+0x1fa>
 8008668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800866a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800866e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008672:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008676:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800867a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800867e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008682:	4b7d      	ldr	r3, [pc, #500]	; (8008878 <_dtoa_r+0x310>)
 8008684:	2200      	movs	r2, #0
 8008686:	4630      	mov	r0, r6
 8008688:	4639      	mov	r1, r7
 800868a:	f7f7 fe25 	bl	80002d8 <__aeabi_dsub>
 800868e:	a36e      	add	r3, pc, #440	; (adr r3, 8008848 <_dtoa_r+0x2e0>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f7f7 ffd8 	bl	8000648 <__aeabi_dmul>
 8008698:	a36d      	add	r3, pc, #436	; (adr r3, 8008850 <_dtoa_r+0x2e8>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 fe1d 	bl	80002dc <__adddf3>
 80086a2:	4606      	mov	r6, r0
 80086a4:	4628      	mov	r0, r5
 80086a6:	460f      	mov	r7, r1
 80086a8:	f7f7 ff64 	bl	8000574 <__aeabi_i2d>
 80086ac:	a36a      	add	r3, pc, #424	; (adr r3, 8008858 <_dtoa_r+0x2f0>)
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f7f7 ffc9 	bl	8000648 <__aeabi_dmul>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4630      	mov	r0, r6
 80086bc:	4639      	mov	r1, r7
 80086be:	f7f7 fe0d 	bl	80002dc <__adddf3>
 80086c2:	4606      	mov	r6, r0
 80086c4:	460f      	mov	r7, r1
 80086c6:	f7f8 fa6f 	bl	8000ba8 <__aeabi_d2iz>
 80086ca:	2200      	movs	r2, #0
 80086cc:	4682      	mov	sl, r0
 80086ce:	2300      	movs	r3, #0
 80086d0:	4630      	mov	r0, r6
 80086d2:	4639      	mov	r1, r7
 80086d4:	f7f8 fa2a 	bl	8000b2c <__aeabi_dcmplt>
 80086d8:	b148      	cbz	r0, 80086ee <_dtoa_r+0x186>
 80086da:	4650      	mov	r0, sl
 80086dc:	f7f7 ff4a 	bl	8000574 <__aeabi_i2d>
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	f7f8 fa18 	bl	8000b18 <__aeabi_dcmpeq>
 80086e8:	b908      	cbnz	r0, 80086ee <_dtoa_r+0x186>
 80086ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80086ee:	f1ba 0f16 	cmp.w	sl, #22
 80086f2:	d854      	bhi.n	800879e <_dtoa_r+0x236>
 80086f4:	4b61      	ldr	r3, [pc, #388]	; (800887c <_dtoa_r+0x314>)
 80086f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008702:	f7f8 fa13 	bl	8000b2c <__aeabi_dcmplt>
 8008706:	2800      	cmp	r0, #0
 8008708:	d04b      	beq.n	80087a2 <_dtoa_r+0x23a>
 800870a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800870e:	2300      	movs	r3, #0
 8008710:	930e      	str	r3, [sp, #56]	; 0x38
 8008712:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008714:	1b5d      	subs	r5, r3, r5
 8008716:	1e6b      	subs	r3, r5, #1
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	bf43      	ittte	mi
 800871c:	2300      	movmi	r3, #0
 800871e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008722:	9304      	strmi	r3, [sp, #16]
 8008724:	f04f 0800 	movpl.w	r8, #0
 8008728:	f1ba 0f00 	cmp.w	sl, #0
 800872c:	db3b      	blt.n	80087a6 <_dtoa_r+0x23e>
 800872e:	9b04      	ldr	r3, [sp, #16]
 8008730:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008734:	4453      	add	r3, sl
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	2300      	movs	r3, #0
 800873a:	9306      	str	r3, [sp, #24]
 800873c:	9b05      	ldr	r3, [sp, #20]
 800873e:	2b09      	cmp	r3, #9
 8008740:	d869      	bhi.n	8008816 <_dtoa_r+0x2ae>
 8008742:	2b05      	cmp	r3, #5
 8008744:	bfc4      	itt	gt
 8008746:	3b04      	subgt	r3, #4
 8008748:	9305      	strgt	r3, [sp, #20]
 800874a:	9b05      	ldr	r3, [sp, #20]
 800874c:	f1a3 0302 	sub.w	r3, r3, #2
 8008750:	bfcc      	ite	gt
 8008752:	2500      	movgt	r5, #0
 8008754:	2501      	movle	r5, #1
 8008756:	2b03      	cmp	r3, #3
 8008758:	d869      	bhi.n	800882e <_dtoa_r+0x2c6>
 800875a:	e8df f003 	tbb	[pc, r3]
 800875e:	4e2c      	.short	0x4e2c
 8008760:	5a4c      	.short	0x5a4c
 8008762:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008766:	441d      	add	r5, r3
 8008768:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800876c:	2b20      	cmp	r3, #32
 800876e:	bfc1      	itttt	gt
 8008770:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008774:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008778:	fa09 f303 	lslgt.w	r3, r9, r3
 800877c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008780:	bfda      	itte	le
 8008782:	f1c3 0320 	rsble	r3, r3, #32
 8008786:	fa06 f003 	lslle.w	r0, r6, r3
 800878a:	4318      	orrgt	r0, r3
 800878c:	f7f7 fee2 	bl	8000554 <__aeabi_ui2d>
 8008790:	2301      	movs	r3, #1
 8008792:	4606      	mov	r6, r0
 8008794:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008798:	3d01      	subs	r5, #1
 800879a:	9310      	str	r3, [sp, #64]	; 0x40
 800879c:	e771      	b.n	8008682 <_dtoa_r+0x11a>
 800879e:	2301      	movs	r3, #1
 80087a0:	e7b6      	b.n	8008710 <_dtoa_r+0x1a8>
 80087a2:	900e      	str	r0, [sp, #56]	; 0x38
 80087a4:	e7b5      	b.n	8008712 <_dtoa_r+0x1aa>
 80087a6:	f1ca 0300 	rsb	r3, sl, #0
 80087aa:	9306      	str	r3, [sp, #24]
 80087ac:	2300      	movs	r3, #0
 80087ae:	eba8 080a 	sub.w	r8, r8, sl
 80087b2:	930d      	str	r3, [sp, #52]	; 0x34
 80087b4:	e7c2      	b.n	800873c <_dtoa_r+0x1d4>
 80087b6:	2300      	movs	r3, #0
 80087b8:	9308      	str	r3, [sp, #32]
 80087ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	dc39      	bgt.n	8008834 <_dtoa_r+0x2cc>
 80087c0:	f04f 0901 	mov.w	r9, #1
 80087c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80087c8:	464b      	mov	r3, r9
 80087ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80087ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087d0:	2200      	movs	r2, #0
 80087d2:	6042      	str	r2, [r0, #4]
 80087d4:	2204      	movs	r2, #4
 80087d6:	f102 0614 	add.w	r6, r2, #20
 80087da:	429e      	cmp	r6, r3
 80087dc:	6841      	ldr	r1, [r0, #4]
 80087de:	d92f      	bls.n	8008840 <_dtoa_r+0x2d8>
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 feeb 	bl	80095bc <_Balloc>
 80087e6:	9000      	str	r0, [sp, #0]
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d14b      	bne.n	8008884 <_dtoa_r+0x31c>
 80087ec:	4b24      	ldr	r3, [pc, #144]	; (8008880 <_dtoa_r+0x318>)
 80087ee:	4602      	mov	r2, r0
 80087f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80087f4:	e6d1      	b.n	800859a <_dtoa_r+0x32>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e7de      	b.n	80087b8 <_dtoa_r+0x250>
 80087fa:	2300      	movs	r3, #0
 80087fc:	9308      	str	r3, [sp, #32]
 80087fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008800:	eb0a 0903 	add.w	r9, sl, r3
 8008804:	f109 0301 	add.w	r3, r9, #1
 8008808:	2b01      	cmp	r3, #1
 800880a:	9301      	str	r3, [sp, #4]
 800880c:	bfb8      	it	lt
 800880e:	2301      	movlt	r3, #1
 8008810:	e7dd      	b.n	80087ce <_dtoa_r+0x266>
 8008812:	2301      	movs	r3, #1
 8008814:	e7f2      	b.n	80087fc <_dtoa_r+0x294>
 8008816:	2501      	movs	r5, #1
 8008818:	2300      	movs	r3, #0
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	9508      	str	r5, [sp, #32]
 800881e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008822:	2200      	movs	r2, #0
 8008824:	f8cd 9004 	str.w	r9, [sp, #4]
 8008828:	2312      	movs	r3, #18
 800882a:	9209      	str	r2, [sp, #36]	; 0x24
 800882c:	e7cf      	b.n	80087ce <_dtoa_r+0x266>
 800882e:	2301      	movs	r3, #1
 8008830:	9308      	str	r3, [sp, #32]
 8008832:	e7f4      	b.n	800881e <_dtoa_r+0x2b6>
 8008834:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008838:	f8cd 9004 	str.w	r9, [sp, #4]
 800883c:	464b      	mov	r3, r9
 800883e:	e7c6      	b.n	80087ce <_dtoa_r+0x266>
 8008840:	3101      	adds	r1, #1
 8008842:	6041      	str	r1, [r0, #4]
 8008844:	0052      	lsls	r2, r2, #1
 8008846:	e7c6      	b.n	80087d6 <_dtoa_r+0x26e>
 8008848:	636f4361 	.word	0x636f4361
 800884c:	3fd287a7 	.word	0x3fd287a7
 8008850:	8b60c8b3 	.word	0x8b60c8b3
 8008854:	3fc68a28 	.word	0x3fc68a28
 8008858:	509f79fb 	.word	0x509f79fb
 800885c:	3fd34413 	.word	0x3fd34413
 8008860:	0800aa11 	.word	0x0800aa11
 8008864:	0800aa28 	.word	0x0800aa28
 8008868:	7ff00000 	.word	0x7ff00000
 800886c:	0800aa0d 	.word	0x0800aa0d
 8008870:	0800aa04 	.word	0x0800aa04
 8008874:	0800a9e1 	.word	0x0800a9e1
 8008878:	3ff80000 	.word	0x3ff80000
 800887c:	0800ab80 	.word	0x0800ab80
 8008880:	0800aa87 	.word	0x0800aa87
 8008884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008886:	9a00      	ldr	r2, [sp, #0]
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	9b01      	ldr	r3, [sp, #4]
 800888c:	2b0e      	cmp	r3, #14
 800888e:	f200 80ad 	bhi.w	80089ec <_dtoa_r+0x484>
 8008892:	2d00      	cmp	r5, #0
 8008894:	f000 80aa 	beq.w	80089ec <_dtoa_r+0x484>
 8008898:	f1ba 0f00 	cmp.w	sl, #0
 800889c:	dd36      	ble.n	800890c <_dtoa_r+0x3a4>
 800889e:	4ac3      	ldr	r2, [pc, #780]	; (8008bac <_dtoa_r+0x644>)
 80088a0:	f00a 030f 	and.w	r3, sl, #15
 80088a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088a8:	ed93 7b00 	vldr	d7, [r3]
 80088ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80088b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80088b4:	eeb0 8a47 	vmov.f32	s16, s14
 80088b8:	eef0 8a67 	vmov.f32	s17, s15
 80088bc:	d016      	beq.n	80088ec <_dtoa_r+0x384>
 80088be:	4bbc      	ldr	r3, [pc, #752]	; (8008bb0 <_dtoa_r+0x648>)
 80088c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088c8:	f7f7 ffe8 	bl	800089c <__aeabi_ddiv>
 80088cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088d0:	f007 070f 	and.w	r7, r7, #15
 80088d4:	2503      	movs	r5, #3
 80088d6:	4eb6      	ldr	r6, [pc, #728]	; (8008bb0 <_dtoa_r+0x648>)
 80088d8:	b957      	cbnz	r7, 80088f0 <_dtoa_r+0x388>
 80088da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088de:	ec53 2b18 	vmov	r2, r3, d8
 80088e2:	f7f7 ffdb 	bl	800089c <__aeabi_ddiv>
 80088e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ea:	e029      	b.n	8008940 <_dtoa_r+0x3d8>
 80088ec:	2502      	movs	r5, #2
 80088ee:	e7f2      	b.n	80088d6 <_dtoa_r+0x36e>
 80088f0:	07f9      	lsls	r1, r7, #31
 80088f2:	d508      	bpl.n	8008906 <_dtoa_r+0x39e>
 80088f4:	ec51 0b18 	vmov	r0, r1, d8
 80088f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088fc:	f7f7 fea4 	bl	8000648 <__aeabi_dmul>
 8008900:	ec41 0b18 	vmov	d8, r0, r1
 8008904:	3501      	adds	r5, #1
 8008906:	107f      	asrs	r7, r7, #1
 8008908:	3608      	adds	r6, #8
 800890a:	e7e5      	b.n	80088d8 <_dtoa_r+0x370>
 800890c:	f000 80a6 	beq.w	8008a5c <_dtoa_r+0x4f4>
 8008910:	f1ca 0600 	rsb	r6, sl, #0
 8008914:	4ba5      	ldr	r3, [pc, #660]	; (8008bac <_dtoa_r+0x644>)
 8008916:	4fa6      	ldr	r7, [pc, #664]	; (8008bb0 <_dtoa_r+0x648>)
 8008918:	f006 020f 	and.w	r2, r6, #15
 800891c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008928:	f7f7 fe8e 	bl	8000648 <__aeabi_dmul>
 800892c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008930:	1136      	asrs	r6, r6, #4
 8008932:	2300      	movs	r3, #0
 8008934:	2502      	movs	r5, #2
 8008936:	2e00      	cmp	r6, #0
 8008938:	f040 8085 	bne.w	8008a46 <_dtoa_r+0x4de>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1d2      	bne.n	80088e6 <_dtoa_r+0x37e>
 8008940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 808c 	beq.w	8008a60 <_dtoa_r+0x4f8>
 8008948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800894c:	4b99      	ldr	r3, [pc, #612]	; (8008bb4 <_dtoa_r+0x64c>)
 800894e:	2200      	movs	r2, #0
 8008950:	4630      	mov	r0, r6
 8008952:	4639      	mov	r1, r7
 8008954:	f7f8 f8ea 	bl	8000b2c <__aeabi_dcmplt>
 8008958:	2800      	cmp	r0, #0
 800895a:	f000 8081 	beq.w	8008a60 <_dtoa_r+0x4f8>
 800895e:	9b01      	ldr	r3, [sp, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d07d      	beq.n	8008a60 <_dtoa_r+0x4f8>
 8008964:	f1b9 0f00 	cmp.w	r9, #0
 8008968:	dd3c      	ble.n	80089e4 <_dtoa_r+0x47c>
 800896a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800896e:	9307      	str	r3, [sp, #28]
 8008970:	2200      	movs	r2, #0
 8008972:	4b91      	ldr	r3, [pc, #580]	; (8008bb8 <_dtoa_r+0x650>)
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f7 fe66 	bl	8000648 <__aeabi_dmul>
 800897c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008980:	3501      	adds	r5, #1
 8008982:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008986:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800898a:	4628      	mov	r0, r5
 800898c:	f7f7 fdf2 	bl	8000574 <__aeabi_i2d>
 8008990:	4632      	mov	r2, r6
 8008992:	463b      	mov	r3, r7
 8008994:	f7f7 fe58 	bl	8000648 <__aeabi_dmul>
 8008998:	4b88      	ldr	r3, [pc, #544]	; (8008bbc <_dtoa_r+0x654>)
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fc9e 	bl	80002dc <__adddf3>
 80089a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80089a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d15c      	bne.n	8008a6a <_dtoa_r+0x502>
 80089b0:	4b83      	ldr	r3, [pc, #524]	; (8008bc0 <_dtoa_r+0x658>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	4630      	mov	r0, r6
 80089b6:	4639      	mov	r1, r7
 80089b8:	f7f7 fc8e 	bl	80002d8 <__aeabi_dsub>
 80089bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089c0:	4606      	mov	r6, r0
 80089c2:	460f      	mov	r7, r1
 80089c4:	f7f8 f8d0 	bl	8000b68 <__aeabi_dcmpgt>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f040 8296 	bne.w	8008efa <_dtoa_r+0x992>
 80089ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80089d2:	4630      	mov	r0, r6
 80089d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f8 f8a7 	bl	8000b2c <__aeabi_dcmplt>
 80089de:	2800      	cmp	r0, #0
 80089e0:	f040 8288 	bne.w	8008ef4 <_dtoa_r+0x98c>
 80089e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f2c0 8158 	blt.w	8008ca4 <_dtoa_r+0x73c>
 80089f4:	f1ba 0f0e 	cmp.w	sl, #14
 80089f8:	f300 8154 	bgt.w	8008ca4 <_dtoa_r+0x73c>
 80089fc:	4b6b      	ldr	r3, [pc, #428]	; (8008bac <_dtoa_r+0x644>)
 80089fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f280 80e3 	bge.w	8008bd4 <_dtoa_r+0x66c>
 8008a0e:	9b01      	ldr	r3, [sp, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f300 80df 	bgt.w	8008bd4 <_dtoa_r+0x66c>
 8008a16:	f040 826d 	bne.w	8008ef4 <_dtoa_r+0x98c>
 8008a1a:	4b69      	ldr	r3, [pc, #420]	; (8008bc0 <_dtoa_r+0x658>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4640      	mov	r0, r8
 8008a20:	4649      	mov	r1, r9
 8008a22:	f7f7 fe11 	bl	8000648 <__aeabi_dmul>
 8008a26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a2a:	f7f8 f893 	bl	8000b54 <__aeabi_dcmpge>
 8008a2e:	9e01      	ldr	r6, [sp, #4]
 8008a30:	4637      	mov	r7, r6
 8008a32:	2800      	cmp	r0, #0
 8008a34:	f040 8243 	bne.w	8008ebe <_dtoa_r+0x956>
 8008a38:	9d00      	ldr	r5, [sp, #0]
 8008a3a:	2331      	movs	r3, #49	; 0x31
 8008a3c:	f805 3b01 	strb.w	r3, [r5], #1
 8008a40:	f10a 0a01 	add.w	sl, sl, #1
 8008a44:	e23f      	b.n	8008ec6 <_dtoa_r+0x95e>
 8008a46:	07f2      	lsls	r2, r6, #31
 8008a48:	d505      	bpl.n	8008a56 <_dtoa_r+0x4ee>
 8008a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a4e:	f7f7 fdfb 	bl	8000648 <__aeabi_dmul>
 8008a52:	3501      	adds	r5, #1
 8008a54:	2301      	movs	r3, #1
 8008a56:	1076      	asrs	r6, r6, #1
 8008a58:	3708      	adds	r7, #8
 8008a5a:	e76c      	b.n	8008936 <_dtoa_r+0x3ce>
 8008a5c:	2502      	movs	r5, #2
 8008a5e:	e76f      	b.n	8008940 <_dtoa_r+0x3d8>
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a66:	930c      	str	r3, [sp, #48]	; 0x30
 8008a68:	e78d      	b.n	8008986 <_dtoa_r+0x41e>
 8008a6a:	9900      	ldr	r1, [sp, #0]
 8008a6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a70:	4b4e      	ldr	r3, [pc, #312]	; (8008bac <_dtoa_r+0x644>)
 8008a72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a76:	4401      	add	r1, r0
 8008a78:	9102      	str	r1, [sp, #8]
 8008a7a:	9908      	ldr	r1, [sp, #32]
 8008a7c:	eeb0 8a47 	vmov.f32	s16, s14
 8008a80:	eef0 8a67 	vmov.f32	s17, s15
 8008a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a8c:	2900      	cmp	r1, #0
 8008a8e:	d045      	beq.n	8008b1c <_dtoa_r+0x5b4>
 8008a90:	494c      	ldr	r1, [pc, #304]	; (8008bc4 <_dtoa_r+0x65c>)
 8008a92:	2000      	movs	r0, #0
 8008a94:	f7f7 ff02 	bl	800089c <__aeabi_ddiv>
 8008a98:	ec53 2b18 	vmov	r2, r3, d8
 8008a9c:	f7f7 fc1c 	bl	80002d8 <__aeabi_dsub>
 8008aa0:	9d00      	ldr	r5, [sp, #0]
 8008aa2:	ec41 0b18 	vmov	d8, r0, r1
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7f8 f87d 	bl	8000ba8 <__aeabi_d2iz>
 8008aae:	900c      	str	r0, [sp, #48]	; 0x30
 8008ab0:	f7f7 fd60 	bl	8000574 <__aeabi_i2d>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4630      	mov	r0, r6
 8008aba:	4639      	mov	r1, r7
 8008abc:	f7f7 fc0c 	bl	80002d8 <__aeabi_dsub>
 8008ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ac2:	3330      	adds	r3, #48	; 0x30
 8008ac4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ac8:	ec53 2b18 	vmov	r2, r3, d8
 8008acc:	4606      	mov	r6, r0
 8008ace:	460f      	mov	r7, r1
 8008ad0:	f7f8 f82c 	bl	8000b2c <__aeabi_dcmplt>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d165      	bne.n	8008ba4 <_dtoa_r+0x63c>
 8008ad8:	4632      	mov	r2, r6
 8008ada:	463b      	mov	r3, r7
 8008adc:	4935      	ldr	r1, [pc, #212]	; (8008bb4 <_dtoa_r+0x64c>)
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f7f7 fbfa 	bl	80002d8 <__aeabi_dsub>
 8008ae4:	ec53 2b18 	vmov	r2, r3, d8
 8008ae8:	f7f8 f820 	bl	8000b2c <__aeabi_dcmplt>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	f040 80b9 	bne.w	8008c64 <_dtoa_r+0x6fc>
 8008af2:	9b02      	ldr	r3, [sp, #8]
 8008af4:	429d      	cmp	r5, r3
 8008af6:	f43f af75 	beq.w	80089e4 <_dtoa_r+0x47c>
 8008afa:	4b2f      	ldr	r3, [pc, #188]	; (8008bb8 <_dtoa_r+0x650>)
 8008afc:	ec51 0b18 	vmov	r0, r1, d8
 8008b00:	2200      	movs	r2, #0
 8008b02:	f7f7 fda1 	bl	8000648 <__aeabi_dmul>
 8008b06:	4b2c      	ldr	r3, [pc, #176]	; (8008bb8 <_dtoa_r+0x650>)
 8008b08:	ec41 0b18 	vmov	d8, r0, r1
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4630      	mov	r0, r6
 8008b10:	4639      	mov	r1, r7
 8008b12:	f7f7 fd99 	bl	8000648 <__aeabi_dmul>
 8008b16:	4606      	mov	r6, r0
 8008b18:	460f      	mov	r7, r1
 8008b1a:	e7c4      	b.n	8008aa6 <_dtoa_r+0x53e>
 8008b1c:	ec51 0b17 	vmov	r0, r1, d7
 8008b20:	f7f7 fd92 	bl	8000648 <__aeabi_dmul>
 8008b24:	9b02      	ldr	r3, [sp, #8]
 8008b26:	9d00      	ldr	r5, [sp, #0]
 8008b28:	930c      	str	r3, [sp, #48]	; 0x30
 8008b2a:	ec41 0b18 	vmov	d8, r0, r1
 8008b2e:	4639      	mov	r1, r7
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7f8 f839 	bl	8000ba8 <__aeabi_d2iz>
 8008b36:	9011      	str	r0, [sp, #68]	; 0x44
 8008b38:	f7f7 fd1c 	bl	8000574 <__aeabi_i2d>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4630      	mov	r0, r6
 8008b42:	4639      	mov	r1, r7
 8008b44:	f7f7 fbc8 	bl	80002d8 <__aeabi_dsub>
 8008b48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b4a:	3330      	adds	r3, #48	; 0x30
 8008b4c:	f805 3b01 	strb.w	r3, [r5], #1
 8008b50:	9b02      	ldr	r3, [sp, #8]
 8008b52:	429d      	cmp	r5, r3
 8008b54:	4606      	mov	r6, r0
 8008b56:	460f      	mov	r7, r1
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	d134      	bne.n	8008bc8 <_dtoa_r+0x660>
 8008b5e:	4b19      	ldr	r3, [pc, #100]	; (8008bc4 <_dtoa_r+0x65c>)
 8008b60:	ec51 0b18 	vmov	r0, r1, d8
 8008b64:	f7f7 fbba 	bl	80002dc <__adddf3>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	4639      	mov	r1, r7
 8008b70:	f7f7 fffa 	bl	8000b68 <__aeabi_dcmpgt>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d175      	bne.n	8008c64 <_dtoa_r+0x6fc>
 8008b78:	ec53 2b18 	vmov	r2, r3, d8
 8008b7c:	4911      	ldr	r1, [pc, #68]	; (8008bc4 <_dtoa_r+0x65c>)
 8008b7e:	2000      	movs	r0, #0
 8008b80:	f7f7 fbaa 	bl	80002d8 <__aeabi_dsub>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4630      	mov	r0, r6
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	f7f7 ffce 	bl	8000b2c <__aeabi_dcmplt>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	f43f af27 	beq.w	80089e4 <_dtoa_r+0x47c>
 8008b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b98:	1e6b      	subs	r3, r5, #1
 8008b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ba0:	2b30      	cmp	r3, #48	; 0x30
 8008ba2:	d0f8      	beq.n	8008b96 <_dtoa_r+0x62e>
 8008ba4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ba8:	e04a      	b.n	8008c40 <_dtoa_r+0x6d8>
 8008baa:	bf00      	nop
 8008bac:	0800ab80 	.word	0x0800ab80
 8008bb0:	0800ab58 	.word	0x0800ab58
 8008bb4:	3ff00000 	.word	0x3ff00000
 8008bb8:	40240000 	.word	0x40240000
 8008bbc:	401c0000 	.word	0x401c0000
 8008bc0:	40140000 	.word	0x40140000
 8008bc4:	3fe00000 	.word	0x3fe00000
 8008bc8:	4baf      	ldr	r3, [pc, #700]	; (8008e88 <_dtoa_r+0x920>)
 8008bca:	f7f7 fd3d 	bl	8000648 <__aeabi_dmul>
 8008bce:	4606      	mov	r6, r0
 8008bd0:	460f      	mov	r7, r1
 8008bd2:	e7ac      	b.n	8008b2e <_dtoa_r+0x5c6>
 8008bd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bd8:	9d00      	ldr	r5, [sp, #0]
 8008bda:	4642      	mov	r2, r8
 8008bdc:	464b      	mov	r3, r9
 8008bde:	4630      	mov	r0, r6
 8008be0:	4639      	mov	r1, r7
 8008be2:	f7f7 fe5b 	bl	800089c <__aeabi_ddiv>
 8008be6:	f7f7 ffdf 	bl	8000ba8 <__aeabi_d2iz>
 8008bea:	9002      	str	r0, [sp, #8]
 8008bec:	f7f7 fcc2 	bl	8000574 <__aeabi_i2d>
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	f7f7 fd28 	bl	8000648 <__aeabi_dmul>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	4639      	mov	r1, r7
 8008c00:	f7f7 fb6a 	bl	80002d8 <__aeabi_dsub>
 8008c04:	9e02      	ldr	r6, [sp, #8]
 8008c06:	9f01      	ldr	r7, [sp, #4]
 8008c08:	3630      	adds	r6, #48	; 0x30
 8008c0a:	f805 6b01 	strb.w	r6, [r5], #1
 8008c0e:	9e00      	ldr	r6, [sp, #0]
 8008c10:	1bae      	subs	r6, r5, r6
 8008c12:	42b7      	cmp	r7, r6
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	d137      	bne.n	8008c8a <_dtoa_r+0x722>
 8008c1a:	f7f7 fb5f 	bl	80002dc <__adddf3>
 8008c1e:	4642      	mov	r2, r8
 8008c20:	464b      	mov	r3, r9
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	f7f7 ff9f 	bl	8000b68 <__aeabi_dcmpgt>
 8008c2a:	b9c8      	cbnz	r0, 8008c60 <_dtoa_r+0x6f8>
 8008c2c:	4642      	mov	r2, r8
 8008c2e:	464b      	mov	r3, r9
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	f7f7 ff70 	bl	8000b18 <__aeabi_dcmpeq>
 8008c38:	b110      	cbz	r0, 8008c40 <_dtoa_r+0x6d8>
 8008c3a:	9b02      	ldr	r3, [sp, #8]
 8008c3c:	07d9      	lsls	r1, r3, #31
 8008c3e:	d40f      	bmi.n	8008c60 <_dtoa_r+0x6f8>
 8008c40:	4620      	mov	r0, r4
 8008c42:	4659      	mov	r1, fp
 8008c44:	f000 fcfa 	bl	800963c <_Bfree>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	702b      	strb	r3, [r5, #0]
 8008c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c4e:	f10a 0001 	add.w	r0, sl, #1
 8008c52:	6018      	str	r0, [r3, #0]
 8008c54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f43f acd8 	beq.w	800860c <_dtoa_r+0xa4>
 8008c5c:	601d      	str	r5, [r3, #0]
 8008c5e:	e4d5      	b.n	800860c <_dtoa_r+0xa4>
 8008c60:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c64:	462b      	mov	r3, r5
 8008c66:	461d      	mov	r5, r3
 8008c68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c6c:	2a39      	cmp	r2, #57	; 0x39
 8008c6e:	d108      	bne.n	8008c82 <_dtoa_r+0x71a>
 8008c70:	9a00      	ldr	r2, [sp, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d1f7      	bne.n	8008c66 <_dtoa_r+0x6fe>
 8008c76:	9a07      	ldr	r2, [sp, #28]
 8008c78:	9900      	ldr	r1, [sp, #0]
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	9207      	str	r2, [sp, #28]
 8008c7e:	2230      	movs	r2, #48	; 0x30
 8008c80:	700a      	strb	r2, [r1, #0]
 8008c82:	781a      	ldrb	r2, [r3, #0]
 8008c84:	3201      	adds	r2, #1
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	e78c      	b.n	8008ba4 <_dtoa_r+0x63c>
 8008c8a:	4b7f      	ldr	r3, [pc, #508]	; (8008e88 <_dtoa_r+0x920>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f7f7 fcdb 	bl	8000648 <__aeabi_dmul>
 8008c92:	2200      	movs	r2, #0
 8008c94:	2300      	movs	r3, #0
 8008c96:	4606      	mov	r6, r0
 8008c98:	460f      	mov	r7, r1
 8008c9a:	f7f7 ff3d 	bl	8000b18 <__aeabi_dcmpeq>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d09b      	beq.n	8008bda <_dtoa_r+0x672>
 8008ca2:	e7cd      	b.n	8008c40 <_dtoa_r+0x6d8>
 8008ca4:	9a08      	ldr	r2, [sp, #32]
 8008ca6:	2a00      	cmp	r2, #0
 8008ca8:	f000 80c4 	beq.w	8008e34 <_dtoa_r+0x8cc>
 8008cac:	9a05      	ldr	r2, [sp, #20]
 8008cae:	2a01      	cmp	r2, #1
 8008cb0:	f300 80a8 	bgt.w	8008e04 <_dtoa_r+0x89c>
 8008cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	f000 80a0 	beq.w	8008dfc <_dtoa_r+0x894>
 8008cbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cc0:	9e06      	ldr	r6, [sp, #24]
 8008cc2:	4645      	mov	r5, r8
 8008cc4:	9a04      	ldr	r2, [sp, #16]
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	441a      	add	r2, r3
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4498      	add	r8, r3
 8008cce:	9204      	str	r2, [sp, #16]
 8008cd0:	f000 fd70 	bl	80097b4 <__i2b>
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	dd0b      	ble.n	8008cf2 <_dtoa_r+0x78a>
 8008cda:	9b04      	ldr	r3, [sp, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dd08      	ble.n	8008cf2 <_dtoa_r+0x78a>
 8008ce0:	42ab      	cmp	r3, r5
 8008ce2:	9a04      	ldr	r2, [sp, #16]
 8008ce4:	bfa8      	it	ge
 8008ce6:	462b      	movge	r3, r5
 8008ce8:	eba8 0803 	sub.w	r8, r8, r3
 8008cec:	1aed      	subs	r5, r5, r3
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	9b06      	ldr	r3, [sp, #24]
 8008cf4:	b1fb      	cbz	r3, 8008d36 <_dtoa_r+0x7ce>
 8008cf6:	9b08      	ldr	r3, [sp, #32]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 809f 	beq.w	8008e3c <_dtoa_r+0x8d4>
 8008cfe:	2e00      	cmp	r6, #0
 8008d00:	dd11      	ble.n	8008d26 <_dtoa_r+0x7be>
 8008d02:	4639      	mov	r1, r7
 8008d04:	4632      	mov	r2, r6
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fe10 	bl	800992c <__pow5mult>
 8008d0c:	465a      	mov	r2, fp
 8008d0e:	4601      	mov	r1, r0
 8008d10:	4607      	mov	r7, r0
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 fd64 	bl	80097e0 <__multiply>
 8008d18:	4659      	mov	r1, fp
 8008d1a:	9007      	str	r0, [sp, #28]
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 fc8d 	bl	800963c <_Bfree>
 8008d22:	9b07      	ldr	r3, [sp, #28]
 8008d24:	469b      	mov	fp, r3
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	1b9a      	subs	r2, r3, r6
 8008d2a:	d004      	beq.n	8008d36 <_dtoa_r+0x7ce>
 8008d2c:	4659      	mov	r1, fp
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f000 fdfc 	bl	800992c <__pow5mult>
 8008d34:	4683      	mov	fp, r0
 8008d36:	2101      	movs	r1, #1
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fd3b 	bl	80097b4 <__i2b>
 8008d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	4606      	mov	r6, r0
 8008d44:	dd7c      	ble.n	8008e40 <_dtoa_r+0x8d8>
 8008d46:	461a      	mov	r2, r3
 8008d48:	4601      	mov	r1, r0
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 fdee 	bl	800992c <__pow5mult>
 8008d50:	9b05      	ldr	r3, [sp, #20]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	4606      	mov	r6, r0
 8008d56:	dd76      	ble.n	8008e46 <_dtoa_r+0x8de>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9306      	str	r3, [sp, #24]
 8008d5c:	6933      	ldr	r3, [r6, #16]
 8008d5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d62:	6918      	ldr	r0, [r3, #16]
 8008d64:	f000 fcd6 	bl	8009714 <__hi0bits>
 8008d68:	f1c0 0020 	rsb	r0, r0, #32
 8008d6c:	9b04      	ldr	r3, [sp, #16]
 8008d6e:	4418      	add	r0, r3
 8008d70:	f010 001f 	ands.w	r0, r0, #31
 8008d74:	f000 8086 	beq.w	8008e84 <_dtoa_r+0x91c>
 8008d78:	f1c0 0320 	rsb	r3, r0, #32
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	dd7f      	ble.n	8008e80 <_dtoa_r+0x918>
 8008d80:	f1c0 001c 	rsb	r0, r0, #28
 8008d84:	9b04      	ldr	r3, [sp, #16]
 8008d86:	4403      	add	r3, r0
 8008d88:	4480      	add	r8, r0
 8008d8a:	4405      	add	r5, r0
 8008d8c:	9304      	str	r3, [sp, #16]
 8008d8e:	f1b8 0f00 	cmp.w	r8, #0
 8008d92:	dd05      	ble.n	8008da0 <_dtoa_r+0x838>
 8008d94:	4659      	mov	r1, fp
 8008d96:	4642      	mov	r2, r8
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 fe21 	bl	80099e0 <__lshift>
 8008d9e:	4683      	mov	fp, r0
 8008da0:	9b04      	ldr	r3, [sp, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dd05      	ble.n	8008db2 <_dtoa_r+0x84a>
 8008da6:	4631      	mov	r1, r6
 8008da8:	461a      	mov	r2, r3
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 fe18 	bl	80099e0 <__lshift>
 8008db0:	4606      	mov	r6, r0
 8008db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d069      	beq.n	8008e8c <_dtoa_r+0x924>
 8008db8:	4631      	mov	r1, r6
 8008dba:	4658      	mov	r0, fp
 8008dbc:	f000 fe7c 	bl	8009ab8 <__mcmp>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	da63      	bge.n	8008e8c <_dtoa_r+0x924>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4659      	mov	r1, fp
 8008dc8:	220a      	movs	r2, #10
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 fc58 	bl	8009680 <__multadd>
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008dd6:	4683      	mov	fp, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 818f 	beq.w	80090fc <_dtoa_r+0xb94>
 8008dde:	4639      	mov	r1, r7
 8008de0:	2300      	movs	r3, #0
 8008de2:	220a      	movs	r2, #10
 8008de4:	4620      	mov	r0, r4
 8008de6:	f000 fc4b 	bl	8009680 <__multadd>
 8008dea:	f1b9 0f00 	cmp.w	r9, #0
 8008dee:	4607      	mov	r7, r0
 8008df0:	f300 808e 	bgt.w	8008f10 <_dtoa_r+0x9a8>
 8008df4:	9b05      	ldr	r3, [sp, #20]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	dc50      	bgt.n	8008e9c <_dtoa_r+0x934>
 8008dfa:	e089      	b.n	8008f10 <_dtoa_r+0x9a8>
 8008dfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e02:	e75d      	b.n	8008cc0 <_dtoa_r+0x758>
 8008e04:	9b01      	ldr	r3, [sp, #4]
 8008e06:	1e5e      	subs	r6, r3, #1
 8008e08:	9b06      	ldr	r3, [sp, #24]
 8008e0a:	42b3      	cmp	r3, r6
 8008e0c:	bfbf      	itttt	lt
 8008e0e:	9b06      	ldrlt	r3, [sp, #24]
 8008e10:	9606      	strlt	r6, [sp, #24]
 8008e12:	1af2      	sublt	r2, r6, r3
 8008e14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008e16:	bfb6      	itet	lt
 8008e18:	189b      	addlt	r3, r3, r2
 8008e1a:	1b9e      	subge	r6, r3, r6
 8008e1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	bfb8      	it	lt
 8008e22:	2600      	movlt	r6, #0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bfb5      	itete	lt
 8008e28:	eba8 0503 	sublt.w	r5, r8, r3
 8008e2c:	9b01      	ldrge	r3, [sp, #4]
 8008e2e:	2300      	movlt	r3, #0
 8008e30:	4645      	movge	r5, r8
 8008e32:	e747      	b.n	8008cc4 <_dtoa_r+0x75c>
 8008e34:	9e06      	ldr	r6, [sp, #24]
 8008e36:	9f08      	ldr	r7, [sp, #32]
 8008e38:	4645      	mov	r5, r8
 8008e3a:	e74c      	b.n	8008cd6 <_dtoa_r+0x76e>
 8008e3c:	9a06      	ldr	r2, [sp, #24]
 8008e3e:	e775      	b.n	8008d2c <_dtoa_r+0x7c4>
 8008e40:	9b05      	ldr	r3, [sp, #20]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	dc18      	bgt.n	8008e78 <_dtoa_r+0x910>
 8008e46:	9b02      	ldr	r3, [sp, #8]
 8008e48:	b9b3      	cbnz	r3, 8008e78 <_dtoa_r+0x910>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e50:	b9a3      	cbnz	r3, 8008e7c <_dtoa_r+0x914>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e58:	0d1b      	lsrs	r3, r3, #20
 8008e5a:	051b      	lsls	r3, r3, #20
 8008e5c:	b12b      	cbz	r3, 8008e6a <_dtoa_r+0x902>
 8008e5e:	9b04      	ldr	r3, [sp, #16]
 8008e60:	3301      	adds	r3, #1
 8008e62:	9304      	str	r3, [sp, #16]
 8008e64:	f108 0801 	add.w	r8, r8, #1
 8008e68:	2301      	movs	r3, #1
 8008e6a:	9306      	str	r3, [sp, #24]
 8008e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f47f af74 	bne.w	8008d5c <_dtoa_r+0x7f4>
 8008e74:	2001      	movs	r0, #1
 8008e76:	e779      	b.n	8008d6c <_dtoa_r+0x804>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e7f6      	b.n	8008e6a <_dtoa_r+0x902>
 8008e7c:	9b02      	ldr	r3, [sp, #8]
 8008e7e:	e7f4      	b.n	8008e6a <_dtoa_r+0x902>
 8008e80:	d085      	beq.n	8008d8e <_dtoa_r+0x826>
 8008e82:	4618      	mov	r0, r3
 8008e84:	301c      	adds	r0, #28
 8008e86:	e77d      	b.n	8008d84 <_dtoa_r+0x81c>
 8008e88:	40240000 	.word	0x40240000
 8008e8c:	9b01      	ldr	r3, [sp, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	dc38      	bgt.n	8008f04 <_dtoa_r+0x99c>
 8008e92:	9b05      	ldr	r3, [sp, #20]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	dd35      	ble.n	8008f04 <_dtoa_r+0x99c>
 8008e98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008e9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ea0:	d10d      	bne.n	8008ebe <_dtoa_r+0x956>
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	2205      	movs	r2, #5
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f000 fbe9 	bl	8009680 <__multadd>
 8008eae:	4601      	mov	r1, r0
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	4658      	mov	r0, fp
 8008eb4:	f000 fe00 	bl	8009ab8 <__mcmp>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	f73f adbd 	bgt.w	8008a38 <_dtoa_r+0x4d0>
 8008ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec0:	9d00      	ldr	r5, [sp, #0]
 8008ec2:	ea6f 0a03 	mvn.w	sl, r3
 8008ec6:	f04f 0800 	mov.w	r8, #0
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f000 fbb5 	bl	800963c <_Bfree>
 8008ed2:	2f00      	cmp	r7, #0
 8008ed4:	f43f aeb4 	beq.w	8008c40 <_dtoa_r+0x6d8>
 8008ed8:	f1b8 0f00 	cmp.w	r8, #0
 8008edc:	d005      	beq.n	8008eea <_dtoa_r+0x982>
 8008ede:	45b8      	cmp	r8, r7
 8008ee0:	d003      	beq.n	8008eea <_dtoa_r+0x982>
 8008ee2:	4641      	mov	r1, r8
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 fba9 	bl	800963c <_Bfree>
 8008eea:	4639      	mov	r1, r7
 8008eec:	4620      	mov	r0, r4
 8008eee:	f000 fba5 	bl	800963c <_Bfree>
 8008ef2:	e6a5      	b.n	8008c40 <_dtoa_r+0x6d8>
 8008ef4:	2600      	movs	r6, #0
 8008ef6:	4637      	mov	r7, r6
 8008ef8:	e7e1      	b.n	8008ebe <_dtoa_r+0x956>
 8008efa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008efc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f00:	4637      	mov	r7, r6
 8008f02:	e599      	b.n	8008a38 <_dtoa_r+0x4d0>
 8008f04:	9b08      	ldr	r3, [sp, #32]
 8008f06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 80fd 	beq.w	800910a <_dtoa_r+0xba2>
 8008f10:	2d00      	cmp	r5, #0
 8008f12:	dd05      	ble.n	8008f20 <_dtoa_r+0x9b8>
 8008f14:	4639      	mov	r1, r7
 8008f16:	462a      	mov	r2, r5
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 fd61 	bl	80099e0 <__lshift>
 8008f1e:	4607      	mov	r7, r0
 8008f20:	9b06      	ldr	r3, [sp, #24]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d05c      	beq.n	8008fe0 <_dtoa_r+0xa78>
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fb47 	bl	80095bc <_Balloc>
 8008f2e:	4605      	mov	r5, r0
 8008f30:	b928      	cbnz	r0, 8008f3e <_dtoa_r+0x9d6>
 8008f32:	4b80      	ldr	r3, [pc, #512]	; (8009134 <_dtoa_r+0xbcc>)
 8008f34:	4602      	mov	r2, r0
 8008f36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f3a:	f7ff bb2e 	b.w	800859a <_dtoa_r+0x32>
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	3202      	adds	r2, #2
 8008f42:	0092      	lsls	r2, r2, #2
 8008f44:	f107 010c 	add.w	r1, r7, #12
 8008f48:	300c      	adds	r0, #12
 8008f4a:	f000 fb1d 	bl	8009588 <memcpy>
 8008f4e:	2201      	movs	r2, #1
 8008f50:	4629      	mov	r1, r5
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 fd44 	bl	80099e0 <__lshift>
 8008f58:	9b00      	ldr	r3, [sp, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	9b00      	ldr	r3, [sp, #0]
 8008f60:	444b      	add	r3, r9
 8008f62:	9307      	str	r3, [sp, #28]
 8008f64:	9b02      	ldr	r3, [sp, #8]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	46b8      	mov	r8, r7
 8008f6c:	9306      	str	r3, [sp, #24]
 8008f6e:	4607      	mov	r7, r0
 8008f70:	9b01      	ldr	r3, [sp, #4]
 8008f72:	4631      	mov	r1, r6
 8008f74:	3b01      	subs	r3, #1
 8008f76:	4658      	mov	r0, fp
 8008f78:	9302      	str	r3, [sp, #8]
 8008f7a:	f7ff fa69 	bl	8008450 <quorem>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	3330      	adds	r3, #48	; 0x30
 8008f82:	9004      	str	r0, [sp, #16]
 8008f84:	4641      	mov	r1, r8
 8008f86:	4658      	mov	r0, fp
 8008f88:	9308      	str	r3, [sp, #32]
 8008f8a:	f000 fd95 	bl	8009ab8 <__mcmp>
 8008f8e:	463a      	mov	r2, r7
 8008f90:	4681      	mov	r9, r0
 8008f92:	4631      	mov	r1, r6
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 fdab 	bl	8009af0 <__mdiff>
 8008f9a:	68c2      	ldr	r2, [r0, #12]
 8008f9c:	9b08      	ldr	r3, [sp, #32]
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	bb02      	cbnz	r2, 8008fe4 <_dtoa_r+0xa7c>
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	4658      	mov	r0, fp
 8008fa6:	f000 fd87 	bl	8009ab8 <__mcmp>
 8008faa:	9b08      	ldr	r3, [sp, #32]
 8008fac:	4602      	mov	r2, r0
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008fb6:	f000 fb41 	bl	800963c <_Bfree>
 8008fba:	9b05      	ldr	r3, [sp, #20]
 8008fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fbe:	9d01      	ldr	r5, [sp, #4]
 8008fc0:	ea43 0102 	orr.w	r1, r3, r2
 8008fc4:	9b06      	ldr	r3, [sp, #24]
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	9b08      	ldr	r3, [sp, #32]
 8008fca:	d10d      	bne.n	8008fe8 <_dtoa_r+0xa80>
 8008fcc:	2b39      	cmp	r3, #57	; 0x39
 8008fce:	d029      	beq.n	8009024 <_dtoa_r+0xabc>
 8008fd0:	f1b9 0f00 	cmp.w	r9, #0
 8008fd4:	dd01      	ble.n	8008fda <_dtoa_r+0xa72>
 8008fd6:	9b04      	ldr	r3, [sp, #16]
 8008fd8:	3331      	adds	r3, #49	; 0x31
 8008fda:	9a02      	ldr	r2, [sp, #8]
 8008fdc:	7013      	strb	r3, [r2, #0]
 8008fde:	e774      	b.n	8008eca <_dtoa_r+0x962>
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	e7b9      	b.n	8008f58 <_dtoa_r+0x9f0>
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	e7e2      	b.n	8008fae <_dtoa_r+0xa46>
 8008fe8:	f1b9 0f00 	cmp.w	r9, #0
 8008fec:	db06      	blt.n	8008ffc <_dtoa_r+0xa94>
 8008fee:	9905      	ldr	r1, [sp, #20]
 8008ff0:	ea41 0909 	orr.w	r9, r1, r9
 8008ff4:	9906      	ldr	r1, [sp, #24]
 8008ff6:	ea59 0101 	orrs.w	r1, r9, r1
 8008ffa:	d120      	bne.n	800903e <_dtoa_r+0xad6>
 8008ffc:	2a00      	cmp	r2, #0
 8008ffe:	ddec      	ble.n	8008fda <_dtoa_r+0xa72>
 8009000:	4659      	mov	r1, fp
 8009002:	2201      	movs	r2, #1
 8009004:	4620      	mov	r0, r4
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	f000 fcea 	bl	80099e0 <__lshift>
 800900c:	4631      	mov	r1, r6
 800900e:	4683      	mov	fp, r0
 8009010:	f000 fd52 	bl	8009ab8 <__mcmp>
 8009014:	2800      	cmp	r0, #0
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	dc02      	bgt.n	8009020 <_dtoa_r+0xab8>
 800901a:	d1de      	bne.n	8008fda <_dtoa_r+0xa72>
 800901c:	07da      	lsls	r2, r3, #31
 800901e:	d5dc      	bpl.n	8008fda <_dtoa_r+0xa72>
 8009020:	2b39      	cmp	r3, #57	; 0x39
 8009022:	d1d8      	bne.n	8008fd6 <_dtoa_r+0xa6e>
 8009024:	9a02      	ldr	r2, [sp, #8]
 8009026:	2339      	movs	r3, #57	; 0x39
 8009028:	7013      	strb	r3, [r2, #0]
 800902a:	462b      	mov	r3, r5
 800902c:	461d      	mov	r5, r3
 800902e:	3b01      	subs	r3, #1
 8009030:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009034:	2a39      	cmp	r2, #57	; 0x39
 8009036:	d050      	beq.n	80090da <_dtoa_r+0xb72>
 8009038:	3201      	adds	r2, #1
 800903a:	701a      	strb	r2, [r3, #0]
 800903c:	e745      	b.n	8008eca <_dtoa_r+0x962>
 800903e:	2a00      	cmp	r2, #0
 8009040:	dd03      	ble.n	800904a <_dtoa_r+0xae2>
 8009042:	2b39      	cmp	r3, #57	; 0x39
 8009044:	d0ee      	beq.n	8009024 <_dtoa_r+0xabc>
 8009046:	3301      	adds	r3, #1
 8009048:	e7c7      	b.n	8008fda <_dtoa_r+0xa72>
 800904a:	9a01      	ldr	r2, [sp, #4]
 800904c:	9907      	ldr	r1, [sp, #28]
 800904e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009052:	428a      	cmp	r2, r1
 8009054:	d02a      	beq.n	80090ac <_dtoa_r+0xb44>
 8009056:	4659      	mov	r1, fp
 8009058:	2300      	movs	r3, #0
 800905a:	220a      	movs	r2, #10
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fb0f 	bl	8009680 <__multadd>
 8009062:	45b8      	cmp	r8, r7
 8009064:	4683      	mov	fp, r0
 8009066:	f04f 0300 	mov.w	r3, #0
 800906a:	f04f 020a 	mov.w	r2, #10
 800906e:	4641      	mov	r1, r8
 8009070:	4620      	mov	r0, r4
 8009072:	d107      	bne.n	8009084 <_dtoa_r+0xb1c>
 8009074:	f000 fb04 	bl	8009680 <__multadd>
 8009078:	4680      	mov	r8, r0
 800907a:	4607      	mov	r7, r0
 800907c:	9b01      	ldr	r3, [sp, #4]
 800907e:	3301      	adds	r3, #1
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	e775      	b.n	8008f70 <_dtoa_r+0xa08>
 8009084:	f000 fafc 	bl	8009680 <__multadd>
 8009088:	4639      	mov	r1, r7
 800908a:	4680      	mov	r8, r0
 800908c:	2300      	movs	r3, #0
 800908e:	220a      	movs	r2, #10
 8009090:	4620      	mov	r0, r4
 8009092:	f000 faf5 	bl	8009680 <__multadd>
 8009096:	4607      	mov	r7, r0
 8009098:	e7f0      	b.n	800907c <_dtoa_r+0xb14>
 800909a:	f1b9 0f00 	cmp.w	r9, #0
 800909e:	9a00      	ldr	r2, [sp, #0]
 80090a0:	bfcc      	ite	gt
 80090a2:	464d      	movgt	r5, r9
 80090a4:	2501      	movle	r5, #1
 80090a6:	4415      	add	r5, r2
 80090a8:	f04f 0800 	mov.w	r8, #0
 80090ac:	4659      	mov	r1, fp
 80090ae:	2201      	movs	r2, #1
 80090b0:	4620      	mov	r0, r4
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	f000 fc94 	bl	80099e0 <__lshift>
 80090b8:	4631      	mov	r1, r6
 80090ba:	4683      	mov	fp, r0
 80090bc:	f000 fcfc 	bl	8009ab8 <__mcmp>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	dcb2      	bgt.n	800902a <_dtoa_r+0xac2>
 80090c4:	d102      	bne.n	80090cc <_dtoa_r+0xb64>
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	07db      	lsls	r3, r3, #31
 80090ca:	d4ae      	bmi.n	800902a <_dtoa_r+0xac2>
 80090cc:	462b      	mov	r3, r5
 80090ce:	461d      	mov	r5, r3
 80090d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090d4:	2a30      	cmp	r2, #48	; 0x30
 80090d6:	d0fa      	beq.n	80090ce <_dtoa_r+0xb66>
 80090d8:	e6f7      	b.n	8008eca <_dtoa_r+0x962>
 80090da:	9a00      	ldr	r2, [sp, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d1a5      	bne.n	800902c <_dtoa_r+0xac4>
 80090e0:	f10a 0a01 	add.w	sl, sl, #1
 80090e4:	2331      	movs	r3, #49	; 0x31
 80090e6:	e779      	b.n	8008fdc <_dtoa_r+0xa74>
 80090e8:	4b13      	ldr	r3, [pc, #76]	; (8009138 <_dtoa_r+0xbd0>)
 80090ea:	f7ff baaf 	b.w	800864c <_dtoa_r+0xe4>
 80090ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f47f aa86 	bne.w	8008602 <_dtoa_r+0x9a>
 80090f6:	4b11      	ldr	r3, [pc, #68]	; (800913c <_dtoa_r+0xbd4>)
 80090f8:	f7ff baa8 	b.w	800864c <_dtoa_r+0xe4>
 80090fc:	f1b9 0f00 	cmp.w	r9, #0
 8009100:	dc03      	bgt.n	800910a <_dtoa_r+0xba2>
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	2b02      	cmp	r3, #2
 8009106:	f73f aec9 	bgt.w	8008e9c <_dtoa_r+0x934>
 800910a:	9d00      	ldr	r5, [sp, #0]
 800910c:	4631      	mov	r1, r6
 800910e:	4658      	mov	r0, fp
 8009110:	f7ff f99e 	bl	8008450 <quorem>
 8009114:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009118:	f805 3b01 	strb.w	r3, [r5], #1
 800911c:	9a00      	ldr	r2, [sp, #0]
 800911e:	1aaa      	subs	r2, r5, r2
 8009120:	4591      	cmp	r9, r2
 8009122:	ddba      	ble.n	800909a <_dtoa_r+0xb32>
 8009124:	4659      	mov	r1, fp
 8009126:	2300      	movs	r3, #0
 8009128:	220a      	movs	r2, #10
 800912a:	4620      	mov	r0, r4
 800912c:	f000 faa8 	bl	8009680 <__multadd>
 8009130:	4683      	mov	fp, r0
 8009132:	e7eb      	b.n	800910c <_dtoa_r+0xba4>
 8009134:	0800aa87 	.word	0x0800aa87
 8009138:	0800a9e0 	.word	0x0800a9e0
 800913c:	0800aa04 	.word	0x0800aa04

08009140 <__sflush_r>:
 8009140:	898a      	ldrh	r2, [r1, #12]
 8009142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009146:	4605      	mov	r5, r0
 8009148:	0710      	lsls	r0, r2, #28
 800914a:	460c      	mov	r4, r1
 800914c:	d458      	bmi.n	8009200 <__sflush_r+0xc0>
 800914e:	684b      	ldr	r3, [r1, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	dc05      	bgt.n	8009160 <__sflush_r+0x20>
 8009154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	dc02      	bgt.n	8009160 <__sflush_r+0x20>
 800915a:	2000      	movs	r0, #0
 800915c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009162:	2e00      	cmp	r6, #0
 8009164:	d0f9      	beq.n	800915a <__sflush_r+0x1a>
 8009166:	2300      	movs	r3, #0
 8009168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800916c:	682f      	ldr	r7, [r5, #0]
 800916e:	602b      	str	r3, [r5, #0]
 8009170:	d032      	beq.n	80091d8 <__sflush_r+0x98>
 8009172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	075a      	lsls	r2, r3, #29
 8009178:	d505      	bpl.n	8009186 <__sflush_r+0x46>
 800917a:	6863      	ldr	r3, [r4, #4]
 800917c:	1ac0      	subs	r0, r0, r3
 800917e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009180:	b10b      	cbz	r3, 8009186 <__sflush_r+0x46>
 8009182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009184:	1ac0      	subs	r0, r0, r3
 8009186:	2300      	movs	r3, #0
 8009188:	4602      	mov	r2, r0
 800918a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800918c:	6a21      	ldr	r1, [r4, #32]
 800918e:	4628      	mov	r0, r5
 8009190:	47b0      	blx	r6
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	d106      	bne.n	80091a6 <__sflush_r+0x66>
 8009198:	6829      	ldr	r1, [r5, #0]
 800919a:	291d      	cmp	r1, #29
 800919c:	d82c      	bhi.n	80091f8 <__sflush_r+0xb8>
 800919e:	4a2a      	ldr	r2, [pc, #168]	; (8009248 <__sflush_r+0x108>)
 80091a0:	40ca      	lsrs	r2, r1
 80091a2:	07d6      	lsls	r6, r2, #31
 80091a4:	d528      	bpl.n	80091f8 <__sflush_r+0xb8>
 80091a6:	2200      	movs	r2, #0
 80091a8:	6062      	str	r2, [r4, #4]
 80091aa:	04d9      	lsls	r1, r3, #19
 80091ac:	6922      	ldr	r2, [r4, #16]
 80091ae:	6022      	str	r2, [r4, #0]
 80091b0:	d504      	bpl.n	80091bc <__sflush_r+0x7c>
 80091b2:	1c42      	adds	r2, r0, #1
 80091b4:	d101      	bne.n	80091ba <__sflush_r+0x7a>
 80091b6:	682b      	ldr	r3, [r5, #0]
 80091b8:	b903      	cbnz	r3, 80091bc <__sflush_r+0x7c>
 80091ba:	6560      	str	r0, [r4, #84]	; 0x54
 80091bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091be:	602f      	str	r7, [r5, #0]
 80091c0:	2900      	cmp	r1, #0
 80091c2:	d0ca      	beq.n	800915a <__sflush_r+0x1a>
 80091c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c8:	4299      	cmp	r1, r3
 80091ca:	d002      	beq.n	80091d2 <__sflush_r+0x92>
 80091cc:	4628      	mov	r0, r5
 80091ce:	f7fe fa97 	bl	8007700 <_free_r>
 80091d2:	2000      	movs	r0, #0
 80091d4:	6360      	str	r0, [r4, #52]	; 0x34
 80091d6:	e7c1      	b.n	800915c <__sflush_r+0x1c>
 80091d8:	6a21      	ldr	r1, [r4, #32]
 80091da:	2301      	movs	r3, #1
 80091dc:	4628      	mov	r0, r5
 80091de:	47b0      	blx	r6
 80091e0:	1c41      	adds	r1, r0, #1
 80091e2:	d1c7      	bne.n	8009174 <__sflush_r+0x34>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0c4      	beq.n	8009174 <__sflush_r+0x34>
 80091ea:	2b1d      	cmp	r3, #29
 80091ec:	d001      	beq.n	80091f2 <__sflush_r+0xb2>
 80091ee:	2b16      	cmp	r3, #22
 80091f0:	d101      	bne.n	80091f6 <__sflush_r+0xb6>
 80091f2:	602f      	str	r7, [r5, #0]
 80091f4:	e7b1      	b.n	800915a <__sflush_r+0x1a>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	e7ad      	b.n	800915c <__sflush_r+0x1c>
 8009200:	690f      	ldr	r7, [r1, #16]
 8009202:	2f00      	cmp	r7, #0
 8009204:	d0a9      	beq.n	800915a <__sflush_r+0x1a>
 8009206:	0793      	lsls	r3, r2, #30
 8009208:	680e      	ldr	r6, [r1, #0]
 800920a:	bf08      	it	eq
 800920c:	694b      	ldreq	r3, [r1, #20]
 800920e:	600f      	str	r7, [r1, #0]
 8009210:	bf18      	it	ne
 8009212:	2300      	movne	r3, #0
 8009214:	eba6 0807 	sub.w	r8, r6, r7
 8009218:	608b      	str	r3, [r1, #8]
 800921a:	f1b8 0f00 	cmp.w	r8, #0
 800921e:	dd9c      	ble.n	800915a <__sflush_r+0x1a>
 8009220:	6a21      	ldr	r1, [r4, #32]
 8009222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009224:	4643      	mov	r3, r8
 8009226:	463a      	mov	r2, r7
 8009228:	4628      	mov	r0, r5
 800922a:	47b0      	blx	r6
 800922c:	2800      	cmp	r0, #0
 800922e:	dc06      	bgt.n	800923e <__sflush_r+0xfe>
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800923c:	e78e      	b.n	800915c <__sflush_r+0x1c>
 800923e:	4407      	add	r7, r0
 8009240:	eba8 0800 	sub.w	r8, r8, r0
 8009244:	e7e9      	b.n	800921a <__sflush_r+0xda>
 8009246:	bf00      	nop
 8009248:	20400001 	.word	0x20400001

0800924c <_fflush_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	690b      	ldr	r3, [r1, #16]
 8009250:	4605      	mov	r5, r0
 8009252:	460c      	mov	r4, r1
 8009254:	b913      	cbnz	r3, 800925c <_fflush_r+0x10>
 8009256:	2500      	movs	r5, #0
 8009258:	4628      	mov	r0, r5
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	b118      	cbz	r0, 8009266 <_fflush_r+0x1a>
 800925e:	6983      	ldr	r3, [r0, #24]
 8009260:	b90b      	cbnz	r3, 8009266 <_fflush_r+0x1a>
 8009262:	f000 f887 	bl	8009374 <__sinit>
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <_fflush_r+0x6c>)
 8009268:	429c      	cmp	r4, r3
 800926a:	d11b      	bne.n	80092a4 <_fflush_r+0x58>
 800926c:	686c      	ldr	r4, [r5, #4]
 800926e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0ef      	beq.n	8009256 <_fflush_r+0xa>
 8009276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009278:	07d0      	lsls	r0, r2, #31
 800927a:	d404      	bmi.n	8009286 <_fflush_r+0x3a>
 800927c:	0599      	lsls	r1, r3, #22
 800927e:	d402      	bmi.n	8009286 <_fflush_r+0x3a>
 8009280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009282:	f000 f91a 	bl	80094ba <__retarget_lock_acquire_recursive>
 8009286:	4628      	mov	r0, r5
 8009288:	4621      	mov	r1, r4
 800928a:	f7ff ff59 	bl	8009140 <__sflush_r>
 800928e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009290:	07da      	lsls	r2, r3, #31
 8009292:	4605      	mov	r5, r0
 8009294:	d4e0      	bmi.n	8009258 <_fflush_r+0xc>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	059b      	lsls	r3, r3, #22
 800929a:	d4dd      	bmi.n	8009258 <_fflush_r+0xc>
 800929c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800929e:	f000 f90d 	bl	80094bc <__retarget_lock_release_recursive>
 80092a2:	e7d9      	b.n	8009258 <_fflush_r+0xc>
 80092a4:	4b05      	ldr	r3, [pc, #20]	; (80092bc <_fflush_r+0x70>)
 80092a6:	429c      	cmp	r4, r3
 80092a8:	d101      	bne.n	80092ae <_fflush_r+0x62>
 80092aa:	68ac      	ldr	r4, [r5, #8]
 80092ac:	e7df      	b.n	800926e <_fflush_r+0x22>
 80092ae:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <_fflush_r+0x74>)
 80092b0:	429c      	cmp	r4, r3
 80092b2:	bf08      	it	eq
 80092b4:	68ec      	ldreq	r4, [r5, #12]
 80092b6:	e7da      	b.n	800926e <_fflush_r+0x22>
 80092b8:	0800aab8 	.word	0x0800aab8
 80092bc:	0800aad8 	.word	0x0800aad8
 80092c0:	0800aa98 	.word	0x0800aa98

080092c4 <std>:
 80092c4:	2300      	movs	r3, #0
 80092c6:	b510      	push	{r4, lr}
 80092c8:	4604      	mov	r4, r0
 80092ca:	e9c0 3300 	strd	r3, r3, [r0]
 80092ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092d2:	6083      	str	r3, [r0, #8]
 80092d4:	8181      	strh	r1, [r0, #12]
 80092d6:	6643      	str	r3, [r0, #100]	; 0x64
 80092d8:	81c2      	strh	r2, [r0, #14]
 80092da:	6183      	str	r3, [r0, #24]
 80092dc:	4619      	mov	r1, r3
 80092de:	2208      	movs	r2, #8
 80092e0:	305c      	adds	r0, #92	; 0x5c
 80092e2:	f7fe fa05 	bl	80076f0 <memset>
 80092e6:	4b05      	ldr	r3, [pc, #20]	; (80092fc <std+0x38>)
 80092e8:	6263      	str	r3, [r4, #36]	; 0x24
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <std+0x3c>)
 80092ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std+0x40>)
 80092f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <std+0x44>)
 80092f4:	6224      	str	r4, [r4, #32]
 80092f6:	6323      	str	r3, [r4, #48]	; 0x30
 80092f8:	bd10      	pop	{r4, pc}
 80092fa:	bf00      	nop
 80092fc:	0800a2d1 	.word	0x0800a2d1
 8009300:	0800a2f3 	.word	0x0800a2f3
 8009304:	0800a32b 	.word	0x0800a32b
 8009308:	0800a34f 	.word	0x0800a34f

0800930c <_cleanup_r>:
 800930c:	4901      	ldr	r1, [pc, #4]	; (8009314 <_cleanup_r+0x8>)
 800930e:	f000 b8af 	b.w	8009470 <_fwalk_reent>
 8009312:	bf00      	nop
 8009314:	0800924d 	.word	0x0800924d

08009318 <__sfmoreglue>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	1e4a      	subs	r2, r1, #1
 800931c:	2568      	movs	r5, #104	; 0x68
 800931e:	4355      	muls	r5, r2
 8009320:	460e      	mov	r6, r1
 8009322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009326:	f7fe fa3b 	bl	80077a0 <_malloc_r>
 800932a:	4604      	mov	r4, r0
 800932c:	b140      	cbz	r0, 8009340 <__sfmoreglue+0x28>
 800932e:	2100      	movs	r1, #0
 8009330:	e9c0 1600 	strd	r1, r6, [r0]
 8009334:	300c      	adds	r0, #12
 8009336:	60a0      	str	r0, [r4, #8]
 8009338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800933c:	f7fe f9d8 	bl	80076f0 <memset>
 8009340:	4620      	mov	r0, r4
 8009342:	bd70      	pop	{r4, r5, r6, pc}

08009344 <__sfp_lock_acquire>:
 8009344:	4801      	ldr	r0, [pc, #4]	; (800934c <__sfp_lock_acquire+0x8>)
 8009346:	f000 b8b8 	b.w	80094ba <__retarget_lock_acquire_recursive>
 800934a:	bf00      	nop
 800934c:	2000045c 	.word	0x2000045c

08009350 <__sfp_lock_release>:
 8009350:	4801      	ldr	r0, [pc, #4]	; (8009358 <__sfp_lock_release+0x8>)
 8009352:	f000 b8b3 	b.w	80094bc <__retarget_lock_release_recursive>
 8009356:	bf00      	nop
 8009358:	2000045c 	.word	0x2000045c

0800935c <__sinit_lock_acquire>:
 800935c:	4801      	ldr	r0, [pc, #4]	; (8009364 <__sinit_lock_acquire+0x8>)
 800935e:	f000 b8ac 	b.w	80094ba <__retarget_lock_acquire_recursive>
 8009362:	bf00      	nop
 8009364:	20000457 	.word	0x20000457

08009368 <__sinit_lock_release>:
 8009368:	4801      	ldr	r0, [pc, #4]	; (8009370 <__sinit_lock_release+0x8>)
 800936a:	f000 b8a7 	b.w	80094bc <__retarget_lock_release_recursive>
 800936e:	bf00      	nop
 8009370:	20000457 	.word	0x20000457

08009374 <__sinit>:
 8009374:	b510      	push	{r4, lr}
 8009376:	4604      	mov	r4, r0
 8009378:	f7ff fff0 	bl	800935c <__sinit_lock_acquire>
 800937c:	69a3      	ldr	r3, [r4, #24]
 800937e:	b11b      	cbz	r3, 8009388 <__sinit+0x14>
 8009380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009384:	f7ff bff0 	b.w	8009368 <__sinit_lock_release>
 8009388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800938c:	6523      	str	r3, [r4, #80]	; 0x50
 800938e:	4b13      	ldr	r3, [pc, #76]	; (80093dc <__sinit+0x68>)
 8009390:	4a13      	ldr	r2, [pc, #76]	; (80093e0 <__sinit+0x6c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	62a2      	str	r2, [r4, #40]	; 0x28
 8009396:	42a3      	cmp	r3, r4
 8009398:	bf04      	itt	eq
 800939a:	2301      	moveq	r3, #1
 800939c:	61a3      	streq	r3, [r4, #24]
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 f820 	bl	80093e4 <__sfp>
 80093a4:	6060      	str	r0, [r4, #4]
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 f81c 	bl	80093e4 <__sfp>
 80093ac:	60a0      	str	r0, [r4, #8]
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 f818 	bl	80093e4 <__sfp>
 80093b4:	2200      	movs	r2, #0
 80093b6:	60e0      	str	r0, [r4, #12]
 80093b8:	2104      	movs	r1, #4
 80093ba:	6860      	ldr	r0, [r4, #4]
 80093bc:	f7ff ff82 	bl	80092c4 <std>
 80093c0:	68a0      	ldr	r0, [r4, #8]
 80093c2:	2201      	movs	r2, #1
 80093c4:	2109      	movs	r1, #9
 80093c6:	f7ff ff7d 	bl	80092c4 <std>
 80093ca:	68e0      	ldr	r0, [r4, #12]
 80093cc:	2202      	movs	r2, #2
 80093ce:	2112      	movs	r1, #18
 80093d0:	f7ff ff78 	bl	80092c4 <std>
 80093d4:	2301      	movs	r3, #1
 80093d6:	61a3      	str	r3, [r4, #24]
 80093d8:	e7d2      	b.n	8009380 <__sinit+0xc>
 80093da:	bf00      	nop
 80093dc:	0800a9cc 	.word	0x0800a9cc
 80093e0:	0800930d 	.word	0x0800930d

080093e4 <__sfp>:
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e6:	4607      	mov	r7, r0
 80093e8:	f7ff ffac 	bl	8009344 <__sfp_lock_acquire>
 80093ec:	4b1e      	ldr	r3, [pc, #120]	; (8009468 <__sfp+0x84>)
 80093ee:	681e      	ldr	r6, [r3, #0]
 80093f0:	69b3      	ldr	r3, [r6, #24]
 80093f2:	b913      	cbnz	r3, 80093fa <__sfp+0x16>
 80093f4:	4630      	mov	r0, r6
 80093f6:	f7ff ffbd 	bl	8009374 <__sinit>
 80093fa:	3648      	adds	r6, #72	; 0x48
 80093fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009400:	3b01      	subs	r3, #1
 8009402:	d503      	bpl.n	800940c <__sfp+0x28>
 8009404:	6833      	ldr	r3, [r6, #0]
 8009406:	b30b      	cbz	r3, 800944c <__sfp+0x68>
 8009408:	6836      	ldr	r6, [r6, #0]
 800940a:	e7f7      	b.n	80093fc <__sfp+0x18>
 800940c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009410:	b9d5      	cbnz	r5, 8009448 <__sfp+0x64>
 8009412:	4b16      	ldr	r3, [pc, #88]	; (800946c <__sfp+0x88>)
 8009414:	60e3      	str	r3, [r4, #12]
 8009416:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800941a:	6665      	str	r5, [r4, #100]	; 0x64
 800941c:	f000 f84c 	bl	80094b8 <__retarget_lock_init_recursive>
 8009420:	f7ff ff96 	bl	8009350 <__sfp_lock_release>
 8009424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800942c:	6025      	str	r5, [r4, #0]
 800942e:	61a5      	str	r5, [r4, #24]
 8009430:	2208      	movs	r2, #8
 8009432:	4629      	mov	r1, r5
 8009434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009438:	f7fe f95a 	bl	80076f0 <memset>
 800943c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009444:	4620      	mov	r0, r4
 8009446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009448:	3468      	adds	r4, #104	; 0x68
 800944a:	e7d9      	b.n	8009400 <__sfp+0x1c>
 800944c:	2104      	movs	r1, #4
 800944e:	4638      	mov	r0, r7
 8009450:	f7ff ff62 	bl	8009318 <__sfmoreglue>
 8009454:	4604      	mov	r4, r0
 8009456:	6030      	str	r0, [r6, #0]
 8009458:	2800      	cmp	r0, #0
 800945a:	d1d5      	bne.n	8009408 <__sfp+0x24>
 800945c:	f7ff ff78 	bl	8009350 <__sfp_lock_release>
 8009460:	230c      	movs	r3, #12
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	e7ee      	b.n	8009444 <__sfp+0x60>
 8009466:	bf00      	nop
 8009468:	0800a9cc 	.word	0x0800a9cc
 800946c:	ffff0001 	.word	0xffff0001

08009470 <_fwalk_reent>:
 8009470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009474:	4606      	mov	r6, r0
 8009476:	4688      	mov	r8, r1
 8009478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800947c:	2700      	movs	r7, #0
 800947e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009482:	f1b9 0901 	subs.w	r9, r9, #1
 8009486:	d505      	bpl.n	8009494 <_fwalk_reent+0x24>
 8009488:	6824      	ldr	r4, [r4, #0]
 800948a:	2c00      	cmp	r4, #0
 800948c:	d1f7      	bne.n	800947e <_fwalk_reent+0xe>
 800948e:	4638      	mov	r0, r7
 8009490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009494:	89ab      	ldrh	r3, [r5, #12]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d907      	bls.n	80094aa <_fwalk_reent+0x3a>
 800949a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800949e:	3301      	adds	r3, #1
 80094a0:	d003      	beq.n	80094aa <_fwalk_reent+0x3a>
 80094a2:	4629      	mov	r1, r5
 80094a4:	4630      	mov	r0, r6
 80094a6:	47c0      	blx	r8
 80094a8:	4307      	orrs	r7, r0
 80094aa:	3568      	adds	r5, #104	; 0x68
 80094ac:	e7e9      	b.n	8009482 <_fwalk_reent+0x12>
	...

080094b0 <_localeconv_r>:
 80094b0:	4800      	ldr	r0, [pc, #0]	; (80094b4 <_localeconv_r+0x4>)
 80094b2:	4770      	bx	lr
 80094b4:	20000160 	.word	0x20000160

080094b8 <__retarget_lock_init_recursive>:
 80094b8:	4770      	bx	lr

080094ba <__retarget_lock_acquire_recursive>:
 80094ba:	4770      	bx	lr

080094bc <__retarget_lock_release_recursive>:
 80094bc:	4770      	bx	lr

080094be <__swhatbuf_r>:
 80094be:	b570      	push	{r4, r5, r6, lr}
 80094c0:	460e      	mov	r6, r1
 80094c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c6:	2900      	cmp	r1, #0
 80094c8:	b096      	sub	sp, #88	; 0x58
 80094ca:	4614      	mov	r4, r2
 80094cc:	461d      	mov	r5, r3
 80094ce:	da07      	bge.n	80094e0 <__swhatbuf_r+0x22>
 80094d0:	2300      	movs	r3, #0
 80094d2:	602b      	str	r3, [r5, #0]
 80094d4:	89b3      	ldrh	r3, [r6, #12]
 80094d6:	061a      	lsls	r2, r3, #24
 80094d8:	d410      	bmi.n	80094fc <__swhatbuf_r+0x3e>
 80094da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094de:	e00e      	b.n	80094fe <__swhatbuf_r+0x40>
 80094e0:	466a      	mov	r2, sp
 80094e2:	f000 ff8b 	bl	800a3fc <_fstat_r>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	dbf2      	blt.n	80094d0 <__swhatbuf_r+0x12>
 80094ea:	9a01      	ldr	r2, [sp, #4]
 80094ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094f4:	425a      	negs	r2, r3
 80094f6:	415a      	adcs	r2, r3
 80094f8:	602a      	str	r2, [r5, #0]
 80094fa:	e7ee      	b.n	80094da <__swhatbuf_r+0x1c>
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	2000      	movs	r0, #0
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	b016      	add	sp, #88	; 0x58
 8009504:	bd70      	pop	{r4, r5, r6, pc}
	...

08009508 <__smakebuf_r>:
 8009508:	898b      	ldrh	r3, [r1, #12]
 800950a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800950c:	079d      	lsls	r5, r3, #30
 800950e:	4606      	mov	r6, r0
 8009510:	460c      	mov	r4, r1
 8009512:	d507      	bpl.n	8009524 <__smakebuf_r+0x1c>
 8009514:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	6123      	str	r3, [r4, #16]
 800951c:	2301      	movs	r3, #1
 800951e:	6163      	str	r3, [r4, #20]
 8009520:	b002      	add	sp, #8
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	ab01      	add	r3, sp, #4
 8009526:	466a      	mov	r2, sp
 8009528:	f7ff ffc9 	bl	80094be <__swhatbuf_r>
 800952c:	9900      	ldr	r1, [sp, #0]
 800952e:	4605      	mov	r5, r0
 8009530:	4630      	mov	r0, r6
 8009532:	f7fe f935 	bl	80077a0 <_malloc_r>
 8009536:	b948      	cbnz	r0, 800954c <__smakebuf_r+0x44>
 8009538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800953c:	059a      	lsls	r2, r3, #22
 800953e:	d4ef      	bmi.n	8009520 <__smakebuf_r+0x18>
 8009540:	f023 0303 	bic.w	r3, r3, #3
 8009544:	f043 0302 	orr.w	r3, r3, #2
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	e7e3      	b.n	8009514 <__smakebuf_r+0xc>
 800954c:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <__smakebuf_r+0x7c>)
 800954e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	6020      	str	r0, [r4, #0]
 8009554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	9b00      	ldr	r3, [sp, #0]
 800955c:	6163      	str	r3, [r4, #20]
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	6120      	str	r0, [r4, #16]
 8009562:	b15b      	cbz	r3, 800957c <__smakebuf_r+0x74>
 8009564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009568:	4630      	mov	r0, r6
 800956a:	f000 ff59 	bl	800a420 <_isatty_r>
 800956e:	b128      	cbz	r0, 800957c <__smakebuf_r+0x74>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	f043 0301 	orr.w	r3, r3, #1
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	89a0      	ldrh	r0, [r4, #12]
 800957e:	4305      	orrs	r5, r0
 8009580:	81a5      	strh	r5, [r4, #12]
 8009582:	e7cd      	b.n	8009520 <__smakebuf_r+0x18>
 8009584:	0800930d 	.word	0x0800930d

08009588 <memcpy>:
 8009588:	440a      	add	r2, r1
 800958a:	4291      	cmp	r1, r2
 800958c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009590:	d100      	bne.n	8009594 <memcpy+0xc>
 8009592:	4770      	bx	lr
 8009594:	b510      	push	{r4, lr}
 8009596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800959a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800959e:	4291      	cmp	r1, r2
 80095a0:	d1f9      	bne.n	8009596 <memcpy+0xe>
 80095a2:	bd10      	pop	{r4, pc}

080095a4 <__malloc_lock>:
 80095a4:	4801      	ldr	r0, [pc, #4]	; (80095ac <__malloc_lock+0x8>)
 80095a6:	f7ff bf88 	b.w	80094ba <__retarget_lock_acquire_recursive>
 80095aa:	bf00      	nop
 80095ac:	20000458 	.word	0x20000458

080095b0 <__malloc_unlock>:
 80095b0:	4801      	ldr	r0, [pc, #4]	; (80095b8 <__malloc_unlock+0x8>)
 80095b2:	f7ff bf83 	b.w	80094bc <__retarget_lock_release_recursive>
 80095b6:	bf00      	nop
 80095b8:	20000458 	.word	0x20000458

080095bc <_Balloc>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095c0:	4604      	mov	r4, r0
 80095c2:	460d      	mov	r5, r1
 80095c4:	b976      	cbnz	r6, 80095e4 <_Balloc+0x28>
 80095c6:	2010      	movs	r0, #16
 80095c8:	f7fe f88a 	bl	80076e0 <malloc>
 80095cc:	4602      	mov	r2, r0
 80095ce:	6260      	str	r0, [r4, #36]	; 0x24
 80095d0:	b920      	cbnz	r0, 80095dc <_Balloc+0x20>
 80095d2:	4b18      	ldr	r3, [pc, #96]	; (8009634 <_Balloc+0x78>)
 80095d4:	4818      	ldr	r0, [pc, #96]	; (8009638 <_Balloc+0x7c>)
 80095d6:	2166      	movs	r1, #102	; 0x66
 80095d8:	f000 fed0 	bl	800a37c <__assert_func>
 80095dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095e0:	6006      	str	r6, [r0, #0]
 80095e2:	60c6      	str	r6, [r0, #12]
 80095e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095e6:	68f3      	ldr	r3, [r6, #12]
 80095e8:	b183      	cbz	r3, 800960c <_Balloc+0x50>
 80095ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095f2:	b9b8      	cbnz	r0, 8009624 <_Balloc+0x68>
 80095f4:	2101      	movs	r1, #1
 80095f6:	fa01 f605 	lsl.w	r6, r1, r5
 80095fa:	1d72      	adds	r2, r6, #5
 80095fc:	0092      	lsls	r2, r2, #2
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fb5a 	bl	8009cb8 <_calloc_r>
 8009604:	b160      	cbz	r0, 8009620 <_Balloc+0x64>
 8009606:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800960a:	e00e      	b.n	800962a <_Balloc+0x6e>
 800960c:	2221      	movs	r2, #33	; 0x21
 800960e:	2104      	movs	r1, #4
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fb51 	bl	8009cb8 <_calloc_r>
 8009616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009618:	60f0      	str	r0, [r6, #12]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e4      	bne.n	80095ea <_Balloc+0x2e>
 8009620:	2000      	movs	r0, #0
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	6802      	ldr	r2, [r0, #0]
 8009626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800962a:	2300      	movs	r3, #0
 800962c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009630:	e7f7      	b.n	8009622 <_Balloc+0x66>
 8009632:	bf00      	nop
 8009634:	0800aa11 	.word	0x0800aa11
 8009638:	0800aaf8 	.word	0x0800aaf8

0800963c <_Bfree>:
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009640:	4605      	mov	r5, r0
 8009642:	460c      	mov	r4, r1
 8009644:	b976      	cbnz	r6, 8009664 <_Bfree+0x28>
 8009646:	2010      	movs	r0, #16
 8009648:	f7fe f84a 	bl	80076e0 <malloc>
 800964c:	4602      	mov	r2, r0
 800964e:	6268      	str	r0, [r5, #36]	; 0x24
 8009650:	b920      	cbnz	r0, 800965c <_Bfree+0x20>
 8009652:	4b09      	ldr	r3, [pc, #36]	; (8009678 <_Bfree+0x3c>)
 8009654:	4809      	ldr	r0, [pc, #36]	; (800967c <_Bfree+0x40>)
 8009656:	218a      	movs	r1, #138	; 0x8a
 8009658:	f000 fe90 	bl	800a37c <__assert_func>
 800965c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009660:	6006      	str	r6, [r0, #0]
 8009662:	60c6      	str	r6, [r0, #12]
 8009664:	b13c      	cbz	r4, 8009676 <_Bfree+0x3a>
 8009666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009668:	6862      	ldr	r2, [r4, #4]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009670:	6021      	str	r1, [r4, #0]
 8009672:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009676:	bd70      	pop	{r4, r5, r6, pc}
 8009678:	0800aa11 	.word	0x0800aa11
 800967c:	0800aaf8 	.word	0x0800aaf8

08009680 <__multadd>:
 8009680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009684:	690e      	ldr	r6, [r1, #16]
 8009686:	4607      	mov	r7, r0
 8009688:	4698      	mov	r8, r3
 800968a:	460c      	mov	r4, r1
 800968c:	f101 0014 	add.w	r0, r1, #20
 8009690:	2300      	movs	r3, #0
 8009692:	6805      	ldr	r5, [r0, #0]
 8009694:	b2a9      	uxth	r1, r5
 8009696:	fb02 8101 	mla	r1, r2, r1, r8
 800969a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800969e:	0c2d      	lsrs	r5, r5, #16
 80096a0:	fb02 c505 	mla	r5, r2, r5, ip
 80096a4:	b289      	uxth	r1, r1
 80096a6:	3301      	adds	r3, #1
 80096a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80096ac:	429e      	cmp	r6, r3
 80096ae:	f840 1b04 	str.w	r1, [r0], #4
 80096b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80096b6:	dcec      	bgt.n	8009692 <__multadd+0x12>
 80096b8:	f1b8 0f00 	cmp.w	r8, #0
 80096bc:	d022      	beq.n	8009704 <__multadd+0x84>
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	42b3      	cmp	r3, r6
 80096c2:	dc19      	bgt.n	80096f8 <__multadd+0x78>
 80096c4:	6861      	ldr	r1, [r4, #4]
 80096c6:	4638      	mov	r0, r7
 80096c8:	3101      	adds	r1, #1
 80096ca:	f7ff ff77 	bl	80095bc <_Balloc>
 80096ce:	4605      	mov	r5, r0
 80096d0:	b928      	cbnz	r0, 80096de <__multadd+0x5e>
 80096d2:	4602      	mov	r2, r0
 80096d4:	4b0d      	ldr	r3, [pc, #52]	; (800970c <__multadd+0x8c>)
 80096d6:	480e      	ldr	r0, [pc, #56]	; (8009710 <__multadd+0x90>)
 80096d8:	21b5      	movs	r1, #181	; 0xb5
 80096da:	f000 fe4f 	bl	800a37c <__assert_func>
 80096de:	6922      	ldr	r2, [r4, #16]
 80096e0:	3202      	adds	r2, #2
 80096e2:	f104 010c 	add.w	r1, r4, #12
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	300c      	adds	r0, #12
 80096ea:	f7ff ff4d 	bl	8009588 <memcpy>
 80096ee:	4621      	mov	r1, r4
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff ffa3 	bl	800963c <_Bfree>
 80096f6:	462c      	mov	r4, r5
 80096f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80096fc:	3601      	adds	r6, #1
 80096fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8009702:	6126      	str	r6, [r4, #16]
 8009704:	4620      	mov	r0, r4
 8009706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800970a:	bf00      	nop
 800970c:	0800aa87 	.word	0x0800aa87
 8009710:	0800aaf8 	.word	0x0800aaf8

08009714 <__hi0bits>:
 8009714:	0c03      	lsrs	r3, r0, #16
 8009716:	041b      	lsls	r3, r3, #16
 8009718:	b9d3      	cbnz	r3, 8009750 <__hi0bits+0x3c>
 800971a:	0400      	lsls	r0, r0, #16
 800971c:	2310      	movs	r3, #16
 800971e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009722:	bf04      	itt	eq
 8009724:	0200      	lsleq	r0, r0, #8
 8009726:	3308      	addeq	r3, #8
 8009728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800972c:	bf04      	itt	eq
 800972e:	0100      	lsleq	r0, r0, #4
 8009730:	3304      	addeq	r3, #4
 8009732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009736:	bf04      	itt	eq
 8009738:	0080      	lsleq	r0, r0, #2
 800973a:	3302      	addeq	r3, #2
 800973c:	2800      	cmp	r0, #0
 800973e:	db05      	blt.n	800974c <__hi0bits+0x38>
 8009740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009744:	f103 0301 	add.w	r3, r3, #1
 8009748:	bf08      	it	eq
 800974a:	2320      	moveq	r3, #32
 800974c:	4618      	mov	r0, r3
 800974e:	4770      	bx	lr
 8009750:	2300      	movs	r3, #0
 8009752:	e7e4      	b.n	800971e <__hi0bits+0xa>

08009754 <__lo0bits>:
 8009754:	6803      	ldr	r3, [r0, #0]
 8009756:	f013 0207 	ands.w	r2, r3, #7
 800975a:	4601      	mov	r1, r0
 800975c:	d00b      	beq.n	8009776 <__lo0bits+0x22>
 800975e:	07da      	lsls	r2, r3, #31
 8009760:	d424      	bmi.n	80097ac <__lo0bits+0x58>
 8009762:	0798      	lsls	r0, r3, #30
 8009764:	bf49      	itett	mi
 8009766:	085b      	lsrmi	r3, r3, #1
 8009768:	089b      	lsrpl	r3, r3, #2
 800976a:	2001      	movmi	r0, #1
 800976c:	600b      	strmi	r3, [r1, #0]
 800976e:	bf5c      	itt	pl
 8009770:	600b      	strpl	r3, [r1, #0]
 8009772:	2002      	movpl	r0, #2
 8009774:	4770      	bx	lr
 8009776:	b298      	uxth	r0, r3
 8009778:	b9b0      	cbnz	r0, 80097a8 <__lo0bits+0x54>
 800977a:	0c1b      	lsrs	r3, r3, #16
 800977c:	2010      	movs	r0, #16
 800977e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009782:	bf04      	itt	eq
 8009784:	0a1b      	lsreq	r3, r3, #8
 8009786:	3008      	addeq	r0, #8
 8009788:	071a      	lsls	r2, r3, #28
 800978a:	bf04      	itt	eq
 800978c:	091b      	lsreq	r3, r3, #4
 800978e:	3004      	addeq	r0, #4
 8009790:	079a      	lsls	r2, r3, #30
 8009792:	bf04      	itt	eq
 8009794:	089b      	lsreq	r3, r3, #2
 8009796:	3002      	addeq	r0, #2
 8009798:	07da      	lsls	r2, r3, #31
 800979a:	d403      	bmi.n	80097a4 <__lo0bits+0x50>
 800979c:	085b      	lsrs	r3, r3, #1
 800979e:	f100 0001 	add.w	r0, r0, #1
 80097a2:	d005      	beq.n	80097b0 <__lo0bits+0x5c>
 80097a4:	600b      	str	r3, [r1, #0]
 80097a6:	4770      	bx	lr
 80097a8:	4610      	mov	r0, r2
 80097aa:	e7e8      	b.n	800977e <__lo0bits+0x2a>
 80097ac:	2000      	movs	r0, #0
 80097ae:	4770      	bx	lr
 80097b0:	2020      	movs	r0, #32
 80097b2:	4770      	bx	lr

080097b4 <__i2b>:
 80097b4:	b510      	push	{r4, lr}
 80097b6:	460c      	mov	r4, r1
 80097b8:	2101      	movs	r1, #1
 80097ba:	f7ff feff 	bl	80095bc <_Balloc>
 80097be:	4602      	mov	r2, r0
 80097c0:	b928      	cbnz	r0, 80097ce <__i2b+0x1a>
 80097c2:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <__i2b+0x24>)
 80097c4:	4805      	ldr	r0, [pc, #20]	; (80097dc <__i2b+0x28>)
 80097c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80097ca:	f000 fdd7 	bl	800a37c <__assert_func>
 80097ce:	2301      	movs	r3, #1
 80097d0:	6144      	str	r4, [r0, #20]
 80097d2:	6103      	str	r3, [r0, #16]
 80097d4:	bd10      	pop	{r4, pc}
 80097d6:	bf00      	nop
 80097d8:	0800aa87 	.word	0x0800aa87
 80097dc:	0800aaf8 	.word	0x0800aaf8

080097e0 <__multiply>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	4614      	mov	r4, r2
 80097e6:	690a      	ldr	r2, [r1, #16]
 80097e8:	6923      	ldr	r3, [r4, #16]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	bfb8      	it	lt
 80097ee:	460b      	movlt	r3, r1
 80097f0:	460d      	mov	r5, r1
 80097f2:	bfbc      	itt	lt
 80097f4:	4625      	movlt	r5, r4
 80097f6:	461c      	movlt	r4, r3
 80097f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80097fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009800:	68ab      	ldr	r3, [r5, #8]
 8009802:	6869      	ldr	r1, [r5, #4]
 8009804:	eb0a 0709 	add.w	r7, sl, r9
 8009808:	42bb      	cmp	r3, r7
 800980a:	b085      	sub	sp, #20
 800980c:	bfb8      	it	lt
 800980e:	3101      	addlt	r1, #1
 8009810:	f7ff fed4 	bl	80095bc <_Balloc>
 8009814:	b930      	cbnz	r0, 8009824 <__multiply+0x44>
 8009816:	4602      	mov	r2, r0
 8009818:	4b42      	ldr	r3, [pc, #264]	; (8009924 <__multiply+0x144>)
 800981a:	4843      	ldr	r0, [pc, #268]	; (8009928 <__multiply+0x148>)
 800981c:	f240 115d 	movw	r1, #349	; 0x15d
 8009820:	f000 fdac 	bl	800a37c <__assert_func>
 8009824:	f100 0614 	add.w	r6, r0, #20
 8009828:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800982c:	4633      	mov	r3, r6
 800982e:	2200      	movs	r2, #0
 8009830:	4543      	cmp	r3, r8
 8009832:	d31e      	bcc.n	8009872 <__multiply+0x92>
 8009834:	f105 0c14 	add.w	ip, r5, #20
 8009838:	f104 0314 	add.w	r3, r4, #20
 800983c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009840:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009844:	9202      	str	r2, [sp, #8]
 8009846:	ebac 0205 	sub.w	r2, ip, r5
 800984a:	3a15      	subs	r2, #21
 800984c:	f022 0203 	bic.w	r2, r2, #3
 8009850:	3204      	adds	r2, #4
 8009852:	f105 0115 	add.w	r1, r5, #21
 8009856:	458c      	cmp	ip, r1
 8009858:	bf38      	it	cc
 800985a:	2204      	movcc	r2, #4
 800985c:	9201      	str	r2, [sp, #4]
 800985e:	9a02      	ldr	r2, [sp, #8]
 8009860:	9303      	str	r3, [sp, #12]
 8009862:	429a      	cmp	r2, r3
 8009864:	d808      	bhi.n	8009878 <__multiply+0x98>
 8009866:	2f00      	cmp	r7, #0
 8009868:	dc55      	bgt.n	8009916 <__multiply+0x136>
 800986a:	6107      	str	r7, [r0, #16]
 800986c:	b005      	add	sp, #20
 800986e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009872:	f843 2b04 	str.w	r2, [r3], #4
 8009876:	e7db      	b.n	8009830 <__multiply+0x50>
 8009878:	f8b3 a000 	ldrh.w	sl, [r3]
 800987c:	f1ba 0f00 	cmp.w	sl, #0
 8009880:	d020      	beq.n	80098c4 <__multiply+0xe4>
 8009882:	f105 0e14 	add.w	lr, r5, #20
 8009886:	46b1      	mov	r9, r6
 8009888:	2200      	movs	r2, #0
 800988a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800988e:	f8d9 b000 	ldr.w	fp, [r9]
 8009892:	b2a1      	uxth	r1, r4
 8009894:	fa1f fb8b 	uxth.w	fp, fp
 8009898:	fb0a b101 	mla	r1, sl, r1, fp
 800989c:	4411      	add	r1, r2
 800989e:	f8d9 2000 	ldr.w	r2, [r9]
 80098a2:	0c24      	lsrs	r4, r4, #16
 80098a4:	0c12      	lsrs	r2, r2, #16
 80098a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80098aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80098ae:	b289      	uxth	r1, r1
 80098b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80098b4:	45f4      	cmp	ip, lr
 80098b6:	f849 1b04 	str.w	r1, [r9], #4
 80098ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80098be:	d8e4      	bhi.n	800988a <__multiply+0xaa>
 80098c0:	9901      	ldr	r1, [sp, #4]
 80098c2:	5072      	str	r2, [r6, r1]
 80098c4:	9a03      	ldr	r2, [sp, #12]
 80098c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098ca:	3304      	adds	r3, #4
 80098cc:	f1b9 0f00 	cmp.w	r9, #0
 80098d0:	d01f      	beq.n	8009912 <__multiply+0x132>
 80098d2:	6834      	ldr	r4, [r6, #0]
 80098d4:	f105 0114 	add.w	r1, r5, #20
 80098d8:	46b6      	mov	lr, r6
 80098da:	f04f 0a00 	mov.w	sl, #0
 80098de:	880a      	ldrh	r2, [r1, #0]
 80098e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80098e4:	fb09 b202 	mla	r2, r9, r2, fp
 80098e8:	4492      	add	sl, r2
 80098ea:	b2a4      	uxth	r4, r4
 80098ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80098f0:	f84e 4b04 	str.w	r4, [lr], #4
 80098f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80098f8:	f8be 2000 	ldrh.w	r2, [lr]
 80098fc:	0c24      	lsrs	r4, r4, #16
 80098fe:	fb09 2404 	mla	r4, r9, r4, r2
 8009902:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009906:	458c      	cmp	ip, r1
 8009908:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800990c:	d8e7      	bhi.n	80098de <__multiply+0xfe>
 800990e:	9a01      	ldr	r2, [sp, #4]
 8009910:	50b4      	str	r4, [r6, r2]
 8009912:	3604      	adds	r6, #4
 8009914:	e7a3      	b.n	800985e <__multiply+0x7e>
 8009916:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1a5      	bne.n	800986a <__multiply+0x8a>
 800991e:	3f01      	subs	r7, #1
 8009920:	e7a1      	b.n	8009866 <__multiply+0x86>
 8009922:	bf00      	nop
 8009924:	0800aa87 	.word	0x0800aa87
 8009928:	0800aaf8 	.word	0x0800aaf8

0800992c <__pow5mult>:
 800992c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009930:	4615      	mov	r5, r2
 8009932:	f012 0203 	ands.w	r2, r2, #3
 8009936:	4606      	mov	r6, r0
 8009938:	460f      	mov	r7, r1
 800993a:	d007      	beq.n	800994c <__pow5mult+0x20>
 800993c:	4c25      	ldr	r4, [pc, #148]	; (80099d4 <__pow5mult+0xa8>)
 800993e:	3a01      	subs	r2, #1
 8009940:	2300      	movs	r3, #0
 8009942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009946:	f7ff fe9b 	bl	8009680 <__multadd>
 800994a:	4607      	mov	r7, r0
 800994c:	10ad      	asrs	r5, r5, #2
 800994e:	d03d      	beq.n	80099cc <__pow5mult+0xa0>
 8009950:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009952:	b97c      	cbnz	r4, 8009974 <__pow5mult+0x48>
 8009954:	2010      	movs	r0, #16
 8009956:	f7fd fec3 	bl	80076e0 <malloc>
 800995a:	4602      	mov	r2, r0
 800995c:	6270      	str	r0, [r6, #36]	; 0x24
 800995e:	b928      	cbnz	r0, 800996c <__pow5mult+0x40>
 8009960:	4b1d      	ldr	r3, [pc, #116]	; (80099d8 <__pow5mult+0xac>)
 8009962:	481e      	ldr	r0, [pc, #120]	; (80099dc <__pow5mult+0xb0>)
 8009964:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009968:	f000 fd08 	bl	800a37c <__assert_func>
 800996c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009970:	6004      	str	r4, [r0, #0]
 8009972:	60c4      	str	r4, [r0, #12]
 8009974:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800997c:	b94c      	cbnz	r4, 8009992 <__pow5mult+0x66>
 800997e:	f240 2171 	movw	r1, #625	; 0x271
 8009982:	4630      	mov	r0, r6
 8009984:	f7ff ff16 	bl	80097b4 <__i2b>
 8009988:	2300      	movs	r3, #0
 800998a:	f8c8 0008 	str.w	r0, [r8, #8]
 800998e:	4604      	mov	r4, r0
 8009990:	6003      	str	r3, [r0, #0]
 8009992:	f04f 0900 	mov.w	r9, #0
 8009996:	07eb      	lsls	r3, r5, #31
 8009998:	d50a      	bpl.n	80099b0 <__pow5mult+0x84>
 800999a:	4639      	mov	r1, r7
 800999c:	4622      	mov	r2, r4
 800999e:	4630      	mov	r0, r6
 80099a0:	f7ff ff1e 	bl	80097e0 <__multiply>
 80099a4:	4639      	mov	r1, r7
 80099a6:	4680      	mov	r8, r0
 80099a8:	4630      	mov	r0, r6
 80099aa:	f7ff fe47 	bl	800963c <_Bfree>
 80099ae:	4647      	mov	r7, r8
 80099b0:	106d      	asrs	r5, r5, #1
 80099b2:	d00b      	beq.n	80099cc <__pow5mult+0xa0>
 80099b4:	6820      	ldr	r0, [r4, #0]
 80099b6:	b938      	cbnz	r0, 80099c8 <__pow5mult+0x9c>
 80099b8:	4622      	mov	r2, r4
 80099ba:	4621      	mov	r1, r4
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff ff0f 	bl	80097e0 <__multiply>
 80099c2:	6020      	str	r0, [r4, #0]
 80099c4:	f8c0 9000 	str.w	r9, [r0]
 80099c8:	4604      	mov	r4, r0
 80099ca:	e7e4      	b.n	8009996 <__pow5mult+0x6a>
 80099cc:	4638      	mov	r0, r7
 80099ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d2:	bf00      	nop
 80099d4:	0800ac48 	.word	0x0800ac48
 80099d8:	0800aa11 	.word	0x0800aa11
 80099dc:	0800aaf8 	.word	0x0800aaf8

080099e0 <__lshift>:
 80099e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e4:	460c      	mov	r4, r1
 80099e6:	6849      	ldr	r1, [r1, #4]
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	4607      	mov	r7, r0
 80099f2:	4691      	mov	r9, r2
 80099f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099f8:	f108 0601 	add.w	r6, r8, #1
 80099fc:	42b3      	cmp	r3, r6
 80099fe:	db0b      	blt.n	8009a18 <__lshift+0x38>
 8009a00:	4638      	mov	r0, r7
 8009a02:	f7ff fddb 	bl	80095bc <_Balloc>
 8009a06:	4605      	mov	r5, r0
 8009a08:	b948      	cbnz	r0, 8009a1e <__lshift+0x3e>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	4b28      	ldr	r3, [pc, #160]	; (8009ab0 <__lshift+0xd0>)
 8009a0e:	4829      	ldr	r0, [pc, #164]	; (8009ab4 <__lshift+0xd4>)
 8009a10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a14:	f000 fcb2 	bl	800a37c <__assert_func>
 8009a18:	3101      	adds	r1, #1
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	e7ee      	b.n	80099fc <__lshift+0x1c>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f100 0114 	add.w	r1, r0, #20
 8009a24:	f100 0210 	add.w	r2, r0, #16
 8009a28:	4618      	mov	r0, r3
 8009a2a:	4553      	cmp	r3, sl
 8009a2c:	db33      	blt.n	8009a96 <__lshift+0xb6>
 8009a2e:	6920      	ldr	r0, [r4, #16]
 8009a30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a34:	f104 0314 	add.w	r3, r4, #20
 8009a38:	f019 091f 	ands.w	r9, r9, #31
 8009a3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a44:	d02b      	beq.n	8009a9e <__lshift+0xbe>
 8009a46:	f1c9 0e20 	rsb	lr, r9, #32
 8009a4a:	468a      	mov	sl, r1
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	fa00 f009 	lsl.w	r0, r0, r9
 8009a54:	4302      	orrs	r2, r0
 8009a56:	f84a 2b04 	str.w	r2, [sl], #4
 8009a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a5e:	459c      	cmp	ip, r3
 8009a60:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a64:	d8f3      	bhi.n	8009a4e <__lshift+0x6e>
 8009a66:	ebac 0304 	sub.w	r3, ip, r4
 8009a6a:	3b15      	subs	r3, #21
 8009a6c:	f023 0303 	bic.w	r3, r3, #3
 8009a70:	3304      	adds	r3, #4
 8009a72:	f104 0015 	add.w	r0, r4, #21
 8009a76:	4584      	cmp	ip, r0
 8009a78:	bf38      	it	cc
 8009a7a:	2304      	movcc	r3, #4
 8009a7c:	50ca      	str	r2, [r1, r3]
 8009a7e:	b10a      	cbz	r2, 8009a84 <__lshift+0xa4>
 8009a80:	f108 0602 	add.w	r6, r8, #2
 8009a84:	3e01      	subs	r6, #1
 8009a86:	4638      	mov	r0, r7
 8009a88:	612e      	str	r6, [r5, #16]
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	f7ff fdd6 	bl	800963c <_Bfree>
 8009a90:	4628      	mov	r0, r5
 8009a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a96:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	e7c5      	b.n	8009a2a <__lshift+0x4a>
 8009a9e:	3904      	subs	r1, #4
 8009aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aa4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aa8:	459c      	cmp	ip, r3
 8009aaa:	d8f9      	bhi.n	8009aa0 <__lshift+0xc0>
 8009aac:	e7ea      	b.n	8009a84 <__lshift+0xa4>
 8009aae:	bf00      	nop
 8009ab0:	0800aa87 	.word	0x0800aa87
 8009ab4:	0800aaf8 	.word	0x0800aaf8

08009ab8 <__mcmp>:
 8009ab8:	b530      	push	{r4, r5, lr}
 8009aba:	6902      	ldr	r2, [r0, #16]
 8009abc:	690c      	ldr	r4, [r1, #16]
 8009abe:	1b12      	subs	r2, r2, r4
 8009ac0:	d10e      	bne.n	8009ae0 <__mcmp+0x28>
 8009ac2:	f100 0314 	add.w	r3, r0, #20
 8009ac6:	3114      	adds	r1, #20
 8009ac8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009acc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ad0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ad4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ad8:	42a5      	cmp	r5, r4
 8009ada:	d003      	beq.n	8009ae4 <__mcmp+0x2c>
 8009adc:	d305      	bcc.n	8009aea <__mcmp+0x32>
 8009ade:	2201      	movs	r2, #1
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	bd30      	pop	{r4, r5, pc}
 8009ae4:	4283      	cmp	r3, r0
 8009ae6:	d3f3      	bcc.n	8009ad0 <__mcmp+0x18>
 8009ae8:	e7fa      	b.n	8009ae0 <__mcmp+0x28>
 8009aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009aee:	e7f7      	b.n	8009ae0 <__mcmp+0x28>

08009af0 <__mdiff>:
 8009af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	460c      	mov	r4, r1
 8009af6:	4606      	mov	r6, r0
 8009af8:	4611      	mov	r1, r2
 8009afa:	4620      	mov	r0, r4
 8009afc:	4617      	mov	r7, r2
 8009afe:	f7ff ffdb 	bl	8009ab8 <__mcmp>
 8009b02:	1e05      	subs	r5, r0, #0
 8009b04:	d110      	bne.n	8009b28 <__mdiff+0x38>
 8009b06:	4629      	mov	r1, r5
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7ff fd57 	bl	80095bc <_Balloc>
 8009b0e:	b930      	cbnz	r0, 8009b1e <__mdiff+0x2e>
 8009b10:	4b39      	ldr	r3, [pc, #228]	; (8009bf8 <__mdiff+0x108>)
 8009b12:	4602      	mov	r2, r0
 8009b14:	f240 2132 	movw	r1, #562	; 0x232
 8009b18:	4838      	ldr	r0, [pc, #224]	; (8009bfc <__mdiff+0x10c>)
 8009b1a:	f000 fc2f 	bl	800a37c <__assert_func>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b28:	bfa4      	itt	ge
 8009b2a:	463b      	movge	r3, r7
 8009b2c:	4627      	movge	r7, r4
 8009b2e:	4630      	mov	r0, r6
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	bfa6      	itte	ge
 8009b34:	461c      	movge	r4, r3
 8009b36:	2500      	movge	r5, #0
 8009b38:	2501      	movlt	r5, #1
 8009b3a:	f7ff fd3f 	bl	80095bc <_Balloc>
 8009b3e:	b920      	cbnz	r0, 8009b4a <__mdiff+0x5a>
 8009b40:	4b2d      	ldr	r3, [pc, #180]	; (8009bf8 <__mdiff+0x108>)
 8009b42:	4602      	mov	r2, r0
 8009b44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b48:	e7e6      	b.n	8009b18 <__mdiff+0x28>
 8009b4a:	693e      	ldr	r6, [r7, #16]
 8009b4c:	60c5      	str	r5, [r0, #12]
 8009b4e:	6925      	ldr	r5, [r4, #16]
 8009b50:	f107 0114 	add.w	r1, r7, #20
 8009b54:	f104 0914 	add.w	r9, r4, #20
 8009b58:	f100 0e14 	add.w	lr, r0, #20
 8009b5c:	f107 0210 	add.w	r2, r7, #16
 8009b60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009b64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009b68:	46f2      	mov	sl, lr
 8009b6a:	2700      	movs	r7, #0
 8009b6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b74:	fa1f f883 	uxth.w	r8, r3
 8009b78:	fa17 f78b 	uxtah	r7, r7, fp
 8009b7c:	0c1b      	lsrs	r3, r3, #16
 8009b7e:	eba7 0808 	sub.w	r8, r7, r8
 8009b82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b8a:	fa1f f888 	uxth.w	r8, r8
 8009b8e:	141f      	asrs	r7, r3, #16
 8009b90:	454d      	cmp	r5, r9
 8009b92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b96:	f84a 3b04 	str.w	r3, [sl], #4
 8009b9a:	d8e7      	bhi.n	8009b6c <__mdiff+0x7c>
 8009b9c:	1b2b      	subs	r3, r5, r4
 8009b9e:	3b15      	subs	r3, #21
 8009ba0:	f023 0303 	bic.w	r3, r3, #3
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	3415      	adds	r4, #21
 8009ba8:	42a5      	cmp	r5, r4
 8009baa:	bf38      	it	cc
 8009bac:	2304      	movcc	r3, #4
 8009bae:	4419      	add	r1, r3
 8009bb0:	4473      	add	r3, lr
 8009bb2:	469e      	mov	lr, r3
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	4565      	cmp	r5, ip
 8009bb8:	d30e      	bcc.n	8009bd8 <__mdiff+0xe8>
 8009bba:	f10c 0203 	add.w	r2, ip, #3
 8009bbe:	1a52      	subs	r2, r2, r1
 8009bc0:	f022 0203 	bic.w	r2, r2, #3
 8009bc4:	3903      	subs	r1, #3
 8009bc6:	458c      	cmp	ip, r1
 8009bc8:	bf38      	it	cc
 8009bca:	2200      	movcc	r2, #0
 8009bcc:	441a      	add	r2, r3
 8009bce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009bd2:	b17b      	cbz	r3, 8009bf4 <__mdiff+0x104>
 8009bd4:	6106      	str	r6, [r0, #16]
 8009bd6:	e7a5      	b.n	8009b24 <__mdiff+0x34>
 8009bd8:	f855 8b04 	ldr.w	r8, [r5], #4
 8009bdc:	fa17 f488 	uxtah	r4, r7, r8
 8009be0:	1422      	asrs	r2, r4, #16
 8009be2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009be6:	b2a4      	uxth	r4, r4
 8009be8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009bec:	f84e 4b04 	str.w	r4, [lr], #4
 8009bf0:	1417      	asrs	r7, r2, #16
 8009bf2:	e7e0      	b.n	8009bb6 <__mdiff+0xc6>
 8009bf4:	3e01      	subs	r6, #1
 8009bf6:	e7ea      	b.n	8009bce <__mdiff+0xde>
 8009bf8:	0800aa87 	.word	0x0800aa87
 8009bfc:	0800aaf8 	.word	0x0800aaf8

08009c00 <__d2b>:
 8009c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c04:	4689      	mov	r9, r1
 8009c06:	2101      	movs	r1, #1
 8009c08:	ec57 6b10 	vmov	r6, r7, d0
 8009c0c:	4690      	mov	r8, r2
 8009c0e:	f7ff fcd5 	bl	80095bc <_Balloc>
 8009c12:	4604      	mov	r4, r0
 8009c14:	b930      	cbnz	r0, 8009c24 <__d2b+0x24>
 8009c16:	4602      	mov	r2, r0
 8009c18:	4b25      	ldr	r3, [pc, #148]	; (8009cb0 <__d2b+0xb0>)
 8009c1a:	4826      	ldr	r0, [pc, #152]	; (8009cb4 <__d2b+0xb4>)
 8009c1c:	f240 310a 	movw	r1, #778	; 0x30a
 8009c20:	f000 fbac 	bl	800a37c <__assert_func>
 8009c24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c2c:	bb35      	cbnz	r5, 8009c7c <__d2b+0x7c>
 8009c2e:	2e00      	cmp	r6, #0
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	d028      	beq.n	8009c86 <__d2b+0x86>
 8009c34:	4668      	mov	r0, sp
 8009c36:	9600      	str	r6, [sp, #0]
 8009c38:	f7ff fd8c 	bl	8009754 <__lo0bits>
 8009c3c:	9900      	ldr	r1, [sp, #0]
 8009c3e:	b300      	cbz	r0, 8009c82 <__d2b+0x82>
 8009c40:	9a01      	ldr	r2, [sp, #4]
 8009c42:	f1c0 0320 	rsb	r3, r0, #32
 8009c46:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4a:	430b      	orrs	r3, r1
 8009c4c:	40c2      	lsrs	r2, r0
 8009c4e:	6163      	str	r3, [r4, #20]
 8009c50:	9201      	str	r2, [sp, #4]
 8009c52:	9b01      	ldr	r3, [sp, #4]
 8009c54:	61a3      	str	r3, [r4, #24]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	bf14      	ite	ne
 8009c5a:	2202      	movne	r2, #2
 8009c5c:	2201      	moveq	r2, #1
 8009c5e:	6122      	str	r2, [r4, #16]
 8009c60:	b1d5      	cbz	r5, 8009c98 <__d2b+0x98>
 8009c62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c66:	4405      	add	r5, r0
 8009c68:	f8c9 5000 	str.w	r5, [r9]
 8009c6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c70:	f8c8 0000 	str.w	r0, [r8]
 8009c74:	4620      	mov	r0, r4
 8009c76:	b003      	add	sp, #12
 8009c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c80:	e7d5      	b.n	8009c2e <__d2b+0x2e>
 8009c82:	6161      	str	r1, [r4, #20]
 8009c84:	e7e5      	b.n	8009c52 <__d2b+0x52>
 8009c86:	a801      	add	r0, sp, #4
 8009c88:	f7ff fd64 	bl	8009754 <__lo0bits>
 8009c8c:	9b01      	ldr	r3, [sp, #4]
 8009c8e:	6163      	str	r3, [r4, #20]
 8009c90:	2201      	movs	r2, #1
 8009c92:	6122      	str	r2, [r4, #16]
 8009c94:	3020      	adds	r0, #32
 8009c96:	e7e3      	b.n	8009c60 <__d2b+0x60>
 8009c98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ca0:	f8c9 0000 	str.w	r0, [r9]
 8009ca4:	6918      	ldr	r0, [r3, #16]
 8009ca6:	f7ff fd35 	bl	8009714 <__hi0bits>
 8009caa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cae:	e7df      	b.n	8009c70 <__d2b+0x70>
 8009cb0:	0800aa87 	.word	0x0800aa87
 8009cb4:	0800aaf8 	.word	0x0800aaf8

08009cb8 <_calloc_r>:
 8009cb8:	b513      	push	{r0, r1, r4, lr}
 8009cba:	434a      	muls	r2, r1
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	9201      	str	r2, [sp, #4]
 8009cc0:	f7fd fd6e 	bl	80077a0 <_malloc_r>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	b118      	cbz	r0, 8009cd0 <_calloc_r+0x18>
 8009cc8:	9a01      	ldr	r2, [sp, #4]
 8009cca:	2100      	movs	r1, #0
 8009ccc:	f7fd fd10 	bl	80076f0 <memset>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	b002      	add	sp, #8
 8009cd4:	bd10      	pop	{r4, pc}

08009cd6 <__ssputs_r>:
 8009cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cda:	688e      	ldr	r6, [r1, #8]
 8009cdc:	429e      	cmp	r6, r3
 8009cde:	4682      	mov	sl, r0
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	4690      	mov	r8, r2
 8009ce4:	461f      	mov	r7, r3
 8009ce6:	d838      	bhi.n	8009d5a <__ssputs_r+0x84>
 8009ce8:	898a      	ldrh	r2, [r1, #12]
 8009cea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cee:	d032      	beq.n	8009d56 <__ssputs_r+0x80>
 8009cf0:	6825      	ldr	r5, [r4, #0]
 8009cf2:	6909      	ldr	r1, [r1, #16]
 8009cf4:	eba5 0901 	sub.w	r9, r5, r1
 8009cf8:	6965      	ldr	r5, [r4, #20]
 8009cfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d02:	3301      	adds	r3, #1
 8009d04:	444b      	add	r3, r9
 8009d06:	106d      	asrs	r5, r5, #1
 8009d08:	429d      	cmp	r5, r3
 8009d0a:	bf38      	it	cc
 8009d0c:	461d      	movcc	r5, r3
 8009d0e:	0553      	lsls	r3, r2, #21
 8009d10:	d531      	bpl.n	8009d76 <__ssputs_r+0xa0>
 8009d12:	4629      	mov	r1, r5
 8009d14:	f7fd fd44 	bl	80077a0 <_malloc_r>
 8009d18:	4606      	mov	r6, r0
 8009d1a:	b950      	cbnz	r0, 8009d32 <__ssputs_r+0x5c>
 8009d1c:	230c      	movs	r3, #12
 8009d1e:	f8ca 3000 	str.w	r3, [sl]
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d32:	6921      	ldr	r1, [r4, #16]
 8009d34:	464a      	mov	r2, r9
 8009d36:	f7ff fc27 	bl	8009588 <memcpy>
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	6126      	str	r6, [r4, #16]
 8009d48:	6165      	str	r5, [r4, #20]
 8009d4a:	444e      	add	r6, r9
 8009d4c:	eba5 0509 	sub.w	r5, r5, r9
 8009d50:	6026      	str	r6, [r4, #0]
 8009d52:	60a5      	str	r5, [r4, #8]
 8009d54:	463e      	mov	r6, r7
 8009d56:	42be      	cmp	r6, r7
 8009d58:	d900      	bls.n	8009d5c <__ssputs_r+0x86>
 8009d5a:	463e      	mov	r6, r7
 8009d5c:	4632      	mov	r2, r6
 8009d5e:	6820      	ldr	r0, [r4, #0]
 8009d60:	4641      	mov	r1, r8
 8009d62:	f000 fb91 	bl	800a488 <memmove>
 8009d66:	68a3      	ldr	r3, [r4, #8]
 8009d68:	6822      	ldr	r2, [r4, #0]
 8009d6a:	1b9b      	subs	r3, r3, r6
 8009d6c:	4432      	add	r2, r6
 8009d6e:	60a3      	str	r3, [r4, #8]
 8009d70:	6022      	str	r2, [r4, #0]
 8009d72:	2000      	movs	r0, #0
 8009d74:	e7db      	b.n	8009d2e <__ssputs_r+0x58>
 8009d76:	462a      	mov	r2, r5
 8009d78:	f000 fba0 	bl	800a4bc <_realloc_r>
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d1e1      	bne.n	8009d46 <__ssputs_r+0x70>
 8009d82:	6921      	ldr	r1, [r4, #16]
 8009d84:	4650      	mov	r0, sl
 8009d86:	f7fd fcbb 	bl	8007700 <_free_r>
 8009d8a:	e7c7      	b.n	8009d1c <__ssputs_r+0x46>

08009d8c <_svfiprintf_r>:
 8009d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	4698      	mov	r8, r3
 8009d92:	898b      	ldrh	r3, [r1, #12]
 8009d94:	061b      	lsls	r3, r3, #24
 8009d96:	b09d      	sub	sp, #116	; 0x74
 8009d98:	4607      	mov	r7, r0
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	4614      	mov	r4, r2
 8009d9e:	d50e      	bpl.n	8009dbe <_svfiprintf_r+0x32>
 8009da0:	690b      	ldr	r3, [r1, #16]
 8009da2:	b963      	cbnz	r3, 8009dbe <_svfiprintf_r+0x32>
 8009da4:	2140      	movs	r1, #64	; 0x40
 8009da6:	f7fd fcfb 	bl	80077a0 <_malloc_r>
 8009daa:	6028      	str	r0, [r5, #0]
 8009dac:	6128      	str	r0, [r5, #16]
 8009dae:	b920      	cbnz	r0, 8009dba <_svfiprintf_r+0x2e>
 8009db0:	230c      	movs	r3, #12
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009db8:	e0d1      	b.n	8009f5e <_svfiprintf_r+0x1d2>
 8009dba:	2340      	movs	r3, #64	; 0x40
 8009dbc:	616b      	str	r3, [r5, #20]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc2:	2320      	movs	r3, #32
 8009dc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dcc:	2330      	movs	r3, #48	; 0x30
 8009dce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f78 <_svfiprintf_r+0x1ec>
 8009dd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dd6:	f04f 0901 	mov.w	r9, #1
 8009dda:	4623      	mov	r3, r4
 8009ddc:	469a      	mov	sl, r3
 8009dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009de2:	b10a      	cbz	r2, 8009de8 <_svfiprintf_r+0x5c>
 8009de4:	2a25      	cmp	r2, #37	; 0x25
 8009de6:	d1f9      	bne.n	8009ddc <_svfiprintf_r+0x50>
 8009de8:	ebba 0b04 	subs.w	fp, sl, r4
 8009dec:	d00b      	beq.n	8009e06 <_svfiprintf_r+0x7a>
 8009dee:	465b      	mov	r3, fp
 8009df0:	4622      	mov	r2, r4
 8009df2:	4629      	mov	r1, r5
 8009df4:	4638      	mov	r0, r7
 8009df6:	f7ff ff6e 	bl	8009cd6 <__ssputs_r>
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	f000 80aa 	beq.w	8009f54 <_svfiprintf_r+0x1c8>
 8009e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e02:	445a      	add	r2, fp
 8009e04:	9209      	str	r2, [sp, #36]	; 0x24
 8009e06:	f89a 3000 	ldrb.w	r3, [sl]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f000 80a2 	beq.w	8009f54 <_svfiprintf_r+0x1c8>
 8009e10:	2300      	movs	r3, #0
 8009e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e1a:	f10a 0a01 	add.w	sl, sl, #1
 8009e1e:	9304      	str	r3, [sp, #16]
 8009e20:	9307      	str	r3, [sp, #28]
 8009e22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e26:	931a      	str	r3, [sp, #104]	; 0x68
 8009e28:	4654      	mov	r4, sl
 8009e2a:	2205      	movs	r2, #5
 8009e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e30:	4851      	ldr	r0, [pc, #324]	; (8009f78 <_svfiprintf_r+0x1ec>)
 8009e32:	f7f6 f9fd 	bl	8000230 <memchr>
 8009e36:	9a04      	ldr	r2, [sp, #16]
 8009e38:	b9d8      	cbnz	r0, 8009e72 <_svfiprintf_r+0xe6>
 8009e3a:	06d0      	lsls	r0, r2, #27
 8009e3c:	bf44      	itt	mi
 8009e3e:	2320      	movmi	r3, #32
 8009e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e44:	0711      	lsls	r1, r2, #28
 8009e46:	bf44      	itt	mi
 8009e48:	232b      	movmi	r3, #43	; 0x2b
 8009e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e52:	2b2a      	cmp	r3, #42	; 0x2a
 8009e54:	d015      	beq.n	8009e82 <_svfiprintf_r+0xf6>
 8009e56:	9a07      	ldr	r2, [sp, #28]
 8009e58:	4654      	mov	r4, sl
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	f04f 0c0a 	mov.w	ip, #10
 8009e60:	4621      	mov	r1, r4
 8009e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e66:	3b30      	subs	r3, #48	; 0x30
 8009e68:	2b09      	cmp	r3, #9
 8009e6a:	d94e      	bls.n	8009f0a <_svfiprintf_r+0x17e>
 8009e6c:	b1b0      	cbz	r0, 8009e9c <_svfiprintf_r+0x110>
 8009e6e:	9207      	str	r2, [sp, #28]
 8009e70:	e014      	b.n	8009e9c <_svfiprintf_r+0x110>
 8009e72:	eba0 0308 	sub.w	r3, r0, r8
 8009e76:	fa09 f303 	lsl.w	r3, r9, r3
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	9304      	str	r3, [sp, #16]
 8009e7e:	46a2      	mov	sl, r4
 8009e80:	e7d2      	b.n	8009e28 <_svfiprintf_r+0x9c>
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	1d19      	adds	r1, r3, #4
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	9103      	str	r1, [sp, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	bfbb      	ittet	lt
 8009e8e:	425b      	neglt	r3, r3
 8009e90:	f042 0202 	orrlt.w	r2, r2, #2
 8009e94:	9307      	strge	r3, [sp, #28]
 8009e96:	9307      	strlt	r3, [sp, #28]
 8009e98:	bfb8      	it	lt
 8009e9a:	9204      	strlt	r2, [sp, #16]
 8009e9c:	7823      	ldrb	r3, [r4, #0]
 8009e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8009ea0:	d10c      	bne.n	8009ebc <_svfiprintf_r+0x130>
 8009ea2:	7863      	ldrb	r3, [r4, #1]
 8009ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea6:	d135      	bne.n	8009f14 <_svfiprintf_r+0x188>
 8009ea8:	9b03      	ldr	r3, [sp, #12]
 8009eaa:	1d1a      	adds	r2, r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	9203      	str	r2, [sp, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	bfb8      	it	lt
 8009eb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009eb8:	3402      	adds	r4, #2
 8009eba:	9305      	str	r3, [sp, #20]
 8009ebc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f88 <_svfiprintf_r+0x1fc>
 8009ec0:	7821      	ldrb	r1, [r4, #0]
 8009ec2:	2203      	movs	r2, #3
 8009ec4:	4650      	mov	r0, sl
 8009ec6:	f7f6 f9b3 	bl	8000230 <memchr>
 8009eca:	b140      	cbz	r0, 8009ede <_svfiprintf_r+0x152>
 8009ecc:	2340      	movs	r3, #64	; 0x40
 8009ece:	eba0 000a 	sub.w	r0, r0, sl
 8009ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ed6:	9b04      	ldr	r3, [sp, #16]
 8009ed8:	4303      	orrs	r3, r0
 8009eda:	3401      	adds	r4, #1
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee2:	4826      	ldr	r0, [pc, #152]	; (8009f7c <_svfiprintf_r+0x1f0>)
 8009ee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ee8:	2206      	movs	r2, #6
 8009eea:	f7f6 f9a1 	bl	8000230 <memchr>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d038      	beq.n	8009f64 <_svfiprintf_r+0x1d8>
 8009ef2:	4b23      	ldr	r3, [pc, #140]	; (8009f80 <_svfiprintf_r+0x1f4>)
 8009ef4:	bb1b      	cbnz	r3, 8009f3e <_svfiprintf_r+0x1b2>
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	3307      	adds	r3, #7
 8009efa:	f023 0307 	bic.w	r3, r3, #7
 8009efe:	3308      	adds	r3, #8
 8009f00:	9303      	str	r3, [sp, #12]
 8009f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f04:	4433      	add	r3, r6
 8009f06:	9309      	str	r3, [sp, #36]	; 0x24
 8009f08:	e767      	b.n	8009dda <_svfiprintf_r+0x4e>
 8009f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f0e:	460c      	mov	r4, r1
 8009f10:	2001      	movs	r0, #1
 8009f12:	e7a5      	b.n	8009e60 <_svfiprintf_r+0xd4>
 8009f14:	2300      	movs	r3, #0
 8009f16:	3401      	adds	r4, #1
 8009f18:	9305      	str	r3, [sp, #20]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	f04f 0c0a 	mov.w	ip, #10
 8009f20:	4620      	mov	r0, r4
 8009f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f26:	3a30      	subs	r2, #48	; 0x30
 8009f28:	2a09      	cmp	r2, #9
 8009f2a:	d903      	bls.n	8009f34 <_svfiprintf_r+0x1a8>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0c5      	beq.n	8009ebc <_svfiprintf_r+0x130>
 8009f30:	9105      	str	r1, [sp, #20]
 8009f32:	e7c3      	b.n	8009ebc <_svfiprintf_r+0x130>
 8009f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f38:	4604      	mov	r4, r0
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e7f0      	b.n	8009f20 <_svfiprintf_r+0x194>
 8009f3e:	ab03      	add	r3, sp, #12
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	462a      	mov	r2, r5
 8009f44:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <_svfiprintf_r+0x1f8>)
 8009f46:	a904      	add	r1, sp, #16
 8009f48:	4638      	mov	r0, r7
 8009f4a:	f7fd fd23 	bl	8007994 <_printf_float>
 8009f4e:	1c42      	adds	r2, r0, #1
 8009f50:	4606      	mov	r6, r0
 8009f52:	d1d6      	bne.n	8009f02 <_svfiprintf_r+0x176>
 8009f54:	89ab      	ldrh	r3, [r5, #12]
 8009f56:	065b      	lsls	r3, r3, #25
 8009f58:	f53f af2c 	bmi.w	8009db4 <_svfiprintf_r+0x28>
 8009f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5e:	b01d      	add	sp, #116	; 0x74
 8009f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f64:	ab03      	add	r3, sp, #12
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	462a      	mov	r2, r5
 8009f6a:	4b06      	ldr	r3, [pc, #24]	; (8009f84 <_svfiprintf_r+0x1f8>)
 8009f6c:	a904      	add	r1, sp, #16
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f7fd ffb4 	bl	8007edc <_printf_i>
 8009f74:	e7eb      	b.n	8009f4e <_svfiprintf_r+0x1c2>
 8009f76:	bf00      	nop
 8009f78:	0800ac54 	.word	0x0800ac54
 8009f7c:	0800ac5e 	.word	0x0800ac5e
 8009f80:	08007995 	.word	0x08007995
 8009f84:	08009cd7 	.word	0x08009cd7
 8009f88:	0800ac5a 	.word	0x0800ac5a

08009f8c <__sfputc_r>:
 8009f8c:	6893      	ldr	r3, [r2, #8]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	b410      	push	{r4}
 8009f94:	6093      	str	r3, [r2, #8]
 8009f96:	da08      	bge.n	8009faa <__sfputc_r+0x1e>
 8009f98:	6994      	ldr	r4, [r2, #24]
 8009f9a:	42a3      	cmp	r3, r4
 8009f9c:	db01      	blt.n	8009fa2 <__sfputc_r+0x16>
 8009f9e:	290a      	cmp	r1, #10
 8009fa0:	d103      	bne.n	8009faa <__sfputc_r+0x1e>
 8009fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa6:	f7fe b993 	b.w	80082d0 <__swbuf_r>
 8009faa:	6813      	ldr	r3, [r2, #0]
 8009fac:	1c58      	adds	r0, r3, #1
 8009fae:	6010      	str	r0, [r2, #0]
 8009fb0:	7019      	strb	r1, [r3, #0]
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <__sfputs_r>:
 8009fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	460f      	mov	r7, r1
 8009fc0:	4614      	mov	r4, r2
 8009fc2:	18d5      	adds	r5, r2, r3
 8009fc4:	42ac      	cmp	r4, r5
 8009fc6:	d101      	bne.n	8009fcc <__sfputs_r+0x12>
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e007      	b.n	8009fdc <__sfputs_r+0x22>
 8009fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd0:	463a      	mov	r2, r7
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7ff ffda 	bl	8009f8c <__sfputc_r>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d1f3      	bne.n	8009fc4 <__sfputs_r+0xa>
 8009fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fe0 <_vfiprintf_r>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	460d      	mov	r5, r1
 8009fe6:	b09d      	sub	sp, #116	; 0x74
 8009fe8:	4614      	mov	r4, r2
 8009fea:	4698      	mov	r8, r3
 8009fec:	4606      	mov	r6, r0
 8009fee:	b118      	cbz	r0, 8009ff8 <_vfiprintf_r+0x18>
 8009ff0:	6983      	ldr	r3, [r0, #24]
 8009ff2:	b90b      	cbnz	r3, 8009ff8 <_vfiprintf_r+0x18>
 8009ff4:	f7ff f9be 	bl	8009374 <__sinit>
 8009ff8:	4b89      	ldr	r3, [pc, #548]	; (800a220 <_vfiprintf_r+0x240>)
 8009ffa:	429d      	cmp	r5, r3
 8009ffc:	d11b      	bne.n	800a036 <_vfiprintf_r+0x56>
 8009ffe:	6875      	ldr	r5, [r6, #4]
 800a000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a002:	07d9      	lsls	r1, r3, #31
 800a004:	d405      	bmi.n	800a012 <_vfiprintf_r+0x32>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	059a      	lsls	r2, r3, #22
 800a00a:	d402      	bmi.n	800a012 <_vfiprintf_r+0x32>
 800a00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a00e:	f7ff fa54 	bl	80094ba <__retarget_lock_acquire_recursive>
 800a012:	89ab      	ldrh	r3, [r5, #12]
 800a014:	071b      	lsls	r3, r3, #28
 800a016:	d501      	bpl.n	800a01c <_vfiprintf_r+0x3c>
 800a018:	692b      	ldr	r3, [r5, #16]
 800a01a:	b9eb      	cbnz	r3, 800a058 <_vfiprintf_r+0x78>
 800a01c:	4629      	mov	r1, r5
 800a01e:	4630      	mov	r0, r6
 800a020:	f7fe f9a8 	bl	8008374 <__swsetup_r>
 800a024:	b1c0      	cbz	r0, 800a058 <_vfiprintf_r+0x78>
 800a026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a028:	07dc      	lsls	r4, r3, #31
 800a02a:	d50e      	bpl.n	800a04a <_vfiprintf_r+0x6a>
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a030:	b01d      	add	sp, #116	; 0x74
 800a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a036:	4b7b      	ldr	r3, [pc, #492]	; (800a224 <_vfiprintf_r+0x244>)
 800a038:	429d      	cmp	r5, r3
 800a03a:	d101      	bne.n	800a040 <_vfiprintf_r+0x60>
 800a03c:	68b5      	ldr	r5, [r6, #8]
 800a03e:	e7df      	b.n	800a000 <_vfiprintf_r+0x20>
 800a040:	4b79      	ldr	r3, [pc, #484]	; (800a228 <_vfiprintf_r+0x248>)
 800a042:	429d      	cmp	r5, r3
 800a044:	bf08      	it	eq
 800a046:	68f5      	ldreq	r5, [r6, #12]
 800a048:	e7da      	b.n	800a000 <_vfiprintf_r+0x20>
 800a04a:	89ab      	ldrh	r3, [r5, #12]
 800a04c:	0598      	lsls	r0, r3, #22
 800a04e:	d4ed      	bmi.n	800a02c <_vfiprintf_r+0x4c>
 800a050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a052:	f7ff fa33 	bl	80094bc <__retarget_lock_release_recursive>
 800a056:	e7e9      	b.n	800a02c <_vfiprintf_r+0x4c>
 800a058:	2300      	movs	r3, #0
 800a05a:	9309      	str	r3, [sp, #36]	; 0x24
 800a05c:	2320      	movs	r3, #32
 800a05e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a062:	f8cd 800c 	str.w	r8, [sp, #12]
 800a066:	2330      	movs	r3, #48	; 0x30
 800a068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a22c <_vfiprintf_r+0x24c>
 800a06c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a070:	f04f 0901 	mov.w	r9, #1
 800a074:	4623      	mov	r3, r4
 800a076:	469a      	mov	sl, r3
 800a078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a07c:	b10a      	cbz	r2, 800a082 <_vfiprintf_r+0xa2>
 800a07e:	2a25      	cmp	r2, #37	; 0x25
 800a080:	d1f9      	bne.n	800a076 <_vfiprintf_r+0x96>
 800a082:	ebba 0b04 	subs.w	fp, sl, r4
 800a086:	d00b      	beq.n	800a0a0 <_vfiprintf_r+0xc0>
 800a088:	465b      	mov	r3, fp
 800a08a:	4622      	mov	r2, r4
 800a08c:	4629      	mov	r1, r5
 800a08e:	4630      	mov	r0, r6
 800a090:	f7ff ff93 	bl	8009fba <__sfputs_r>
 800a094:	3001      	adds	r0, #1
 800a096:	f000 80aa 	beq.w	800a1ee <_vfiprintf_r+0x20e>
 800a09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a09c:	445a      	add	r2, fp
 800a09e:	9209      	str	r2, [sp, #36]	; 0x24
 800a0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 80a2 	beq.w	800a1ee <_vfiprintf_r+0x20e>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0b4:	f10a 0a01 	add.w	sl, sl, #1
 800a0b8:	9304      	str	r3, [sp, #16]
 800a0ba:	9307      	str	r3, [sp, #28]
 800a0bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a0c2:	4654      	mov	r4, sl
 800a0c4:	2205      	movs	r2, #5
 800a0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ca:	4858      	ldr	r0, [pc, #352]	; (800a22c <_vfiprintf_r+0x24c>)
 800a0cc:	f7f6 f8b0 	bl	8000230 <memchr>
 800a0d0:	9a04      	ldr	r2, [sp, #16]
 800a0d2:	b9d8      	cbnz	r0, 800a10c <_vfiprintf_r+0x12c>
 800a0d4:	06d1      	lsls	r1, r2, #27
 800a0d6:	bf44      	itt	mi
 800a0d8:	2320      	movmi	r3, #32
 800a0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0de:	0713      	lsls	r3, r2, #28
 800a0e0:	bf44      	itt	mi
 800a0e2:	232b      	movmi	r3, #43	; 0x2b
 800a0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ee:	d015      	beq.n	800a11c <_vfiprintf_r+0x13c>
 800a0f0:	9a07      	ldr	r2, [sp, #28]
 800a0f2:	4654      	mov	r4, sl
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	f04f 0c0a 	mov.w	ip, #10
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a100:	3b30      	subs	r3, #48	; 0x30
 800a102:	2b09      	cmp	r3, #9
 800a104:	d94e      	bls.n	800a1a4 <_vfiprintf_r+0x1c4>
 800a106:	b1b0      	cbz	r0, 800a136 <_vfiprintf_r+0x156>
 800a108:	9207      	str	r2, [sp, #28]
 800a10a:	e014      	b.n	800a136 <_vfiprintf_r+0x156>
 800a10c:	eba0 0308 	sub.w	r3, r0, r8
 800a110:	fa09 f303 	lsl.w	r3, r9, r3
 800a114:	4313      	orrs	r3, r2
 800a116:	9304      	str	r3, [sp, #16]
 800a118:	46a2      	mov	sl, r4
 800a11a:	e7d2      	b.n	800a0c2 <_vfiprintf_r+0xe2>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	1d19      	adds	r1, r3, #4
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	9103      	str	r1, [sp, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	bfbb      	ittet	lt
 800a128:	425b      	neglt	r3, r3
 800a12a:	f042 0202 	orrlt.w	r2, r2, #2
 800a12e:	9307      	strge	r3, [sp, #28]
 800a130:	9307      	strlt	r3, [sp, #28]
 800a132:	bfb8      	it	lt
 800a134:	9204      	strlt	r2, [sp, #16]
 800a136:	7823      	ldrb	r3, [r4, #0]
 800a138:	2b2e      	cmp	r3, #46	; 0x2e
 800a13a:	d10c      	bne.n	800a156 <_vfiprintf_r+0x176>
 800a13c:	7863      	ldrb	r3, [r4, #1]
 800a13e:	2b2a      	cmp	r3, #42	; 0x2a
 800a140:	d135      	bne.n	800a1ae <_vfiprintf_r+0x1ce>
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	1d1a      	adds	r2, r3, #4
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	9203      	str	r2, [sp, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bfb8      	it	lt
 800a14e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a152:	3402      	adds	r4, #2
 800a154:	9305      	str	r3, [sp, #20]
 800a156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a23c <_vfiprintf_r+0x25c>
 800a15a:	7821      	ldrb	r1, [r4, #0]
 800a15c:	2203      	movs	r2, #3
 800a15e:	4650      	mov	r0, sl
 800a160:	f7f6 f866 	bl	8000230 <memchr>
 800a164:	b140      	cbz	r0, 800a178 <_vfiprintf_r+0x198>
 800a166:	2340      	movs	r3, #64	; 0x40
 800a168:	eba0 000a 	sub.w	r0, r0, sl
 800a16c:	fa03 f000 	lsl.w	r0, r3, r0
 800a170:	9b04      	ldr	r3, [sp, #16]
 800a172:	4303      	orrs	r3, r0
 800a174:	3401      	adds	r4, #1
 800a176:	9304      	str	r3, [sp, #16]
 800a178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a17c:	482c      	ldr	r0, [pc, #176]	; (800a230 <_vfiprintf_r+0x250>)
 800a17e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a182:	2206      	movs	r2, #6
 800a184:	f7f6 f854 	bl	8000230 <memchr>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d03f      	beq.n	800a20c <_vfiprintf_r+0x22c>
 800a18c:	4b29      	ldr	r3, [pc, #164]	; (800a234 <_vfiprintf_r+0x254>)
 800a18e:	bb1b      	cbnz	r3, 800a1d8 <_vfiprintf_r+0x1f8>
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	3307      	adds	r3, #7
 800a194:	f023 0307 	bic.w	r3, r3, #7
 800a198:	3308      	adds	r3, #8
 800a19a:	9303      	str	r3, [sp, #12]
 800a19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19e:	443b      	add	r3, r7
 800a1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a2:	e767      	b.n	800a074 <_vfiprintf_r+0x94>
 800a1a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	e7a5      	b.n	800a0fa <_vfiprintf_r+0x11a>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	3401      	adds	r4, #1
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	f04f 0c0a 	mov.w	ip, #10
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c0:	3a30      	subs	r2, #48	; 0x30
 800a1c2:	2a09      	cmp	r2, #9
 800a1c4:	d903      	bls.n	800a1ce <_vfiprintf_r+0x1ee>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0c5      	beq.n	800a156 <_vfiprintf_r+0x176>
 800a1ca:	9105      	str	r1, [sp, #20]
 800a1cc:	e7c3      	b.n	800a156 <_vfiprintf_r+0x176>
 800a1ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e7f0      	b.n	800a1ba <_vfiprintf_r+0x1da>
 800a1d8:	ab03      	add	r3, sp, #12
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	462a      	mov	r2, r5
 800a1de:	4b16      	ldr	r3, [pc, #88]	; (800a238 <_vfiprintf_r+0x258>)
 800a1e0:	a904      	add	r1, sp, #16
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f7fd fbd6 	bl	8007994 <_printf_float>
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	1c78      	adds	r0, r7, #1
 800a1ec:	d1d6      	bne.n	800a19c <_vfiprintf_r+0x1bc>
 800a1ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1f0:	07d9      	lsls	r1, r3, #31
 800a1f2:	d405      	bmi.n	800a200 <_vfiprintf_r+0x220>
 800a1f4:	89ab      	ldrh	r3, [r5, #12]
 800a1f6:	059a      	lsls	r2, r3, #22
 800a1f8:	d402      	bmi.n	800a200 <_vfiprintf_r+0x220>
 800a1fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1fc:	f7ff f95e 	bl	80094bc <__retarget_lock_release_recursive>
 800a200:	89ab      	ldrh	r3, [r5, #12]
 800a202:	065b      	lsls	r3, r3, #25
 800a204:	f53f af12 	bmi.w	800a02c <_vfiprintf_r+0x4c>
 800a208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a20a:	e711      	b.n	800a030 <_vfiprintf_r+0x50>
 800a20c:	ab03      	add	r3, sp, #12
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	462a      	mov	r2, r5
 800a212:	4b09      	ldr	r3, [pc, #36]	; (800a238 <_vfiprintf_r+0x258>)
 800a214:	a904      	add	r1, sp, #16
 800a216:	4630      	mov	r0, r6
 800a218:	f7fd fe60 	bl	8007edc <_printf_i>
 800a21c:	e7e4      	b.n	800a1e8 <_vfiprintf_r+0x208>
 800a21e:	bf00      	nop
 800a220:	0800aab8 	.word	0x0800aab8
 800a224:	0800aad8 	.word	0x0800aad8
 800a228:	0800aa98 	.word	0x0800aa98
 800a22c:	0800ac54 	.word	0x0800ac54
 800a230:	0800ac5e 	.word	0x0800ac5e
 800a234:	08007995 	.word	0x08007995
 800a238:	08009fbb 	.word	0x08009fbb
 800a23c:	0800ac5a 	.word	0x0800ac5a

0800a240 <_putc_r>:
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	460d      	mov	r5, r1
 800a244:	4614      	mov	r4, r2
 800a246:	4606      	mov	r6, r0
 800a248:	b118      	cbz	r0, 800a252 <_putc_r+0x12>
 800a24a:	6983      	ldr	r3, [r0, #24]
 800a24c:	b90b      	cbnz	r3, 800a252 <_putc_r+0x12>
 800a24e:	f7ff f891 	bl	8009374 <__sinit>
 800a252:	4b1c      	ldr	r3, [pc, #112]	; (800a2c4 <_putc_r+0x84>)
 800a254:	429c      	cmp	r4, r3
 800a256:	d124      	bne.n	800a2a2 <_putc_r+0x62>
 800a258:	6874      	ldr	r4, [r6, #4]
 800a25a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a25c:	07d8      	lsls	r0, r3, #31
 800a25e:	d405      	bmi.n	800a26c <_putc_r+0x2c>
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	0599      	lsls	r1, r3, #22
 800a264:	d402      	bmi.n	800a26c <_putc_r+0x2c>
 800a266:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a268:	f7ff f927 	bl	80094ba <__retarget_lock_acquire_recursive>
 800a26c:	68a3      	ldr	r3, [r4, #8]
 800a26e:	3b01      	subs	r3, #1
 800a270:	2b00      	cmp	r3, #0
 800a272:	60a3      	str	r3, [r4, #8]
 800a274:	da05      	bge.n	800a282 <_putc_r+0x42>
 800a276:	69a2      	ldr	r2, [r4, #24]
 800a278:	4293      	cmp	r3, r2
 800a27a:	db1c      	blt.n	800a2b6 <_putc_r+0x76>
 800a27c:	b2eb      	uxtb	r3, r5
 800a27e:	2b0a      	cmp	r3, #10
 800a280:	d019      	beq.n	800a2b6 <_putc_r+0x76>
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	6022      	str	r2, [r4, #0]
 800a288:	701d      	strb	r5, [r3, #0]
 800a28a:	b2ed      	uxtb	r5, r5
 800a28c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a28e:	07da      	lsls	r2, r3, #31
 800a290:	d405      	bmi.n	800a29e <_putc_r+0x5e>
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	059b      	lsls	r3, r3, #22
 800a296:	d402      	bmi.n	800a29e <_putc_r+0x5e>
 800a298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a29a:	f7ff f90f 	bl	80094bc <__retarget_lock_release_recursive>
 800a29e:	4628      	mov	r0, r5
 800a2a0:	bd70      	pop	{r4, r5, r6, pc}
 800a2a2:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <_putc_r+0x88>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	d101      	bne.n	800a2ac <_putc_r+0x6c>
 800a2a8:	68b4      	ldr	r4, [r6, #8]
 800a2aa:	e7d6      	b.n	800a25a <_putc_r+0x1a>
 800a2ac:	4b07      	ldr	r3, [pc, #28]	; (800a2cc <_putc_r+0x8c>)
 800a2ae:	429c      	cmp	r4, r3
 800a2b0:	bf08      	it	eq
 800a2b2:	68f4      	ldreq	r4, [r6, #12]
 800a2b4:	e7d1      	b.n	800a25a <_putc_r+0x1a>
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7fe f808 	bl	80082d0 <__swbuf_r>
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	e7e3      	b.n	800a28c <_putc_r+0x4c>
 800a2c4:	0800aab8 	.word	0x0800aab8
 800a2c8:	0800aad8 	.word	0x0800aad8
 800a2cc:	0800aa98 	.word	0x0800aa98

0800a2d0 <__sread>:
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d8:	f000 f916 	bl	800a508 <_read_r>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	bfab      	itete	ge
 800a2e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a2e4:	181b      	addge	r3, r3, r0
 800a2e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2ea:	bfac      	ite	ge
 800a2ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2ee:	81a3      	strhlt	r3, [r4, #12]
 800a2f0:	bd10      	pop	{r4, pc}

0800a2f2 <__swrite>:
 800a2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f6:	461f      	mov	r7, r3
 800a2f8:	898b      	ldrh	r3, [r1, #12]
 800a2fa:	05db      	lsls	r3, r3, #23
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	460c      	mov	r4, r1
 800a300:	4616      	mov	r6, r2
 800a302:	d505      	bpl.n	800a310 <__swrite+0x1e>
 800a304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a308:	2302      	movs	r3, #2
 800a30a:	2200      	movs	r2, #0
 800a30c:	f000 f898 	bl	800a440 <_lseek_r>
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	4632      	mov	r2, r6
 800a31e:	463b      	mov	r3, r7
 800a320:	4628      	mov	r0, r5
 800a322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a326:	f000 b817 	b.w	800a358 <_write_r>

0800a32a <__sseek>:
 800a32a:	b510      	push	{r4, lr}
 800a32c:	460c      	mov	r4, r1
 800a32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a332:	f000 f885 	bl	800a440 <_lseek_r>
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	bf15      	itete	ne
 800a33c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a33e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a346:	81a3      	strheq	r3, [r4, #12]
 800a348:	bf18      	it	ne
 800a34a:	81a3      	strhne	r3, [r4, #12]
 800a34c:	bd10      	pop	{r4, pc}

0800a34e <__sclose>:
 800a34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a352:	f000 b831 	b.w	800a3b8 <_close_r>
	...

0800a358 <_write_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4d07      	ldr	r5, [pc, #28]	; (800a378 <_write_r+0x20>)
 800a35c:	4604      	mov	r4, r0
 800a35e:	4608      	mov	r0, r1
 800a360:	4611      	mov	r1, r2
 800a362:	2200      	movs	r2, #0
 800a364:	602a      	str	r2, [r5, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	f7f7 fa95 	bl	8001896 <_write>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_write_r+0x1e>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_write_r+0x1e>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	20000460 	.word	0x20000460

0800a37c <__assert_func>:
 800a37c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a37e:	4614      	mov	r4, r2
 800a380:	461a      	mov	r2, r3
 800a382:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <__assert_func+0x2c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4605      	mov	r5, r0
 800a388:	68d8      	ldr	r0, [r3, #12]
 800a38a:	b14c      	cbz	r4, 800a3a0 <__assert_func+0x24>
 800a38c:	4b07      	ldr	r3, [pc, #28]	; (800a3ac <__assert_func+0x30>)
 800a38e:	9100      	str	r1, [sp, #0]
 800a390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a394:	4906      	ldr	r1, [pc, #24]	; (800a3b0 <__assert_func+0x34>)
 800a396:	462b      	mov	r3, r5
 800a398:	f000 f81e 	bl	800a3d8 <fiprintf>
 800a39c:	f000 f8d3 	bl	800a546 <abort>
 800a3a0:	4b04      	ldr	r3, [pc, #16]	; (800a3b4 <__assert_func+0x38>)
 800a3a2:	461c      	mov	r4, r3
 800a3a4:	e7f3      	b.n	800a38e <__assert_func+0x12>
 800a3a6:	bf00      	nop
 800a3a8:	2000000c 	.word	0x2000000c
 800a3ac:	0800ac65 	.word	0x0800ac65
 800a3b0:	0800ac72 	.word	0x0800ac72
 800a3b4:	0800aca0 	.word	0x0800aca0

0800a3b8 <_close_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d06      	ldr	r5, [pc, #24]	; (800a3d4 <_close_r+0x1c>)
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	f7f8 fa2f 	bl	8002826 <_close>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_close_r+0x1a>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_close_r+0x1a>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	20000460 	.word	0x20000460

0800a3d8 <fiprintf>:
 800a3d8:	b40e      	push	{r1, r2, r3}
 800a3da:	b503      	push	{r0, r1, lr}
 800a3dc:	4601      	mov	r1, r0
 800a3de:	ab03      	add	r3, sp, #12
 800a3e0:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <fiprintf+0x20>)
 800a3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e6:	6800      	ldr	r0, [r0, #0]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	f7ff fdf9 	bl	8009fe0 <_vfiprintf_r>
 800a3ee:	b002      	add	sp, #8
 800a3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3f4:	b003      	add	sp, #12
 800a3f6:	4770      	bx	lr
 800a3f8:	2000000c 	.word	0x2000000c

0800a3fc <_fstat_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d07      	ldr	r5, [pc, #28]	; (800a41c <_fstat_r+0x20>)
 800a400:	2300      	movs	r3, #0
 800a402:	4604      	mov	r4, r0
 800a404:	4608      	mov	r0, r1
 800a406:	4611      	mov	r1, r2
 800a408:	602b      	str	r3, [r5, #0]
 800a40a:	f7f8 fa18 	bl	800283e <_fstat>
 800a40e:	1c43      	adds	r3, r0, #1
 800a410:	d102      	bne.n	800a418 <_fstat_r+0x1c>
 800a412:	682b      	ldr	r3, [r5, #0]
 800a414:	b103      	cbz	r3, 800a418 <_fstat_r+0x1c>
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	bd38      	pop	{r3, r4, r5, pc}
 800a41a:	bf00      	nop
 800a41c:	20000460 	.word	0x20000460

0800a420 <_isatty_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d06      	ldr	r5, [pc, #24]	; (800a43c <_isatty_r+0x1c>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f8 fa17 	bl	800285e <_isatty>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_isatty_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_isatty_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	20000460 	.word	0x20000460

0800a440 <_lseek_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d07      	ldr	r5, [pc, #28]	; (800a460 <_lseek_r+0x20>)
 800a444:	4604      	mov	r4, r0
 800a446:	4608      	mov	r0, r1
 800a448:	4611      	mov	r1, r2
 800a44a:	2200      	movs	r2, #0
 800a44c:	602a      	str	r2, [r5, #0]
 800a44e:	461a      	mov	r2, r3
 800a450:	f7f8 fa10 	bl	8002874 <_lseek>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d102      	bne.n	800a45e <_lseek_r+0x1e>
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	b103      	cbz	r3, 800a45e <_lseek_r+0x1e>
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	bd38      	pop	{r3, r4, r5, pc}
 800a460:	20000460 	.word	0x20000460

0800a464 <__ascii_mbtowc>:
 800a464:	b082      	sub	sp, #8
 800a466:	b901      	cbnz	r1, 800a46a <__ascii_mbtowc+0x6>
 800a468:	a901      	add	r1, sp, #4
 800a46a:	b142      	cbz	r2, 800a47e <__ascii_mbtowc+0x1a>
 800a46c:	b14b      	cbz	r3, 800a482 <__ascii_mbtowc+0x1e>
 800a46e:	7813      	ldrb	r3, [r2, #0]
 800a470:	600b      	str	r3, [r1, #0]
 800a472:	7812      	ldrb	r2, [r2, #0]
 800a474:	1e10      	subs	r0, r2, #0
 800a476:	bf18      	it	ne
 800a478:	2001      	movne	r0, #1
 800a47a:	b002      	add	sp, #8
 800a47c:	4770      	bx	lr
 800a47e:	4610      	mov	r0, r2
 800a480:	e7fb      	b.n	800a47a <__ascii_mbtowc+0x16>
 800a482:	f06f 0001 	mvn.w	r0, #1
 800a486:	e7f8      	b.n	800a47a <__ascii_mbtowc+0x16>

0800a488 <memmove>:
 800a488:	4288      	cmp	r0, r1
 800a48a:	b510      	push	{r4, lr}
 800a48c:	eb01 0402 	add.w	r4, r1, r2
 800a490:	d902      	bls.n	800a498 <memmove+0x10>
 800a492:	4284      	cmp	r4, r0
 800a494:	4623      	mov	r3, r4
 800a496:	d807      	bhi.n	800a4a8 <memmove+0x20>
 800a498:	1e43      	subs	r3, r0, #1
 800a49a:	42a1      	cmp	r1, r4
 800a49c:	d008      	beq.n	800a4b0 <memmove+0x28>
 800a49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4a6:	e7f8      	b.n	800a49a <memmove+0x12>
 800a4a8:	4402      	add	r2, r0
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	428a      	cmp	r2, r1
 800a4ae:	d100      	bne.n	800a4b2 <memmove+0x2a>
 800a4b0:	bd10      	pop	{r4, pc}
 800a4b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4ba:	e7f7      	b.n	800a4ac <memmove+0x24>

0800a4bc <_realloc_r>:
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	4607      	mov	r7, r0
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	460e      	mov	r6, r1
 800a4c4:	b921      	cbnz	r1, 800a4d0 <_realloc_r+0x14>
 800a4c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	f7fd b968 	b.w	80077a0 <_malloc_r>
 800a4d0:	b922      	cbnz	r2, 800a4dc <_realloc_r+0x20>
 800a4d2:	f7fd f915 	bl	8007700 <_free_r>
 800a4d6:	4625      	mov	r5, r4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4dc:	f000 f83a 	bl	800a554 <_malloc_usable_size_r>
 800a4e0:	42a0      	cmp	r0, r4
 800a4e2:	d20f      	bcs.n	800a504 <_realloc_r+0x48>
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f7fd f95a 	bl	80077a0 <_malloc_r>
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d0f2      	beq.n	800a4d8 <_realloc_r+0x1c>
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4622      	mov	r2, r4
 800a4f6:	f7ff f847 	bl	8009588 <memcpy>
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	f7fd f8ff 	bl	8007700 <_free_r>
 800a502:	e7e9      	b.n	800a4d8 <_realloc_r+0x1c>
 800a504:	4635      	mov	r5, r6
 800a506:	e7e7      	b.n	800a4d8 <_realloc_r+0x1c>

0800a508 <_read_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d07      	ldr	r5, [pc, #28]	; (800a528 <_read_r+0x20>)
 800a50c:	4604      	mov	r4, r0
 800a50e:	4608      	mov	r0, r1
 800a510:	4611      	mov	r1, r2
 800a512:	2200      	movs	r2, #0
 800a514:	602a      	str	r2, [r5, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	f7f8 f968 	bl	80027ec <_read>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_read_r+0x1e>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_read_r+0x1e>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20000460 	.word	0x20000460

0800a52c <__ascii_wctomb>:
 800a52c:	b149      	cbz	r1, 800a542 <__ascii_wctomb+0x16>
 800a52e:	2aff      	cmp	r2, #255	; 0xff
 800a530:	bf85      	ittet	hi
 800a532:	238a      	movhi	r3, #138	; 0x8a
 800a534:	6003      	strhi	r3, [r0, #0]
 800a536:	700a      	strbls	r2, [r1, #0]
 800a538:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a53c:	bf98      	it	ls
 800a53e:	2001      	movls	r0, #1
 800a540:	4770      	bx	lr
 800a542:	4608      	mov	r0, r1
 800a544:	4770      	bx	lr

0800a546 <abort>:
 800a546:	b508      	push	{r3, lr}
 800a548:	2006      	movs	r0, #6
 800a54a:	f000 f833 	bl	800a5b4 <raise>
 800a54e:	2001      	movs	r0, #1
 800a550:	f7f8 f942 	bl	80027d8 <_exit>

0800a554 <_malloc_usable_size_r>:
 800a554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a558:	1f18      	subs	r0, r3, #4
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bfbc      	itt	lt
 800a55e:	580b      	ldrlt	r3, [r1, r0]
 800a560:	18c0      	addlt	r0, r0, r3
 800a562:	4770      	bx	lr

0800a564 <_raise_r>:
 800a564:	291f      	cmp	r1, #31
 800a566:	b538      	push	{r3, r4, r5, lr}
 800a568:	4604      	mov	r4, r0
 800a56a:	460d      	mov	r5, r1
 800a56c:	d904      	bls.n	800a578 <_raise_r+0x14>
 800a56e:	2316      	movs	r3, #22
 800a570:	6003      	str	r3, [r0, #0]
 800a572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a57a:	b112      	cbz	r2, 800a582 <_raise_r+0x1e>
 800a57c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a580:	b94b      	cbnz	r3, 800a596 <_raise_r+0x32>
 800a582:	4620      	mov	r0, r4
 800a584:	f000 f830 	bl	800a5e8 <_getpid_r>
 800a588:	462a      	mov	r2, r5
 800a58a:	4601      	mov	r1, r0
 800a58c:	4620      	mov	r0, r4
 800a58e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a592:	f000 b817 	b.w	800a5c4 <_kill_r>
 800a596:	2b01      	cmp	r3, #1
 800a598:	d00a      	beq.n	800a5b0 <_raise_r+0x4c>
 800a59a:	1c59      	adds	r1, r3, #1
 800a59c:	d103      	bne.n	800a5a6 <_raise_r+0x42>
 800a59e:	2316      	movs	r3, #22
 800a5a0:	6003      	str	r3, [r0, #0]
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	e7e7      	b.n	800a576 <_raise_r+0x12>
 800a5a6:	2400      	movs	r4, #0
 800a5a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	4798      	blx	r3
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e7e0      	b.n	800a576 <_raise_r+0x12>

0800a5b4 <raise>:
 800a5b4:	4b02      	ldr	r3, [pc, #8]	; (800a5c0 <raise+0xc>)
 800a5b6:	4601      	mov	r1, r0
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	f7ff bfd3 	b.w	800a564 <_raise_r>
 800a5be:	bf00      	nop
 800a5c0:	2000000c 	.word	0x2000000c

0800a5c4 <_kill_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	4d07      	ldr	r5, [pc, #28]	; (800a5e4 <_kill_r+0x20>)
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	4608      	mov	r0, r1
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	602b      	str	r3, [r5, #0]
 800a5d2:	f7f8 f8f1 	bl	80027b8 <_kill>
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	d102      	bne.n	800a5e0 <_kill_r+0x1c>
 800a5da:	682b      	ldr	r3, [r5, #0]
 800a5dc:	b103      	cbz	r3, 800a5e0 <_kill_r+0x1c>
 800a5de:	6023      	str	r3, [r4, #0]
 800a5e0:	bd38      	pop	{r3, r4, r5, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000460 	.word	0x20000460

0800a5e8 <_getpid_r>:
 800a5e8:	f7f8 b8de 	b.w	80027a8 <_getpid>

0800a5ec <sqrt>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	ed2d 8b02 	vpush	{d8}
 800a5f2:	ec55 4b10 	vmov	r4, r5, d0
 800a5f6:	f000 f82d 	bl	800a654 <__ieee754_sqrt>
 800a5fa:	4b15      	ldr	r3, [pc, #84]	; (800a650 <sqrt+0x64>)
 800a5fc:	eeb0 8a40 	vmov.f32	s16, s0
 800a600:	eef0 8a60 	vmov.f32	s17, s1
 800a604:	f993 3000 	ldrsb.w	r3, [r3]
 800a608:	3301      	adds	r3, #1
 800a60a:	d019      	beq.n	800a640 <sqrt+0x54>
 800a60c:	4622      	mov	r2, r4
 800a60e:	462b      	mov	r3, r5
 800a610:	4620      	mov	r0, r4
 800a612:	4629      	mov	r1, r5
 800a614:	f7f6 fab2 	bl	8000b7c <__aeabi_dcmpun>
 800a618:	b990      	cbnz	r0, 800a640 <sqrt+0x54>
 800a61a:	2200      	movs	r2, #0
 800a61c:	2300      	movs	r3, #0
 800a61e:	4620      	mov	r0, r4
 800a620:	4629      	mov	r1, r5
 800a622:	f7f6 fa83 	bl	8000b2c <__aeabi_dcmplt>
 800a626:	b158      	cbz	r0, 800a640 <sqrt+0x54>
 800a628:	f7fd f830 	bl	800768c <__errno>
 800a62c:	2321      	movs	r3, #33	; 0x21
 800a62e:	6003      	str	r3, [r0, #0]
 800a630:	2200      	movs	r2, #0
 800a632:	2300      	movs	r3, #0
 800a634:	4610      	mov	r0, r2
 800a636:	4619      	mov	r1, r3
 800a638:	f7f6 f930 	bl	800089c <__aeabi_ddiv>
 800a63c:	ec41 0b18 	vmov	d8, r0, r1
 800a640:	eeb0 0a48 	vmov.f32	s0, s16
 800a644:	eef0 0a68 	vmov.f32	s1, s17
 800a648:	ecbd 8b02 	vpop	{d8}
 800a64c:	bd38      	pop	{r3, r4, r5, pc}
 800a64e:	bf00      	nop
 800a650:	200001dc 	.word	0x200001dc

0800a654 <__ieee754_sqrt>:
 800a654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a658:	ec55 4b10 	vmov	r4, r5, d0
 800a65c:	4e56      	ldr	r6, [pc, #344]	; (800a7b8 <__ieee754_sqrt+0x164>)
 800a65e:	43ae      	bics	r6, r5
 800a660:	ee10 0a10 	vmov	r0, s0
 800a664:	ee10 3a10 	vmov	r3, s0
 800a668:	4629      	mov	r1, r5
 800a66a:	462a      	mov	r2, r5
 800a66c:	d110      	bne.n	800a690 <__ieee754_sqrt+0x3c>
 800a66e:	ee10 2a10 	vmov	r2, s0
 800a672:	462b      	mov	r3, r5
 800a674:	f7f5 ffe8 	bl	8000648 <__aeabi_dmul>
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	4620      	mov	r0, r4
 800a67e:	4629      	mov	r1, r5
 800a680:	f7f5 fe2c 	bl	80002dc <__adddf3>
 800a684:	4604      	mov	r4, r0
 800a686:	460d      	mov	r5, r1
 800a688:	ec45 4b10 	vmov	d0, r4, r5
 800a68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a690:	2d00      	cmp	r5, #0
 800a692:	dc10      	bgt.n	800a6b6 <__ieee754_sqrt+0x62>
 800a694:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a698:	4330      	orrs	r0, r6
 800a69a:	d0f5      	beq.n	800a688 <__ieee754_sqrt+0x34>
 800a69c:	b15d      	cbz	r5, 800a6b6 <__ieee754_sqrt+0x62>
 800a69e:	ee10 2a10 	vmov	r2, s0
 800a6a2:	462b      	mov	r3, r5
 800a6a4:	ee10 0a10 	vmov	r0, s0
 800a6a8:	f7f5 fe16 	bl	80002d8 <__aeabi_dsub>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	f7f6 f8f4 	bl	800089c <__aeabi_ddiv>
 800a6b4:	e7e6      	b.n	800a684 <__ieee754_sqrt+0x30>
 800a6b6:	1509      	asrs	r1, r1, #20
 800a6b8:	d076      	beq.n	800a7a8 <__ieee754_sqrt+0x154>
 800a6ba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a6be:	07ce      	lsls	r6, r1, #31
 800a6c0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a6c4:	bf5e      	ittt	pl
 800a6c6:	0fda      	lsrpl	r2, r3, #31
 800a6c8:	005b      	lslpl	r3, r3, #1
 800a6ca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a6ce:	0fda      	lsrs	r2, r3, #31
 800a6d0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a6d4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a6d8:	2000      	movs	r0, #0
 800a6da:	106d      	asrs	r5, r5, #1
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	f04f 0e16 	mov.w	lr, #22
 800a6e2:	4684      	mov	ip, r0
 800a6e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6e8:	eb0c 0401 	add.w	r4, ip, r1
 800a6ec:	4294      	cmp	r4, r2
 800a6ee:	bfde      	ittt	le
 800a6f0:	1b12      	suble	r2, r2, r4
 800a6f2:	eb04 0c01 	addle.w	ip, r4, r1
 800a6f6:	1840      	addle	r0, r0, r1
 800a6f8:	0052      	lsls	r2, r2, #1
 800a6fa:	f1be 0e01 	subs.w	lr, lr, #1
 800a6fe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a702:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a706:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a70a:	d1ed      	bne.n	800a6e8 <__ieee754_sqrt+0x94>
 800a70c:	4671      	mov	r1, lr
 800a70e:	2720      	movs	r7, #32
 800a710:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a714:	4562      	cmp	r2, ip
 800a716:	eb04 060e 	add.w	r6, r4, lr
 800a71a:	dc02      	bgt.n	800a722 <__ieee754_sqrt+0xce>
 800a71c:	d113      	bne.n	800a746 <__ieee754_sqrt+0xf2>
 800a71e:	429e      	cmp	r6, r3
 800a720:	d811      	bhi.n	800a746 <__ieee754_sqrt+0xf2>
 800a722:	2e00      	cmp	r6, #0
 800a724:	eb06 0e04 	add.w	lr, r6, r4
 800a728:	da43      	bge.n	800a7b2 <__ieee754_sqrt+0x15e>
 800a72a:	f1be 0f00 	cmp.w	lr, #0
 800a72e:	db40      	blt.n	800a7b2 <__ieee754_sqrt+0x15e>
 800a730:	f10c 0801 	add.w	r8, ip, #1
 800a734:	eba2 020c 	sub.w	r2, r2, ip
 800a738:	429e      	cmp	r6, r3
 800a73a:	bf88      	it	hi
 800a73c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a740:	1b9b      	subs	r3, r3, r6
 800a742:	4421      	add	r1, r4
 800a744:	46c4      	mov	ip, r8
 800a746:	0052      	lsls	r2, r2, #1
 800a748:	3f01      	subs	r7, #1
 800a74a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a74e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a752:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a756:	d1dd      	bne.n	800a714 <__ieee754_sqrt+0xc0>
 800a758:	4313      	orrs	r3, r2
 800a75a:	d006      	beq.n	800a76a <__ieee754_sqrt+0x116>
 800a75c:	1c4c      	adds	r4, r1, #1
 800a75e:	bf13      	iteet	ne
 800a760:	3101      	addne	r1, #1
 800a762:	3001      	addeq	r0, #1
 800a764:	4639      	moveq	r1, r7
 800a766:	f021 0101 	bicne.w	r1, r1, #1
 800a76a:	1043      	asrs	r3, r0, #1
 800a76c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a770:	0849      	lsrs	r1, r1, #1
 800a772:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a776:	07c2      	lsls	r2, r0, #31
 800a778:	bf48      	it	mi
 800a77a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a77e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a782:	460c      	mov	r4, r1
 800a784:	463d      	mov	r5, r7
 800a786:	e77f      	b.n	800a688 <__ieee754_sqrt+0x34>
 800a788:	0ada      	lsrs	r2, r3, #11
 800a78a:	3815      	subs	r0, #21
 800a78c:	055b      	lsls	r3, r3, #21
 800a78e:	2a00      	cmp	r2, #0
 800a790:	d0fa      	beq.n	800a788 <__ieee754_sqrt+0x134>
 800a792:	02d7      	lsls	r7, r2, #11
 800a794:	d50a      	bpl.n	800a7ac <__ieee754_sqrt+0x158>
 800a796:	f1c1 0420 	rsb	r4, r1, #32
 800a79a:	fa23 f404 	lsr.w	r4, r3, r4
 800a79e:	1e4d      	subs	r5, r1, #1
 800a7a0:	408b      	lsls	r3, r1
 800a7a2:	4322      	orrs	r2, r4
 800a7a4:	1b41      	subs	r1, r0, r5
 800a7a6:	e788      	b.n	800a6ba <__ieee754_sqrt+0x66>
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	e7f0      	b.n	800a78e <__ieee754_sqrt+0x13a>
 800a7ac:	0052      	lsls	r2, r2, #1
 800a7ae:	3101      	adds	r1, #1
 800a7b0:	e7ef      	b.n	800a792 <__ieee754_sqrt+0x13e>
 800a7b2:	46e0      	mov	r8, ip
 800a7b4:	e7be      	b.n	800a734 <__ieee754_sqrt+0xe0>
 800a7b6:	bf00      	nop
 800a7b8:	7ff00000 	.word	0x7ff00000

0800a7bc <_init>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr

0800a7c8 <_fini>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr
