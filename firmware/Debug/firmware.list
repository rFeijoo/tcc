
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000345c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800373c  0800373c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800373c  0800373c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800373c  0800373c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  080037b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080037b4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eeb3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002021  00000000  00000000  0002ef53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00030f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00031c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026231  00000000  00000000  00032840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8c3  00000000  00000000  00058a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3c50  00000000  00000000  00066334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159f84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce4  00000000  00000000  00159fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003624 	.word	0x08003624

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08003624 	.word	0x08003624

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d6:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <MX_GPIO_Init+0xf4>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	4a36      	ldr	r2, [pc, #216]	; (80003b4 <MX_GPIO_Init+0xf4>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e2:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <MX_GPIO_Init+0xf4>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	f003 0304 	and.w	r3, r3, #4
 80002ea:	613b      	str	r3, [r7, #16]
 80002ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ee:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <MX_GPIO_Init+0xf4>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	4a30      	ldr	r2, [pc, #192]	; (80003b4 <MX_GPIO_Init+0xf4>)
 80002f4:	f043 0320 	orr.w	r3, r3, #32
 80002f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fa:	4b2e      	ldr	r3, [pc, #184]	; (80003b4 <MX_GPIO_Init+0xf4>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	f003 0320 	and.w	r3, r3, #32
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <MX_GPIO_Init+0xf4>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	4a2a      	ldr	r2, [pc, #168]	; (80003b4 <MX_GPIO_Init+0xf4>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000312:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <MX_GPIO_Init+0xf4>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <MX_GPIO_Init+0xf4>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4a24      	ldr	r2, [pc, #144]	; (80003b4 <MX_GPIO_Init+0xf4>)
 8000324:	f043 0302 	orr.w	r3, r3, #2
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <MX_GPIO_Init+0xf4>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2120      	movs	r1, #32
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f000 fdcf 	bl	8000ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_GPIO_Init+0xf8>)
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	2300      	movs	r3, #0
 800034e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	4619      	mov	r1, r3
 8000356:	4819      	ldr	r0, [pc, #100]	; (80003bc <MX_GPIO_Init+0xfc>)
 8000358:	f000 fc40 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800035c:	230c      	movs	r3, #12
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000360:	2302      	movs	r3, #2
 8000362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000364:	2300      	movs	r3, #0
 8000366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000368:	2300      	movs	r3, #0
 800036a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800036c:	230c      	movs	r3, #12
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	4619      	mov	r1, r3
 8000376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037a:	f000 fc2f 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800037e:	2320      	movs	r3, #32
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000382:	2301      	movs	r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	2300      	movs	r3, #0
 800038c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800038e:	f107 0314 	add.w	r3, r7, #20
 8000392:	4619      	mov	r1, r3
 8000394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000398:	f000 fc20 	bl	8000bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2100      	movs	r1, #0
 80003a0:	2028      	movs	r0, #40	; 0x28
 80003a2:	f000 fbe6 	bl	8000b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a6:	2028      	movs	r0, #40	; 0x28
 80003a8:	f000 fbfd 	bl	8000ba6 <HAL_NVIC_EnableIRQ>

}
 80003ac:	bf00      	nop
 80003ae:	3728      	adds	r7, #40	; 0x28
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000
 80003b8:	10110000 	.word	0x10110000
 80003bc:	48000800 	.word	0x48000800

080003c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80003d0:	f003 0301 	and.w	r3, r3, #1
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d013      	beq.n	8000400 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80003d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80003e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d00b      	beq.n	8000400 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80003e8:	e000      	b.n	80003ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80003ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80003ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f9      	beq.n	80003ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80003f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000400:	687b      	ldr	r3, [r7, #4]
}
 8000402:	4618      	mov	r0, r3
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b086      	sub	sp, #24
 8000412:	af00      	add	r7, sp, #0
 8000414:	60f8      	str	r0, [r7, #12]
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
	for (int i=0 ; i<len ; i++)
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e009      	b.n	8000434 <_write+0x26>
		ITM_SendChar((*ptr++));
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	60ba      	str	r2, [r7, #8]
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ffc9 	bl	80003c0 <ITM_SendChar>
	for (int i=0 ; i<len ; i++)
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	3301      	adds	r3, #1
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	697a      	ldr	r2, [r7, #20]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	429a      	cmp	r2, r3
 800043a:	dbf1      	blt.n	8000420 <_write+0x12>

	return (len);
 800043c:	687b      	ldr	r3, [r7, #4]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	4603      	mov	r3, r0
 800044e:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	// seccionamento do circuito
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	UNUSED(&htim);

	// amostragem de tensão e corrente

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000464:	2120      	movs	r1, #32
 8000466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046a:	f000 fd51 	bl	8000f10 <HAL_GPIO_TogglePin>

	counter++;
 800046e:	4b04      	ldr	r3, [pc, #16]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	4a02      	ldr	r2, [pc, #8]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	2000009c 	.word	0x2000009c

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fa27 	bl	80008da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f836 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f7ff ff16 	bl	80002c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000494:	f000 f97e 	bl	8000794 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  printf("-- Starting System's Configuration\n");
 8000498:	4812      	ldr	r0, [pc, #72]	; (80004e4 <main+0x60>)
 800049a:	f002 f97d 	bl	8002798 <puts>

  HAL_TIM_Base_Start_IT(&htim1);
 800049e:	4812      	ldr	r0, [pc, #72]	; (80004e8 <main+0x64>)
 80004a0:	f001 fb70 	bl	8001b84 <HAL_TIM_Base_Start_IT>

  timer = HAL_GetTick();
 80004a4:	f000 fa7e 	bl	80009a4 <HAL_GetTick>
 80004a8:	4603      	mov	r3, r0
 80004aa:	4a10      	ldr	r2, [pc, #64]	; (80004ec <main+0x68>)
 80004ac:	6013      	str	r3, [r2, #0]

  printf("-- End of System's Configuration\n");
 80004ae:	4810      	ldr	r0, [pc, #64]	; (80004f0 <main+0x6c>)
 80004b0:	f002 f972 	bl	8002798 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (HAL_GetTick() - timer >= 1000)
 80004b4:	f000 fa76 	bl	80009a4 <HAL_GetTick>
 80004b8:	4602      	mov	r2, r0
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <main+0x68>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004c4:	d3f6      	bcc.n	80004b4 <main+0x30>
	{
		printf("Counter: %ld\n", counter);
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <main+0x70>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4619      	mov	r1, r3
 80004cc:	480a      	ldr	r0, [pc, #40]	; (80004f8 <main+0x74>)
 80004ce:	f002 f8dd 	bl	800268c <iprintf>

		counter = 0;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <main+0x70>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]

		timer = HAL_GetTick();
 80004d8:	f000 fa64 	bl	80009a4 <HAL_GetTick>
 80004dc:	4603      	mov	r3, r0
 80004de:	4a03      	ldr	r2, [pc, #12]	; (80004ec <main+0x68>)
 80004e0:	6013      	str	r3, [r2, #0]
	if (HAL_GetTick() - timer >= 1000)
 80004e2:	e7e7      	b.n	80004b4 <main+0x30>
 80004e4:	0800363c 	.word	0x0800363c
 80004e8:	200000a0 	.word	0x200000a0
 80004ec:	20000098 	.word	0x20000098
 80004f0:	08003660 	.word	0x08003660
 80004f4:	2000009c 	.word	0x2000009c
 80004f8:	08003684 	.word	0x08003684

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	2238      	movs	r2, #56	; 0x38
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f002 f8b6 	bl	800267c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000522:	f000 fd27 	bl	8000f74 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000526:	2302      	movs	r3, #2
 8000528:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000530:	2340      	movs	r3, #64	; 0x40
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000534:	2302      	movs	r3, #2
 8000536:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000538:	2302      	movs	r3, #2
 800053a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800053c:	2301      	movs	r3, #1
 800053e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000540:	230f      	movs	r3, #15
 8000542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000544:	2302      	movs	r3, #2
 8000546:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000548:	2302      	movs	r3, #2
 800054a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054c:	2302      	movs	r3, #2
 800054e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fdc1 	bl	80010dc <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000560:	f000 f818 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2303      	movs	r3, #3
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2103      	movs	r1, #3
 800057c:	4618      	mov	r0, r3
 800057e:	f001 f8c5 	bl	800170c <HAL_RCC_ClockConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000588:	f000 f804 	bl	8000594 <Error_Handler>
  }
}
 800058c:	bf00      	nop
 800058e:	3750      	adds	r7, #80	; 0x50
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_MspInit+0x44>)
 80005a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <HAL_MspInit+0x44>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6613      	str	r3, [r2, #96]	; 0x60
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_MspInit+0x44>)
 80005b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_MspInit+0x44>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <HAL_MspInit+0x44>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_MspInit+0x44>)
 80005cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005d6:	f000 fd71 	bl	80010bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <NMI_Handler+0x4>

080005ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <MemManage_Handler+0x4>

080005fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <UsageFault_Handler+0x4>

08000606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f9a4 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000642:	f001 fb17 	bl	8001c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000a0 	.word	0x200000a0

08000650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000654:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000658:	f000 fc74 	bl	8000f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	e00a      	b.n	8000688 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000672:	f3af 8000 	nop.w
 8000676:	4601      	mov	r1, r0
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	60ba      	str	r2, [r7, #8]
 800067e:	b2ca      	uxtb	r2, r1
 8000680:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	429a      	cmp	r2, r3
 800068e:	dbf0      	blt.n	8000672 <_read+0x12>
	}

return len;
 8000690:	687b      	ldr	r3, [r7, #4]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_close>:
	}
	return len;
}

int _close(int file)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	return -1;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b083      	sub	sp, #12
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c2:	605a      	str	r2, [r3, #4]
	return 0;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_isatty>:

int _isatty(int file)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	return 1;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
	return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <_sbrk+0x5c>)
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <_sbrk+0x60>)
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d102      	bne.n	8000726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <_sbrk+0x64>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <_sbrk+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	429a      	cmp	r2, r3
 8000732:	d207      	bcs.n	8000744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000734:	f001 ff78 	bl	8002628 <__errno>
 8000738:	4603      	mov	r3, r0
 800073a:	220c      	movs	r2, #12
 800073c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800073e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000742:	e009      	b.n	8000758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <_sbrk+0x64>)
 8000754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000756:	68fb      	ldr	r3, [r7, #12]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20020000 	.word	0x20020000
 8000764:	00000400 	.word	0x00000400
 8000768:	2000008c 	.word	0x2000008c
 800076c:	20000100 	.word	0x20000100

08000770 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <SystemInit+0x20>)
 8000776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <SystemInit+0x20>)
 800077c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <MX_TIM1_Init+0xa0>)
 80007b4:	4a20      	ldr	r2, [pc, #128]	; (8000838 <MX_TIM1_Init+0xa4>)
 80007b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_TIM1_Init+0xa0>)
 80007ba:	2277      	movs	r2, #119	; 0x77
 80007bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <MX_TIM1_Init+0xa0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1041;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_TIM1_Init+0xa0>)
 80007c6:	f240 4211 	movw	r2, #1041	; 0x411
 80007ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_TIM1_Init+0xa0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_TIM1_Init+0xa0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_TIM1_Init+0xa0>)
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007de:	4815      	ldr	r0, [pc, #84]	; (8000834 <MX_TIM1_Init+0xa0>)
 80007e0:	f001 f978 	bl	8001ad4 <HAL_TIM_Base_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007ea:	f7ff fed3 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	480e      	ldr	r0, [pc, #56]	; (8000834 <MX_TIM1_Init+0xa0>)
 80007fc:	f001 fbba 	bl	8001f74 <HAL_TIM_ConfigClockSource>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000806:	f7ff fec5 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_TIM1_Init+0xa0>)
 800081c:	f001 fe28 	bl	8002470 <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000826:	f7ff feb5 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000a0 	.word	0x200000a0
 8000838:	40012c00 	.word	0x40012c00

0800083c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <HAL_TIM_Base_MspInit+0x44>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d113      	bne.n	8000876 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_TIM_Base_MspInit+0x48>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <HAL_TIM_Base_MspInit+0x48>)
 8000854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000858:	6613      	str	r3, [r2, #96]	; 0x60
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_TIM_Base_MspInit+0x48>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2019      	movs	r0, #25
 800086c:	f000 f981 	bl	8000b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000870:	2019      	movs	r0, #25
 8000872:	f000 f998 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40012c00 	.word	0x40012c00
 8000884:	40021000 	.word	0x40021000

08000888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800088e:	490e      	ldr	r1, [pc, #56]	; (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a4:	4c0b      	ldr	r4, [pc, #44]	; (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b2:	f7ff ff5d 	bl	8000770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f001 febd 	bl	8002634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ba:	f7ff fde3 	bl	8000484 <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008cc:	08003744 	.word	0x08003744
  ldr r2, =_sbss
 80008d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008d4:	20000100 	.word	0x20000100

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>

080008da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f939 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f80e 	bl	800090c <HAL_InitTick>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	e001      	b.n	8000900 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008fc:	f7ff fe50 	bl	80005a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000900:	79fb      	ldrb	r3, [r7, #7]

}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_InitTick+0x68>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d022      	beq.n	8000966 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_InitTick+0x6c>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_InitTick+0x68>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800092c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000930:	fbb2 f3f3 	udiv	r3, r2, r3
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f944 	bl	8000bc2 <HAL_SYSTICK_Config>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10f      	bne.n	8000960 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b0f      	cmp	r3, #15
 8000944:	d809      	bhi.n	800095a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000946:	2200      	movs	r2, #0
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800094e:	f000 f910 	bl	8000b72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_InitTick+0x70>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	e007      	b.n	800096a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	e004      	b.n	800096a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e001      	b.n	800096a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000008 	.word	0x20000008
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x1c>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x20>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4413      	add	r3, r2
 800098e:	4a03      	ldr	r2, [pc, #12]	; (800099c <HAL_IncTick+0x1c>)
 8000990:	6013      	str	r3, [r2, #0]
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	200000ec 	.word	0x200000ec
 80009a0:	20000008 	.word	0x20000008

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200000ec 	.word	0x200000ec

080009bc <__NVIC_SetPriorityGrouping>:
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	; (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff29 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff40 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff90 	bl	8000ab0 <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5f 	bl	8000a5c <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff33 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ffa4 	bl	8000b18 <SysTick_Config>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bea:	e15a      	b.n	8000ea2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 814c 	beq.w	8000e9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d00b      	beq.n	8000c24 <HAL_GPIO_Init+0x48>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d007      	beq.n	8000c24 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c18:	2b11      	cmp	r3, #17
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b12      	cmp	r3, #18
 8000c22:	d130      	bne.n	8000c86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	f003 0201 	and.w	r2, r3, #1
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0xea>
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b12      	cmp	r3, #18
 8000cc4:	d123      	bne.n	8000d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	6939      	ldr	r1, [r7, #16]
 8000d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0203 	and.w	r2, r3, #3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 80a6 	beq.w	8000e9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d50:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <HAL_GPIO_Init+0x2e4>)
 8000d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d54:	4a5a      	ldr	r2, [pc, #360]	; (8000ec0 <HAL_GPIO_Init+0x2e4>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5c:	4b58      	ldr	r3, [pc, #352]	; (8000ec0 <HAL_GPIO_Init+0x2e4>)
 8000d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d68:	4a56      	ldr	r2, [pc, #344]	; (8000ec4 <HAL_GPIO_Init+0x2e8>)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d92:	d01f      	beq.n	8000dd4 <HAL_GPIO_Init+0x1f8>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <HAL_GPIO_Init+0x2ec>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d019      	beq.n	8000dd0 <HAL_GPIO_Init+0x1f4>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a4b      	ldr	r2, [pc, #300]	; (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d013      	beq.n	8000dcc <HAL_GPIO_Init+0x1f0>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a4a      	ldr	r2, [pc, #296]	; (8000ed0 <HAL_GPIO_Init+0x2f4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d00d      	beq.n	8000dc8 <HAL_GPIO_Init+0x1ec>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a49      	ldr	r2, [pc, #292]	; (8000ed4 <HAL_GPIO_Init+0x2f8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d007      	beq.n	8000dc4 <HAL_GPIO_Init+0x1e8>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a48      	ldr	r2, [pc, #288]	; (8000ed8 <HAL_GPIO_Init+0x2fc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d101      	bne.n	8000dc0 <HAL_GPIO_Init+0x1e4>
 8000dbc:	2305      	movs	r3, #5
 8000dbe:	e00a      	b.n	8000dd6 <HAL_GPIO_Init+0x1fa>
 8000dc0:	2306      	movs	r3, #6
 8000dc2:	e008      	b.n	8000dd6 <HAL_GPIO_Init+0x1fa>
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e006      	b.n	8000dd6 <HAL_GPIO_Init+0x1fa>
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e004      	b.n	8000dd6 <HAL_GPIO_Init+0x1fa>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e002      	b.n	8000dd6 <HAL_GPIO_Init+0x1fa>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <HAL_GPIO_Init+0x1fa>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	f002 0203 	and.w	r2, r2, #3
 8000ddc:	0092      	lsls	r2, r2, #2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de6:	4937      	ldr	r1, [pc, #220]	; (8000ec4 <HAL_GPIO_Init+0x2e8>)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000df4:	4b39      	ldr	r3, [pc, #228]	; (8000edc <HAL_GPIO_Init+0x300>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e18:	4a30      	ldr	r2, [pc, #192]	; (8000edc <HAL_GPIO_Init+0x300>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x300>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e42:	4a26      	ldr	r2, [pc, #152]	; (8000edc <HAL_GPIO_Init+0x300>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <HAL_GPIO_Init+0x300>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <HAL_GPIO_Init+0x300>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_GPIO_Init+0x300>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e96:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_GPIO_Init+0x300>)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f47f ae9d 	bne.w	8000bec <HAL_GPIO_Init+0x10>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	48000c00 	.word	0x48000c00
 8000ed4:	48001000 	.word	0x48001000
 8000ed8:	48001400 	.word	0x48001400
 8000edc:	40010400 	.word	0x40010400

08000ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
 8000eec:	4613      	mov	r3, r2
 8000eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef0:	787b      	ldrb	r3, [r7, #1]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	041a      	lsls	r2, r3, #16
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43d9      	mvns	r1, r3
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	400b      	ands	r3, r1
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fa6f 	bl	8000446 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40010400 	.word	0x40010400

08000f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d141      	bne.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f82:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8e:	d131      	bne.n	8000ff4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f90:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f96:	4a46      	ldr	r2, [pc, #280]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fa8:	4a41      	ldr	r2, [pc, #260]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fb0:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2232      	movs	r2, #50	; 0x32
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc0:	0c9b      	lsrs	r3, r3, #18
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc6:	e002      	b.n	8000fce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fda:	d102      	bne.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f2      	bne.n	8000fc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fee:	d158      	bne.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e057      	b.n	80010a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffa:	4a2d      	ldr	r2, [pc, #180]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001004:	e04d      	b.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800100c:	d141      	bne.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101a:	d131      	bne.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001022:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001034:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2232      	movs	r2, #50	; 0x32
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001048:	fba2 2303 	umull	r2, r3, r2, r3
 800104c:	0c9b      	lsrs	r3, r3, #18
 800104e:	3301      	adds	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001052:	e002      	b.n	800105a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3b01      	subs	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001066:	d102      	bne.n	800106e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f2      	bne.n	8001054 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107a:	d112      	bne.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e011      	b.n	80010a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001090:	e007      	b.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40007000 	.word	0x40007000
 80010b4:	20000000 	.word	0x20000000
 80010b8:	431bde83 	.word	0x431bde83

080010bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6093      	str	r3, [r2, #8]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40007000 	.word	0x40007000

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e308      	b.n	8001700 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d075      	beq.n	80011e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010fa:	4ba3      	ldr	r3, [pc, #652]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001104:	4ba0      	ldr	r3, [pc, #640]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d102      	bne.n	800111a <HAL_RCC_OscConfig+0x3e>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d002      	beq.n	8001120 <HAL_RCC_OscConfig+0x44>
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b08      	cmp	r3, #8
 800111e:	d10b      	bne.n	8001138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	4b99      	ldr	r3, [pc, #612]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d05b      	beq.n	80011e4 <HAL_RCC_OscConfig+0x108>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d157      	bne.n	80011e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e2e3      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d106      	bne.n	8001150 <HAL_RCC_OscConfig+0x74>
 8001142:	4b91      	ldr	r3, [pc, #580]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a90      	ldr	r2, [pc, #576]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e01d      	b.n	800118c <HAL_RCC_OscConfig+0xb0>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x98>
 800115a:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a8a      	ldr	r2, [pc, #552]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b88      	ldr	r3, [pc, #544]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a87      	ldr	r2, [pc, #540]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e00b      	b.n	800118c <HAL_RCC_OscConfig+0xb0>
 8001174:	4b84      	ldr	r3, [pc, #528]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a83      	ldr	r2, [pc, #524]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 800117a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b81      	ldr	r3, [pc, #516]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a80      	ldr	r2, [pc, #512]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d013      	beq.n	80011bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fc06 	bl	80009a4 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fc02 	bl	80009a4 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e2a8      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ae:	4b76      	ldr	r3, [pc, #472]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0xc0>
 80011ba:	e014      	b.n	80011e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011bc:	f7ff fbf2 	bl	80009a4 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fbee 	bl	80009a4 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e294      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d6:	4b6c      	ldr	r3, [pc, #432]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0xe8>
 80011e2:	e000      	b.n	80011e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d075      	beq.n	80012de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f2:	4b65      	ldr	r3, [pc, #404]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011fc:	4b62      	ldr	r3, [pc, #392]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b0c      	cmp	r3, #12
 800120a:	d102      	bne.n	8001212 <HAL_RCC_OscConfig+0x136>
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d002      	beq.n	8001218 <HAL_RCC_OscConfig+0x13c>
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d11f      	bne.n	8001258 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001218:	4b5b      	ldr	r3, [pc, #364]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_OscConfig+0x154>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e267      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b55      	ldr	r3, [pc, #340]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	061b      	lsls	r3, r3, #24
 800123e:	4952      	ldr	r1, [pc, #328]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001244:	4b51      	ldr	r3, [pc, #324]	; (800138c <HAL_RCC_OscConfig+0x2b0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fb5f 	bl	800090c <HAL_InitTick>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d043      	beq.n	80012dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e253      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d023      	beq.n	80012a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a48      	ldr	r2, [pc, #288]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff fb9a 	bl	80009a4 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fb96 	bl	80009a4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e23c      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001286:	4b40      	ldr	r3, [pc, #256]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	061b      	lsls	r3, r3, #24
 80012a0:	4939      	ldr	r1, [pc, #228]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
 80012a6:	e01a      	b.n	80012de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a36      	ldr	r2, [pc, #216]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fb76 	bl	80009a4 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fb72 	bl	80009a4 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e218      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1e0>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d03c      	beq.n	8001364 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d01c      	beq.n	800132c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f8:	4a23      	ldr	r2, [pc, #140]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001302:	f7ff fb4f 	bl	80009a4 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130a:	f7ff fb4b 	bl	80009a4 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e1f1      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0ef      	beq.n	800130a <HAL_RCC_OscConfig+0x22e>
 800132a:	e01b      	b.n	8001364 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 800132e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133c:	f7ff fb32 	bl	80009a4 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001344:	f7ff fb2e 	bl	80009a4 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1d4      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ef      	bne.n	8001344 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80ab 	beq.w	80014c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <HAL_RCC_OscConfig+0x2b4>
 8001382:	2301      	movs	r3, #1
 8001384:	e005      	b.n	8001392 <HAL_RCC_OscConfig+0x2b6>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	20000004 	.word	0x20000004
 8001390:	2300      	movs	r3, #0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00d      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4baf      	ldr	r3, [pc, #700]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	4aae      	ldr	r2, [pc, #696]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6593      	str	r3, [r2, #88]	; 0x58
 80013a2:	4bac      	ldr	r3, [pc, #688]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013ae:	2301      	movs	r3, #1
 80013b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b2:	4ba9      	ldr	r3, [pc, #676]	; (8001658 <HAL_RCC_OscConfig+0x57c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d118      	bne.n	80013f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013be:	4ba6      	ldr	r3, [pc, #664]	; (8001658 <HAL_RCC_OscConfig+0x57c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4aa5      	ldr	r2, [pc, #660]	; (8001658 <HAL_RCC_OscConfig+0x57c>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ca:	f7ff faeb 	bl	80009a4 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d2:	f7ff fae7 	bl	80009a4 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e18d      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e4:	4b9c      	ldr	r3, [pc, #624]	; (8001658 <HAL_RCC_OscConfig+0x57c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d108      	bne.n	800140a <HAL_RCC_OscConfig+0x32e>
 80013f8:	4b96      	ldr	r3, [pc, #600]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80013fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fe:	4a95      	ldr	r2, [pc, #596]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001408:	e024      	b.n	8001454 <HAL_RCC_OscConfig+0x378>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b05      	cmp	r3, #5
 8001410:	d110      	bne.n	8001434 <HAL_RCC_OscConfig+0x358>
 8001412:	4b90      	ldr	r3, [pc, #576]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001418:	4a8e      	ldr	r2, [pc, #568]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001422:	4b8c      	ldr	r3, [pc, #560]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001428:	4a8a      	ldr	r2, [pc, #552]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001432:	e00f      	b.n	8001454 <HAL_RCC_OscConfig+0x378>
 8001434:	4b87      	ldr	r3, [pc, #540]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143a:	4a86      	ldr	r2, [pc, #536]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001444:	4b83      	ldr	r3, [pc, #524]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144a:	4a82      	ldr	r2, [pc, #520]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d016      	beq.n	800148a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff faa2 	bl	80009a4 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fa9e 	bl	80009a4 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e142      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800147a:	4b76      	ldr	r3, [pc, #472]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800147c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ed      	beq.n	8001464 <HAL_RCC_OscConfig+0x388>
 8001488:	e015      	b.n	80014b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148a:	f7ff fa8b 	bl	80009a4 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff fa87 	bl	80009a4 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e12b      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ed      	bne.n	8001492 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014b6:	7ffb      	ldrb	r3, [r7, #31]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d105      	bne.n	80014c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014bc:	4b65      	ldr	r3, [pc, #404]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	4a64      	ldr	r2, [pc, #400]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d03c      	beq.n	800154e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d01c      	beq.n	8001516 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014dc:	4b5d      	ldr	r3, [pc, #372]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014e2:	4a5c      	ldr	r2, [pc, #368]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fa5a 	bl	80009a4 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014f4:	f7ff fa56 	bl	80009a4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e0fc      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001506:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ef      	beq.n	80014f4 <HAL_RCC_OscConfig+0x418>
 8001514:	e01b      	b.n	800154e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001516:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800151c:	4a4d      	ldr	r2, [pc, #308]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001526:	f7ff fa3d 	bl	80009a4 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800152e:	f7ff fa39 	bl	80009a4 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0df      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001540:	4b44      	ldr	r3, [pc, #272]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1ef      	bne.n	800152e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 80d3 	beq.w	80016fe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001558:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b0c      	cmp	r3, #12
 8001562:	f000 808d 	beq.w	8001680 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d15a      	bne.n	8001624 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a38      	ldr	r2, [pc, #224]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fa13 	bl	80009a4 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff fa0f 	bl	80009a4 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0b5      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_RCC_OscConfig+0x580>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6a11      	ldr	r1, [r2, #32]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015b0:	3a01      	subs	r2, #1
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	4311      	orrs	r1, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015ba:	0212      	lsls	r2, r2, #8
 80015bc:	4311      	orrs	r1, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015c2:	0852      	lsrs	r2, r2, #1
 80015c4:	3a01      	subs	r2, #1
 80015c6:	0552      	lsls	r2, r2, #21
 80015c8:	4311      	orrs	r1, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015ce:	0852      	lsrs	r2, r2, #1
 80015d0:	3a01      	subs	r2, #1
 80015d2:	0652      	lsls	r2, r2, #25
 80015d4:	4311      	orrs	r1, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015da:	06d2      	lsls	r2, r2, #27
 80015dc:	430a      	orrs	r2, r1
 80015de:	491d      	ldr	r1, [pc, #116]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff f9d2 	bl	80009a4 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff f9ce 	bl	80009a4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e074      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x528>
 8001622:	e06c      	b.n	80016fe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800162a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800162e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001642:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff f9aa 	bl	80009a4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001652:	e00e      	b.n	8001672 <HAL_RCC_OscConfig+0x596>
 8001654:	40021000 	.word	0x40021000
 8001658:	40007000 	.word	0x40007000
 800165c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff f9a0 	bl	80009a4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e046      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x62c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x584>
 800167e:	e03e      	b.n	80016fe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e039      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_RCC_OscConfig+0x62c>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	429a      	cmp	r2, r3
 800169e:	d12c      	bne.n	80016fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	3b01      	subs	r3, #1
 80016ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d123      	bne.n	80016fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d11b      	bne.n	80016fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d113      	bne.n	80016fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d109      	bne.n	80016fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	3b01      	subs	r3, #1
 80016f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000

0800170c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e11e      	b.n	8001962 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b91      	ldr	r3, [pc, #580]	; (800196c <HAL_RCC_ClockConfig+0x260>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d910      	bls.n	8001754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b8e      	ldr	r3, [pc, #568]	; (800196c <HAL_RCC_ClockConfig+0x260>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 020f 	bic.w	r2, r3, #15
 800173a:	498c      	ldr	r1, [pc, #560]	; (800196c <HAL_RCC_ClockConfig+0x260>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b8a      	ldr	r3, [pc, #552]	; (800196c <HAL_RCC_ClockConfig+0x260>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e106      	b.n	8001962 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d073      	beq.n	8001848 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d129      	bne.n	80017bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001768:	4b81      	ldr	r3, [pc, #516]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0f4      	b.n	8001962 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001778:	f000 f966 	bl	8001a48 <RCC_GetSysClockFreqFromPLLSource>
 800177c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4a7c      	ldr	r2, [pc, #496]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d93f      	bls.n	8001806 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001786:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800179a:	2b00      	cmp	r3, #0
 800179c:	d033      	beq.n	8001806 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d12f      	bne.n	8001806 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017a6:	4b72      	ldr	r3, [pc, #456]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ae:	4a70      	ldr	r2, [pc, #448]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 80017b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e024      	b.n	8001806 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d109      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0c6      	b.n	8001962 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d4:	4b66      	ldr	r3, [pc, #408]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0be      	b.n	8001962 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80017e4:	f000 f8ce 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4a61      	ldr	r2, [pc, #388]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d909      	bls.n	8001806 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017fa:	4a5d      	ldr	r2, [pc, #372]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 80017fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001800:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b5a      	ldr	r3, [pc, #360]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4957      	ldr	r1, [pc, #348]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001818:	f7ff f8c4 	bl	80009a4 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff f8c0 	bl	80009a4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e095      	b.n	8001962 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d023      	beq.n	800189c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001860:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a42      	ldr	r2, [pc, #264]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800186a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001878:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001880:	4a3b      	ldr	r2, [pc, #236]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001886:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001888:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4936      	ldr	r1, [pc, #216]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
 800189a:	e008      	b.n	80018ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b80      	cmp	r3, #128	; 0x80
 80018a0:	d105      	bne.n	80018ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4a32      	ldr	r2, [pc, #200]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 80018a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_RCC_ClockConfig+0x260>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d21d      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_RCC_ClockConfig+0x260>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 020f 	bic.w	r2, r3, #15
 80018c4:	4929      	ldr	r1, [pc, #164]	; (800196c <HAL_RCC_ClockConfig+0x260>)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018cc:	f7ff f86a 	bl	80009a4 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d4:	f7ff f866 	bl	80009a4 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e03b      	b.n	8001962 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x260>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1ed      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4917      	ldr	r1, [pc, #92]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490f      	ldr	r1, [pc, #60]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001936:	f000 f825 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 800193a:	4602      	mov	r2, r0
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	490c      	ldr	r1, [pc, #48]	; (8001978 <HAL_RCC_ClockConfig+0x26c>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x270>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_RCC_ClockConfig+0x274>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe ffd6 	bl	800090c <HAL_InitTick>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40022000 	.word	0x40022000
 8001970:	40021000 	.word	0x40021000
 8001974:	04c4b400 	.word	0x04c4b400
 8001978:	08003694 	.word	0x08003694
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d102      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	e047      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d102      	bne.n	80019ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e03e      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d136      	bne.n	8001a28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3301      	adds	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d10c      	bne.n	80019f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019d8:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e2:	68d2      	ldr	r2, [r2, #12]
 80019e4:	0a12      	lsrs	r2, r2, #8
 80019e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
      break;
 80019f0:	e00c      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019fc:	68d2      	ldr	r2, [r2, #12]
 80019fe:	0a12      	lsrs	r2, r2, #8
 8001a00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	617b      	str	r3, [r7, #20]
      break;
 8001a0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0e5b      	lsrs	r3, r3, #25
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e001      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a2c:	693b      	ldr	r3, [r7, #16]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	016e3600 	.word	0x016e3600

08001a48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d10c      	bne.n	8001a86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a76:	68d2      	ldr	r2, [r2, #12]
 8001a78:	0a12      	lsrs	r2, r2, #8
 8001a7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
    break;
 8001a84:	e00c      	b.n	8001aa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a90:	68d2      	ldr	r2, [r2, #12]
 8001a92:	0a12      	lsrs	r2, r2, #8
 8001a94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    break;
 8001a9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0e5b      	lsrs	r3, r3, #25
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	016e3600 	.word	0x016e3600
 8001ad0:	00f42400 	.word	0x00f42400

08001ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e049      	b.n	8001b7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7fe fe9e 	bl	800083c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 fb68 	bl	80021e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d001      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e054      	b.n	8001c46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d022      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x80>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc6:	d01d      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x80>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d018      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x80>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_TIM_Base_Start_IT+0xd8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d013      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x80>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <HAL_TIM_Base_Start_IT+0xdc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00e      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x80>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_TIM_Base_Start_IT+0xe0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d009      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x80>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_TIM_Base_Start_IT+0xe4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x80>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <HAL_TIM_Base_Start_IT+0xe8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d115      	bne.n	8001c30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_TIM_Base_Start_IT+0xec>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d015      	beq.n	8001c42 <HAL_TIM_Base_Start_IT+0xbe>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d011      	beq.n	8001c42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2e:	e008      	b.n	8001c42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e000      	b.n	8001c44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40012c00 	.word	0x40012c00
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40000800 	.word	0x40000800
 8001c60:	40000c00 	.word	0x40000c00
 8001c64:	40013400 	.word	0x40013400
 8001c68:	40014000 	.word	0x40014000
 8001c6c:	40015000 	.word	0x40015000
 8001c70:	00010007 	.word	0x00010007

08001c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d122      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d11b      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0202 	mvn.w	r2, #2
 8001ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fa78 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 8001cbc:	e005      	b.n	8001cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fa6a 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fa7b 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d122      	bne.n	8001d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d11b      	bne.n	8001d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0204 	mvn.w	r2, #4
 8001cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fa4e 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fa40 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fa51 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0208 	mvn.w	r2, #8
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fa24 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fa16 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fa27 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	2b10      	cmp	r3, #16
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0210 	mvn.w	r2, #16
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2208      	movs	r2, #8
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f9fa 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f9ec 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f9fd 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d10e      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0201 	mvn.w	r2, #1
 8001df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe fb32 	bl	800045c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e10:	2b80      	cmp	r3, #128	; 0x80
 8001e12:	d107      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fbc6 	bl	80025b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e32:	d10e      	bne.n	8001e52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3e:	2b80      	cmp	r3, #128	; 0x80
 8001e40:	d107      	bne.n	8001e52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fbb9 	bl	80025c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d10e      	bne.n	8001e7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6a:	2b40      	cmp	r3, #64	; 0x40
 8001e6c:	d107      	bne.n	8001e7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f9ab 	bl	80021d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d10e      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d107      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f06f 0220 	mvn.w	r2, #32
 8001ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fb79 	bl	800259c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eb8:	d10f      	bne.n	8001eda <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ec8:	d107      	bne.n	8001eda <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fb7f 	bl	80025d8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ee8:	d10f      	bne.n	8001f0a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ef8:	d107      	bne.n	8001f0a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fb71 	bl	80025ec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f18:	d10f      	bne.n	8001f3a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f28:	d107      	bne.n	8001f3a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fb63 	bl	8002600 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f48:	d10f      	bne.n	8001f6a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f58:	d107      	bne.n	8001f6a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fb55 	bl	8002614 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_TIM_ConfigClockSource+0x18>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e0f5      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x204>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8001faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6e      	ldr	r2, [pc, #440]	; (8002180 <HAL_TIM_ConfigClockSource+0x20c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	f000 80c1 	beq.w	800214e <HAL_TIM_ConfigClockSource+0x1da>
 8001fcc:	4a6c      	ldr	r2, [pc, #432]	; (8002180 <HAL_TIM_ConfigClockSource+0x20c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f200 80c6 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8001fd4:	4a6b      	ldr	r2, [pc, #428]	; (8002184 <HAL_TIM_ConfigClockSource+0x210>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	f000 80b9 	beq.w	800214e <HAL_TIM_ConfigClockSource+0x1da>
 8001fdc:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_TIM_ConfigClockSource+0x210>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	f200 80be 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8001fe4:	4a68      	ldr	r2, [pc, #416]	; (8002188 <HAL_TIM_ConfigClockSource+0x214>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f000 80b1 	beq.w	800214e <HAL_TIM_ConfigClockSource+0x1da>
 8001fec:	4a66      	ldr	r2, [pc, #408]	; (8002188 <HAL_TIM_ConfigClockSource+0x214>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	f200 80b6 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8001ff4:	4a65      	ldr	r2, [pc, #404]	; (800218c <HAL_TIM_ConfigClockSource+0x218>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	f000 80a9 	beq.w	800214e <HAL_TIM_ConfigClockSource+0x1da>
 8001ffc:	4a63      	ldr	r2, [pc, #396]	; (800218c <HAL_TIM_ConfigClockSource+0x218>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	f200 80ae 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002004:	4a62      	ldr	r2, [pc, #392]	; (8002190 <HAL_TIM_ConfigClockSource+0x21c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	f000 80a1 	beq.w	800214e <HAL_TIM_ConfigClockSource+0x1da>
 800200c:	4a60      	ldr	r2, [pc, #384]	; (8002190 <HAL_TIM_ConfigClockSource+0x21c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	f200 80a6 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002014:	4a5f      	ldr	r2, [pc, #380]	; (8002194 <HAL_TIM_ConfigClockSource+0x220>)
 8002016:	4293      	cmp	r3, r2
 8002018:	f000 8099 	beq.w	800214e <HAL_TIM_ConfigClockSource+0x1da>
 800201c:	4a5d      	ldr	r2, [pc, #372]	; (8002194 <HAL_TIM_ConfigClockSource+0x220>)
 800201e:	4293      	cmp	r3, r2
 8002020:	f200 809e 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002024:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002028:	f000 8091 	beq.w	800214e <HAL_TIM_ConfigClockSource+0x1da>
 800202c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002030:	f200 8096 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002038:	f000 8089 	beq.w	800214e <HAL_TIM_ConfigClockSource+0x1da>
 800203c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002040:	f200 808e 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002048:	d03e      	beq.n	80020c8 <HAL_TIM_ConfigClockSource+0x154>
 800204a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800204e:	f200 8087 	bhi.w	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002056:	f000 8085 	beq.w	8002164 <HAL_TIM_ConfigClockSource+0x1f0>
 800205a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205e:	d87f      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002060:	2b70      	cmp	r3, #112	; 0x70
 8002062:	d01a      	beq.n	800209a <HAL_TIM_ConfigClockSource+0x126>
 8002064:	2b70      	cmp	r3, #112	; 0x70
 8002066:	d87b      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002068:	2b60      	cmp	r3, #96	; 0x60
 800206a:	d050      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x19a>
 800206c:	2b60      	cmp	r3, #96	; 0x60
 800206e:	d877      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002070:	2b50      	cmp	r3, #80	; 0x50
 8002072:	d03c      	beq.n	80020ee <HAL_TIM_ConfigClockSource+0x17a>
 8002074:	2b50      	cmp	r3, #80	; 0x50
 8002076:	d873      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002078:	2b40      	cmp	r3, #64	; 0x40
 800207a:	d058      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x1ba>
 800207c:	2b40      	cmp	r3, #64	; 0x40
 800207e:	d86f      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002080:	2b30      	cmp	r3, #48	; 0x30
 8002082:	d064      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x1da>
 8002084:	2b30      	cmp	r3, #48	; 0x30
 8002086:	d86b      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002088:	2b20      	cmp	r3, #32
 800208a:	d060      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x1da>
 800208c:	2b20      	cmp	r3, #32
 800208e:	d867      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
 8002090:	2b00      	cmp	r3, #0
 8002092:	d05c      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x1da>
 8002094:	2b10      	cmp	r3, #16
 8002096:	d05a      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002098:	e062      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f000 f9c1 	bl	8002430 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	609a      	str	r2, [r3, #8]
      break;
 80020c6:	e04e      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f000 f9aa 	bl	8002430 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ea:	609a      	str	r2, [r3, #8]
      break;
 80020ec:	e03b      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f000 f91c 	bl	8002338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2150      	movs	r1, #80	; 0x50
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f975 	bl	80023f6 <TIM_ITRx_SetConfig>
      break;
 800210c:	e02b      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	461a      	mov	r2, r3
 800211c:	f000 f93b 	bl	8002396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2160      	movs	r1, #96	; 0x60
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f965 	bl	80023f6 <TIM_ITRx_SetConfig>
      break;
 800212c:	e01b      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	461a      	mov	r2, r3
 800213c:	f000 f8fc 	bl	8002338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f955 	bl	80023f6 <TIM_ITRx_SetConfig>
      break;
 800214c:	e00b      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f000 f94c 	bl	80023f6 <TIM_ITRx_SetConfig>
        break;
 800215e:	e002      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8002164:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	00100070 	.word	0x00100070
 8002184:	00100060 	.word	0x00100060
 8002188:	00100050 	.word	0x00100050
 800218c:	00100040 	.word	0x00100040
 8002190:	00100030 	.word	0x00100030
 8002194:	00100020 	.word	0x00100020

08002198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a46      	ldr	r2, [pc, #280]	; (8002314 <TIM_Base_SetConfig+0x12c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d017      	beq.n	8002230 <TIM_Base_SetConfig+0x48>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002206:	d013      	beq.n	8002230 <TIM_Base_SetConfig+0x48>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a43      	ldr	r2, [pc, #268]	; (8002318 <TIM_Base_SetConfig+0x130>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00f      	beq.n	8002230 <TIM_Base_SetConfig+0x48>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a42      	ldr	r2, [pc, #264]	; (800231c <TIM_Base_SetConfig+0x134>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00b      	beq.n	8002230 <TIM_Base_SetConfig+0x48>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a41      	ldr	r2, [pc, #260]	; (8002320 <TIM_Base_SetConfig+0x138>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d007      	beq.n	8002230 <TIM_Base_SetConfig+0x48>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a40      	ldr	r2, [pc, #256]	; (8002324 <TIM_Base_SetConfig+0x13c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <TIM_Base_SetConfig+0x48>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3f      	ldr	r2, [pc, #252]	; (8002328 <TIM_Base_SetConfig+0x140>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d108      	bne.n	8002242 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a33      	ldr	r2, [pc, #204]	; (8002314 <TIM_Base_SetConfig+0x12c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d023      	beq.n	8002292 <TIM_Base_SetConfig+0xaa>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002250:	d01f      	beq.n	8002292 <TIM_Base_SetConfig+0xaa>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a30      	ldr	r2, [pc, #192]	; (8002318 <TIM_Base_SetConfig+0x130>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01b      	beq.n	8002292 <TIM_Base_SetConfig+0xaa>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2f      	ldr	r2, [pc, #188]	; (800231c <TIM_Base_SetConfig+0x134>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d017      	beq.n	8002292 <TIM_Base_SetConfig+0xaa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2e      	ldr	r2, [pc, #184]	; (8002320 <TIM_Base_SetConfig+0x138>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <TIM_Base_SetConfig+0xaa>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <TIM_Base_SetConfig+0x13c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00f      	beq.n	8002292 <TIM_Base_SetConfig+0xaa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a2d      	ldr	r2, [pc, #180]	; (800232c <TIM_Base_SetConfig+0x144>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00b      	beq.n	8002292 <TIM_Base_SetConfig+0xaa>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a2c      	ldr	r2, [pc, #176]	; (8002330 <TIM_Base_SetConfig+0x148>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <TIM_Base_SetConfig+0xaa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2b      	ldr	r2, [pc, #172]	; (8002334 <TIM_Base_SetConfig+0x14c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d003      	beq.n	8002292 <TIM_Base_SetConfig+0xaa>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a26      	ldr	r2, [pc, #152]	; (8002328 <TIM_Base_SetConfig+0x140>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d108      	bne.n	80022a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <TIM_Base_SetConfig+0x12c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d013      	beq.n	80022f8 <TIM_Base_SetConfig+0x110>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a14      	ldr	r2, [pc, #80]	; (8002324 <TIM_Base_SetConfig+0x13c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00f      	beq.n	80022f8 <TIM_Base_SetConfig+0x110>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a14      	ldr	r2, [pc, #80]	; (800232c <TIM_Base_SetConfig+0x144>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00b      	beq.n	80022f8 <TIM_Base_SetConfig+0x110>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a13      	ldr	r2, [pc, #76]	; (8002330 <TIM_Base_SetConfig+0x148>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d007      	beq.n	80022f8 <TIM_Base_SetConfig+0x110>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <TIM_Base_SetConfig+0x14c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_Base_SetConfig+0x110>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <TIM_Base_SetConfig+0x140>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d103      	bne.n	8002300 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	615a      	str	r2, [r3, #20]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40012c00 	.word	0x40012c00
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40000c00 	.word	0x40000c00
 8002324:	40013400 	.word	0x40013400
 8002328:	40015000 	.word	0x40015000
 800232c:	40014000 	.word	0x40014000
 8002330:	40014400 	.word	0x40014400
 8002334:	40014800 	.word	0x40014800

08002338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	f023 0201 	bic.w	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f023 030a 	bic.w	r3, r3, #10
 8002374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	621a      	str	r2, [r3, #32]
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002396:	b480      	push	{r7}
 8002398:	b087      	sub	sp, #28
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	f023 0210 	bic.w	r2, r3, #16
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	031b      	lsls	r3, r3, #12
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	621a      	str	r2, [r3, #32]
}
 80023ea:	bf00      	nop
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800240c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	f043 0307 	orr.w	r3, r3, #7
 800241c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	609a      	str	r2, [r3, #8]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	021a      	lsls	r2, r3, #8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	431a      	orrs	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	609a      	str	r2, [r3, #8]
}
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002484:	2302      	movs	r3, #2
 8002486:	e074      	b.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a34      	ldr	r2, [pc, #208]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a33      	ldr	r2, [pc, #204]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d108      	bne.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80024de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a21      	ldr	r2, [pc, #132]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d022      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002508:	d01d      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d018      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00e      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d009      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10c      	bne.n	8002560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800254c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4313      	orrs	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40013400 	.word	0x40013400
 8002588:	40015000 	.word	0x40015000
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800
 8002594:	40000c00 	.word	0x40000c00
 8002598:	40014000 	.word	0x40014000

0800259c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <__errno>:
 8002628:	4b01      	ldr	r3, [pc, #4]	; (8002630 <__errno+0x8>)
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	2000000c 	.word	0x2000000c

08002634 <__libc_init_array>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	4d0d      	ldr	r5, [pc, #52]	; (800266c <__libc_init_array+0x38>)
 8002638:	4c0d      	ldr	r4, [pc, #52]	; (8002670 <__libc_init_array+0x3c>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	2600      	movs	r6, #0
 8002640:	42a6      	cmp	r6, r4
 8002642:	d109      	bne.n	8002658 <__libc_init_array+0x24>
 8002644:	4d0b      	ldr	r5, [pc, #44]	; (8002674 <__libc_init_array+0x40>)
 8002646:	4c0c      	ldr	r4, [pc, #48]	; (8002678 <__libc_init_array+0x44>)
 8002648:	f000 ffec 	bl	8003624 <_init>
 800264c:	1b64      	subs	r4, r4, r5
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	2600      	movs	r6, #0
 8002652:	42a6      	cmp	r6, r4
 8002654:	d105      	bne.n	8002662 <__libc_init_array+0x2e>
 8002656:	bd70      	pop	{r4, r5, r6, pc}
 8002658:	f855 3b04 	ldr.w	r3, [r5], #4
 800265c:	4798      	blx	r3
 800265e:	3601      	adds	r6, #1
 8002660:	e7ee      	b.n	8002640 <__libc_init_array+0xc>
 8002662:	f855 3b04 	ldr.w	r3, [r5], #4
 8002666:	4798      	blx	r3
 8002668:	3601      	adds	r6, #1
 800266a:	e7f2      	b.n	8002652 <__libc_init_array+0x1e>
 800266c:	0800373c 	.word	0x0800373c
 8002670:	0800373c 	.word	0x0800373c
 8002674:	0800373c 	.word	0x0800373c
 8002678:	08003740 	.word	0x08003740

0800267c <memset>:
 800267c:	4402      	add	r2, r0
 800267e:	4603      	mov	r3, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	f803 1b01 	strb.w	r1, [r3], #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <iprintf>:
 800268c:	b40f      	push	{r0, r1, r2, r3}
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <iprintf+0x2c>)
 8002690:	b513      	push	{r0, r1, r4, lr}
 8002692:	681c      	ldr	r4, [r3, #0]
 8002694:	b124      	cbz	r4, 80026a0 <iprintf+0x14>
 8002696:	69a3      	ldr	r3, [r4, #24]
 8002698:	b913      	cbnz	r3, 80026a0 <iprintf+0x14>
 800269a:	4620      	mov	r0, r4
 800269c:	f000 fa5e 	bl	8002b5c <__sinit>
 80026a0:	ab05      	add	r3, sp, #20
 80026a2:	9a04      	ldr	r2, [sp, #16]
 80026a4:	68a1      	ldr	r1, [r4, #8]
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	4620      	mov	r0, r4
 80026aa:	f000 fc2f 	bl	8002f0c <_vfiprintf_r>
 80026ae:	b002      	add	sp, #8
 80026b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026b4:	b004      	add	sp, #16
 80026b6:	4770      	bx	lr
 80026b8:	2000000c 	.word	0x2000000c

080026bc <_puts_r>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	460e      	mov	r6, r1
 80026c0:	4605      	mov	r5, r0
 80026c2:	b118      	cbz	r0, 80026cc <_puts_r+0x10>
 80026c4:	6983      	ldr	r3, [r0, #24]
 80026c6:	b90b      	cbnz	r3, 80026cc <_puts_r+0x10>
 80026c8:	f000 fa48 	bl	8002b5c <__sinit>
 80026cc:	69ab      	ldr	r3, [r5, #24]
 80026ce:	68ac      	ldr	r4, [r5, #8]
 80026d0:	b913      	cbnz	r3, 80026d8 <_puts_r+0x1c>
 80026d2:	4628      	mov	r0, r5
 80026d4:	f000 fa42 	bl	8002b5c <__sinit>
 80026d8:	4b2c      	ldr	r3, [pc, #176]	; (800278c <_puts_r+0xd0>)
 80026da:	429c      	cmp	r4, r3
 80026dc:	d120      	bne.n	8002720 <_puts_r+0x64>
 80026de:	686c      	ldr	r4, [r5, #4]
 80026e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026e2:	07db      	lsls	r3, r3, #31
 80026e4:	d405      	bmi.n	80026f2 <_puts_r+0x36>
 80026e6:	89a3      	ldrh	r3, [r4, #12]
 80026e8:	0598      	lsls	r0, r3, #22
 80026ea:	d402      	bmi.n	80026f2 <_puts_r+0x36>
 80026ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ee:	f000 fad3 	bl	8002c98 <__retarget_lock_acquire_recursive>
 80026f2:	89a3      	ldrh	r3, [r4, #12]
 80026f4:	0719      	lsls	r1, r3, #28
 80026f6:	d51d      	bpl.n	8002734 <_puts_r+0x78>
 80026f8:	6923      	ldr	r3, [r4, #16]
 80026fa:	b1db      	cbz	r3, 8002734 <_puts_r+0x78>
 80026fc:	3e01      	subs	r6, #1
 80026fe:	68a3      	ldr	r3, [r4, #8]
 8002700:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002704:	3b01      	subs	r3, #1
 8002706:	60a3      	str	r3, [r4, #8]
 8002708:	bb39      	cbnz	r1, 800275a <_puts_r+0x9e>
 800270a:	2b00      	cmp	r3, #0
 800270c:	da38      	bge.n	8002780 <_puts_r+0xc4>
 800270e:	4622      	mov	r2, r4
 8002710:	210a      	movs	r1, #10
 8002712:	4628      	mov	r0, r5
 8002714:	f000 f848 	bl	80027a8 <__swbuf_r>
 8002718:	3001      	adds	r0, #1
 800271a:	d011      	beq.n	8002740 <_puts_r+0x84>
 800271c:	250a      	movs	r5, #10
 800271e:	e011      	b.n	8002744 <_puts_r+0x88>
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <_puts_r+0xd4>)
 8002722:	429c      	cmp	r4, r3
 8002724:	d101      	bne.n	800272a <_puts_r+0x6e>
 8002726:	68ac      	ldr	r4, [r5, #8]
 8002728:	e7da      	b.n	80026e0 <_puts_r+0x24>
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <_puts_r+0xd8>)
 800272c:	429c      	cmp	r4, r3
 800272e:	bf08      	it	eq
 8002730:	68ec      	ldreq	r4, [r5, #12]
 8002732:	e7d5      	b.n	80026e0 <_puts_r+0x24>
 8002734:	4621      	mov	r1, r4
 8002736:	4628      	mov	r0, r5
 8002738:	f000 f888 	bl	800284c <__swsetup_r>
 800273c:	2800      	cmp	r0, #0
 800273e:	d0dd      	beq.n	80026fc <_puts_r+0x40>
 8002740:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002746:	07da      	lsls	r2, r3, #31
 8002748:	d405      	bmi.n	8002756 <_puts_r+0x9a>
 800274a:	89a3      	ldrh	r3, [r4, #12]
 800274c:	059b      	lsls	r3, r3, #22
 800274e:	d402      	bmi.n	8002756 <_puts_r+0x9a>
 8002750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002752:	f000 faa2 	bl	8002c9a <__retarget_lock_release_recursive>
 8002756:	4628      	mov	r0, r5
 8002758:	bd70      	pop	{r4, r5, r6, pc}
 800275a:	2b00      	cmp	r3, #0
 800275c:	da04      	bge.n	8002768 <_puts_r+0xac>
 800275e:	69a2      	ldr	r2, [r4, #24]
 8002760:	429a      	cmp	r2, r3
 8002762:	dc06      	bgt.n	8002772 <_puts_r+0xb6>
 8002764:	290a      	cmp	r1, #10
 8002766:	d004      	beq.n	8002772 <_puts_r+0xb6>
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	6022      	str	r2, [r4, #0]
 800276e:	7019      	strb	r1, [r3, #0]
 8002770:	e7c5      	b.n	80026fe <_puts_r+0x42>
 8002772:	4622      	mov	r2, r4
 8002774:	4628      	mov	r0, r5
 8002776:	f000 f817 	bl	80027a8 <__swbuf_r>
 800277a:	3001      	adds	r0, #1
 800277c:	d1bf      	bne.n	80026fe <_puts_r+0x42>
 800277e:	e7df      	b.n	8002740 <_puts_r+0x84>
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	250a      	movs	r5, #10
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	6022      	str	r2, [r4, #0]
 8002788:	701d      	strb	r5, [r3, #0]
 800278a:	e7db      	b.n	8002744 <_puts_r+0x88>
 800278c:	080036c8 	.word	0x080036c8
 8002790:	080036e8 	.word	0x080036e8
 8002794:	080036a8 	.word	0x080036a8

08002798 <puts>:
 8002798:	4b02      	ldr	r3, [pc, #8]	; (80027a4 <puts+0xc>)
 800279a:	4601      	mov	r1, r0
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	f7ff bf8d 	b.w	80026bc <_puts_r>
 80027a2:	bf00      	nop
 80027a4:	2000000c 	.word	0x2000000c

080027a8 <__swbuf_r>:
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	460e      	mov	r6, r1
 80027ac:	4614      	mov	r4, r2
 80027ae:	4605      	mov	r5, r0
 80027b0:	b118      	cbz	r0, 80027ba <__swbuf_r+0x12>
 80027b2:	6983      	ldr	r3, [r0, #24]
 80027b4:	b90b      	cbnz	r3, 80027ba <__swbuf_r+0x12>
 80027b6:	f000 f9d1 	bl	8002b5c <__sinit>
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <__swbuf_r+0x98>)
 80027bc:	429c      	cmp	r4, r3
 80027be:	d12b      	bne.n	8002818 <__swbuf_r+0x70>
 80027c0:	686c      	ldr	r4, [r5, #4]
 80027c2:	69a3      	ldr	r3, [r4, #24]
 80027c4:	60a3      	str	r3, [r4, #8]
 80027c6:	89a3      	ldrh	r3, [r4, #12]
 80027c8:	071a      	lsls	r2, r3, #28
 80027ca:	d52f      	bpl.n	800282c <__swbuf_r+0x84>
 80027cc:	6923      	ldr	r3, [r4, #16]
 80027ce:	b36b      	cbz	r3, 800282c <__swbuf_r+0x84>
 80027d0:	6923      	ldr	r3, [r4, #16]
 80027d2:	6820      	ldr	r0, [r4, #0]
 80027d4:	1ac0      	subs	r0, r0, r3
 80027d6:	6963      	ldr	r3, [r4, #20]
 80027d8:	b2f6      	uxtb	r6, r6
 80027da:	4283      	cmp	r3, r0
 80027dc:	4637      	mov	r7, r6
 80027de:	dc04      	bgt.n	80027ea <__swbuf_r+0x42>
 80027e0:	4621      	mov	r1, r4
 80027e2:	4628      	mov	r0, r5
 80027e4:	f000 f926 	bl	8002a34 <_fflush_r>
 80027e8:	bb30      	cbnz	r0, 8002838 <__swbuf_r+0x90>
 80027ea:	68a3      	ldr	r3, [r4, #8]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	60a3      	str	r3, [r4, #8]
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	6022      	str	r2, [r4, #0]
 80027f6:	701e      	strb	r6, [r3, #0]
 80027f8:	6963      	ldr	r3, [r4, #20]
 80027fa:	3001      	adds	r0, #1
 80027fc:	4283      	cmp	r3, r0
 80027fe:	d004      	beq.n	800280a <__swbuf_r+0x62>
 8002800:	89a3      	ldrh	r3, [r4, #12]
 8002802:	07db      	lsls	r3, r3, #31
 8002804:	d506      	bpl.n	8002814 <__swbuf_r+0x6c>
 8002806:	2e0a      	cmp	r6, #10
 8002808:	d104      	bne.n	8002814 <__swbuf_r+0x6c>
 800280a:	4621      	mov	r1, r4
 800280c:	4628      	mov	r0, r5
 800280e:	f000 f911 	bl	8002a34 <_fflush_r>
 8002812:	b988      	cbnz	r0, 8002838 <__swbuf_r+0x90>
 8002814:	4638      	mov	r0, r7
 8002816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <__swbuf_r+0x9c>)
 800281a:	429c      	cmp	r4, r3
 800281c:	d101      	bne.n	8002822 <__swbuf_r+0x7a>
 800281e:	68ac      	ldr	r4, [r5, #8]
 8002820:	e7cf      	b.n	80027c2 <__swbuf_r+0x1a>
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <__swbuf_r+0xa0>)
 8002824:	429c      	cmp	r4, r3
 8002826:	bf08      	it	eq
 8002828:	68ec      	ldreq	r4, [r5, #12]
 800282a:	e7ca      	b.n	80027c2 <__swbuf_r+0x1a>
 800282c:	4621      	mov	r1, r4
 800282e:	4628      	mov	r0, r5
 8002830:	f000 f80c 	bl	800284c <__swsetup_r>
 8002834:	2800      	cmp	r0, #0
 8002836:	d0cb      	beq.n	80027d0 <__swbuf_r+0x28>
 8002838:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800283c:	e7ea      	b.n	8002814 <__swbuf_r+0x6c>
 800283e:	bf00      	nop
 8002840:	080036c8 	.word	0x080036c8
 8002844:	080036e8 	.word	0x080036e8
 8002848:	080036a8 	.word	0x080036a8

0800284c <__swsetup_r>:
 800284c:	4b32      	ldr	r3, [pc, #200]	; (8002918 <__swsetup_r+0xcc>)
 800284e:	b570      	push	{r4, r5, r6, lr}
 8002850:	681d      	ldr	r5, [r3, #0]
 8002852:	4606      	mov	r6, r0
 8002854:	460c      	mov	r4, r1
 8002856:	b125      	cbz	r5, 8002862 <__swsetup_r+0x16>
 8002858:	69ab      	ldr	r3, [r5, #24]
 800285a:	b913      	cbnz	r3, 8002862 <__swsetup_r+0x16>
 800285c:	4628      	mov	r0, r5
 800285e:	f000 f97d 	bl	8002b5c <__sinit>
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <__swsetup_r+0xd0>)
 8002864:	429c      	cmp	r4, r3
 8002866:	d10f      	bne.n	8002888 <__swsetup_r+0x3c>
 8002868:	686c      	ldr	r4, [r5, #4]
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002870:	0719      	lsls	r1, r3, #28
 8002872:	d42c      	bmi.n	80028ce <__swsetup_r+0x82>
 8002874:	06dd      	lsls	r5, r3, #27
 8002876:	d411      	bmi.n	800289c <__swsetup_r+0x50>
 8002878:	2309      	movs	r3, #9
 800287a:	6033      	str	r3, [r6, #0]
 800287c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002880:	81a3      	strh	r3, [r4, #12]
 8002882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002886:	e03e      	b.n	8002906 <__swsetup_r+0xba>
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <__swsetup_r+0xd4>)
 800288a:	429c      	cmp	r4, r3
 800288c:	d101      	bne.n	8002892 <__swsetup_r+0x46>
 800288e:	68ac      	ldr	r4, [r5, #8]
 8002890:	e7eb      	b.n	800286a <__swsetup_r+0x1e>
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <__swsetup_r+0xd8>)
 8002894:	429c      	cmp	r4, r3
 8002896:	bf08      	it	eq
 8002898:	68ec      	ldreq	r4, [r5, #12]
 800289a:	e7e6      	b.n	800286a <__swsetup_r+0x1e>
 800289c:	0758      	lsls	r0, r3, #29
 800289e:	d512      	bpl.n	80028c6 <__swsetup_r+0x7a>
 80028a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028a2:	b141      	cbz	r1, 80028b6 <__swsetup_r+0x6a>
 80028a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028a8:	4299      	cmp	r1, r3
 80028aa:	d002      	beq.n	80028b2 <__swsetup_r+0x66>
 80028ac:	4630      	mov	r0, r6
 80028ae:	f000 fa59 	bl	8002d64 <_free_r>
 80028b2:	2300      	movs	r3, #0
 80028b4:	6363      	str	r3, [r4, #52]	; 0x34
 80028b6:	89a3      	ldrh	r3, [r4, #12]
 80028b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028bc:	81a3      	strh	r3, [r4, #12]
 80028be:	2300      	movs	r3, #0
 80028c0:	6063      	str	r3, [r4, #4]
 80028c2:	6923      	ldr	r3, [r4, #16]
 80028c4:	6023      	str	r3, [r4, #0]
 80028c6:	89a3      	ldrh	r3, [r4, #12]
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	81a3      	strh	r3, [r4, #12]
 80028ce:	6923      	ldr	r3, [r4, #16]
 80028d0:	b94b      	cbnz	r3, 80028e6 <__swsetup_r+0x9a>
 80028d2:	89a3      	ldrh	r3, [r4, #12]
 80028d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028dc:	d003      	beq.n	80028e6 <__swsetup_r+0x9a>
 80028de:	4621      	mov	r1, r4
 80028e0:	4630      	mov	r0, r6
 80028e2:	f000 f9ff 	bl	8002ce4 <__smakebuf_r>
 80028e6:	89a0      	ldrh	r0, [r4, #12]
 80028e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028ec:	f010 0301 	ands.w	r3, r0, #1
 80028f0:	d00a      	beq.n	8002908 <__swsetup_r+0xbc>
 80028f2:	2300      	movs	r3, #0
 80028f4:	60a3      	str	r3, [r4, #8]
 80028f6:	6963      	ldr	r3, [r4, #20]
 80028f8:	425b      	negs	r3, r3
 80028fa:	61a3      	str	r3, [r4, #24]
 80028fc:	6923      	ldr	r3, [r4, #16]
 80028fe:	b943      	cbnz	r3, 8002912 <__swsetup_r+0xc6>
 8002900:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002904:	d1ba      	bne.n	800287c <__swsetup_r+0x30>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	0781      	lsls	r1, r0, #30
 800290a:	bf58      	it	pl
 800290c:	6963      	ldrpl	r3, [r4, #20]
 800290e:	60a3      	str	r3, [r4, #8]
 8002910:	e7f4      	b.n	80028fc <__swsetup_r+0xb0>
 8002912:	2000      	movs	r0, #0
 8002914:	e7f7      	b.n	8002906 <__swsetup_r+0xba>
 8002916:	bf00      	nop
 8002918:	2000000c 	.word	0x2000000c
 800291c:	080036c8 	.word	0x080036c8
 8002920:	080036e8 	.word	0x080036e8
 8002924:	080036a8 	.word	0x080036a8

08002928 <__sflush_r>:
 8002928:	898a      	ldrh	r2, [r1, #12]
 800292a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292e:	4605      	mov	r5, r0
 8002930:	0710      	lsls	r0, r2, #28
 8002932:	460c      	mov	r4, r1
 8002934:	d458      	bmi.n	80029e8 <__sflush_r+0xc0>
 8002936:	684b      	ldr	r3, [r1, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	dc05      	bgt.n	8002948 <__sflush_r+0x20>
 800293c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	dc02      	bgt.n	8002948 <__sflush_r+0x20>
 8002942:	2000      	movs	r0, #0
 8002944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800294a:	2e00      	cmp	r6, #0
 800294c:	d0f9      	beq.n	8002942 <__sflush_r+0x1a>
 800294e:	2300      	movs	r3, #0
 8002950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002954:	682f      	ldr	r7, [r5, #0]
 8002956:	602b      	str	r3, [r5, #0]
 8002958:	d032      	beq.n	80029c0 <__sflush_r+0x98>
 800295a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800295c:	89a3      	ldrh	r3, [r4, #12]
 800295e:	075a      	lsls	r2, r3, #29
 8002960:	d505      	bpl.n	800296e <__sflush_r+0x46>
 8002962:	6863      	ldr	r3, [r4, #4]
 8002964:	1ac0      	subs	r0, r0, r3
 8002966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002968:	b10b      	cbz	r3, 800296e <__sflush_r+0x46>
 800296a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800296c:	1ac0      	subs	r0, r0, r3
 800296e:	2300      	movs	r3, #0
 8002970:	4602      	mov	r2, r0
 8002972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002974:	6a21      	ldr	r1, [r4, #32]
 8002976:	4628      	mov	r0, r5
 8002978:	47b0      	blx	r6
 800297a:	1c43      	adds	r3, r0, #1
 800297c:	89a3      	ldrh	r3, [r4, #12]
 800297e:	d106      	bne.n	800298e <__sflush_r+0x66>
 8002980:	6829      	ldr	r1, [r5, #0]
 8002982:	291d      	cmp	r1, #29
 8002984:	d82c      	bhi.n	80029e0 <__sflush_r+0xb8>
 8002986:	4a2a      	ldr	r2, [pc, #168]	; (8002a30 <__sflush_r+0x108>)
 8002988:	40ca      	lsrs	r2, r1
 800298a:	07d6      	lsls	r6, r2, #31
 800298c:	d528      	bpl.n	80029e0 <__sflush_r+0xb8>
 800298e:	2200      	movs	r2, #0
 8002990:	6062      	str	r2, [r4, #4]
 8002992:	04d9      	lsls	r1, r3, #19
 8002994:	6922      	ldr	r2, [r4, #16]
 8002996:	6022      	str	r2, [r4, #0]
 8002998:	d504      	bpl.n	80029a4 <__sflush_r+0x7c>
 800299a:	1c42      	adds	r2, r0, #1
 800299c:	d101      	bne.n	80029a2 <__sflush_r+0x7a>
 800299e:	682b      	ldr	r3, [r5, #0]
 80029a0:	b903      	cbnz	r3, 80029a4 <__sflush_r+0x7c>
 80029a2:	6560      	str	r0, [r4, #84]	; 0x54
 80029a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029a6:	602f      	str	r7, [r5, #0]
 80029a8:	2900      	cmp	r1, #0
 80029aa:	d0ca      	beq.n	8002942 <__sflush_r+0x1a>
 80029ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029b0:	4299      	cmp	r1, r3
 80029b2:	d002      	beq.n	80029ba <__sflush_r+0x92>
 80029b4:	4628      	mov	r0, r5
 80029b6:	f000 f9d5 	bl	8002d64 <_free_r>
 80029ba:	2000      	movs	r0, #0
 80029bc:	6360      	str	r0, [r4, #52]	; 0x34
 80029be:	e7c1      	b.n	8002944 <__sflush_r+0x1c>
 80029c0:	6a21      	ldr	r1, [r4, #32]
 80029c2:	2301      	movs	r3, #1
 80029c4:	4628      	mov	r0, r5
 80029c6:	47b0      	blx	r6
 80029c8:	1c41      	adds	r1, r0, #1
 80029ca:	d1c7      	bne.n	800295c <__sflush_r+0x34>
 80029cc:	682b      	ldr	r3, [r5, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0c4      	beq.n	800295c <__sflush_r+0x34>
 80029d2:	2b1d      	cmp	r3, #29
 80029d4:	d001      	beq.n	80029da <__sflush_r+0xb2>
 80029d6:	2b16      	cmp	r3, #22
 80029d8:	d101      	bne.n	80029de <__sflush_r+0xb6>
 80029da:	602f      	str	r7, [r5, #0]
 80029dc:	e7b1      	b.n	8002942 <__sflush_r+0x1a>
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e4:	81a3      	strh	r3, [r4, #12]
 80029e6:	e7ad      	b.n	8002944 <__sflush_r+0x1c>
 80029e8:	690f      	ldr	r7, [r1, #16]
 80029ea:	2f00      	cmp	r7, #0
 80029ec:	d0a9      	beq.n	8002942 <__sflush_r+0x1a>
 80029ee:	0793      	lsls	r3, r2, #30
 80029f0:	680e      	ldr	r6, [r1, #0]
 80029f2:	bf08      	it	eq
 80029f4:	694b      	ldreq	r3, [r1, #20]
 80029f6:	600f      	str	r7, [r1, #0]
 80029f8:	bf18      	it	ne
 80029fa:	2300      	movne	r3, #0
 80029fc:	eba6 0807 	sub.w	r8, r6, r7
 8002a00:	608b      	str	r3, [r1, #8]
 8002a02:	f1b8 0f00 	cmp.w	r8, #0
 8002a06:	dd9c      	ble.n	8002942 <__sflush_r+0x1a>
 8002a08:	6a21      	ldr	r1, [r4, #32]
 8002a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a0c:	4643      	mov	r3, r8
 8002a0e:	463a      	mov	r2, r7
 8002a10:	4628      	mov	r0, r5
 8002a12:	47b0      	blx	r6
 8002a14:	2800      	cmp	r0, #0
 8002a16:	dc06      	bgt.n	8002a26 <__sflush_r+0xfe>
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a1e:	81a3      	strh	r3, [r4, #12]
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a24:	e78e      	b.n	8002944 <__sflush_r+0x1c>
 8002a26:	4407      	add	r7, r0
 8002a28:	eba8 0800 	sub.w	r8, r8, r0
 8002a2c:	e7e9      	b.n	8002a02 <__sflush_r+0xda>
 8002a2e:	bf00      	nop
 8002a30:	20400001 	.word	0x20400001

08002a34 <_fflush_r>:
 8002a34:	b538      	push	{r3, r4, r5, lr}
 8002a36:	690b      	ldr	r3, [r1, #16]
 8002a38:	4605      	mov	r5, r0
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	b913      	cbnz	r3, 8002a44 <_fflush_r+0x10>
 8002a3e:	2500      	movs	r5, #0
 8002a40:	4628      	mov	r0, r5
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	b118      	cbz	r0, 8002a4e <_fflush_r+0x1a>
 8002a46:	6983      	ldr	r3, [r0, #24]
 8002a48:	b90b      	cbnz	r3, 8002a4e <_fflush_r+0x1a>
 8002a4a:	f000 f887 	bl	8002b5c <__sinit>
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <_fflush_r+0x6c>)
 8002a50:	429c      	cmp	r4, r3
 8002a52:	d11b      	bne.n	8002a8c <_fflush_r+0x58>
 8002a54:	686c      	ldr	r4, [r5, #4]
 8002a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0ef      	beq.n	8002a3e <_fflush_r+0xa>
 8002a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a60:	07d0      	lsls	r0, r2, #31
 8002a62:	d404      	bmi.n	8002a6e <_fflush_r+0x3a>
 8002a64:	0599      	lsls	r1, r3, #22
 8002a66:	d402      	bmi.n	8002a6e <_fflush_r+0x3a>
 8002a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a6a:	f000 f915 	bl	8002c98 <__retarget_lock_acquire_recursive>
 8002a6e:	4628      	mov	r0, r5
 8002a70:	4621      	mov	r1, r4
 8002a72:	f7ff ff59 	bl	8002928 <__sflush_r>
 8002a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a78:	07da      	lsls	r2, r3, #31
 8002a7a:	4605      	mov	r5, r0
 8002a7c:	d4e0      	bmi.n	8002a40 <_fflush_r+0xc>
 8002a7e:	89a3      	ldrh	r3, [r4, #12]
 8002a80:	059b      	lsls	r3, r3, #22
 8002a82:	d4dd      	bmi.n	8002a40 <_fflush_r+0xc>
 8002a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a86:	f000 f908 	bl	8002c9a <__retarget_lock_release_recursive>
 8002a8a:	e7d9      	b.n	8002a40 <_fflush_r+0xc>
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <_fflush_r+0x70>)
 8002a8e:	429c      	cmp	r4, r3
 8002a90:	d101      	bne.n	8002a96 <_fflush_r+0x62>
 8002a92:	68ac      	ldr	r4, [r5, #8]
 8002a94:	e7df      	b.n	8002a56 <_fflush_r+0x22>
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <_fflush_r+0x74>)
 8002a98:	429c      	cmp	r4, r3
 8002a9a:	bf08      	it	eq
 8002a9c:	68ec      	ldreq	r4, [r5, #12]
 8002a9e:	e7da      	b.n	8002a56 <_fflush_r+0x22>
 8002aa0:	080036c8 	.word	0x080036c8
 8002aa4:	080036e8 	.word	0x080036e8
 8002aa8:	080036a8 	.word	0x080036a8

08002aac <std>:
 8002aac:	2300      	movs	r3, #0
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002aba:	6083      	str	r3, [r0, #8]
 8002abc:	8181      	strh	r1, [r0, #12]
 8002abe:	6643      	str	r3, [r0, #100]	; 0x64
 8002ac0:	81c2      	strh	r2, [r0, #14]
 8002ac2:	6183      	str	r3, [r0, #24]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	305c      	adds	r0, #92	; 0x5c
 8002aca:	f7ff fdd7 	bl	800267c <memset>
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <std+0x38>)
 8002ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <std+0x3c>)
 8002ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <std+0x40>)
 8002ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <std+0x44>)
 8002adc:	6224      	str	r4, [r4, #32]
 8002ade:	6323      	str	r3, [r4, #48]	; 0x30
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	bf00      	nop
 8002ae4:	080034b5 	.word	0x080034b5
 8002ae8:	080034d7 	.word	0x080034d7
 8002aec:	0800350f 	.word	0x0800350f
 8002af0:	08003533 	.word	0x08003533

08002af4 <_cleanup_r>:
 8002af4:	4901      	ldr	r1, [pc, #4]	; (8002afc <_cleanup_r+0x8>)
 8002af6:	f000 b8af 	b.w	8002c58 <_fwalk_reent>
 8002afa:	bf00      	nop
 8002afc:	08002a35 	.word	0x08002a35

08002b00 <__sfmoreglue>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	1e4a      	subs	r2, r1, #1
 8002b04:	2568      	movs	r5, #104	; 0x68
 8002b06:	4355      	muls	r5, r2
 8002b08:	460e      	mov	r6, r1
 8002b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b0e:	f000 f979 	bl	8002e04 <_malloc_r>
 8002b12:	4604      	mov	r4, r0
 8002b14:	b140      	cbz	r0, 8002b28 <__sfmoreglue+0x28>
 8002b16:	2100      	movs	r1, #0
 8002b18:	e9c0 1600 	strd	r1, r6, [r0]
 8002b1c:	300c      	adds	r0, #12
 8002b1e:	60a0      	str	r0, [r4, #8]
 8002b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b24:	f7ff fdaa 	bl	800267c <memset>
 8002b28:	4620      	mov	r0, r4
 8002b2a:	bd70      	pop	{r4, r5, r6, pc}

08002b2c <__sfp_lock_acquire>:
 8002b2c:	4801      	ldr	r0, [pc, #4]	; (8002b34 <__sfp_lock_acquire+0x8>)
 8002b2e:	f000 b8b3 	b.w	8002c98 <__retarget_lock_acquire_recursive>
 8002b32:	bf00      	nop
 8002b34:	200000f8 	.word	0x200000f8

08002b38 <__sfp_lock_release>:
 8002b38:	4801      	ldr	r0, [pc, #4]	; (8002b40 <__sfp_lock_release+0x8>)
 8002b3a:	f000 b8ae 	b.w	8002c9a <__retarget_lock_release_recursive>
 8002b3e:	bf00      	nop
 8002b40:	200000f8 	.word	0x200000f8

08002b44 <__sinit_lock_acquire>:
 8002b44:	4801      	ldr	r0, [pc, #4]	; (8002b4c <__sinit_lock_acquire+0x8>)
 8002b46:	f000 b8a7 	b.w	8002c98 <__retarget_lock_acquire_recursive>
 8002b4a:	bf00      	nop
 8002b4c:	200000f3 	.word	0x200000f3

08002b50 <__sinit_lock_release>:
 8002b50:	4801      	ldr	r0, [pc, #4]	; (8002b58 <__sinit_lock_release+0x8>)
 8002b52:	f000 b8a2 	b.w	8002c9a <__retarget_lock_release_recursive>
 8002b56:	bf00      	nop
 8002b58:	200000f3 	.word	0x200000f3

08002b5c <__sinit>:
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	4604      	mov	r4, r0
 8002b60:	f7ff fff0 	bl	8002b44 <__sinit_lock_acquire>
 8002b64:	69a3      	ldr	r3, [r4, #24]
 8002b66:	b11b      	cbz	r3, 8002b70 <__sinit+0x14>
 8002b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b6c:	f7ff bff0 	b.w	8002b50 <__sinit_lock_release>
 8002b70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b74:	6523      	str	r3, [r4, #80]	; 0x50
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <__sinit+0x68>)
 8002b78:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <__sinit+0x6c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b7e:	42a3      	cmp	r3, r4
 8002b80:	bf04      	itt	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	61a3      	streq	r3, [r4, #24]
 8002b86:	4620      	mov	r0, r4
 8002b88:	f000 f820 	bl	8002bcc <__sfp>
 8002b8c:	6060      	str	r0, [r4, #4]
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f000 f81c 	bl	8002bcc <__sfp>
 8002b94:	60a0      	str	r0, [r4, #8]
 8002b96:	4620      	mov	r0, r4
 8002b98:	f000 f818 	bl	8002bcc <__sfp>
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60e0      	str	r0, [r4, #12]
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	6860      	ldr	r0, [r4, #4]
 8002ba4:	f7ff ff82 	bl	8002aac <std>
 8002ba8:	68a0      	ldr	r0, [r4, #8]
 8002baa:	2201      	movs	r2, #1
 8002bac:	2109      	movs	r1, #9
 8002bae:	f7ff ff7d 	bl	8002aac <std>
 8002bb2:	68e0      	ldr	r0, [r4, #12]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	2112      	movs	r1, #18
 8002bb8:	f7ff ff78 	bl	8002aac <std>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61a3      	str	r3, [r4, #24]
 8002bc0:	e7d2      	b.n	8002b68 <__sinit+0xc>
 8002bc2:	bf00      	nop
 8002bc4:	080036a4 	.word	0x080036a4
 8002bc8:	08002af5 	.word	0x08002af5

08002bcc <__sfp>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	4607      	mov	r7, r0
 8002bd0:	f7ff ffac 	bl	8002b2c <__sfp_lock_acquire>
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <__sfp+0x84>)
 8002bd6:	681e      	ldr	r6, [r3, #0]
 8002bd8:	69b3      	ldr	r3, [r6, #24]
 8002bda:	b913      	cbnz	r3, 8002be2 <__sfp+0x16>
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f7ff ffbd 	bl	8002b5c <__sinit>
 8002be2:	3648      	adds	r6, #72	; 0x48
 8002be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	d503      	bpl.n	8002bf4 <__sfp+0x28>
 8002bec:	6833      	ldr	r3, [r6, #0]
 8002bee:	b30b      	cbz	r3, 8002c34 <__sfp+0x68>
 8002bf0:	6836      	ldr	r6, [r6, #0]
 8002bf2:	e7f7      	b.n	8002be4 <__sfp+0x18>
 8002bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002bf8:	b9d5      	cbnz	r5, 8002c30 <__sfp+0x64>
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <__sfp+0x88>)
 8002bfc:	60e3      	str	r3, [r4, #12]
 8002bfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c02:	6665      	str	r5, [r4, #100]	; 0x64
 8002c04:	f000 f847 	bl	8002c96 <__retarget_lock_init_recursive>
 8002c08:	f7ff ff96 	bl	8002b38 <__sfp_lock_release>
 8002c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c14:	6025      	str	r5, [r4, #0]
 8002c16:	61a5      	str	r5, [r4, #24]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c20:	f7ff fd2c 	bl	800267c <memset>
 8002c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c30:	3468      	adds	r4, #104	; 0x68
 8002c32:	e7d9      	b.n	8002be8 <__sfp+0x1c>
 8002c34:	2104      	movs	r1, #4
 8002c36:	4638      	mov	r0, r7
 8002c38:	f7ff ff62 	bl	8002b00 <__sfmoreglue>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	6030      	str	r0, [r6, #0]
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d1d5      	bne.n	8002bf0 <__sfp+0x24>
 8002c44:	f7ff ff78 	bl	8002b38 <__sfp_lock_release>
 8002c48:	230c      	movs	r3, #12
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	e7ee      	b.n	8002c2c <__sfp+0x60>
 8002c4e:	bf00      	nop
 8002c50:	080036a4 	.word	0x080036a4
 8002c54:	ffff0001 	.word	0xffff0001

08002c58 <_fwalk_reent>:
 8002c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	4688      	mov	r8, r1
 8002c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c64:	2700      	movs	r7, #0
 8002c66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c6a:	f1b9 0901 	subs.w	r9, r9, #1
 8002c6e:	d505      	bpl.n	8002c7c <_fwalk_reent+0x24>
 8002c70:	6824      	ldr	r4, [r4, #0]
 8002c72:	2c00      	cmp	r4, #0
 8002c74:	d1f7      	bne.n	8002c66 <_fwalk_reent+0xe>
 8002c76:	4638      	mov	r0, r7
 8002c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c7c:	89ab      	ldrh	r3, [r5, #12]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d907      	bls.n	8002c92 <_fwalk_reent+0x3a>
 8002c82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c86:	3301      	adds	r3, #1
 8002c88:	d003      	beq.n	8002c92 <_fwalk_reent+0x3a>
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	47c0      	blx	r8
 8002c90:	4307      	orrs	r7, r0
 8002c92:	3568      	adds	r5, #104	; 0x68
 8002c94:	e7e9      	b.n	8002c6a <_fwalk_reent+0x12>

08002c96 <__retarget_lock_init_recursive>:
 8002c96:	4770      	bx	lr

08002c98 <__retarget_lock_acquire_recursive>:
 8002c98:	4770      	bx	lr

08002c9a <__retarget_lock_release_recursive>:
 8002c9a:	4770      	bx	lr

08002c9c <__swhatbuf_r>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	460e      	mov	r6, r1
 8002ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca4:	2900      	cmp	r1, #0
 8002ca6:	b096      	sub	sp, #88	; 0x58
 8002ca8:	4614      	mov	r4, r2
 8002caa:	461d      	mov	r5, r3
 8002cac:	da07      	bge.n	8002cbe <__swhatbuf_r+0x22>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	602b      	str	r3, [r5, #0]
 8002cb2:	89b3      	ldrh	r3, [r6, #12]
 8002cb4:	061a      	lsls	r2, r3, #24
 8002cb6:	d410      	bmi.n	8002cda <__swhatbuf_r+0x3e>
 8002cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbc:	e00e      	b.n	8002cdc <__swhatbuf_r+0x40>
 8002cbe:	466a      	mov	r2, sp
 8002cc0:	f000 fc5e 	bl	8003580 <_fstat_r>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	dbf2      	blt.n	8002cae <__swhatbuf_r+0x12>
 8002cc8:	9a01      	ldr	r2, [sp, #4]
 8002cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cd2:	425a      	negs	r2, r3
 8002cd4:	415a      	adcs	r2, r3
 8002cd6:	602a      	str	r2, [r5, #0]
 8002cd8:	e7ee      	b.n	8002cb8 <__swhatbuf_r+0x1c>
 8002cda:	2340      	movs	r3, #64	; 0x40
 8002cdc:	2000      	movs	r0, #0
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	b016      	add	sp, #88	; 0x58
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}

08002ce4 <__smakebuf_r>:
 8002ce4:	898b      	ldrh	r3, [r1, #12]
 8002ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ce8:	079d      	lsls	r5, r3, #30
 8002cea:	4606      	mov	r6, r0
 8002cec:	460c      	mov	r4, r1
 8002cee:	d507      	bpl.n	8002d00 <__smakebuf_r+0x1c>
 8002cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	6123      	str	r3, [r4, #16]
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	6163      	str	r3, [r4, #20]
 8002cfc:	b002      	add	sp, #8
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	ab01      	add	r3, sp, #4
 8002d02:	466a      	mov	r2, sp
 8002d04:	f7ff ffca 	bl	8002c9c <__swhatbuf_r>
 8002d08:	9900      	ldr	r1, [sp, #0]
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	f000 f879 	bl	8002e04 <_malloc_r>
 8002d12:	b948      	cbnz	r0, 8002d28 <__smakebuf_r+0x44>
 8002d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d18:	059a      	lsls	r2, r3, #22
 8002d1a:	d4ef      	bmi.n	8002cfc <__smakebuf_r+0x18>
 8002d1c:	f023 0303 	bic.w	r3, r3, #3
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	81a3      	strh	r3, [r4, #12]
 8002d26:	e7e3      	b.n	8002cf0 <__smakebuf_r+0xc>
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <__smakebuf_r+0x7c>)
 8002d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	6020      	str	r0, [r4, #0]
 8002d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d34:	81a3      	strh	r3, [r4, #12]
 8002d36:	9b00      	ldr	r3, [sp, #0]
 8002d38:	6163      	str	r3, [r4, #20]
 8002d3a:	9b01      	ldr	r3, [sp, #4]
 8002d3c:	6120      	str	r0, [r4, #16]
 8002d3e:	b15b      	cbz	r3, 8002d58 <__smakebuf_r+0x74>
 8002d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d44:	4630      	mov	r0, r6
 8002d46:	f000 fc2d 	bl	80035a4 <_isatty_r>
 8002d4a:	b128      	cbz	r0, 8002d58 <__smakebuf_r+0x74>
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	f023 0303 	bic.w	r3, r3, #3
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	81a3      	strh	r3, [r4, #12]
 8002d58:	89a0      	ldrh	r0, [r4, #12]
 8002d5a:	4305      	orrs	r5, r0
 8002d5c:	81a5      	strh	r5, [r4, #12]
 8002d5e:	e7cd      	b.n	8002cfc <__smakebuf_r+0x18>
 8002d60:	08002af5 	.word	0x08002af5

08002d64 <_free_r>:
 8002d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d66:	2900      	cmp	r1, #0
 8002d68:	d048      	beq.n	8002dfc <_free_r+0x98>
 8002d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6e:	9001      	str	r0, [sp, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f1a1 0404 	sub.w	r4, r1, #4
 8002d76:	bfb8      	it	lt
 8002d78:	18e4      	addlt	r4, r4, r3
 8002d7a:	f000 fc35 	bl	80035e8 <__malloc_lock>
 8002d7e:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <_free_r+0x9c>)
 8002d80:	9801      	ldr	r0, [sp, #4]
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	4615      	mov	r5, r2
 8002d86:	b933      	cbnz	r3, 8002d96 <_free_r+0x32>
 8002d88:	6063      	str	r3, [r4, #4]
 8002d8a:	6014      	str	r4, [r2, #0]
 8002d8c:	b003      	add	sp, #12
 8002d8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d92:	f000 bc2f 	b.w	80035f4 <__malloc_unlock>
 8002d96:	42a3      	cmp	r3, r4
 8002d98:	d90b      	bls.n	8002db2 <_free_r+0x4e>
 8002d9a:	6821      	ldr	r1, [r4, #0]
 8002d9c:	1862      	adds	r2, r4, r1
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	bf04      	itt	eq
 8002da2:	681a      	ldreq	r2, [r3, #0]
 8002da4:	685b      	ldreq	r3, [r3, #4]
 8002da6:	6063      	str	r3, [r4, #4]
 8002da8:	bf04      	itt	eq
 8002daa:	1852      	addeq	r2, r2, r1
 8002dac:	6022      	streq	r2, [r4, #0]
 8002dae:	602c      	str	r4, [r5, #0]
 8002db0:	e7ec      	b.n	8002d8c <_free_r+0x28>
 8002db2:	461a      	mov	r2, r3
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	b10b      	cbz	r3, 8002dbc <_free_r+0x58>
 8002db8:	42a3      	cmp	r3, r4
 8002dba:	d9fa      	bls.n	8002db2 <_free_r+0x4e>
 8002dbc:	6811      	ldr	r1, [r2, #0]
 8002dbe:	1855      	adds	r5, r2, r1
 8002dc0:	42a5      	cmp	r5, r4
 8002dc2:	d10b      	bne.n	8002ddc <_free_r+0x78>
 8002dc4:	6824      	ldr	r4, [r4, #0]
 8002dc6:	4421      	add	r1, r4
 8002dc8:	1854      	adds	r4, r2, r1
 8002dca:	42a3      	cmp	r3, r4
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	d1dd      	bne.n	8002d8c <_free_r+0x28>
 8002dd0:	681c      	ldr	r4, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	6053      	str	r3, [r2, #4]
 8002dd6:	4421      	add	r1, r4
 8002dd8:	6011      	str	r1, [r2, #0]
 8002dda:	e7d7      	b.n	8002d8c <_free_r+0x28>
 8002ddc:	d902      	bls.n	8002de4 <_free_r+0x80>
 8002dde:	230c      	movs	r3, #12
 8002de0:	6003      	str	r3, [r0, #0]
 8002de2:	e7d3      	b.n	8002d8c <_free_r+0x28>
 8002de4:	6825      	ldr	r5, [r4, #0]
 8002de6:	1961      	adds	r1, r4, r5
 8002de8:	428b      	cmp	r3, r1
 8002dea:	bf04      	itt	eq
 8002dec:	6819      	ldreq	r1, [r3, #0]
 8002dee:	685b      	ldreq	r3, [r3, #4]
 8002df0:	6063      	str	r3, [r4, #4]
 8002df2:	bf04      	itt	eq
 8002df4:	1949      	addeq	r1, r1, r5
 8002df6:	6021      	streq	r1, [r4, #0]
 8002df8:	6054      	str	r4, [r2, #4]
 8002dfa:	e7c7      	b.n	8002d8c <_free_r+0x28>
 8002dfc:	b003      	add	sp, #12
 8002dfe:	bd30      	pop	{r4, r5, pc}
 8002e00:	20000090 	.word	0x20000090

08002e04 <_malloc_r>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	1ccd      	adds	r5, r1, #3
 8002e08:	f025 0503 	bic.w	r5, r5, #3
 8002e0c:	3508      	adds	r5, #8
 8002e0e:	2d0c      	cmp	r5, #12
 8002e10:	bf38      	it	cc
 8002e12:	250c      	movcc	r5, #12
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	4606      	mov	r6, r0
 8002e18:	db01      	blt.n	8002e1e <_malloc_r+0x1a>
 8002e1a:	42a9      	cmp	r1, r5
 8002e1c:	d903      	bls.n	8002e26 <_malloc_r+0x22>
 8002e1e:	230c      	movs	r3, #12
 8002e20:	6033      	str	r3, [r6, #0]
 8002e22:	2000      	movs	r0, #0
 8002e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e26:	f000 fbdf 	bl	80035e8 <__malloc_lock>
 8002e2a:	4921      	ldr	r1, [pc, #132]	; (8002eb0 <_malloc_r+0xac>)
 8002e2c:	680a      	ldr	r2, [r1, #0]
 8002e2e:	4614      	mov	r4, r2
 8002e30:	b99c      	cbnz	r4, 8002e5a <_malloc_r+0x56>
 8002e32:	4f20      	ldr	r7, [pc, #128]	; (8002eb4 <_malloc_r+0xb0>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b923      	cbnz	r3, 8002e42 <_malloc_r+0x3e>
 8002e38:	4621      	mov	r1, r4
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f000 fb2a 	bl	8003494 <_sbrk_r>
 8002e40:	6038      	str	r0, [r7, #0]
 8002e42:	4629      	mov	r1, r5
 8002e44:	4630      	mov	r0, r6
 8002e46:	f000 fb25 	bl	8003494 <_sbrk_r>
 8002e4a:	1c43      	adds	r3, r0, #1
 8002e4c:	d123      	bne.n	8002e96 <_malloc_r+0x92>
 8002e4e:	230c      	movs	r3, #12
 8002e50:	6033      	str	r3, [r6, #0]
 8002e52:	4630      	mov	r0, r6
 8002e54:	f000 fbce 	bl	80035f4 <__malloc_unlock>
 8002e58:	e7e3      	b.n	8002e22 <_malloc_r+0x1e>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	1b5b      	subs	r3, r3, r5
 8002e5e:	d417      	bmi.n	8002e90 <_malloc_r+0x8c>
 8002e60:	2b0b      	cmp	r3, #11
 8002e62:	d903      	bls.n	8002e6c <_malloc_r+0x68>
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	441c      	add	r4, r3
 8002e68:	6025      	str	r5, [r4, #0]
 8002e6a:	e004      	b.n	8002e76 <_malloc_r+0x72>
 8002e6c:	6863      	ldr	r3, [r4, #4]
 8002e6e:	42a2      	cmp	r2, r4
 8002e70:	bf0c      	ite	eq
 8002e72:	600b      	streq	r3, [r1, #0]
 8002e74:	6053      	strne	r3, [r2, #4]
 8002e76:	4630      	mov	r0, r6
 8002e78:	f000 fbbc 	bl	80035f4 <__malloc_unlock>
 8002e7c:	f104 000b 	add.w	r0, r4, #11
 8002e80:	1d23      	adds	r3, r4, #4
 8002e82:	f020 0007 	bic.w	r0, r0, #7
 8002e86:	1ac2      	subs	r2, r0, r3
 8002e88:	d0cc      	beq.n	8002e24 <_malloc_r+0x20>
 8002e8a:	1a1b      	subs	r3, r3, r0
 8002e8c:	50a3      	str	r3, [r4, r2]
 8002e8e:	e7c9      	b.n	8002e24 <_malloc_r+0x20>
 8002e90:	4622      	mov	r2, r4
 8002e92:	6864      	ldr	r4, [r4, #4]
 8002e94:	e7cc      	b.n	8002e30 <_malloc_r+0x2c>
 8002e96:	1cc4      	adds	r4, r0, #3
 8002e98:	f024 0403 	bic.w	r4, r4, #3
 8002e9c:	42a0      	cmp	r0, r4
 8002e9e:	d0e3      	beq.n	8002e68 <_malloc_r+0x64>
 8002ea0:	1a21      	subs	r1, r4, r0
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f000 faf6 	bl	8003494 <_sbrk_r>
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	d1dd      	bne.n	8002e68 <_malloc_r+0x64>
 8002eac:	e7cf      	b.n	8002e4e <_malloc_r+0x4a>
 8002eae:	bf00      	nop
 8002eb0:	20000090 	.word	0x20000090
 8002eb4:	20000094 	.word	0x20000094

08002eb8 <__sfputc_r>:
 8002eb8:	6893      	ldr	r3, [r2, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	b410      	push	{r4}
 8002ec0:	6093      	str	r3, [r2, #8]
 8002ec2:	da08      	bge.n	8002ed6 <__sfputc_r+0x1e>
 8002ec4:	6994      	ldr	r4, [r2, #24]
 8002ec6:	42a3      	cmp	r3, r4
 8002ec8:	db01      	blt.n	8002ece <__sfputc_r+0x16>
 8002eca:	290a      	cmp	r1, #10
 8002ecc:	d103      	bne.n	8002ed6 <__sfputc_r+0x1e>
 8002ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ed2:	f7ff bc69 	b.w	80027a8 <__swbuf_r>
 8002ed6:	6813      	ldr	r3, [r2, #0]
 8002ed8:	1c58      	adds	r0, r3, #1
 8002eda:	6010      	str	r0, [r2, #0]
 8002edc:	7019      	strb	r1, [r3, #0]
 8002ede:	4608      	mov	r0, r1
 8002ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <__sfputs_r>:
 8002ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee8:	4606      	mov	r6, r0
 8002eea:	460f      	mov	r7, r1
 8002eec:	4614      	mov	r4, r2
 8002eee:	18d5      	adds	r5, r2, r3
 8002ef0:	42ac      	cmp	r4, r5
 8002ef2:	d101      	bne.n	8002ef8 <__sfputs_r+0x12>
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e007      	b.n	8002f08 <__sfputs_r+0x22>
 8002ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002efc:	463a      	mov	r2, r7
 8002efe:	4630      	mov	r0, r6
 8002f00:	f7ff ffda 	bl	8002eb8 <__sfputc_r>
 8002f04:	1c43      	adds	r3, r0, #1
 8002f06:	d1f3      	bne.n	8002ef0 <__sfputs_r+0xa>
 8002f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f0c <_vfiprintf_r>:
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	460d      	mov	r5, r1
 8002f12:	b09d      	sub	sp, #116	; 0x74
 8002f14:	4614      	mov	r4, r2
 8002f16:	4698      	mov	r8, r3
 8002f18:	4606      	mov	r6, r0
 8002f1a:	b118      	cbz	r0, 8002f24 <_vfiprintf_r+0x18>
 8002f1c:	6983      	ldr	r3, [r0, #24]
 8002f1e:	b90b      	cbnz	r3, 8002f24 <_vfiprintf_r+0x18>
 8002f20:	f7ff fe1c 	bl	8002b5c <__sinit>
 8002f24:	4b89      	ldr	r3, [pc, #548]	; (800314c <_vfiprintf_r+0x240>)
 8002f26:	429d      	cmp	r5, r3
 8002f28:	d11b      	bne.n	8002f62 <_vfiprintf_r+0x56>
 8002f2a:	6875      	ldr	r5, [r6, #4]
 8002f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f2e:	07d9      	lsls	r1, r3, #31
 8002f30:	d405      	bmi.n	8002f3e <_vfiprintf_r+0x32>
 8002f32:	89ab      	ldrh	r3, [r5, #12]
 8002f34:	059a      	lsls	r2, r3, #22
 8002f36:	d402      	bmi.n	8002f3e <_vfiprintf_r+0x32>
 8002f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f3a:	f7ff fead 	bl	8002c98 <__retarget_lock_acquire_recursive>
 8002f3e:	89ab      	ldrh	r3, [r5, #12]
 8002f40:	071b      	lsls	r3, r3, #28
 8002f42:	d501      	bpl.n	8002f48 <_vfiprintf_r+0x3c>
 8002f44:	692b      	ldr	r3, [r5, #16]
 8002f46:	b9eb      	cbnz	r3, 8002f84 <_vfiprintf_r+0x78>
 8002f48:	4629      	mov	r1, r5
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	f7ff fc7e 	bl	800284c <__swsetup_r>
 8002f50:	b1c0      	cbz	r0, 8002f84 <_vfiprintf_r+0x78>
 8002f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f54:	07dc      	lsls	r4, r3, #31
 8002f56:	d50e      	bpl.n	8002f76 <_vfiprintf_r+0x6a>
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f5c:	b01d      	add	sp, #116	; 0x74
 8002f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <_vfiprintf_r+0x244>)
 8002f64:	429d      	cmp	r5, r3
 8002f66:	d101      	bne.n	8002f6c <_vfiprintf_r+0x60>
 8002f68:	68b5      	ldr	r5, [r6, #8]
 8002f6a:	e7df      	b.n	8002f2c <_vfiprintf_r+0x20>
 8002f6c:	4b79      	ldr	r3, [pc, #484]	; (8003154 <_vfiprintf_r+0x248>)
 8002f6e:	429d      	cmp	r5, r3
 8002f70:	bf08      	it	eq
 8002f72:	68f5      	ldreq	r5, [r6, #12]
 8002f74:	e7da      	b.n	8002f2c <_vfiprintf_r+0x20>
 8002f76:	89ab      	ldrh	r3, [r5, #12]
 8002f78:	0598      	lsls	r0, r3, #22
 8002f7a:	d4ed      	bmi.n	8002f58 <_vfiprintf_r+0x4c>
 8002f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f7e:	f7ff fe8c 	bl	8002c9a <__retarget_lock_release_recursive>
 8002f82:	e7e9      	b.n	8002f58 <_vfiprintf_r+0x4c>
 8002f84:	2300      	movs	r3, #0
 8002f86:	9309      	str	r3, [sp, #36]	; 0x24
 8002f88:	2320      	movs	r3, #32
 8002f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f92:	2330      	movs	r3, #48	; 0x30
 8002f94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003158 <_vfiprintf_r+0x24c>
 8002f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f9c:	f04f 0901 	mov.w	r9, #1
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	469a      	mov	sl, r3
 8002fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fa8:	b10a      	cbz	r2, 8002fae <_vfiprintf_r+0xa2>
 8002faa:	2a25      	cmp	r2, #37	; 0x25
 8002fac:	d1f9      	bne.n	8002fa2 <_vfiprintf_r+0x96>
 8002fae:	ebba 0b04 	subs.w	fp, sl, r4
 8002fb2:	d00b      	beq.n	8002fcc <_vfiprintf_r+0xc0>
 8002fb4:	465b      	mov	r3, fp
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	4629      	mov	r1, r5
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f7ff ff93 	bl	8002ee6 <__sfputs_r>
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	f000 80aa 	beq.w	800311a <_vfiprintf_r+0x20e>
 8002fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fc8:	445a      	add	r2, fp
 8002fca:	9209      	str	r2, [sp, #36]	; 0x24
 8002fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a2 	beq.w	800311a <_vfiprintf_r+0x20e>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fe0:	f10a 0a01 	add.w	sl, sl, #1
 8002fe4:	9304      	str	r3, [sp, #16]
 8002fe6:	9307      	str	r3, [sp, #28]
 8002fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fec:	931a      	str	r3, [sp, #104]	; 0x68
 8002fee:	4654      	mov	r4, sl
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ff6:	4858      	ldr	r0, [pc, #352]	; (8003158 <_vfiprintf_r+0x24c>)
 8002ff8:	f7fd f912 	bl	8000220 <memchr>
 8002ffc:	9a04      	ldr	r2, [sp, #16]
 8002ffe:	b9d8      	cbnz	r0, 8003038 <_vfiprintf_r+0x12c>
 8003000:	06d1      	lsls	r1, r2, #27
 8003002:	bf44      	itt	mi
 8003004:	2320      	movmi	r3, #32
 8003006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800300a:	0713      	lsls	r3, r2, #28
 800300c:	bf44      	itt	mi
 800300e:	232b      	movmi	r3, #43	; 0x2b
 8003010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003014:	f89a 3000 	ldrb.w	r3, [sl]
 8003018:	2b2a      	cmp	r3, #42	; 0x2a
 800301a:	d015      	beq.n	8003048 <_vfiprintf_r+0x13c>
 800301c:	9a07      	ldr	r2, [sp, #28]
 800301e:	4654      	mov	r4, sl
 8003020:	2000      	movs	r0, #0
 8003022:	f04f 0c0a 	mov.w	ip, #10
 8003026:	4621      	mov	r1, r4
 8003028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800302c:	3b30      	subs	r3, #48	; 0x30
 800302e:	2b09      	cmp	r3, #9
 8003030:	d94e      	bls.n	80030d0 <_vfiprintf_r+0x1c4>
 8003032:	b1b0      	cbz	r0, 8003062 <_vfiprintf_r+0x156>
 8003034:	9207      	str	r2, [sp, #28]
 8003036:	e014      	b.n	8003062 <_vfiprintf_r+0x156>
 8003038:	eba0 0308 	sub.w	r3, r0, r8
 800303c:	fa09 f303 	lsl.w	r3, r9, r3
 8003040:	4313      	orrs	r3, r2
 8003042:	9304      	str	r3, [sp, #16]
 8003044:	46a2      	mov	sl, r4
 8003046:	e7d2      	b.n	8002fee <_vfiprintf_r+0xe2>
 8003048:	9b03      	ldr	r3, [sp, #12]
 800304a:	1d19      	adds	r1, r3, #4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	9103      	str	r1, [sp, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	bfbb      	ittet	lt
 8003054:	425b      	neglt	r3, r3
 8003056:	f042 0202 	orrlt.w	r2, r2, #2
 800305a:	9307      	strge	r3, [sp, #28]
 800305c:	9307      	strlt	r3, [sp, #28]
 800305e:	bfb8      	it	lt
 8003060:	9204      	strlt	r2, [sp, #16]
 8003062:	7823      	ldrb	r3, [r4, #0]
 8003064:	2b2e      	cmp	r3, #46	; 0x2e
 8003066:	d10c      	bne.n	8003082 <_vfiprintf_r+0x176>
 8003068:	7863      	ldrb	r3, [r4, #1]
 800306a:	2b2a      	cmp	r3, #42	; 0x2a
 800306c:	d135      	bne.n	80030da <_vfiprintf_r+0x1ce>
 800306e:	9b03      	ldr	r3, [sp, #12]
 8003070:	1d1a      	adds	r2, r3, #4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	9203      	str	r2, [sp, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	bfb8      	it	lt
 800307a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800307e:	3402      	adds	r4, #2
 8003080:	9305      	str	r3, [sp, #20]
 8003082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003168 <_vfiprintf_r+0x25c>
 8003086:	7821      	ldrb	r1, [r4, #0]
 8003088:	2203      	movs	r2, #3
 800308a:	4650      	mov	r0, sl
 800308c:	f7fd f8c8 	bl	8000220 <memchr>
 8003090:	b140      	cbz	r0, 80030a4 <_vfiprintf_r+0x198>
 8003092:	2340      	movs	r3, #64	; 0x40
 8003094:	eba0 000a 	sub.w	r0, r0, sl
 8003098:	fa03 f000 	lsl.w	r0, r3, r0
 800309c:	9b04      	ldr	r3, [sp, #16]
 800309e:	4303      	orrs	r3, r0
 80030a0:	3401      	adds	r4, #1
 80030a2:	9304      	str	r3, [sp, #16]
 80030a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030a8:	482c      	ldr	r0, [pc, #176]	; (800315c <_vfiprintf_r+0x250>)
 80030aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030ae:	2206      	movs	r2, #6
 80030b0:	f7fd f8b6 	bl	8000220 <memchr>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d03f      	beq.n	8003138 <_vfiprintf_r+0x22c>
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <_vfiprintf_r+0x254>)
 80030ba:	bb1b      	cbnz	r3, 8003104 <_vfiprintf_r+0x1f8>
 80030bc:	9b03      	ldr	r3, [sp, #12]
 80030be:	3307      	adds	r3, #7
 80030c0:	f023 0307 	bic.w	r3, r3, #7
 80030c4:	3308      	adds	r3, #8
 80030c6:	9303      	str	r3, [sp, #12]
 80030c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030ca:	443b      	add	r3, r7
 80030cc:	9309      	str	r3, [sp, #36]	; 0x24
 80030ce:	e767      	b.n	8002fa0 <_vfiprintf_r+0x94>
 80030d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80030d4:	460c      	mov	r4, r1
 80030d6:	2001      	movs	r0, #1
 80030d8:	e7a5      	b.n	8003026 <_vfiprintf_r+0x11a>
 80030da:	2300      	movs	r3, #0
 80030dc:	3401      	adds	r4, #1
 80030de:	9305      	str	r3, [sp, #20]
 80030e0:	4619      	mov	r1, r3
 80030e2:	f04f 0c0a 	mov.w	ip, #10
 80030e6:	4620      	mov	r0, r4
 80030e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030ec:	3a30      	subs	r2, #48	; 0x30
 80030ee:	2a09      	cmp	r2, #9
 80030f0:	d903      	bls.n	80030fa <_vfiprintf_r+0x1ee>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0c5      	beq.n	8003082 <_vfiprintf_r+0x176>
 80030f6:	9105      	str	r1, [sp, #20]
 80030f8:	e7c3      	b.n	8003082 <_vfiprintf_r+0x176>
 80030fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80030fe:	4604      	mov	r4, r0
 8003100:	2301      	movs	r3, #1
 8003102:	e7f0      	b.n	80030e6 <_vfiprintf_r+0x1da>
 8003104:	ab03      	add	r3, sp, #12
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	462a      	mov	r2, r5
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <_vfiprintf_r+0x258>)
 800310c:	a904      	add	r1, sp, #16
 800310e:	4630      	mov	r0, r6
 8003110:	f3af 8000 	nop.w
 8003114:	4607      	mov	r7, r0
 8003116:	1c78      	adds	r0, r7, #1
 8003118:	d1d6      	bne.n	80030c8 <_vfiprintf_r+0x1bc>
 800311a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800311c:	07d9      	lsls	r1, r3, #31
 800311e:	d405      	bmi.n	800312c <_vfiprintf_r+0x220>
 8003120:	89ab      	ldrh	r3, [r5, #12]
 8003122:	059a      	lsls	r2, r3, #22
 8003124:	d402      	bmi.n	800312c <_vfiprintf_r+0x220>
 8003126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003128:	f7ff fdb7 	bl	8002c9a <__retarget_lock_release_recursive>
 800312c:	89ab      	ldrh	r3, [r5, #12]
 800312e:	065b      	lsls	r3, r3, #25
 8003130:	f53f af12 	bmi.w	8002f58 <_vfiprintf_r+0x4c>
 8003134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003136:	e711      	b.n	8002f5c <_vfiprintf_r+0x50>
 8003138:	ab03      	add	r3, sp, #12
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	462a      	mov	r2, r5
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <_vfiprintf_r+0x258>)
 8003140:	a904      	add	r1, sp, #16
 8003142:	4630      	mov	r0, r6
 8003144:	f000 f880 	bl	8003248 <_printf_i>
 8003148:	e7e4      	b.n	8003114 <_vfiprintf_r+0x208>
 800314a:	bf00      	nop
 800314c:	080036c8 	.word	0x080036c8
 8003150:	080036e8 	.word	0x080036e8
 8003154:	080036a8 	.word	0x080036a8
 8003158:	08003708 	.word	0x08003708
 800315c:	08003712 	.word	0x08003712
 8003160:	00000000 	.word	0x00000000
 8003164:	08002ee7 	.word	0x08002ee7
 8003168:	0800370e 	.word	0x0800370e

0800316c <_printf_common>:
 800316c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003170:	4616      	mov	r6, r2
 8003172:	4699      	mov	r9, r3
 8003174:	688a      	ldr	r2, [r1, #8]
 8003176:	690b      	ldr	r3, [r1, #16]
 8003178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800317c:	4293      	cmp	r3, r2
 800317e:	bfb8      	it	lt
 8003180:	4613      	movlt	r3, r2
 8003182:	6033      	str	r3, [r6, #0]
 8003184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003188:	4607      	mov	r7, r0
 800318a:	460c      	mov	r4, r1
 800318c:	b10a      	cbz	r2, 8003192 <_printf_common+0x26>
 800318e:	3301      	adds	r3, #1
 8003190:	6033      	str	r3, [r6, #0]
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	0699      	lsls	r1, r3, #26
 8003196:	bf42      	ittt	mi
 8003198:	6833      	ldrmi	r3, [r6, #0]
 800319a:	3302      	addmi	r3, #2
 800319c:	6033      	strmi	r3, [r6, #0]
 800319e:	6825      	ldr	r5, [r4, #0]
 80031a0:	f015 0506 	ands.w	r5, r5, #6
 80031a4:	d106      	bne.n	80031b4 <_printf_common+0x48>
 80031a6:	f104 0a19 	add.w	sl, r4, #25
 80031aa:	68e3      	ldr	r3, [r4, #12]
 80031ac:	6832      	ldr	r2, [r6, #0]
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	42ab      	cmp	r3, r5
 80031b2:	dc26      	bgt.n	8003202 <_printf_common+0x96>
 80031b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031b8:	1e13      	subs	r3, r2, #0
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	bf18      	it	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	0692      	lsls	r2, r2, #26
 80031c2:	d42b      	bmi.n	800321c <_printf_common+0xb0>
 80031c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031c8:	4649      	mov	r1, r9
 80031ca:	4638      	mov	r0, r7
 80031cc:	47c0      	blx	r8
 80031ce:	3001      	adds	r0, #1
 80031d0:	d01e      	beq.n	8003210 <_printf_common+0xa4>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	68e5      	ldr	r5, [r4, #12]
 80031d6:	6832      	ldr	r2, [r6, #0]
 80031d8:	f003 0306 	and.w	r3, r3, #6
 80031dc:	2b04      	cmp	r3, #4
 80031de:	bf08      	it	eq
 80031e0:	1aad      	subeq	r5, r5, r2
 80031e2:	68a3      	ldr	r3, [r4, #8]
 80031e4:	6922      	ldr	r2, [r4, #16]
 80031e6:	bf0c      	ite	eq
 80031e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031ec:	2500      	movne	r5, #0
 80031ee:	4293      	cmp	r3, r2
 80031f0:	bfc4      	itt	gt
 80031f2:	1a9b      	subgt	r3, r3, r2
 80031f4:	18ed      	addgt	r5, r5, r3
 80031f6:	2600      	movs	r6, #0
 80031f8:	341a      	adds	r4, #26
 80031fa:	42b5      	cmp	r5, r6
 80031fc:	d11a      	bne.n	8003234 <_printf_common+0xc8>
 80031fe:	2000      	movs	r0, #0
 8003200:	e008      	b.n	8003214 <_printf_common+0xa8>
 8003202:	2301      	movs	r3, #1
 8003204:	4652      	mov	r2, sl
 8003206:	4649      	mov	r1, r9
 8003208:	4638      	mov	r0, r7
 800320a:	47c0      	blx	r8
 800320c:	3001      	adds	r0, #1
 800320e:	d103      	bne.n	8003218 <_printf_common+0xac>
 8003210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003218:	3501      	adds	r5, #1
 800321a:	e7c6      	b.n	80031aa <_printf_common+0x3e>
 800321c:	18e1      	adds	r1, r4, r3
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	2030      	movs	r0, #48	; 0x30
 8003222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003226:	4422      	add	r2, r4
 8003228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800322c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003230:	3302      	adds	r3, #2
 8003232:	e7c7      	b.n	80031c4 <_printf_common+0x58>
 8003234:	2301      	movs	r3, #1
 8003236:	4622      	mov	r2, r4
 8003238:	4649      	mov	r1, r9
 800323a:	4638      	mov	r0, r7
 800323c:	47c0      	blx	r8
 800323e:	3001      	adds	r0, #1
 8003240:	d0e6      	beq.n	8003210 <_printf_common+0xa4>
 8003242:	3601      	adds	r6, #1
 8003244:	e7d9      	b.n	80031fa <_printf_common+0x8e>
	...

08003248 <_printf_i>:
 8003248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800324c:	460c      	mov	r4, r1
 800324e:	4691      	mov	r9, r2
 8003250:	7e27      	ldrb	r7, [r4, #24]
 8003252:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003254:	2f78      	cmp	r7, #120	; 0x78
 8003256:	4680      	mov	r8, r0
 8003258:	469a      	mov	sl, r3
 800325a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800325e:	d807      	bhi.n	8003270 <_printf_i+0x28>
 8003260:	2f62      	cmp	r7, #98	; 0x62
 8003262:	d80a      	bhi.n	800327a <_printf_i+0x32>
 8003264:	2f00      	cmp	r7, #0
 8003266:	f000 80d8 	beq.w	800341a <_printf_i+0x1d2>
 800326a:	2f58      	cmp	r7, #88	; 0x58
 800326c:	f000 80a3 	beq.w	80033b6 <_printf_i+0x16e>
 8003270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003278:	e03a      	b.n	80032f0 <_printf_i+0xa8>
 800327a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800327e:	2b15      	cmp	r3, #21
 8003280:	d8f6      	bhi.n	8003270 <_printf_i+0x28>
 8003282:	a001      	add	r0, pc, #4	; (adr r0, 8003288 <_printf_i+0x40>)
 8003284:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003288:	080032e1 	.word	0x080032e1
 800328c:	080032f5 	.word	0x080032f5
 8003290:	08003271 	.word	0x08003271
 8003294:	08003271 	.word	0x08003271
 8003298:	08003271 	.word	0x08003271
 800329c:	08003271 	.word	0x08003271
 80032a0:	080032f5 	.word	0x080032f5
 80032a4:	08003271 	.word	0x08003271
 80032a8:	08003271 	.word	0x08003271
 80032ac:	08003271 	.word	0x08003271
 80032b0:	08003271 	.word	0x08003271
 80032b4:	08003401 	.word	0x08003401
 80032b8:	08003325 	.word	0x08003325
 80032bc:	080033e3 	.word	0x080033e3
 80032c0:	08003271 	.word	0x08003271
 80032c4:	08003271 	.word	0x08003271
 80032c8:	08003423 	.word	0x08003423
 80032cc:	08003271 	.word	0x08003271
 80032d0:	08003325 	.word	0x08003325
 80032d4:	08003271 	.word	0x08003271
 80032d8:	08003271 	.word	0x08003271
 80032dc:	080033eb 	.word	0x080033eb
 80032e0:	680b      	ldr	r3, [r1, #0]
 80032e2:	1d1a      	adds	r2, r3, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	600a      	str	r2, [r1, #0]
 80032e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0a3      	b.n	800343c <_printf_i+0x1f4>
 80032f4:	6825      	ldr	r5, [r4, #0]
 80032f6:	6808      	ldr	r0, [r1, #0]
 80032f8:	062e      	lsls	r6, r5, #24
 80032fa:	f100 0304 	add.w	r3, r0, #4
 80032fe:	d50a      	bpl.n	8003316 <_printf_i+0xce>
 8003300:	6805      	ldr	r5, [r0, #0]
 8003302:	600b      	str	r3, [r1, #0]
 8003304:	2d00      	cmp	r5, #0
 8003306:	da03      	bge.n	8003310 <_printf_i+0xc8>
 8003308:	232d      	movs	r3, #45	; 0x2d
 800330a:	426d      	negs	r5, r5
 800330c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003310:	485e      	ldr	r0, [pc, #376]	; (800348c <_printf_i+0x244>)
 8003312:	230a      	movs	r3, #10
 8003314:	e019      	b.n	800334a <_printf_i+0x102>
 8003316:	f015 0f40 	tst.w	r5, #64	; 0x40
 800331a:	6805      	ldr	r5, [r0, #0]
 800331c:	600b      	str	r3, [r1, #0]
 800331e:	bf18      	it	ne
 8003320:	b22d      	sxthne	r5, r5
 8003322:	e7ef      	b.n	8003304 <_printf_i+0xbc>
 8003324:	680b      	ldr	r3, [r1, #0]
 8003326:	6825      	ldr	r5, [r4, #0]
 8003328:	1d18      	adds	r0, r3, #4
 800332a:	6008      	str	r0, [r1, #0]
 800332c:	0628      	lsls	r0, r5, #24
 800332e:	d501      	bpl.n	8003334 <_printf_i+0xec>
 8003330:	681d      	ldr	r5, [r3, #0]
 8003332:	e002      	b.n	800333a <_printf_i+0xf2>
 8003334:	0669      	lsls	r1, r5, #25
 8003336:	d5fb      	bpl.n	8003330 <_printf_i+0xe8>
 8003338:	881d      	ldrh	r5, [r3, #0]
 800333a:	4854      	ldr	r0, [pc, #336]	; (800348c <_printf_i+0x244>)
 800333c:	2f6f      	cmp	r7, #111	; 0x6f
 800333e:	bf0c      	ite	eq
 8003340:	2308      	moveq	r3, #8
 8003342:	230a      	movne	r3, #10
 8003344:	2100      	movs	r1, #0
 8003346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800334a:	6866      	ldr	r6, [r4, #4]
 800334c:	60a6      	str	r6, [r4, #8]
 800334e:	2e00      	cmp	r6, #0
 8003350:	bfa2      	ittt	ge
 8003352:	6821      	ldrge	r1, [r4, #0]
 8003354:	f021 0104 	bicge.w	r1, r1, #4
 8003358:	6021      	strge	r1, [r4, #0]
 800335a:	b90d      	cbnz	r5, 8003360 <_printf_i+0x118>
 800335c:	2e00      	cmp	r6, #0
 800335e:	d04d      	beq.n	80033fc <_printf_i+0x1b4>
 8003360:	4616      	mov	r6, r2
 8003362:	fbb5 f1f3 	udiv	r1, r5, r3
 8003366:	fb03 5711 	mls	r7, r3, r1, r5
 800336a:	5dc7      	ldrb	r7, [r0, r7]
 800336c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003370:	462f      	mov	r7, r5
 8003372:	42bb      	cmp	r3, r7
 8003374:	460d      	mov	r5, r1
 8003376:	d9f4      	bls.n	8003362 <_printf_i+0x11a>
 8003378:	2b08      	cmp	r3, #8
 800337a:	d10b      	bne.n	8003394 <_printf_i+0x14c>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	07df      	lsls	r7, r3, #31
 8003380:	d508      	bpl.n	8003394 <_printf_i+0x14c>
 8003382:	6923      	ldr	r3, [r4, #16]
 8003384:	6861      	ldr	r1, [r4, #4]
 8003386:	4299      	cmp	r1, r3
 8003388:	bfde      	ittt	le
 800338a:	2330      	movle	r3, #48	; 0x30
 800338c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003390:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003394:	1b92      	subs	r2, r2, r6
 8003396:	6122      	str	r2, [r4, #16]
 8003398:	f8cd a000 	str.w	sl, [sp]
 800339c:	464b      	mov	r3, r9
 800339e:	aa03      	add	r2, sp, #12
 80033a0:	4621      	mov	r1, r4
 80033a2:	4640      	mov	r0, r8
 80033a4:	f7ff fee2 	bl	800316c <_printf_common>
 80033a8:	3001      	adds	r0, #1
 80033aa:	d14c      	bne.n	8003446 <_printf_i+0x1fe>
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033b0:	b004      	add	sp, #16
 80033b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b6:	4835      	ldr	r0, [pc, #212]	; (800348c <_printf_i+0x244>)
 80033b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	680e      	ldr	r6, [r1, #0]
 80033c0:	061f      	lsls	r7, r3, #24
 80033c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80033c6:	600e      	str	r6, [r1, #0]
 80033c8:	d514      	bpl.n	80033f4 <_printf_i+0x1ac>
 80033ca:	07d9      	lsls	r1, r3, #31
 80033cc:	bf44      	itt	mi
 80033ce:	f043 0320 	orrmi.w	r3, r3, #32
 80033d2:	6023      	strmi	r3, [r4, #0]
 80033d4:	b91d      	cbnz	r5, 80033de <_printf_i+0x196>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	f023 0320 	bic.w	r3, r3, #32
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	2310      	movs	r3, #16
 80033e0:	e7b0      	b.n	8003344 <_printf_i+0xfc>
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	f043 0320 	orr.w	r3, r3, #32
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	2378      	movs	r3, #120	; 0x78
 80033ec:	4828      	ldr	r0, [pc, #160]	; (8003490 <_printf_i+0x248>)
 80033ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033f2:	e7e3      	b.n	80033bc <_printf_i+0x174>
 80033f4:	065e      	lsls	r6, r3, #25
 80033f6:	bf48      	it	mi
 80033f8:	b2ad      	uxthmi	r5, r5
 80033fa:	e7e6      	b.n	80033ca <_printf_i+0x182>
 80033fc:	4616      	mov	r6, r2
 80033fe:	e7bb      	b.n	8003378 <_printf_i+0x130>
 8003400:	680b      	ldr	r3, [r1, #0]
 8003402:	6826      	ldr	r6, [r4, #0]
 8003404:	6960      	ldr	r0, [r4, #20]
 8003406:	1d1d      	adds	r5, r3, #4
 8003408:	600d      	str	r5, [r1, #0]
 800340a:	0635      	lsls	r5, r6, #24
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	d501      	bpl.n	8003414 <_printf_i+0x1cc>
 8003410:	6018      	str	r0, [r3, #0]
 8003412:	e002      	b.n	800341a <_printf_i+0x1d2>
 8003414:	0671      	lsls	r1, r6, #25
 8003416:	d5fb      	bpl.n	8003410 <_printf_i+0x1c8>
 8003418:	8018      	strh	r0, [r3, #0]
 800341a:	2300      	movs	r3, #0
 800341c:	6123      	str	r3, [r4, #16]
 800341e:	4616      	mov	r6, r2
 8003420:	e7ba      	b.n	8003398 <_printf_i+0x150>
 8003422:	680b      	ldr	r3, [r1, #0]
 8003424:	1d1a      	adds	r2, r3, #4
 8003426:	600a      	str	r2, [r1, #0]
 8003428:	681e      	ldr	r6, [r3, #0]
 800342a:	6862      	ldr	r2, [r4, #4]
 800342c:	2100      	movs	r1, #0
 800342e:	4630      	mov	r0, r6
 8003430:	f7fc fef6 	bl	8000220 <memchr>
 8003434:	b108      	cbz	r0, 800343a <_printf_i+0x1f2>
 8003436:	1b80      	subs	r0, r0, r6
 8003438:	6060      	str	r0, [r4, #4]
 800343a:	6863      	ldr	r3, [r4, #4]
 800343c:	6123      	str	r3, [r4, #16]
 800343e:	2300      	movs	r3, #0
 8003440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003444:	e7a8      	b.n	8003398 <_printf_i+0x150>
 8003446:	6923      	ldr	r3, [r4, #16]
 8003448:	4632      	mov	r2, r6
 800344a:	4649      	mov	r1, r9
 800344c:	4640      	mov	r0, r8
 800344e:	47d0      	blx	sl
 8003450:	3001      	adds	r0, #1
 8003452:	d0ab      	beq.n	80033ac <_printf_i+0x164>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	079b      	lsls	r3, r3, #30
 8003458:	d413      	bmi.n	8003482 <_printf_i+0x23a>
 800345a:	68e0      	ldr	r0, [r4, #12]
 800345c:	9b03      	ldr	r3, [sp, #12]
 800345e:	4298      	cmp	r0, r3
 8003460:	bfb8      	it	lt
 8003462:	4618      	movlt	r0, r3
 8003464:	e7a4      	b.n	80033b0 <_printf_i+0x168>
 8003466:	2301      	movs	r3, #1
 8003468:	4632      	mov	r2, r6
 800346a:	4649      	mov	r1, r9
 800346c:	4640      	mov	r0, r8
 800346e:	47d0      	blx	sl
 8003470:	3001      	adds	r0, #1
 8003472:	d09b      	beq.n	80033ac <_printf_i+0x164>
 8003474:	3501      	adds	r5, #1
 8003476:	68e3      	ldr	r3, [r4, #12]
 8003478:	9903      	ldr	r1, [sp, #12]
 800347a:	1a5b      	subs	r3, r3, r1
 800347c:	42ab      	cmp	r3, r5
 800347e:	dcf2      	bgt.n	8003466 <_printf_i+0x21e>
 8003480:	e7eb      	b.n	800345a <_printf_i+0x212>
 8003482:	2500      	movs	r5, #0
 8003484:	f104 0619 	add.w	r6, r4, #25
 8003488:	e7f5      	b.n	8003476 <_printf_i+0x22e>
 800348a:	bf00      	nop
 800348c:	08003719 	.word	0x08003719
 8003490:	0800372a 	.word	0x0800372a

08003494 <_sbrk_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4d06      	ldr	r5, [pc, #24]	; (80034b0 <_sbrk_r+0x1c>)
 8003498:	2300      	movs	r3, #0
 800349a:	4604      	mov	r4, r0
 800349c:	4608      	mov	r0, r1
 800349e:	602b      	str	r3, [r5, #0]
 80034a0:	f7fd f930 	bl	8000704 <_sbrk>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d102      	bne.n	80034ae <_sbrk_r+0x1a>
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	b103      	cbz	r3, 80034ae <_sbrk_r+0x1a>
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	200000fc 	.word	0x200000fc

080034b4 <__sread>:
 80034b4:	b510      	push	{r4, lr}
 80034b6:	460c      	mov	r4, r1
 80034b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034bc:	f000 f8a0 	bl	8003600 <_read_r>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	bfab      	itete	ge
 80034c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034c6:	89a3      	ldrhlt	r3, [r4, #12]
 80034c8:	181b      	addge	r3, r3, r0
 80034ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034ce:	bfac      	ite	ge
 80034d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80034d2:	81a3      	strhlt	r3, [r4, #12]
 80034d4:	bd10      	pop	{r4, pc}

080034d6 <__swrite>:
 80034d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034da:	461f      	mov	r7, r3
 80034dc:	898b      	ldrh	r3, [r1, #12]
 80034de:	05db      	lsls	r3, r3, #23
 80034e0:	4605      	mov	r5, r0
 80034e2:	460c      	mov	r4, r1
 80034e4:	4616      	mov	r6, r2
 80034e6:	d505      	bpl.n	80034f4 <__swrite+0x1e>
 80034e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ec:	2302      	movs	r3, #2
 80034ee:	2200      	movs	r2, #0
 80034f0:	f000 f868 	bl	80035c4 <_lseek_r>
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034fe:	81a3      	strh	r3, [r4, #12]
 8003500:	4632      	mov	r2, r6
 8003502:	463b      	mov	r3, r7
 8003504:	4628      	mov	r0, r5
 8003506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800350a:	f000 b817 	b.w	800353c <_write_r>

0800350e <__sseek>:
 800350e:	b510      	push	{r4, lr}
 8003510:	460c      	mov	r4, r1
 8003512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003516:	f000 f855 	bl	80035c4 <_lseek_r>
 800351a:	1c43      	adds	r3, r0, #1
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	bf15      	itete	ne
 8003520:	6560      	strne	r0, [r4, #84]	; 0x54
 8003522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800352a:	81a3      	strheq	r3, [r4, #12]
 800352c:	bf18      	it	ne
 800352e:	81a3      	strhne	r3, [r4, #12]
 8003530:	bd10      	pop	{r4, pc}

08003532 <__sclose>:
 8003532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003536:	f000 b813 	b.w	8003560 <_close_r>
	...

0800353c <_write_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	4d07      	ldr	r5, [pc, #28]	; (800355c <_write_r+0x20>)
 8003540:	4604      	mov	r4, r0
 8003542:	4608      	mov	r0, r1
 8003544:	4611      	mov	r1, r2
 8003546:	2200      	movs	r2, #0
 8003548:	602a      	str	r2, [r5, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	f7fc ff5f 	bl	800040e <_write>
 8003550:	1c43      	adds	r3, r0, #1
 8003552:	d102      	bne.n	800355a <_write_r+0x1e>
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	b103      	cbz	r3, 800355a <_write_r+0x1e>
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	bd38      	pop	{r3, r4, r5, pc}
 800355c:	200000fc 	.word	0x200000fc

08003560 <_close_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4d06      	ldr	r5, [pc, #24]	; (800357c <_close_r+0x1c>)
 8003564:	2300      	movs	r3, #0
 8003566:	4604      	mov	r4, r0
 8003568:	4608      	mov	r0, r1
 800356a:	602b      	str	r3, [r5, #0]
 800356c:	f7fd f895 	bl	800069a <_close>
 8003570:	1c43      	adds	r3, r0, #1
 8003572:	d102      	bne.n	800357a <_close_r+0x1a>
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	b103      	cbz	r3, 800357a <_close_r+0x1a>
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	bd38      	pop	{r3, r4, r5, pc}
 800357c:	200000fc 	.word	0x200000fc

08003580 <_fstat_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	4d07      	ldr	r5, [pc, #28]	; (80035a0 <_fstat_r+0x20>)
 8003584:	2300      	movs	r3, #0
 8003586:	4604      	mov	r4, r0
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	602b      	str	r3, [r5, #0]
 800358e:	f7fd f890 	bl	80006b2 <_fstat>
 8003592:	1c43      	adds	r3, r0, #1
 8003594:	d102      	bne.n	800359c <_fstat_r+0x1c>
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	b103      	cbz	r3, 800359c <_fstat_r+0x1c>
 800359a:	6023      	str	r3, [r4, #0]
 800359c:	bd38      	pop	{r3, r4, r5, pc}
 800359e:	bf00      	nop
 80035a0:	200000fc 	.word	0x200000fc

080035a4 <_isatty_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4d06      	ldr	r5, [pc, #24]	; (80035c0 <_isatty_r+0x1c>)
 80035a8:	2300      	movs	r3, #0
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	602b      	str	r3, [r5, #0]
 80035b0:	f7fd f88f 	bl	80006d2 <_isatty>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d102      	bne.n	80035be <_isatty_r+0x1a>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b103      	cbz	r3, 80035be <_isatty_r+0x1a>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	200000fc 	.word	0x200000fc

080035c4 <_lseek_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4d07      	ldr	r5, [pc, #28]	; (80035e4 <_lseek_r+0x20>)
 80035c8:	4604      	mov	r4, r0
 80035ca:	4608      	mov	r0, r1
 80035cc:	4611      	mov	r1, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	602a      	str	r2, [r5, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f7fd f888 	bl	80006e8 <_lseek>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d102      	bne.n	80035e2 <_lseek_r+0x1e>
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	b103      	cbz	r3, 80035e2 <_lseek_r+0x1e>
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	200000fc 	.word	0x200000fc

080035e8 <__malloc_lock>:
 80035e8:	4801      	ldr	r0, [pc, #4]	; (80035f0 <__malloc_lock+0x8>)
 80035ea:	f7ff bb55 	b.w	8002c98 <__retarget_lock_acquire_recursive>
 80035ee:	bf00      	nop
 80035f0:	200000f4 	.word	0x200000f4

080035f4 <__malloc_unlock>:
 80035f4:	4801      	ldr	r0, [pc, #4]	; (80035fc <__malloc_unlock+0x8>)
 80035f6:	f7ff bb50 	b.w	8002c9a <__retarget_lock_release_recursive>
 80035fa:	bf00      	nop
 80035fc:	200000f4 	.word	0x200000f4

08003600 <_read_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4d07      	ldr	r5, [pc, #28]	; (8003620 <_read_r+0x20>)
 8003604:	4604      	mov	r4, r0
 8003606:	4608      	mov	r0, r1
 8003608:	4611      	mov	r1, r2
 800360a:	2200      	movs	r2, #0
 800360c:	602a      	str	r2, [r5, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	f7fd f826 	bl	8000660 <_read>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_read_r+0x1e>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_read_r+0x1e>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	200000fc 	.word	0x200000fc

08003624 <_init>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	bf00      	nop
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr

08003630 <_fini>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	bf00      	nop
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr
