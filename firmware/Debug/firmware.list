
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08008fd0  08008fd0  00018fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800955c  0800955c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800955c  0800955c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800955c  0800955c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009560  08009560  00019560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001dc  08009740  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08009740  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022441  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a56  00000000  00000000  0004264d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  000460a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  000476b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae5c  00000000  00000000  00048b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a958  00000000  00000000  0007398c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f001  00000000  00000000  0008e2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019d2e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e44  00000000  00000000  0019d338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008fb4 	.word	0x08008fb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08008fb4 	.word	0x08008fb4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	; 0x30
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f005 fc15 	bl	8006440 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c40:	2208      	movs	r2, #8
 8000c42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c80:	4819      	ldr	r0, [pc, #100]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c82:	f001 fca3 	bl	80025cc <HAL_ADC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c8c:	f000 fdce 	bl	800182c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000c90:	2306      	movs	r3, #6
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000ca4:	f003 f8ea 	bl	8003e7c <HAL_ADCEx_MultiModeConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000cae:	f000 fdbd 	bl	800182c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_ADC1_Init+0xf4>)
 8000cb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cbe:	237f      	movs	r3, #127	; 0x7f
 8000cc0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000cd0:	f002 faec 	bl	80032ac <HAL_ADC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000cda:	f000 fda7 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	; 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200002e0 	.word	0x200002e0
 8000cec:	21800100 	.word	0x21800100

08000cf0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f005 fb9f 	bl	8006440 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d04:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <MX_ADC2_Init+0xb8>)
 8000d06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d5e:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d60:	f001 fc34 	bl	80025cc <HAL_ADC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d6a:	f000 fd5f 	bl	800182c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_ADC2_Init+0xbc>)
 8000d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d72:	2306      	movs	r3, #6
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7a:	237f      	movs	r3, #127	; 0x7f
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_ADC2_Init+0xb4>)
 8000d8c:	f002 fa8e 	bl	80032ac <HAL_ADC_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d96:	f000 fd49 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000208 	.word	0x20000208
 8000da8:	50000100 	.word	0x50000100
 8000dac:	25b00200 	.word	0x25b00200

08000db0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2220      	movs	r2, #32
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f005 fb3f 	bl	8006440 <memset>
  /* USER CODE BEGIN ADC5_Init 1 */

  /* USER CODE END ADC5_Init 1 */
  /** Common config
  */
  hadc5.Instance = ADC5;
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000dc4:	4a2b      	ldr	r2, [pc, #172]	; (8000e74 <MX_ADC5_Init+0xc4>)
 8000dc6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dce:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd0:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000e2a:	4811      	ldr	r0, [pc, #68]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000e2c:	f001 fbce 	bl	80025cc <HAL_ADC_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000e36:	f000 fcf9 	bl	800182c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_ADC5_Init+0xc8>)
 8000e3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e3e:	2306      	movs	r3, #6
 8000e40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e42:	2307      	movs	r3, #7
 8000e44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e46:	237f      	movs	r3, #127	; 0x7f
 8000e48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_ADC5_Init+0xc0>)
 8000e58:	f002 fa28 	bl	80032ac <HAL_ADC_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000e62:	f000 fce3 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000274 	.word	0x20000274
 8000e74:	50000600 	.word	0x50000600
 8000e78:	90c00010 	.word	0x90c00010

08000e7c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e9c:	d135      	bne.n	8000f0a <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e9e:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <HAL_ADC_MspInit+0x140>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4a45      	ldr	r2, [pc, #276]	; (8000fbc <HAL_ADC_MspInit+0x140>)
 8000ea6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ea8:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <HAL_ADC_MspInit+0x140>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d10b      	bne.n	8000ec8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a42      	ldr	r2, [pc, #264]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000eb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec8:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	4a3c      	ldr	r2, [pc, #240]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = CELL_1_VOLTAGE_Pin;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CELL_1_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4834      	ldr	r0, [pc, #208]	; (8000fc4 <HAL_ADC_MspInit+0x148>)
 8000ef4:	f003 f9da 	bl	80042ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2012      	movs	r0, #18
 8000efe:	f003 f9a0 	bl	8004242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f02:	2012      	movs	r0, #18
 8000f04:	f003 f9b7 	bl	8004276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000f08:	e053      	b.n	8000fb2 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a2e      	ldr	r2, [pc, #184]	; (8000fc8 <HAL_ADC_MspInit+0x14c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d135      	bne.n	8000f80 <HAL_ADC_MspInit+0x104>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <HAL_ADC_MspInit+0x140>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a28      	ldr	r2, [pc, #160]	; (8000fbc <HAL_ADC_MspInit+0x140>)
 8000f1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <HAL_ADC_MspInit+0x140>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d10b      	bne.n	8000f3e <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a25      	ldr	r2, [pc, #148]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000f2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a1f      	ldr	r2, [pc, #124]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CELL_1_CURRENT_Pin;
 8000f56:	2308      	movs	r3, #8
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CELL_1_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <HAL_ADC_MspInit+0x148>)
 8000f6a:	f003 f99f 	bl	80042ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2012      	movs	r0, #18
 8000f74:	f003 f965 	bl	8004242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f78:	2012      	movs	r0, #18
 8000f7a:	f003 f97c 	bl	8004276 <HAL_NVIC_EnableIRQ>
}
 8000f7e:	e018      	b.n	8000fb2 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC5)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_ADC_MspInit+0x150>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d113      	bne.n	8000fb2 <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_ADC_MspInit+0x144>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	203e      	movs	r0, #62	; 0x3e
 8000fa8:	f003 f94b 	bl	8004242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 8000fac:	203e      	movs	r0, #62	; 0x3e
 8000fae:	f003 f962 	bl	8004276 <HAL_NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	; 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001f8 	.word	0x200001f8
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	50000100 	.word	0x50000100
 8000fcc:	50000600 	.word	0x50000600

08000fd0 <events_initialize_debug_mod>:
#include "events.h"

debug_mod *events_initialize_debug_mod(char *tag, GPIO_TypeDef *Port, uint16_t Probe_1, uint16_t Probe_2, uint16_t Probe_3)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	460b      	mov	r3, r1
 8000fe0:	80fb      	strh	r3, [r7, #6]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	80bb      	strh	r3, [r7, #4]
	debug_mod *dbg_struct = (debug_mod *)malloc(sizeof(debug_mod));
 8000fe6:	2010      	movs	r0, #16
 8000fe8:	f005 fa22 	bl	8006430 <malloc>
 8000fec:	4603      	mov	r3, r0
 8000fee:	617b      	str	r3, [r7, #20]

	if (dbg_struct == NULL)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <events_initialize_debug_mod+0x2a>
		return (NULL);
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e033      	b.n	8001062 <events_initialize_debug_mod+0x92>

	dbg_struct->tag = tag;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	601a      	str	r2, [r3, #0]

	printf("Initializing %s:\n", dbg_struct->tag);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	4819      	ldr	r0, [pc, #100]	; (800106c <events_initialize_debug_mod+0x9c>)
 8001008:	f005 ff36 	bl	8006e78 <iprintf>

	printf("\t- ");
 800100c:	4818      	ldr	r0, [pc, #96]	; (8001070 <events_initialize_debug_mod+0xa0>)
 800100e:	f005 ff33 	bl	8006e78 <iprintf>
	dbg_struct->probe_1 = events_initialize_digital_ios("probe 1", Port, Probe_1, 0);
 8001012:	88fa      	ldrh	r2, [r7, #6]
 8001014:	2300      	movs	r3, #0
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	4816      	ldr	r0, [pc, #88]	; (8001074 <events_initialize_debug_mod+0xa4>)
 800101a:	f000 f831 	bl	8001080 <events_initialize_digital_ios>
 800101e:	4602      	mov	r2, r0
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	605a      	str	r2, [r3, #4]

	printf("\t- ");
 8001024:	4812      	ldr	r0, [pc, #72]	; (8001070 <events_initialize_debug_mod+0xa0>)
 8001026:	f005 ff27 	bl	8006e78 <iprintf>
	dbg_struct->probe_2 = events_initialize_digital_ios("probe 2", Port, Probe_2, 0);
 800102a:	88ba      	ldrh	r2, [r7, #4]
 800102c:	2300      	movs	r3, #0
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <events_initialize_debug_mod+0xa8>)
 8001032:	f000 f825 	bl	8001080 <events_initialize_digital_ios>
 8001036:	4602      	mov	r2, r0
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	609a      	str	r2, [r3, #8]

	printf("\t- ");
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <events_initialize_debug_mod+0xa0>)
 800103e:	f005 ff1b 	bl	8006e78 <iprintf>
	dbg_struct->probe_3 = events_initialize_digital_ios("probe 3", Port, Probe_3, 0);
 8001042:	8c3a      	ldrh	r2, [r7, #32]
 8001044:	2300      	movs	r3, #0
 8001046:	68b9      	ldr	r1, [r7, #8]
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <events_initialize_debug_mod+0xac>)
 800104a:	f000 f819 	bl	8001080 <events_initialize_digital_ios>
 800104e:	4602      	mov	r2, r0
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	60da      	str	r2, [r3, #12]

	events_blink_debug_module(dbg_struct);
 8001054:	6978      	ldr	r0, [r7, #20]
 8001056:	f000 f841 	bl	80010dc <events_blink_debug_module>

	printf("\n");
 800105a:	200a      	movs	r0, #10
 800105c:	f005 ff24 	bl	8006ea8 <putchar>

	return(dbg_struct);
 8001060:	697b      	ldr	r3, [r7, #20]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	08008fd0 	.word	0x08008fd0
 8001070:	08008fe4 	.word	0x08008fe4
 8001074:	08008fe8 	.word	0x08008fe8
 8001078:	08008ff0 	.word	0x08008ff0
 800107c:	08008ff8 	.word	0x08008ff8

08001080 <events_initialize_digital_ios>:

digital_IOs *events_initialize_digital_ios(char *tag, GPIO_TypeDef *Port, uint16_t Pin, uint8_t invert_output)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	460b      	mov	r3, r1
 8001090:	80fb      	strh	r3, [r7, #6]
 8001092:	4613      	mov	r3, r2
 8001094:	717b      	strb	r3, [r7, #5]
	digital_IOs *dig_ios_struct = (digital_IOs *)malloc(sizeof(digital_IOs));
 8001096:	200c      	movs	r0, #12
 8001098:	f005 f9ca 	bl	8006430 <malloc>
 800109c:	4603      	mov	r3, r0
 800109e:	617b      	str	r3, [r7, #20]

	if (dig_ios_struct == NULL)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <events_initialize_digital_ios+0x2a>
		return (NULL);
 80010a6:	2300      	movs	r3, #0
 80010a8:	e012      	b.n	80010d0 <events_initialize_digital_ios+0x50>

	dig_ios_struct->tag = tag;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]

	dig_ios_struct->Port = Port;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	605a      	str	r2, [r3, #4]

	dig_ios_struct->Pin = Pin;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	88fa      	ldrh	r2, [r7, #6]
 80010ba:	811a      	strh	r2, [r3, #8]

	dig_ios_struct->invert = invert_output;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	797a      	ldrb	r2, [r7, #5]
 80010c0:	729a      	strb	r2, [r3, #10]

	printf("Initializing %s\n", dig_ios_struct->tag);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <events_initialize_digital_ios+0x58>)
 80010ca:	f005 fed5 	bl	8006e78 <iprintf>

	return (dig_ios_struct);
 80010ce:	697b      	ldr	r3, [r7, #20]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	08009000 	.word	0x08009000

080010dc <events_blink_debug_module>:

void events_blink_debug_module(debug_mod *dbg)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(dbg->probe_1->Port, dbg->probe_1->Pin);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	891b      	ldrh	r3, [r3, #8]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f003 fa74 	bl	80045e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(dbg->probe_2->Port, dbg->probe_2->Pin);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	4619      	mov	r1, r3
 8001106:	4610      	mov	r0, r2
 8001108:	f003 fa6a 	bl	80045e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(dbg->probe_3->Port, dbg->probe_3->Pin);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	891b      	ldrh	r3, [r3, #8]
 8001118:	4619      	mov	r1, r3
 800111a:	4610      	mov	r0, r2
 800111c:	f003 fa60 	bl	80045e0 <HAL_GPIO_TogglePin>

	HAL_Delay(2500);
 8001120:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001124:	f000 ffca 	bl	80020bc <HAL_Delay>

	HAL_GPIO_TogglePin(dbg->probe_1->Port, dbg->probe_1->Pin);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	891b      	ldrh	r3, [r3, #8]
 8001134:	4619      	mov	r1, r3
 8001136:	4610      	mov	r0, r2
 8001138:	f003 fa52 	bl	80045e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(dbg->probe_2->Port, dbg->probe_2->Pin);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	891b      	ldrh	r3, [r3, #8]
 8001148:	4619      	mov	r1, r3
 800114a:	4610      	mov	r0, r2
 800114c:	f003 fa48 	bl	80045e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(dbg->probe_3->Port, dbg->probe_3->Pin);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	891b      	ldrh	r3, [r3, #8]
 800115c:	4619      	mov	r1, r3
 800115e:	4610      	mov	r0, r2
 8001160:	f003 fa3e 	bl	80045e0 <HAL_GPIO_TogglePin>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <events_change_state>:

void events_change_state(photovoltaic *ptr, uint8_t event)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	if ((ptr->events_handler & event) == event)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	4013      	ands	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	78fa      	ldrb	r2, [r7, #3]
 8001186:	429a      	cmp	r2, r3
 8001188:	d111      	bne.n	80011ae <events_change_state+0x42>
		ptr->events_handler &= !event;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001190:	b25a      	sxtb	r2, r3
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf0c      	ite	eq
 8001198:	2301      	moveq	r3, #1
 800119a:	2300      	movne	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	4013      	ands	r3, r2
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	else
		ptr->events_handler |= event;
}
 80011ac:	e008      	b.n	80011c0 <events_change_state+0x54>
		ptr->events_handler |= event;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <events_handler>:

void events_handler(photovoltaic *ptr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	// Seccionamento do circuito
	if ((ptr->events_handler & EVENT_USER_BREAK) == EVENT_USER_BREAK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d008      	beq.n	80011f4 <events_handler+0x28>
	{
		events_output_relays(ptr, 0);
 80011e2:	2100      	movs	r1, #0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f861 	bl	80012ac <events_output_relays>
		events_output_debugger(ptr, 0x1);
 80011ea:	2101      	movs	r1, #1
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f8bb 	bl	8001368 <events_output_debugger>
	else
	{
		events_output_relays(ptr, 1);
		events_output_debugger(ptr, 0x0);
	}
}
 80011f2:	e057      	b.n	80012a4 <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_OVERVOLTAGE) == EVENT_OVERVOLTAGE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <events_handler+0x48>
		events_output_relays(ptr, 0);
 8001202:	2100      	movs	r1, #0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f851 	bl	80012ac <events_output_relays>
		events_output_debugger(ptr, 0x2);
 800120a:	2102      	movs	r1, #2
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f8ab 	bl	8001368 <events_output_debugger>
}
 8001212:	e047      	b.n	80012a4 <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_OVERCURRENT) == EVENT_OVERCURRENT)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d008      	beq.n	8001234 <events_handler+0x68>
		events_output_relays(ptr, 0);
 8001222:	2100      	movs	r1, #0
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f841 	bl	80012ac <events_output_relays>
		events_output_debugger(ptr, 0x3);
 800122a:	2103      	movs	r1, #3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f89b 	bl	8001368 <events_output_debugger>
}
 8001232:	e037      	b.n	80012a4 <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_UNDERVOLTAGE) == EVENT_UNDERVOLTAGE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d008      	beq.n	8001254 <events_handler+0x88>
		events_output_relays(ptr, 0);
 8001242:	2100      	movs	r1, #0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f831 	bl	80012ac <events_output_relays>
		events_output_debugger(ptr, 0x4);
 800124a:	2104      	movs	r1, #4
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f88b 	bl	8001368 <events_output_debugger>
}
 8001252:	e027      	b.n	80012a4 <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_OVERHEAT) == EVENT_OVERHEAT)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	d008      	beq.n	8001274 <events_handler+0xa8>
		events_output_relays(ptr, 1);
 8001262:	2101      	movs	r1, #1
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f821 	bl	80012ac <events_output_relays>
		events_output_debugger(ptr, 0x5);
 800126a:	2105      	movs	r1, #5
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f87b 	bl	8001368 <events_output_debugger>
}
 8001272:	e017      	b.n	80012a4 <events_handler+0xd8>
	else if ((ptr->events_handler & EVENT_DPS_LIFESPAN) == EVENT_DPS_LIFESPAN)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <events_handler+0xc8>
		events_output_relays(ptr, 0);
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f811 	bl	80012ac <events_output_relays>
		events_output_debugger(ptr, 0x6);
 800128a:	2106      	movs	r1, #6
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f86b 	bl	8001368 <events_output_debugger>
}
 8001292:	e007      	b.n	80012a4 <events_handler+0xd8>
		events_output_relays(ptr, 1);
 8001294:	2101      	movs	r1, #1
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f808 	bl	80012ac <events_output_relays>
		events_output_debugger(ptr, 0x0);
 800129c:	2100      	movs	r1, #0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f862 	bl	8001368 <events_output_debugger>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <events_output_relays>:

void events_output_relays(photovoltaic *ptr, uint8_t value)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
	// Relé (-)
	if (ptr->neg_out->invert)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	7a9b      	ldrb	r3, [r3, #10]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <events_output_relays+0x30>
		HAL_GPIO_WritePin(ptr->neg_out->Port, ptr->neg_out->Pin, ~value);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	6858      	ldr	r0, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	8919      	ldrh	r1, [r3, #8]
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	f003 f96b 	bl	80045b0 <HAL_GPIO_WritePin>
 80012da:	e009      	b.n	80012f0 <events_output_relays+0x44>
	else
		HAL_GPIO_WritePin(ptr->neg_out->Port, ptr->neg_out->Pin, value);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	6858      	ldr	r0, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	891b      	ldrh	r3, [r3, #8]
 80012e8:	78fa      	ldrb	r2, [r7, #3]
 80012ea:	4619      	mov	r1, r3
 80012ec:	f003 f960 	bl	80045b0 <HAL_GPIO_WritePin>

	// Relé (+)
	if (ptr->pos_out->invert)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	7a9b      	ldrb	r3, [r3, #10]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00c      	beq.n	8001314 <events_output_relays+0x68>
		HAL_GPIO_WritePin(ptr->pos_out->Port, ptr->pos_out->Pin, ~value);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	6858      	ldr	r0, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	8919      	ldrh	r1, [r3, #8]
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	43db      	mvns	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	f003 f94f 	bl	80045b0 <HAL_GPIO_WritePin>
 8001312:	e009      	b.n	8001328 <events_output_relays+0x7c>
	else
		HAL_GPIO_WritePin(ptr->pos_out->Port, ptr->pos_out->Pin, value);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	6858      	ldr	r0, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	891b      	ldrh	r3, [r3, #8]
 8001320:	78fa      	ldrb	r2, [r7, #3]
 8001322:	4619      	mov	r1, r3
 8001324:	f003 f944 	bl	80045b0 <HAL_GPIO_WritePin>

	// LED integrado
	if (ptr->led_out->invert)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	7a9b      	ldrb	r3, [r3, #10]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00c      	beq.n	800134c <events_output_relays+0xa0>
		HAL_GPIO_WritePin(ptr->led_out->Port, ptr->led_out->Pin, ~value);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	6858      	ldr	r0, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	8919      	ldrh	r1, [r3, #8]
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	43db      	mvns	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	f003 f933 	bl	80045b0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ptr->led_out->Port, ptr->led_out->Pin, value);

}
 800134a:	e009      	b.n	8001360 <events_output_relays+0xb4>
		HAL_GPIO_WritePin(ptr->led_out->Port, ptr->led_out->Pin, value);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	6858      	ldr	r0, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	891b      	ldrh	r3, [r3, #8]
 8001358:	78fa      	ldrb	r2, [r7, #3]
 800135a:	4619      	mov	r1, r3
 800135c:	f003 f928 	bl	80045b0 <HAL_GPIO_WritePin>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <events_output_debugger>:

void events_output_debugger(photovoltaic *ptr, uint8_t value)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
	if (ptr->debugger == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d02d      	beq.n	80013d8 <events_output_debugger+0x70>
		return;

	// LSB
	HAL_GPIO_WritePin(ptr->debugger->probe_3->Port, ptr->debugger->probe_3->Pin, 0x1 & value);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	6858      	ldr	r0, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	8919      	ldrh	r1, [r3, #8]
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	f003 f90b 	bl	80045b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ptr->debugger->probe_2->Port, ptr->debugger->probe_2->Pin, 0x2 & value);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	6858      	ldr	r0, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	8919      	ldrh	r1, [r3, #8]
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	f003 f8fc 	bl	80045b0 <HAL_GPIO_WritePin>

	// MSB
	HAL_GPIO_WritePin(ptr->debugger->probe_1->Port, ptr->debugger->probe_1->Pin, 0x4 & value);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	6858      	ldr	r0, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	8919      	ldrh	r1, [r3, #8]
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	f003 f8ed 	bl	80045b0 <HAL_GPIO_WritePin>
 80013d6:	e000      	b.n	80013da <events_output_debugger+0x72>
		return;
 80013d8:	bf00      	nop
}
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <MX_GPIO_Init+0x150>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a4d      	ldr	r2, [pc, #308]	; (8001530 <MX_GPIO_Init+0x150>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b4b      	ldr	r3, [pc, #300]	; (8001530 <MX_GPIO_Init+0x150>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140e:	4b48      	ldr	r3, [pc, #288]	; (8001530 <MX_GPIO_Init+0x150>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a47      	ldr	r2, [pc, #284]	; (8001530 <MX_GPIO_Init+0x150>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <MX_GPIO_Init+0x150>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b42      	ldr	r3, [pc, #264]	; (8001530 <MX_GPIO_Init+0x150>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a41      	ldr	r2, [pc, #260]	; (8001530 <MX_GPIO_Init+0x150>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <MX_GPIO_Init+0x150>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <MX_GPIO_Init+0x150>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a3b      	ldr	r2, [pc, #236]	; (8001530 <MX_GPIO_Init+0x150>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <MX_GPIO_Init+0x150>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL_1_OUT_NEG_GPIO_Port, CELL_1_OUT_NEG_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2101      	movs	r1, #1
 800145a:	4836      	ldr	r0, [pc, #216]	; (8001534 <MX_GPIO_Init+0x154>)
 800145c:	f003 f8a8 	bl	80045b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CELL_1_BUILTIN_LED_Pin|CELL_1_OUT_POS_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f003 f8a1 	bl	80045b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL_1_DBG3_Pin|CELL_1_DBG2_Pin|CELL_1_DBG1_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001474:	4830      	ldr	r0, [pc, #192]	; (8001538 <MX_GPIO_Init+0x158>)
 8001476:	f003 f89b 	bl	80045b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_BTN_Pin;
 800147a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001480:	4b2e      	ldr	r3, [pc, #184]	; (800153c <MX_GPIO_Init+0x15c>)
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_BTN_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4829      	ldr	r0, [pc, #164]	; (8001534 <MX_GPIO_Init+0x154>)
 8001490:	f002 ff0c 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_OUT_NEG_Pin;
 8001494:	2301      	movs	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CELL_1_OUT_NEG_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4822      	ldr	r0, [pc, #136]	; (8001534 <MX_GPIO_Init+0x154>)
 80014ac:	f002 fefe 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_DPS_Pin;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <MX_GPIO_Init+0x160>)
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_DPS_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f002 fef1 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CELL_1_BUILTIN_LED_Pin|CELL_1_OUT_POS_Pin;
 80014ca:	f44f 7308 	mov.w	r3, #544	; 0x220
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f002 fee1 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CELL_1_DBG3_Pin|CELL_1_DBG2_Pin|CELL_1_DBG1_Pin;
 80014ea:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_GPIO_Init+0x158>)
 8001504:	f002 fed2 	bl	80042ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2006      	movs	r0, #6
 800150e:	f002 fe98 	bl	8004242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001512:	2006      	movs	r0, #6
 8001514:	f002 feaf 	bl	8004276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2028      	movs	r0, #40	; 0x28
 800151e:	f002 fe90 	bl	8004242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001522:	2028      	movs	r0, #40	; 0x28
 8001524:	f002 fea7 	bl	8004276 <HAL_NVIC_EnableIRQ>

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	48000800 	.word	0x48000800
 8001538:	48000400 	.word	0x48000400
 800153c:	10110000 	.word	0x10110000
 8001540:	10310000 	.word	0x10310000

08001544 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
	objects_def_exti_gpio(GPIO_Pin);
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fa97 	bl	8001a84 <objects_def_exti_gpio>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <MX_I2C1_Init+0x78>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_I2C1_Init+0x74>)
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <MX_I2C1_Init+0x7c>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001578:	2201      	movs	r2, #1
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <MX_I2C1_Init+0x74>)
 800159c:	f003 f852 	bl	8004644 <HAL_I2C_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015a6:	f000 f941 	bl	800182c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4809      	ldr	r0, [pc, #36]	; (80015d4 <MX_I2C1_Init+0x74>)
 80015ae:	f003 f8d8 	bl	8004762 <HAL_I2CEx_ConfigAnalogFilter>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015b8:	f000 f938 	bl	800182c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_I2C1_Init+0x74>)
 80015c0:	f003 f91a 	bl	80047f8 <HAL_I2CEx_ConfigDigitalFilter>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 f92f 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000034c 	.word	0x2000034c
 80015d8:	40005400 	.word	0x40005400
 80015dc:	307075b1 	.word	0x307075b1

080015e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_I2C_MspInit+0x7c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d128      	bne.n	8001654 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_I2C_MspInit+0x80>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a16      	ldr	r2, [pc, #88]	; (8001660 <HAL_I2C_MspInit+0x80>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_I2C_MspInit+0x80>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800161a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001620:	2312      	movs	r3, #18
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001624:	2301      	movs	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162c:	2304      	movs	r3, #4
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <HAL_I2C_MspInit+0x84>)
 8001638:	f002 fe38 	bl	80042ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_I2C_MspInit+0x80>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_I2C_MspInit+0x80>)
 8001642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001646:	6593      	str	r3, [r2, #88]	; 0x58
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_I2C_MspInit+0x80>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40005400 	.word	0x40005400
 8001660:	40021000 	.word	0x40021000
 8001664:	48000400 	.word	0x48000400

08001668 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001674:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d013      	beq.n	80016a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001680:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001684:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001688:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001690:	e000      	b.n	8001694 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001692:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001694:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f9      	beq.n	8001692 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800169e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
	for (int i=0 ; i<len ; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
		ITM_SendChar((*ptr++));
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ffc9 	bl	8001668 <ITM_SendChar>
	for (int i=0 ; i<len ; i++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>

	return (len);
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f4:	f000 fc71 	bl	8001fda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f8:	f000 f828 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fc:	f7ff fe70 	bl	80013e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001700:	f000 fb3c 	bl	8001d7c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001704:	f7ff fa78 	bl	8000bf8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001708:	f7ff faf2 	bl	8000cf0 <MX_ADC2_Init>
  MX_ADC5_Init();
 800170c:	f7ff fb50 	bl	8000db0 <MX_ADC5_Init>
  MX_TIM2_Init();
 8001710:	f000 fb88 	bl	8001e24 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001714:	f7ff ff24 	bl	8001560 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("-- Starting System's Configuration\n\n");
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <main+0x4c>)
 800171a:	f005 fc49 	bl	8006fb0 <puts>

  objects_def_init();
 800171e:	f000 f947 	bl	80019b0 <objects_def_init>

  HAL_TIM_Base_Start_IT(&htim1);
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <main+0x50>)
 8001724:	f004 f908 	bl	8005938 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <main+0x54>)
 800172a:	f004 f905 	bl	8005938 <HAL_TIM_Base_Start_IT>

  printf("-- End of System's Configuration\n");
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <main+0x58>)
 8001730:	f005 fc3e 	bl	8006fb0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	objects_def_loop();
 8001734:	f000 f9d0 	bl	8001ad8 <objects_def_loop>
 8001738:	e7fc      	b.n	8001734 <main+0x44>
 800173a:	bf00      	nop
 800173c:	08009014 	.word	0x08009014
 8001740:	200003ac 	.word	0x200003ac
 8001744:	200003f8 	.word	0x200003f8
 8001748:	08009038 	.word	0x08009038

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0a8      	sub	sp, #160	; 0xa0
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001756:	2238      	movs	r2, #56	; 0x38
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f004 fe70 	bl	8006440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2254      	movs	r2, #84	; 0x54
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f004 fe62 	bl	8006440 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001780:	f003 f886 	bl	8004890 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001784:	2302      	movs	r3, #2
 8001786:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001792:	2302      	movs	r3, #2
 8001794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001798:	2302      	movs	r3, #2
 800179a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800179e:	2301      	movs	r3, #1
 80017a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 15;
 80017a4:	230f      	movs	r3, #15
 80017a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 f919 	bl	80049f8 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017cc:	f000 f82e 	bl	800182c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2303      	movs	r3, #3
 80017d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e8:	2103      	movs	r1, #3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fc1c 	bl	8005028 <HAL_RCC_ClockConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017f6:	f000 f819 	bl	800182c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <SystemClock_Config+0xdc>)
 80017fc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001802:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001806:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800180c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	4618      	mov	r0, r3
 8001812:	f003 fded 	bl	80053f0 <HAL_RCCEx_PeriphCLKConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800181c:	f000 f806 	bl	800182c <Error_Handler>
  }
}
 8001820:	bf00      	nop
 8001822:	37a0      	adds	r7, #160	; 0xa0
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	00018040 	.word	0x00018040

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <meas_initialize_cell>:
#include "meas.h"

photovoltaic *meas_initialize_cell(char *tag, ADC_HandleTypeDef *ADC_master, ADC_HandleTypeDef *ADC_slave, digital_IOs *pos_out, digital_IOs *neg_out, digital_IOs *led_out, debug_mod *debug_mod)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
	photovoltaic *ph_struct = (photovoltaic *)malloc(sizeof(photovoltaic));
 8001846:	2028      	movs	r0, #40	; 0x28
 8001848:	f004 fdf2 	bl	8006430 <malloc>
 800184c:	4603      	mov	r3, r0
 800184e:	617b      	str	r3, [r7, #20]

	if (ph_struct == NULL)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <meas_initialize_cell+0x22>
		return (NULL);
 8001856:	2300      	movs	r3, #0
 8001858:	e03c      	b.n	80018d4 <meas_initialize_cell+0x9c>

	ph_struct->tag = tag;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	601a      	str	r2, [r3, #0]

	ph_struct->pe_interval_cnt = 0;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2200      	movs	r2, #0
 8001864:	849a      	strh	r2, [r3, #36]	; 0x24

	ph_struct->events_handler = 0;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	printf("Initializing %s:\n", ph_struct->tag);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	4819      	ldr	r0, [pc, #100]	; (80018dc <meas_initialize_cell+0xa4>)
 8001876:	f005 faff 	bl	8006e78 <iprintf>

	ph_struct->voltage = meas_initialize_rms_objects("Voltage", ADC_master);
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	4818      	ldr	r0, [pc, #96]	; (80018e0 <meas_initialize_cell+0xa8>)
 800187e:	f000 f837 	bl	80018f0 <meas_initialize_rms_objects>
 8001882:	4602      	mov	r2, r0
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	605a      	str	r2, [r3, #4]
	ph_struct->current = meas_initialize_rms_objects("Current", ADC_slave);
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4816      	ldr	r0, [pc, #88]	; (80018e4 <meas_initialize_cell+0xac>)
 800188c:	f000 f830 	bl	80018f0 <meas_initialize_rms_objects>
 8001890:	4602      	mov	r2, r0
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	609a      	str	r2, [r3, #8]

	ph_struct->power_energy = meas_initialize_power_and_energy_objects();
 8001896:	f000 f863 	bl	8001960 <meas_initialize_power_and_energy_objects>
 800189a:	4602      	mov	r2, r0
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	611a      	str	r2, [r3, #16]

	ph_struct->pos_out = pos_out;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	615a      	str	r2, [r3, #20]
	ph_struct->neg_out = neg_out;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	6a3a      	ldr	r2, [r7, #32]
 80018aa:	619a      	str	r2, [r3, #24]
	ph_struct->led_out = led_out;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	61da      	str	r2, [r3, #28]

	if (debug_mod == NULL)
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d106      	bne.n	80018c6 <meas_initialize_cell+0x8e>
	{
		ph_struct->debugger = NULL;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]

		printf("\t- Debugger not attached\n\n");
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <meas_initialize_cell+0xb0>)
 80018c0:	f005 fb76 	bl	8006fb0 <puts>
 80018c4:	e005      	b.n	80018d2 <meas_initialize_cell+0x9a>
	}
	else
	{
		ph_struct->debugger = debug_mod;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ca:	621a      	str	r2, [r3, #32]

		printf("\t- Debugger attached\n\n");
 80018cc:	4807      	ldr	r0, [pc, #28]	; (80018ec <meas_initialize_cell+0xb4>)
 80018ce:	f005 fb6f 	bl	8006fb0 <puts>
	}

	return(ph_struct);
 80018d2:	697b      	ldr	r3, [r7, #20]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	0800905c 	.word	0x0800905c
 80018e0:	08009070 	.word	0x08009070
 80018e4:	08009078 	.word	0x08009078
 80018e8:	08009080 	.word	0x08009080
 80018ec:	0800909c 	.word	0x0800909c

080018f0 <meas_initialize_rms_objects>:

rms_measurement *meas_initialize_rms_objects(char *tag, ADC_HandleTypeDef *ADC)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	rms_measurement *rms_struct = (rms_measurement *)malloc(sizeof(rms_measurement));
 80018fa:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80018fe:	f004 fd97 	bl	8006430 <malloc>
 8001902:	4603      	mov	r3, r0
 8001904:	60fb      	str	r3, [r7, #12]

	if (rms_struct == NULL)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <meas_initialize_rms_objects+0x20>
		return (NULL);
 800190c:	2300      	movs	r3, #0
 800190e:	e021      	b.n	8001954 <meas_initialize_rms_objects+0x64>

	rms_struct->ADC = ADC;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]

	rms_struct->frst_level_index = 0;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
	rms_struct->scnd_level_index = 0;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
	rms_struct->thrd_level_index = 0;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
	rms_struct->frth_level_index = 0;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
	rms_struct->ffth_level_index = 0;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0

	HAL_ADCEx_Calibration_Start(rms_struct->ADC, ADC_SINGLE_ENDED);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	217f      	movs	r1, #127	; 0x7f
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fa05 	bl	8003d54 <HAL_ADCEx_Calibration_Start>

	printf("\t- %s measurement initialized\n", tag);
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4803      	ldr	r0, [pc, #12]	; (800195c <meas_initialize_rms_objects+0x6c>)
 800194e:	f005 fa93 	bl	8006e78 <iprintf>

	return (rms_struct);
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	080090b4 	.word	0x080090b4

08001960 <meas_initialize_power_and_energy_objects>:

power_and_energy *meas_initialize_power_and_energy_objects(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
	power_and_energy *pe_struct = (power_and_energy *)malloc(sizeof(power_and_energy));
 8001966:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 800196a:	f004 fd61 	bl	8006430 <malloc>
 800196e:	4603      	mov	r3, r0
 8001970:	607b      	str	r3, [r7, #4]

	if (pe_struct == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <meas_initialize_power_and_energy_objects+0x1c>
		return (NULL);
 8001978:	2300      	movs	r3, #0
 800197a:	e013      	b.n	80019a4 <meas_initialize_power_and_energy_objects+0x44>

	pe_struct->energy = 0.0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

	pe_struct->frst_level_index = 0;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c
	pe_struct->scnd_level_index = 0;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 239d 	strb.w	r2, [r3, #925]	; 0x39d
	pe_struct->thrd_level_index = 0;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e

	printf("\t- Power & Energy measurement initialized\n");
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <meas_initialize_power_and_energy_objects+0x4c>)
 800199e:	f005 fb07 	bl	8006fb0 <puts>

	return (pe_struct);
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	080090d4 	.word	0x080090d4

080019b0 <objects_def_init>:
debug_mod	 *dbg;
digital_IOs  *relay_pos, *relay_neg, *builtin_led;
photovoltaic *cell;

void objects_def_init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af04      	add	r7, sp, #16
	relay_pos = events_initialize_digital_ios("Relay (+)", GPIOA, CELL_1_OUT_POS_Pin, 0);
 80019b6:	2300      	movs	r3, #0
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80019c0:	481d      	ldr	r0, [pc, #116]	; (8001a38 <objects_def_init+0x88>)
 80019c2:	f7ff fb5d 	bl	8001080 <events_initialize_digital_ios>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <objects_def_init+0x8c>)
 80019ca:	6013      	str	r3, [r2, #0]
	relay_neg = events_initialize_digital_ios("Relay (-)", GPIOC, CELL_1_OUT_NEG_Pin, 0);
 80019cc:	2300      	movs	r3, #0
 80019ce:	2201      	movs	r2, #1
 80019d0:	491b      	ldr	r1, [pc, #108]	; (8001a40 <objects_def_init+0x90>)
 80019d2:	481c      	ldr	r0, [pc, #112]	; (8001a44 <objects_def_init+0x94>)
 80019d4:	f7ff fb54 	bl	8001080 <events_initialize_digital_ios>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <objects_def_init+0x98>)
 80019dc:	6013      	str	r3, [r2, #0]

	builtin_led = events_initialize_digital_ios("Built-In LED", GPIOA, CELL_1_BUILTIN_LED_Pin, 0);
 80019de:	2300      	movs	r3, #0
 80019e0:	2220      	movs	r2, #32
 80019e2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80019e6:	4819      	ldr	r0, [pc, #100]	; (8001a4c <objects_def_init+0x9c>)
 80019e8:	f7ff fb4a 	bl	8001080 <events_initialize_digital_ios>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <objects_def_init+0xa0>)
 80019f0:	6013      	str	r3, [r2, #0]

	dbg  = events_initialize_debug_mod("Debug Module", GPIOB, CELL_1_DBG1_Pin, CELL_1_DBG2_Pin, CELL_1_DBG3_Pin);
 80019f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2310      	movs	r3, #16
 80019fa:	2220      	movs	r2, #32
 80019fc:	4915      	ldr	r1, [pc, #84]	; (8001a54 <objects_def_init+0xa4>)
 80019fe:	4816      	ldr	r0, [pc, #88]	; (8001a58 <objects_def_init+0xa8>)
 8001a00:	f7ff fae6 	bl	8000fd0 <events_initialize_debug_mod>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <objects_def_init+0xac>)
 8001a08:	6013      	str	r3, [r2, #0]

	cell = meas_initialize_cell("Photovoltaic Cell 1", &hadc1, &hadc2, relay_pos, relay_neg, builtin_led, dbg);
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <objects_def_init+0x8c>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <objects_def_init+0x98>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <objects_def_init+0xa0>)
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4911      	ldr	r1, [pc, #68]	; (8001a5c <objects_def_init+0xac>)
 8001a18:	6809      	ldr	r1, [r1, #0]
 8001a1a:	9102      	str	r1, [sp, #8]
 8001a1c:	9201      	str	r2, [sp, #4]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <objects_def_init+0xb0>)
 8001a24:	490f      	ldr	r1, [pc, #60]	; (8001a64 <objects_def_init+0xb4>)
 8001a26:	4810      	ldr	r0, [pc, #64]	; (8001a68 <objects_def_init+0xb8>)
 8001a28:	f7ff ff06 	bl	8001838 <meas_initialize_cell>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <objects_def_init+0xbc>)
 8001a30:	6013      	str	r3, [r2, #0]
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	08009100 	.word	0x08009100
 8001a3c:	200003a0 	.word	0x200003a0
 8001a40:	48000800 	.word	0x48000800
 8001a44:	0800910c 	.word	0x0800910c
 8001a48:	200003a4 	.word	0x200003a4
 8001a4c:	08009118 	.word	0x08009118
 8001a50:	20000398 	.word	0x20000398
 8001a54:	48000400 	.word	0x48000400
 8001a58:	08009128 	.word	0x08009128
 8001a5c:	2000039c 	.word	0x2000039c
 8001a60:	20000208 	.word	0x20000208
 8001a64:	200002e0 	.word	0x200002e0
 8001a68:	08009138 	.word	0x08009138
 8001a6c:	200003a8 	.word	0x200003a8

08001a70 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
//	if (hadc->Instance == ADC1)
//		meas_sample_voltage_and_current(cell);
//	else if (hadc->Instance == ADC5)
//		meas_temperature(cell);
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <objects_def_exti_gpio>:

void objects_def_exti_gpio(uint16_t GPIO_Pin)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == CELL_1_BTN_Pin) {
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a94:	d109      	bne.n	8001aaa <objects_def_exti_gpio+0x26>
		events_change_state(cell, EVENT_USER_BREAK);
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <objects_def_exti_gpio+0x48>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fb65 	bl	800116c <events_change_state>

		printf("user btn\n");
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <objects_def_exti_gpio+0x4c>)
 8001aa4:	f005 fa84 	bl	8006fb0 <puts>
	else if (GPIO_Pin == CELL_1_DPS_Pin) {
		events_change_state(cell, EVENT_DPS_LIFESPAN);

		printf("DPS lifespan\n");
	}
}
 8001aa8:	e00b      	b.n	8001ac2 <objects_def_exti_gpio+0x3e>
	else if (GPIO_Pin == CELL_1_DPS_Pin) {
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <objects_def_exti_gpio+0x3e>
		events_change_state(cell, EVENT_DPS_LIFESPAN);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <objects_def_exti_gpio+0x48>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb58 	bl	800116c <events_change_state>
		printf("DPS lifespan\n");
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <objects_def_exti_gpio+0x50>)
 8001abe:	f005 fa77 	bl	8006fb0 <puts>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200003a8 	.word	0x200003a8
 8001ad0:	0800914c 	.word	0x0800914c
 8001ad4:	08009158 	.word	0x08009158

08001ad8 <objects_def_loop>:

void objects_def_loop(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	events_handler(cell);
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <objects_def_loop+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fb73 	bl	80011cc <events_handler>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200003a8 	.word	0x200003a8

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_MspInit+0x44>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_MspInit+0x44>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6613      	str	r3, [r2, #96]	; 0x60
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_MspInit+0x44>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_MspInit+0x44>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6593      	str	r3, [r2, #88]	; 0x58
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b26:	f002 ff57 	bl	80049d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <NMI_Handler+0x4>

08001b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b84:	f000 fa7c 	bl	8002080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f002 fd3f 	bl	8004614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ba0:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <ADC1_2_IRQHandler+0x14>)
 8001ba2:	f001 f915 	bl	8002dd0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001ba6:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <ADC1_2_IRQHandler+0x18>)
 8001ba8:	f001 f912 	bl	8002dd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200002e0 	.word	0x200002e0
 8001bb4:	20000208 	.word	0x20000208

08001bb8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bbe:	f003 ff33 	bl	8005a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200003ac 	.word	0x200003ac

08001bcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <TIM2_IRQHandler+0x10>)
 8001bd2:	f003 ff29 	bl	8005a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200003f8 	.word	0x200003f8

08001be0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001be4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001be8:	f002 fd14 	bl	8004614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <ADC5_IRQHandler+0x10>)
 8001bf6:	f001 f8eb 	bl	8002dd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000274 	.word	0x20000274

08001c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
	return 1;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_kill>:

int _kill(int pid, int sig)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c1e:	f004 fbdd 	bl	80063dc <__errno>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2216      	movs	r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
	return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_exit>:

void _exit (int status)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffe7 	bl	8001c14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c46:	e7fe      	b.n	8001c46 <_exit+0x12>

08001c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c5a:	f3af 8000 	nop.w
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
	}

return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
	return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001caa:	605a      	str	r2, [r3, #4]
	return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_isatty>:

int _isatty(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
	return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f004 fb5e 	bl	80063dc <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20020000 	.word	0x20020000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	200001fc 	.word	0x200001fc
 8001d54:	20000458 	.word	0x20000458

08001d58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001d9c:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <MX_TIM1_Init+0xa4>)
 8001d9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001da2:	2277      	movs	r2, #119	; 0x77
 8001da4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1041;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001dae:	f240 4211 	movw	r2, #1041	; 0x411
 8001db2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dc6:	4815      	ldr	r0, [pc, #84]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001dc8:	f003 fd5e 	bl	8005888 <HAL_TIM_Base_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001dd2:	f7ff fd2b 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4619      	mov	r1, r3
 8001de2:	480e      	ldr	r0, [pc, #56]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001de4:	f003 ffa0 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001dee:	f7ff fd1d 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <MX_TIM1_Init+0xa0>)
 8001e04:	f004 fa0e 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e0e:	f7ff fd0d 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200003ac 	.word	0x200003ac
 8001e20:	40012c00 	.word	0x40012c00

08001e24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2a:	f107 0310 	add.w	r3, r7, #16
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <MX_TIM2_Init+0x98>)
 8001e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11999;
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <MX_TIM2_Init+0x98>)
 8001e4c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001e50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <MX_TIM2_Init+0x98>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <MX_TIM2_Init+0x98>)
 8001e5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <MX_TIM2_Init+0x98>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_TIM2_Init+0x98>)
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e6c:	4813      	ldr	r0, [pc, #76]	; (8001ebc <MX_TIM2_Init+0x98>)
 8001e6e:	f003 fd0b 	bl	8005888 <HAL_TIM_Base_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001e78:	f7ff fcd8 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	4619      	mov	r1, r3
 8001e88:	480c      	ldr	r0, [pc, #48]	; (8001ebc <MX_TIM2_Init+0x98>)
 8001e8a:	f003 ff4d 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001e94:	f7ff fcca 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_TIM2_Init+0x98>)
 8001ea6:	f004 f9bd 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001eb0:	f7ff fcbc 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200003f8 	.word	0x200003f8

08001ec0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <HAL_TIM_Base_MspInit+0x78>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d114      	bne.n	8001efc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_TIM_Base_MspInit+0x7c>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed6:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_TIM_Base_MspInit+0x7c>)
 8001ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001edc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_TIM_Base_MspInit+0x7c>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2019      	movs	r0, #25
 8001ef0:	f002 f9a7 	bl	8004242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ef4:	2019      	movs	r0, #25
 8001ef6:	f002 f9be 	bl	8004276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001efa:	e018      	b.n	8001f2e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f04:	d113      	bne.n	8001f2e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_TIM_Base_MspInit+0x7c>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <HAL_TIM_Base_MspInit+0x7c>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6593      	str	r3, [r2, #88]	; 0x58
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_TIM_Base_MspInit+0x7c>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	201c      	movs	r0, #28
 8001f24:	f002 f98d 	bl	8004242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f28:	201c      	movs	r0, #28
 8001f2a:	f002 f9a4 	bl	8004276 <HAL_NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	40021000 	.word	0x40021000

08001f40 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d106      	bne.n	8001f60 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_ADC_Start(&hadc2);
 8001f52:	480a      	ldr	r0, [pc, #40]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001f54:	f000 fcfc 	bl	8002950 <HAL_ADC_Start>
		HAL_ADC_Start_IT(&hadc1);
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001f5a:	f000 fddd 	bl	8002b18 <HAL_ADC_Start_IT>
	}
	else if (htim->Instance == TIM2)
	{
		HAL_ADC_Start_IT(&hadc5);
	}
}
 8001f5e:	e007      	b.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if (htim->Instance == TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d102      	bne.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ADC_Start_IT(&hadc5);
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001f6c:	f000 fdd4 	bl	8002b18 <HAL_ADC_Start_IT>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	20000208 	.word	0x20000208
 8001f80:	200002e0 	.word	0x200002e0
 8001f84:	20000274 	.word	0x20000274

08001f88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f88:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <LoopForever+0xe>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa4:	4c0b      	ldr	r4, [pc, #44]	; (8001fd4 <LoopForever+0x16>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fb2:	f7ff fed1 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb6:	f004 fa17 	bl	80063e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fba:	f7ff fb99 	bl	80016f0 <main>

08001fbe <LoopForever>:

LoopForever:
    b LoopForever
 8001fbe:	e7fe      	b.n	8001fbe <LoopForever>
  ldr   r0, =_estack
 8001fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001fcc:	08009564 	.word	0x08009564
  ldr r2, =_sbss
 8001fd0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001fd4:	20000458 	.word	0x20000458

08001fd8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <ADC3_IRQHandler>

08001fda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f002 f921 	bl	800422c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f80e 	bl	800200c <HAL_InitTick>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	71fb      	strb	r3, [r7, #7]
 8001ffa:	e001      	b.n	8002000 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ffc:	f7ff fd78 	bl	8001af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002000:	79fb      	ldrb	r3, [r7, #7]

}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_InitTick+0x68>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d022      	beq.n	8002066 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_InitTick+0x6c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_InitTick+0x68>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800202c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	4618      	mov	r0, r3
 8002036:	f002 f92c 	bl	8004292 <HAL_SYSTICK_Config>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10f      	bne.n	8002060 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b0f      	cmp	r3, #15
 8002044:	d809      	bhi.n	800205a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002046:	2200      	movs	r2, #0
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800204e:	f002 f8f8 	bl	8004242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_InitTick+0x70>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	e007      	b.n	800206a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	e004      	b.n	800206a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e001      	b.n	800206a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000008 	.word	0x20000008
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_IncTick+0x1c>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_IncTick+0x20>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4413      	add	r3, r2
 800208e:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_IncTick+0x1c>)
 8002090:	6013      	str	r3, [r2, #0]
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	20000444 	.word	0x20000444
 80020a0:	20000008 	.word	0x20000008

080020a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return uwTick;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <HAL_GetTick+0x14>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000444 	.word	0x20000444

080020bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c4:	f7ff ffee 	bl	80020a4 <HAL_GetTick>
 80020c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d4:	d004      	beq.n	80020e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_Delay+0x40>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020e0:	bf00      	nop
 80020e2:	f7ff ffdf 	bl	80020a4 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d8f7      	bhi.n	80020e2 <HAL_Delay+0x26>
  {
  }
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000008 	.word	0x20000008

08002100 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	609a      	str	r2, [r3, #8]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3360      	adds	r3, #96	; 0x60
 800217a:	461a      	mov	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <LL_ADC_SetOffset+0x44>)
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	4313      	orrs	r3, r2
 8002198:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	03fff000 	.word	0x03fff000

080021b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3360      	adds	r3, #96	; 0x60
 80021be:	461a      	mov	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3360      	adds	r3, #96	; 0x60
 80021ec:	461a      	mov	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002212:	b480      	push	{r7}
 8002214:	b087      	sub	sp, #28
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3360      	adds	r3, #96	; 0x60
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	431a      	orrs	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3360      	adds	r3, #96	; 0x60
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	431a      	orrs	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	615a      	str	r2, [r3, #20]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b087      	sub	sp, #28
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3330      	adds	r3, #48	; 0x30
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	4413      	add	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	211f      	movs	r1, #31
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	401a      	ands	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	f003 011f 	and.w	r1, r3, #31
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	431a      	orrs	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3314      	adds	r3, #20
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	0e5b      	lsrs	r3, r3, #25
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	4413      	add	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	0d1b      	lsrs	r3, r3, #20
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2107      	movs	r1, #7
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	401a      	ands	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	0d1b      	lsrs	r3, r3, #20
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	431a      	orrs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	43db      	mvns	r3, r3
 80023ba:	401a      	ands	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0318 	and.w	r3, r3, #24
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023c4:	40d9      	lsrs	r1, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	400b      	ands	r3, r1
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ce:	431a      	orrs	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	0007ffff 	.word	0x0007ffff

080023e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 031f 	and.w	r3, r3, #31
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6093      	str	r3, [r2, #8]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002458:	d101      	bne.n	800245e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800247c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002480:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024a8:	d101      	bne.n	80024ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f8:	f043 0202 	orr.w	r2, r3, #2
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <LL_ADC_IsEnabled+0x18>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <LL_ADC_IsEnabled+0x1a>
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d101      	bne.n	800254a <LL_ADC_IsDisableOngoing+0x18>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_ADC_IsDisableOngoing+0x1a>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800256c:	f043 0204 	orr.w	r2, r3, #4
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d101      	bne.n	8002598 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d101      	bne.n	80025be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1af      	b.n	8002946 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fe fc41 	bl	8000e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff19 	bl	8002444 <LL_ADC_IsDeepPowerDownEnabled>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff feff 	bl	8002420 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff34 	bl	8002494 <LL_ADC_IsInternalRegulatorEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d115      	bne.n	800265e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff18 	bl	800246c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800263c:	4b9f      	ldr	r3, [pc, #636]	; (80028bc <HAL_ADC_Init+0x2f0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	4a9f      	ldr	r2, [pc, #636]	; (80028c0 <HAL_ADC_Init+0x2f4>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	3301      	adds	r3, #1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002650:	e002      	b.n	8002658 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3b01      	subs	r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f9      	bne.n	8002652 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff16 	bl	8002494 <LL_ADC_IsInternalRegulatorEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff76 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002694:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 8148 	bne.w	8002934 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 8144 	bne.w	8002934 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026b4:	f043 0202 	orr.w	r2, r3, #2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff23 	bl	800250c <LL_ADC_IsEnabled>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d141      	bne.n	8002750 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d4:	d004      	beq.n	80026e0 <HAL_ADC_Init+0x114>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7a      	ldr	r2, [pc, #488]	; (80028c4 <HAL_ADC_Init+0x2f8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10f      	bne.n	8002700 <HAL_ADC_Init+0x134>
 80026e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026e4:	f7ff ff12 	bl	800250c <LL_ADC_IsEnabled>
 80026e8:	4604      	mov	r4, r0
 80026ea:	4876      	ldr	r0, [pc, #472]	; (80028c4 <HAL_ADC_Init+0x2f8>)
 80026ec:	f7ff ff0e 	bl	800250c <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4323      	orrs	r3, r4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	e012      	b.n	8002726 <HAL_ADC_Init+0x15a>
 8002700:	4871      	ldr	r0, [pc, #452]	; (80028c8 <HAL_ADC_Init+0x2fc>)
 8002702:	f7ff ff03 	bl	800250c <LL_ADC_IsEnabled>
 8002706:	4604      	mov	r4, r0
 8002708:	4870      	ldr	r0, [pc, #448]	; (80028cc <HAL_ADC_Init+0x300>)
 800270a:	f7ff feff 	bl	800250c <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	431c      	orrs	r4, r3
 8002712:	486f      	ldr	r0, [pc, #444]	; (80028d0 <HAL_ADC_Init+0x304>)
 8002714:	f7ff fefa 	bl	800250c <LL_ADC_IsEnabled>
 8002718:	4603      	mov	r3, r0
 800271a:	4323      	orrs	r3, r4
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d012      	beq.n	8002750 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002732:	d004      	beq.n	800273e <HAL_ADC_Init+0x172>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a62      	ldr	r2, [pc, #392]	; (80028c4 <HAL_ADC_Init+0x2f8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x176>
 800273e:	4a65      	ldr	r2, [pc, #404]	; (80028d4 <HAL_ADC_Init+0x308>)
 8002740:	e000      	b.n	8002744 <HAL_ADC_Init+0x178>
 8002742:	4a65      	ldr	r2, [pc, #404]	; (80028d8 <HAL_ADC_Init+0x30c>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f7ff fcd8 	bl	8002100 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7f5b      	ldrb	r3, [r3, #29]
 8002754:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800275a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002760:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002766:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800276e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800277a:	2b01      	cmp	r3, #1
 800277c:	d106      	bne.n	800278c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	045b      	lsls	r3, r3, #17
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	4b4b      	ldr	r3, [pc, #300]	; (80028dc <HAL_ADC_Init+0x310>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fed2 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 80027dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fedf 	bl	80025a6 <LL_ADC_INJ_IsConversionOngoing>
 80027e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d17f      	bne.n	80028f0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d17c      	bne.n	80028f0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002802:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002812:	f023 0302 	bic.w	r3, r3, #2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	69b9      	ldr	r1, [r7, #24]
 800281c:	430b      	orrs	r3, r1
 800281e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d017      	beq.n	8002858 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002836:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002840:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6911      	ldr	r1, [r2, #16]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430b      	orrs	r3, r1
 8002852:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002856:	e013      	b.n	8002880 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002866:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800287c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002886:	2b01      	cmp	r3, #1
 8002888:	d12a      	bne.n	80028e0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028a0:	4311      	orrs	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028ac:	430a      	orrs	r2, r1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	e019      	b.n	80028f0 <HAL_ADC_Init+0x324>
 80028bc:	20000000 	.word	0x20000000
 80028c0:	053e2d63 	.word	0x053e2d63
 80028c4:	50000100 	.word	0x50000100
 80028c8:	50000400 	.word	0x50000400
 80028cc:	50000500 	.word	0x50000500
 80028d0:	50000600 	.word	0x50000600
 80028d4:	50000300 	.word	0x50000300
 80028d8:	50000700 	.word	0x50000700
 80028dc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d10c      	bne.n	8002912 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f023 010f 	bic.w	r1, r3, #15
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
 8002910:	e007      	b.n	8002922 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 020f 	bic.w	r2, r2, #15
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	65da      	str	r2, [r3, #92]	; 0x5c
 8002932:	e007      	b.n	8002944 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	f043 0210 	orr.w	r2, r3, #16
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002944:	7ffb      	ldrb	r3, [r7, #31]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}
 800294e:	bf00      	nop

08002950 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002960:	d004      	beq.n	800296c <HAL_ADC_Start+0x1c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a67      	ldr	r2, [pc, #412]	; (8002b04 <HAL_ADC_Start+0x1b4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_ADC_Start+0x20>
 800296c:	4b66      	ldr	r3, [pc, #408]	; (8002b08 <HAL_ADC_Start+0x1b8>)
 800296e:	e000      	b.n	8002972 <HAL_ADC_Start+0x22>
 8002970:	4b66      	ldr	r3, [pc, #408]	; (8002b0c <HAL_ADC_Start+0x1bc>)
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fd38 	bl	80023e8 <LL_ADC_GetMultimode>
 8002978:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fdfe 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 80b4 	bne.w	8002af4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_ADC_Start+0x4a>
 8002996:	2302      	movs	r3, #2
 8002998:	e0af      	b.n	8002afa <HAL_ADC_Start+0x1aa>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f001 f8c2 	bl	8003b2c <ADC_Enable>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 809b 	bne.w	8002aea <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4d      	ldr	r2, [pc, #308]	; (8002b04 <HAL_ADC_Start+0x1b4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_ADC_Start+0x96>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <HAL_ADC_Start+0x1c0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_Start+0x92>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e003      	b.n	80029ea <HAL_ADC_Start+0x9a>
 80029e2:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <HAL_ADC_Start+0x1c4>)
 80029e4:	e001      	b.n	80029ea <HAL_ADC_Start+0x9a>
 80029e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d002      	beq.n	80029f8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a10:	d106      	bne.n	8002a20 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a16:	f023 0206 	bic.w	r2, r3, #6
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	661a      	str	r2, [r3, #96]	; 0x60
 8002a1e:	e002      	b.n	8002a26 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	221c      	movs	r2, #28
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <HAL_ADC_Start+0x1b4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_ADC_Start+0x104>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a32      	ldr	r2, [pc, #200]	; (8002b10 <HAL_ADC_Start+0x1c0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d002      	beq.n	8002a50 <HAL_ADC_Start+0x100>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_Start+0x108>
 8002a50:	4b30      	ldr	r3, [pc, #192]	; (8002b14 <HAL_ADC_Start+0x1c4>)
 8002a52:	e001      	b.n	8002a58 <HAL_ADC_Start+0x108>
 8002a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d008      	beq.n	8002a72 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d002      	beq.n	8002a72 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	d114      	bne.n	8002a9c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fd5f 	bl	8002558 <LL_ADC_REG_StartConversion>
 8002a9a:	e02d      	b.n	8002af8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <HAL_ADC_Start+0x1b4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_ADC_Start+0x176>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_ADC_Start+0x1c0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d002      	beq.n	8002ac2 <HAL_ADC_Start+0x172>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	e003      	b.n	8002aca <HAL_ADC_Start+0x17a>
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_ADC_Start+0x1c4>)
 8002ac4:	e001      	b.n	8002aca <HAL_ADC_Start+0x17a>
 8002ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aca:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00f      	beq.n	8002af8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ae0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ae8:	e006      	b.n	8002af8 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002af2:	e001      	b.n	8002af8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
 8002af6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	50000100 	.word	0x50000100
 8002b08:	50000300 	.word	0x50000300
 8002b0c:	50000700 	.word	0x50000700
 8002b10:	50000500 	.word	0x50000500
 8002b14:	50000400 	.word	0x50000400

08002b18 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b28:	d004      	beq.n	8002b34 <HAL_ADC_Start_IT+0x1c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a93      	ldr	r2, [pc, #588]	; (8002d7c <HAL_ADC_Start_IT+0x264>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_Start_IT+0x20>
 8002b34:	4b92      	ldr	r3, [pc, #584]	; (8002d80 <HAL_ADC_Start_IT+0x268>)
 8002b36:	e000      	b.n	8002b3a <HAL_ADC_Start_IT+0x22>
 8002b38:	4b92      	ldr	r3, [pc, #584]	; (8002d84 <HAL_ADC_Start_IT+0x26c>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fc54 	bl	80023e8 <LL_ADC_GetMultimode>
 8002b40:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fd1a 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 8134 	bne.w	8002dbc <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_Start_IT+0x4a>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e131      	b.n	8002dc6 <HAL_ADC_Start_IT+0x2ae>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 ffde 	bl	8003b2c <ADC_Enable>
 8002b70:	4603      	mov	r3, r0
 8002b72:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 811b 	bne.w	8002db2 <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a79      	ldr	r2, [pc, #484]	; (8002d7c <HAL_ADC_Start_IT+0x264>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_ADC_Start_IT+0x96>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7a      	ldr	r2, [pc, #488]	; (8002d88 <HAL_ADC_Start_IT+0x270>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d002      	beq.n	8002baa <HAL_ADC_Start_IT+0x92>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_Start_IT+0x9a>
 8002baa:	4b78      	ldr	r3, [pc, #480]	; (8002d8c <HAL_ADC_Start_IT+0x274>)
 8002bac:	e001      	b.n	8002bb2 <HAL_ADC_Start_IT+0x9a>
 8002bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d002      	beq.n	8002bc0 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bdc:	f023 0206 	bic.w	r2, r3, #6
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	661a      	str	r2, [r3, #96]	; 0x60
 8002be4:	e002      	b.n	8002bec <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	221c      	movs	r2, #28
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 021c 	bic.w	r2, r2, #28
 8002c0a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d108      	bne.n	8002c26 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0208 	orr.w	r2, r2, #8
 8002c22:	605a      	str	r2, [r3, #4]
          break;
 8002c24:	e008      	b.n	8002c38 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0204 	orr.w	r2, r2, #4
 8002c34:	605a      	str	r2, [r3, #4]
          break;
 8002c36:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0210 	orr.w	r2, r2, #16
 8002c4e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a49      	ldr	r2, [pc, #292]	; (8002d7c <HAL_ADC_Start_IT+0x264>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d009      	beq.n	8002c6e <HAL_ADC_Start_IT+0x156>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <HAL_ADC_Start_IT+0x270>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d002      	beq.n	8002c6a <HAL_ADC_Start_IT+0x152>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	e003      	b.n	8002c72 <HAL_ADC_Start_IT+0x15a>
 8002c6a:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_ADC_Start_IT+0x274>)
 8002c6c:	e001      	b.n	8002c72 <HAL_ADC_Start_IT+0x15a>
 8002c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d008      	beq.n	8002c8c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d002      	beq.n	8002c8c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	d13b      	bne.n	8002d04 <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d02d      	beq.n	8002cf6 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d110      	bne.n	8002cd4 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0220 	bic.w	r2, r2, #32
 8002cc0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd0:	605a      	str	r2, [r3, #4]
              break;
 8002cd2:	e011      	b.n	8002cf8 <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0220 	orr.w	r2, r2, #32
 8002cf2:	605a      	str	r2, [r3, #4]
              break;
 8002cf4:	e000      	b.n	8002cf8 <HAL_ADC_Start_IT+0x1e0>
          }
        }
 8002cf6:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fc2b 	bl	8002558 <LL_ADC_REG_StartConversion>
 8002d02:	e05f      	b.n	8002dc4 <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_ADC_Start_IT+0x264>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_ADC_Start_IT+0x216>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <HAL_ADC_Start_IT+0x270>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d002      	beq.n	8002d2a <HAL_ADC_Start_IT+0x212>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	e003      	b.n	8002d32 <HAL_ADC_Start_IT+0x21a>
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_ADC_Start_IT+0x274>)
 8002d2c:	e001      	b.n	8002d32 <HAL_ADC_Start_IT+0x21a>
 8002d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d32:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d040      	beq.n	8002dc2 <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d11b      	bne.n	8002d90 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0220 	bic.w	r2, r2, #32
 8002d66:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d76:	605a      	str	r2, [r3, #4]
              break;
 8002d78:	e024      	b.n	8002dc4 <HAL_ADC_Start_IT+0x2ac>
 8002d7a:	bf00      	nop
 8002d7c:	50000100 	.word	0x50000100
 8002d80:	50000300 	.word	0x50000300
 8002d84:	50000700 	.word	0x50000700
 8002d88:	50000500 	.word	0x50000500
 8002d8c:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0220 	orr.w	r2, r2, #32
 8002dae:	605a      	str	r2, [r3, #4]
              break;
 8002db0:	e008      	b.n	8002dc4 <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002dba:	e003      	b.n	8002dc4 <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	75fb      	strb	r3, [r7, #23]
 8002dc0:	e000      	b.n	8002dc4 <HAL_ADC_Start_IT+0x2ac>
        }
 8002dc2:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop

08002dd0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df4:	d004      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x30>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a95      	ldr	r2, [pc, #596]	; (8003050 <HAL_ADC_IRQHandler+0x280>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_IRQHandler+0x34>
 8002e00:	4b94      	ldr	r3, [pc, #592]	; (8003054 <HAL_ADC_IRQHandler+0x284>)
 8002e02:	e000      	b.n	8002e06 <HAL_ADC_IRQHandler+0x36>
 8002e04:	4b94      	ldr	r3, [pc, #592]	; (8003058 <HAL_ADC_IRQHandler+0x288>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff faee 	bl	80023e8 <LL_ADC_GetMultimode>
 8002e0c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d017      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x78>
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d012      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f001 f814 	bl	8003e68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2202      	movs	r2, #2
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_ADC_IRQHandler+0x8c>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8094 	beq.w	8002f90 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 808e 	beq.w	8002f90 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fa07 	bl	80022a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d072      	beq.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6b      	ldr	r2, [pc, #428]	; (8003050 <HAL_ADC_IRQHandler+0x280>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_ADC_IRQHandler+0xea>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6c      	ldr	r2, [pc, #432]	; (800305c <HAL_ADC_IRQHandler+0x28c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d002      	beq.n	8002eb6 <HAL_ADC_IRQHandler+0xe6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e003      	b.n	8002ebe <HAL_ADC_IRQHandler+0xee>
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_ADC_IRQHandler+0x290>)
 8002eb8:	e001      	b.n	8002ebe <HAL_ADC_IRQHandler+0xee>
 8002eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d008      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d002      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b09      	cmp	r3, #9
 8002ed6:	d104      	bne.n	8002ee2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	e014      	b.n	8002f0c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5a      	ldr	r2, [pc, #360]	; (8003050 <HAL_ADC_IRQHandler+0x280>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x130>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5a      	ldr	r2, [pc, #360]	; (800305c <HAL_ADC_IRQHandler+0x28c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d002      	beq.n	8002efc <HAL_ADC_IRQHandler+0x12c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	e003      	b.n	8002f04 <HAL_ADC_IRQHandler+0x134>
 8002efc:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HAL_ADC_IRQHandler+0x290>)
 8002efe:	e001      	b.n	8002f04 <HAL_ADC_IRQHandler+0x134>
 8002f00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f04:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d135      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d12e      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fb29 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11a      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 020c 	bic.w	r2, r2, #12
 8002f42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d112      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f68:	e00b      	b.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f043 0210 	orr.w	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe fd74 	bl	8001a70 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	220c      	movs	r2, #12
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x1d4>
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80b2 	beq.w	8003114 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80ac 	beq.w	8003114 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff f9a2 	bl	8002322 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002fde:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f95d 	bl	80022a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_ADC_IRQHandler+0x280>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d009      	beq.n	800300a <HAL_ADC_IRQHandler+0x23a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a18      	ldr	r2, [pc, #96]	; (800305c <HAL_ADC_IRQHandler+0x28c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d002      	beq.n	8003006 <HAL_ADC_IRQHandler+0x236>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	e003      	b.n	800300e <HAL_ADC_IRQHandler+0x23e>
 8003006:	4b16      	ldr	r3, [pc, #88]	; (8003060 <HAL_ADC_IRQHandler+0x290>)
 8003008:	e001      	b.n	800300e <HAL_ADC_IRQHandler+0x23e>
 800300a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	4293      	cmp	r3, r2
 8003014:	d008      	beq.n	8003028 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b06      	cmp	r3, #6
 8003020:	d002      	beq.n	8003028 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b07      	cmp	r3, #7
 8003026:	d104      	bne.n	8003032 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	e01e      	b.n	8003070 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a06      	ldr	r2, [pc, #24]	; (8003050 <HAL_ADC_IRQHandler+0x280>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_ADC_IRQHandler+0x294>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a06      	ldr	r2, [pc, #24]	; (800305c <HAL_ADC_IRQHandler+0x28c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d002      	beq.n	800304c <HAL_ADC_IRQHandler+0x27c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	e00d      	b.n	8003068 <HAL_ADC_IRQHandler+0x298>
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_ADC_IRQHandler+0x290>)
 800304e:	e00b      	b.n	8003068 <HAL_ADC_IRQHandler+0x298>
 8003050:	50000100 	.word	0x50000100
 8003054:	50000300 	.word	0x50000300
 8003058:	50000700 	.word	0x50000700
 800305c:	50000500 	.word	0x50000500
 8003060:	50000400 	.word	0x50000400
 8003064:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003068:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d047      	beq.n	8003106 <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_ADC_IRQHandler+0x2c0>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03f      	beq.n	8003106 <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800308c:	2b00      	cmp	r3, #0
 800308e:	d13a      	bne.n	8003106 <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d133      	bne.n	8003106 <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d12e      	bne.n	8003106 <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fa7a 	bl	80025a6 <LL_ADC_INJ_IsConversionOngoing>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11a      	bne.n	80030ee <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030c6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d112      	bne.n	8003106 <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80030ec:	e00b      	b.n	8003106 <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	f043 0210 	orr.w	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fe86 	bl	8003e18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2260      	movs	r2, #96	; 0x60
 8003112:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d011      	beq.n	8003142 <HAL_ADC_IRQHandler+0x372>
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00c      	beq.n	8003142 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f8a5 	bl	8003284 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d012      	beq.n	8003172 <HAL_ADC_IRQHandler+0x3a2>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fe6c 	bl	8003e40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003170:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003178:	2b00      	cmp	r3, #0
 800317a:	d012      	beq.n	80031a2 <HAL_ADC_IRQHandler+0x3d2>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fe5e 	bl	8003e54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d043      	beq.n	8003234 <HAL_ADC_IRQHandler+0x464>
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03e      	beq.n	8003234 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 80031be:	2301      	movs	r3, #1
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	e021      	b.n	8003208 <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d015      	beq.n	80031f6 <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d2:	d004      	beq.n	80031de <HAL_ADC_IRQHandler+0x40e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a27      	ldr	r2, [pc, #156]	; (8003278 <HAL_ADC_IRQHandler+0x4a8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_IRQHandler+0x412>
 80031de:	4b27      	ldr	r3, [pc, #156]	; (800327c <HAL_ADC_IRQHandler+0x4ac>)
 80031e0:	e000      	b.n	80031e4 <HAL_ADC_IRQHandler+0x414>
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_ADC_IRQHandler+0x4b0>)
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f90d 	bl	8002404 <LL_ADC_GetMultiDMATransfer>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00b      	beq.n	8003208 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80031f0:	2301      	movs	r3, #1
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
 80031f4:	e008      	b.n	8003208 <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8003204:	2301      	movs	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10e      	bne.n	800322c <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	f043 0202 	orr.w	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f836 	bl	8003298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2210      	movs	r2, #16
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d018      	beq.n	8003270 <HAL_ADC_IRQHandler+0x4a0>
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d013      	beq.n	8003270 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003258:	f043 0208 	orr.w	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003268:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fdde 	bl	8003e2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003270:	bf00      	nop
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	50000100 	.word	0x50000100
 800327c:	50000300 	.word	0x50000300
 8003280:	50000700 	.word	0x50000700

08003284 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0b6      	sub	sp, #216	; 0xd8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d102      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x24>
 80032ca:	2302      	movs	r3, #2
 80032cc:	f000 bc13 	b.w	8003af6 <HAL_ADC_ConfigChannel+0x84a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff f94f 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 83f3 	bne.w	8003ad0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f7fe ffe7 	bl	80022ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f93d 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8003306:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff f949 	bl	80025a6 <LL_ADC_INJ_IsConversionOngoing>
 8003314:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003318:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 81d9 	bne.w	80036d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 81d4 	bne.w	80036d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003334:	d10f      	bne.n	8003356 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	4619      	mov	r1, r3
 8003342:	f7ff f801 	bl	8002348 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe ff95 	bl	800227e <LL_ADC_SetSamplingTimeCommonConfig>
 8003354:	e00e      	b.n	8003374 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	461a      	mov	r2, r3
 8003364:	f7fe fff0 	bl	8002348 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ff85 	bl	800227e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	08db      	lsrs	r3, r3, #3
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b04      	cmp	r3, #4
 8003394:	d022      	beq.n	80033dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6919      	ldr	r1, [r3, #16]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033a6:	f7fe fedf 	bl	8002168 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6919      	ldr	r1, [r3, #16]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f7fe ff2b 	bl	8002212 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6919      	ldr	r1, [r3, #16]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	7f1b      	ldrb	r3, [r3, #28]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d102      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x126>
 80033cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d0:	e000      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x128>
 80033d2:	2300      	movs	r3, #0
 80033d4:	461a      	mov	r2, r3
 80033d6:	f7fe ff37 	bl	8002248 <LL_ADC_SetOffsetSaturation>
 80033da:	e17b      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fee4 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x15c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fed9 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 80033fe:	4603      	mov	r3, r0
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	f003 021f 	and.w	r2, r3, #31
 8003406:	e01e      	b.n	8003446 <HAL_ADC_ConfigChannel+0x19a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fece 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8003414:	4603      	mov	r3, r0
 8003416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800342a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800342e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e004      	b.n	8003444 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800343a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_ADC_ConfigChannel+0x1b2>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	0e9b      	lsrs	r3, r3, #26
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	e018      	b.n	8003490 <HAL_ADC_ConfigChannel+0x1e4>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800347a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e004      	b.n	8003490 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003486:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003490:	429a      	cmp	r2, r3
 8003492:	d106      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fe9d 	bl	80021dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fe81 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x222>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fe76 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 80034c4:	4603      	mov	r3, r0
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	e01e      	b.n	800350c <HAL_ADC_ConfigChannel+0x260>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe fe6b 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80034ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80034f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e004      	b.n	800350a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x278>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	e018      	b.n	8003556 <HAL_ADC_ConfigChannel+0x2aa>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003538:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800353c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	e004      	b.n	8003556 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800354c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003556:	429a      	cmp	r2, r3
 8003558:	d106      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	2101      	movs	r1, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fe3a 	bl	80021dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2102      	movs	r1, #2
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fe1e 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x2e8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2102      	movs	r1, #2
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fe13 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	f003 021f 	and.w	r2, r3, #31
 8003592:	e01e      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x326>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2102      	movs	r1, #2
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fe08 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e004      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x33e>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	e016      	b.n	8003618 <HAL_ADC_ConfigChannel+0x36c>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80035fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800360a:	2320      	movs	r3, #32
 800360c:	e004      	b.n	8003618 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800360e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003618:	429a      	cmp	r2, r3
 800361a:	d106      	bne.n	800362a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe fdd9 	bl	80021dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2103      	movs	r1, #3
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fdbd 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x3aa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2103      	movs	r1, #3
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fdb2 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	0e9b      	lsrs	r3, r3, #26
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	e017      	b.n	8003686 <HAL_ADC_ConfigChannel+0x3da>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2103      	movs	r1, #3
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fda7 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8003662:	4603      	mov	r3, r0
 8003664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800366e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003670:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003678:	2320      	movs	r3, #32
 800367a:	e003      	b.n	8003684 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800367c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <HAL_ADC_ConfigChannel+0x3f2>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	e011      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x416>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e003      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d106      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2200      	movs	r2, #0
 80036cc:	2103      	movs	r1, #3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fd84 	bl	80021dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe ff17 	bl	800250c <LL_ADC_IsEnabled>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 813d 	bne.w	8003960 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f7fe fe54 	bl	80023a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4aa2      	ldr	r2, [pc, #648]	; (8003988 <HAL_ADC_ConfigChannel+0x6dc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f040 812e 	bne.w	8003960 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_ADC_ConfigChannel+0x480>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	3301      	adds	r3, #1
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2b09      	cmp	r3, #9
 8003722:	bf94      	ite	ls
 8003724:	2301      	movls	r3, #1
 8003726:	2300      	movhi	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e019      	b.n	8003760 <HAL_ADC_ConfigChannel+0x4b4>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800373a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800373c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800373e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003744:	2320      	movs	r3, #32
 8003746:	e003      	b.n	8003750 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2b09      	cmp	r3, #9
 8003758:	bf94      	ite	ls
 800375a:	2301      	movls	r3, #1
 800375c:	2300      	movhi	r3, #0
 800375e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003760:	2b00      	cmp	r3, #0
 8003762:	d079      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x4d4>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0e9b      	lsrs	r3, r3, #26
 8003776:	3301      	adds	r3, #1
 8003778:	069b      	lsls	r3, r3, #26
 800377a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800377e:	e015      	b.n	80037ac <HAL_ADC_ConfigChannel+0x500>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800378e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003790:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003798:	2320      	movs	r3, #32
 800379a:	e003      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800379c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	069b      	lsls	r3, r3, #26
 80037a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x520>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0e9b      	lsrs	r3, r3, #26
 80037be:	3301      	adds	r3, #1
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	2101      	movs	r1, #1
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	e017      	b.n	80037fc <HAL_ADC_ConfigChannel+0x550>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80037e4:	2320      	movs	r3, #32
 80037e6:	e003      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80037e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	ea42 0103 	orr.w	r1, r2, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x576>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	3301      	adds	r3, #1
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	051b      	lsls	r3, r3, #20
 8003820:	e018      	b.n	8003854 <HAL_ADC_ConfigChannel+0x5a8>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800383a:	2320      	movs	r3, #32
 800383c:	e003      	b.n	8003846 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800383e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003854:	430b      	orrs	r3, r1
 8003856:	e07e      	b.n	8003956 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x5c8>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	0e9b      	lsrs	r3, r3, #26
 800386a:	3301      	adds	r3, #1
 800386c:	069b      	lsls	r3, r3, #26
 800386e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003872:	e015      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x5f4>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800388c:	2320      	movs	r3, #32
 800388e:	e003      	b.n	8003898 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3301      	adds	r3, #1
 800389a:	069b      	lsls	r3, r3, #26
 800389c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x614>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0e9b      	lsrs	r3, r3, #26
 80038b2:	3301      	adds	r3, #1
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	e017      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x644>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	61fb      	str	r3, [r7, #28]
  return result;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	ea42 0103 	orr.w	r1, r2, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10d      	bne.n	800391c <HAL_ADC_ConfigChannel+0x670>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0e9b      	lsrs	r3, r3, #26
 8003906:	3301      	adds	r3, #1
 8003908:	f003 021f 	and.w	r2, r3, #31
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	3b1e      	subs	r3, #30
 8003914:	051b      	lsls	r3, r3, #20
 8003916:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800391a:	e01b      	b.n	8003954 <HAL_ADC_ConfigChannel+0x6a8>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	613b      	str	r3, [r7, #16]
  return result;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e003      	b.n	8003940 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	f003 021f 	and.w	r2, r3, #31
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	3b1e      	subs	r3, #30
 800394e:	051b      	lsls	r3, r3, #20
 8003950:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003954:	430b      	orrs	r3, r1
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	6892      	ldr	r2, [r2, #8]
 800395a:	4619      	mov	r1, r3
 800395c:	f7fe fcf4 	bl	8002348 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_ADC_ConfigChannel+0x6e0>)
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80be 	beq.w	8003aea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003976:	d004      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x6d6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a04      	ldr	r2, [pc, #16]	; (8003990 <HAL_ADC_ConfigChannel+0x6e4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10a      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x6ec>
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_ADC_ConfigChannel+0x6e8>)
 8003984:	e009      	b.n	800399a <HAL_ADC_ConfigChannel+0x6ee>
 8003986:	bf00      	nop
 8003988:	407f0000 	.word	0x407f0000
 800398c:	80080000 	.word	0x80080000
 8003990:	50000100 	.word	0x50000100
 8003994:	50000300 	.word	0x50000300
 8003998:	4b59      	ldr	r3, [pc, #356]	; (8003b00 <HAL_ADC_ConfigChannel+0x854>)
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fbd6 	bl	800214c <LL_ADC_GetCommonPathInternalCh>
 80039a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a56      	ldr	r2, [pc, #344]	; (8003b04 <HAL_ADC_ConfigChannel+0x858>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_ADC_ConfigChannel+0x70c>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a55      	ldr	r2, [pc, #340]	; (8003b08 <HAL_ADC_ConfigChannel+0x85c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d13a      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d134      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039cc:	d005      	beq.n	80039da <HAL_ADC_ConfigChannel+0x72e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a4e      	ldr	r2, [pc, #312]	; (8003b0c <HAL_ADC_ConfigChannel+0x860>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	f040 8085 	bne.w	8003ae4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e2:	d004      	beq.n	80039ee <HAL_ADC_ConfigChannel+0x742>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a49      	ldr	r2, [pc, #292]	; (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x746>
 80039ee:	4a49      	ldr	r2, [pc, #292]	; (8003b14 <HAL_ADC_ConfigChannel+0x868>)
 80039f0:	e000      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x748>
 80039f2:	4a43      	ldr	r2, [pc, #268]	; (8003b00 <HAL_ADC_ConfigChannel+0x854>)
 80039f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f7fe fb91 	bl	8002126 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a04:	4b44      	ldr	r3, [pc, #272]	; (8003b18 <HAL_ADC_ConfigChannel+0x86c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	4a44      	ldr	r2, [pc, #272]	; (8003b1c <HAL_ADC_ConfigChannel+0x870>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a1e:	e002      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f9      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a2c:	e05a      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3b      	ldr	r2, [pc, #236]	; (8003b20 <HAL_ADC_ConfigChannel+0x874>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d125      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x7d8>
 8003a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d11f      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a31      	ldr	r2, [pc, #196]	; (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d104      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x7ac>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a34      	ldr	r2, [pc, #208]	; (8003b24 <HAL_ADC_ConfigChannel+0x878>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d047      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a60:	d004      	beq.n	8003a6c <HAL_ADC_ConfigChannel+0x7c0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2a      	ldr	r2, [pc, #168]	; (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x7c4>
 8003a6c:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <HAL_ADC_ConfigChannel+0x868>)
 8003a6e:	e000      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x7c6>
 8003a70:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <HAL_ADC_ConfigChannel+0x854>)
 8003a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f7fe fb52 	bl	8002126 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a82:	e031      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a27      	ldr	r2, [pc, #156]	; (8003b28 <HAL_ADC_ConfigChannel+0x87c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d12d      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d127      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aac:	d004      	beq.n	8003ab8 <HAL_ADC_ConfigChannel+0x80c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x810>
 8003ab8:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_ADC_ConfigChannel+0x868>)
 8003aba:	e000      	b.n	8003abe <HAL_ADC_ConfigChannel+0x812>
 8003abc:	4a10      	ldr	r2, [pc, #64]	; (8003b00 <HAL_ADC_ConfigChannel+0x854>)
 8003abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe fb2c 	bl	8002126 <LL_ADC_SetCommonPathInternalCh>
 8003ace:	e00c      	b.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003ae2:	e002      	b.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ae8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003af2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	37d8      	adds	r7, #216	; 0xd8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	50000700 	.word	0x50000700
 8003b04:	c3210000 	.word	0xc3210000
 8003b08:	90c00010 	.word	0x90c00010
 8003b0c:	50000600 	.word	0x50000600
 8003b10:	50000100 	.word	0x50000100
 8003b14:	50000300 	.word	0x50000300
 8003b18:	20000000 	.word	0x20000000
 8003b1c:	053e2d63 	.word	0x053e2d63
 8003b20:	c7520000 	.word	0xc7520000
 8003b24:	50000500 	.word	0x50000500
 8003b28:	cb840000 	.word	0xcb840000

08003b2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fce7 	bl	800250c <LL_ADC_IsEnabled>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d14d      	bne.n	8003be0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	4b28      	ldr	r3, [pc, #160]	; (8003bec <ADC_Enable+0xc0>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e039      	b.n	8003be2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fca2 	bl	80024bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b78:	f7fe fa94 	bl	80020a4 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b7e:	e028      	b.n	8003bd2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe fcc1 	bl	800250c <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe fc91 	bl	80024bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b9a:	f7fe fa83 	bl	80020a4 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d914      	bls.n	8003bd2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d00d      	beq.n	8003bd2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e007      	b.n	8003be2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d1cf      	bne.n	8003b80 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	8000003f 	.word	0x8000003f

08003bf0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fc98 	bl	8002532 <LL_ADC_IsDisableOngoing>
 8003c02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fc7f 	bl	800250c <LL_ADC_IsEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d047      	beq.n	8003ca4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d144      	bne.n	8003ca4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 030d 	and.w	r3, r3, #13
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d10c      	bne.n	8003c42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fc59 	bl	80024e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2203      	movs	r2, #3
 8003c38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c3a:	f7fe fa33 	bl	80020a4 <HAL_GetTick>
 8003c3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c40:	e029      	b.n	8003c96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	f043 0210 	orr.w	r2, r3, #16
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e023      	b.n	8003ca6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c5e:	f7fe fa21 	bl	80020a4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d914      	bls.n	8003c96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	f043 0210 	orr.w	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8a:	f043 0201 	orr.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e007      	b.n	8003ca6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1dc      	bne.n	8003c5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <LL_ADC_IsEnabled>:
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <LL_ADC_IsEnabled+0x18>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <LL_ADC_IsEnabled+0x1a>
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_ADC_StartCalibration>:
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ce6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_ADC_IsCalibrationOnGoing>:
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1a:	d101      	bne.n	8003d20 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_REG_IsConversionOngoing>:
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d101      	bne.n	8003d46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e04d      	b.n	8003e0c <HAL_ADCEx_Calibration_Start+0xb8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff39 	bl	8003bf0 <ADC_Disable>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d136      	bne.n	8003df6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d90:	f023 0302 	bic.w	r3, r3, #2
 8003d94:	f043 0202 	orr.w	r2, r3, #2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6839      	ldr	r1, [r7, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ff96 	bl	8003cd4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003da8:	e014      	b.n	8003dd4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3301      	adds	r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d90d      	bls.n	8003dd4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	f023 0312 	bic.w	r3, r3, #18
 8003dc0:	f043 0210 	orr.w	r2, r3, #16
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e01b      	b.n	8003e0c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff94 	bl	8003d06 <LL_ADC_IsCalibrationOnGoing>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e2      	bne.n	8003daa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	f023 0303 	bic.w	r3, r3, #3
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003df4:	e005      	b.n	8003e02 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	f043 0210 	orr.w	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	0004de01 	.word	0x0004de01

08003e18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b0a1      	sub	sp, #132	; 0x84
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e0e7      	b.n	800406a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb2:	d102      	bne.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003eb4:	4b6f      	ldr	r3, [pc, #444]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	e009      	b.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6e      	ldr	r2, [pc, #440]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d102      	bne.n	8003eca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003ec4:	4b6d      	ldr	r3, [pc, #436]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	e001      	b.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0be      	b.n	800406a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff1d 	bl	8003d2e <LL_ADC_REG_IsConversionOngoing>
 8003ef4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ff17 	bl	8003d2e <LL_ADC_REG_IsConversionOngoing>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 80a0 	bne.w	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 809c 	bne.w	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f18:	d004      	beq.n	8003f24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a55      	ldr	r2, [pc, #340]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003f24:	4b56      	ldr	r3, [pc, #344]	; (8004080 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003f26:	e000      	b.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003f28:	4b56      	ldr	r3, [pc, #344]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003f2a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d04b      	beq.n	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f46:	035b      	lsls	r3, r3, #13
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f58:	d004      	beq.n	8003f64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a45      	ldr	r2, [pc, #276]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10f      	bne.n	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003f64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f68:	f7ff fea1 	bl	8003cae <LL_ADC_IsEnabled>
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	4841      	ldr	r0, [pc, #260]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f70:	f7ff fe9d 	bl	8003cae <LL_ADC_IsEnabled>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4323      	orrs	r3, r4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e012      	b.n	8003faa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003f84:	483c      	ldr	r0, [pc, #240]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f86:	f7ff fe92 	bl	8003cae <LL_ADC_IsEnabled>
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	483b      	ldr	r0, [pc, #236]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f8e:	f7ff fe8e 	bl	8003cae <LL_ADC_IsEnabled>
 8003f92:	4603      	mov	r3, r0
 8003f94:	431c      	orrs	r4, r3
 8003f96:	483c      	ldr	r0, [pc, #240]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f98:	f7ff fe89 	bl	8003cae <LL_ADC_IsEnabled>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4323      	orrs	r3, r4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d056      	beq.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003fb6:	f023 030f 	bic.w	r3, r3, #15
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	6811      	ldr	r1, [r2, #0]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	6892      	ldr	r2, [r2, #8]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fca:	e047      	b.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fe0:	d004      	beq.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a23      	ldr	r2, [pc, #140]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10f      	bne.n	800400c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003fec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ff0:	f7ff fe5d 	bl	8003cae <LL_ADC_IsEnabled>
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	481f      	ldr	r0, [pc, #124]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ff8:	f7ff fe59 	bl	8003cae <LL_ADC_IsEnabled>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4323      	orrs	r3, r4
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e012      	b.n	8004032 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800400c:	481a      	ldr	r0, [pc, #104]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800400e:	f7ff fe4e 	bl	8003cae <LL_ADC_IsEnabled>
 8004012:	4604      	mov	r4, r0
 8004014:	4819      	ldr	r0, [pc, #100]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004016:	f7ff fe4a 	bl	8003cae <LL_ADC_IsEnabled>
 800401a:	4603      	mov	r3, r0
 800401c:	431c      	orrs	r4, r3
 800401e:	481a      	ldr	r0, [pc, #104]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004020:	f7ff fe45 	bl	8003cae <LL_ADC_IsEnabled>
 8004024:	4603      	mov	r3, r0
 8004026:	4323      	orrs	r3, r4
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d012      	beq.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800403e:	f023 030f 	bic.w	r3, r3, #15
 8004042:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004044:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004046:	e009      	b.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800405a:	e000      	b.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800405c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004066:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800406a:	4618      	mov	r0, r3
 800406c:	3784      	adds	r7, #132	; 0x84
 800406e:	46bd      	mov	sp, r7
 8004070:	bd90      	pop	{r4, r7, pc}
 8004072:	bf00      	nop
 8004074:	50000100 	.word	0x50000100
 8004078:	50000400 	.word	0x50000400
 800407c:	50000500 	.word	0x50000500
 8004080:	50000300 	.word	0x50000300
 8004084:	50000700 	.word	0x50000700
 8004088:	50000600 	.word	0x50000600

0800408c <__NVIC_SetPriorityGrouping>:
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <__NVIC_SetPriorityGrouping+0x44>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040a8:	4013      	ands	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040be:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <__NVIC_SetPriorityGrouping+0x44>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	60d3      	str	r3, [r2, #12]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <__NVIC_GetPriorityGrouping>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <__NVIC_GetPriorityGrouping+0x18>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	f003 0307 	and.w	r3, r3, #7
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <__NVIC_EnableIRQ>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	db0b      	blt.n	800411a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	f003 021f 	and.w	r2, r3, #31
 8004108:	4907      	ldr	r1, [pc, #28]	; (8004128 <__NVIC_EnableIRQ+0x38>)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2001      	movs	r0, #1
 8004112:	fa00 f202 	lsl.w	r2, r0, r2
 8004116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000e100 	.word	0xe000e100

0800412c <__NVIC_SetPriority>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413c:	2b00      	cmp	r3, #0
 800413e:	db0a      	blt.n	8004156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	490c      	ldr	r1, [pc, #48]	; (8004178 <__NVIC_SetPriority+0x4c>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	0112      	lsls	r2, r2, #4
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	440b      	add	r3, r1
 8004150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004154:	e00a      	b.n	800416c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	4908      	ldr	r1, [pc, #32]	; (800417c <__NVIC_SetPriority+0x50>)
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	3b04      	subs	r3, #4
 8004164:	0112      	lsls	r2, r2, #4
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	440b      	add	r3, r1
 800416a:	761a      	strb	r2, [r3, #24]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000e100 	.word	0xe000e100
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <NVIC_EncodePriority>:
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f1c3 0307 	rsb	r3, r3, #7
 800419a:	2b04      	cmp	r3, #4
 800419c:	bf28      	it	cs
 800419e:	2304      	movcs	r3, #4
 80041a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d902      	bls.n	80041b0 <NVIC_EncodePriority+0x30>
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3b03      	subs	r3, #3
 80041ae:	e000      	b.n	80041b2 <NVIC_EncodePriority+0x32>
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	401a      	ands	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43d9      	mvns	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	4313      	orrs	r3, r2
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3724      	adds	r7, #36	; 0x24
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <SysTick_Config>:
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f8:	d301      	bcc.n	80041fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80041fa:	2301      	movs	r3, #1
 80041fc:	e00f      	b.n	800421e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <SysTick_Config+0x40>)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3b01      	subs	r3, #1
 8004204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004206:	210f      	movs	r1, #15
 8004208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800420c:	f7ff ff8e 	bl	800412c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <SysTick_Config+0x40>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004216:	4b04      	ldr	r3, [pc, #16]	; (8004228 <SysTick_Config+0x40>)
 8004218:	2207      	movs	r2, #7
 800421a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	e000e010 	.word	0xe000e010

0800422c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff ff29 	bl	800408c <__NVIC_SetPriorityGrouping>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b086      	sub	sp, #24
 8004246:	af00      	add	r7, sp, #0
 8004248:	4603      	mov	r3, r0
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004250:	f7ff ff40 	bl	80040d4 <__NVIC_GetPriorityGrouping>
 8004254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	6978      	ldr	r0, [r7, #20]
 800425c:	f7ff ff90 	bl	8004180 <NVIC_EncodePriority>
 8004260:	4602      	mov	r2, r0
 8004262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ff5f 	bl	800412c <__NVIC_SetPriority>
}
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	4603      	mov	r3, r0
 800427e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff33 	bl	80040f0 <__NVIC_EnableIRQ>
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ffa4 	bl	80041e8 <SysTick_Config>
 80042a0:	4603      	mov	r3, r0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042ba:	e15a      	b.n	8004572 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	2101      	movs	r1, #1
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	4013      	ands	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 814c 	beq.w	800456c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d00b      	beq.n	80042f4 <HAL_GPIO_Init+0x48>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d007      	beq.n	80042f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042e8:	2b11      	cmp	r3, #17
 80042ea:	d003      	beq.n	80042f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b12      	cmp	r3, #18
 80042f2:	d130      	bne.n	8004356 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	2203      	movs	r2, #3
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800432a:	2201      	movs	r2, #1
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	f003 0201 	and.w	r2, r3, #1
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	2203      	movs	r2, #3
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_Init+0xea>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b12      	cmp	r3, #18
 8004394:	d123      	bne.n	80043de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	08da      	lsrs	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3208      	adds	r2, #8
 800439e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	220f      	movs	r2, #15
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	08da      	lsrs	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3208      	adds	r2, #8
 80043d8:	6939      	ldr	r1, [r7, #16]
 80043da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	2203      	movs	r2, #3
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0203 	and.w	r2, r3, #3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80a6 	beq.w	800456c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004420:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <HAL_GPIO_Init+0x2e4>)
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	4a5a      	ldr	r2, [pc, #360]	; (8004590 <HAL_GPIO_Init+0x2e4>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6613      	str	r3, [r2, #96]	; 0x60
 800442c:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_GPIO_Init+0x2e4>)
 800442e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004438:	4a56      	ldr	r2, [pc, #344]	; (8004594 <HAL_GPIO_Init+0x2e8>)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	3302      	adds	r3, #2
 8004440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	220f      	movs	r2, #15
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004462:	d01f      	beq.n	80044a4 <HAL_GPIO_Init+0x1f8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a4c      	ldr	r2, [pc, #304]	; (8004598 <HAL_GPIO_Init+0x2ec>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d019      	beq.n	80044a0 <HAL_GPIO_Init+0x1f4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a4b      	ldr	r2, [pc, #300]	; (800459c <HAL_GPIO_Init+0x2f0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_GPIO_Init+0x1f0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a4a      	ldr	r2, [pc, #296]	; (80045a0 <HAL_GPIO_Init+0x2f4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00d      	beq.n	8004498 <HAL_GPIO_Init+0x1ec>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a49      	ldr	r2, [pc, #292]	; (80045a4 <HAL_GPIO_Init+0x2f8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <HAL_GPIO_Init+0x1e8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a48      	ldr	r2, [pc, #288]	; (80045a8 <HAL_GPIO_Init+0x2fc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <HAL_GPIO_Init+0x1e4>
 800448c:	2305      	movs	r3, #5
 800448e:	e00a      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 8004490:	2306      	movs	r3, #6
 8004492:	e008      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 8004494:	2304      	movs	r3, #4
 8004496:	e006      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 8004498:	2303      	movs	r3, #3
 800449a:	e004      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 800449c:	2302      	movs	r3, #2
 800449e:	e002      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 80044a4:	2300      	movs	r3, #0
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	f002 0203 	and.w	r2, r2, #3
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	4093      	lsls	r3, r2
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044b6:	4937      	ldr	r1, [pc, #220]	; (8004594 <HAL_GPIO_Init+0x2e8>)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	3302      	adds	r3, #2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044c4:	4b39      	ldr	r3, [pc, #228]	; (80045ac <HAL_GPIO_Init+0x300>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044e8:	4a30      	ldr	r2, [pc, #192]	; (80045ac <HAL_GPIO_Init+0x300>)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <HAL_GPIO_Init+0x300>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004512:	4a26      	ldr	r2, [pc, #152]	; (80045ac <HAL_GPIO_Init+0x300>)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <HAL_GPIO_Init+0x300>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	43db      	mvns	r3, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800453c:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_GPIO_Init+0x300>)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004542:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <HAL_GPIO_Init+0x300>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004566:	4a11      	ldr	r2, [pc, #68]	; (80045ac <HAL_GPIO_Init+0x300>)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3301      	adds	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f ae9d 	bne.w	80042bc <HAL_GPIO_Init+0x10>
  }
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40021000 	.word	0x40021000
 8004594:	40010000 	.word	0x40010000
 8004598:	48000400 	.word	0x48000400
 800459c:	48000800 	.word	0x48000800
 80045a0:	48000c00 	.word	0x48000c00
 80045a4:	48001000 	.word	0x48001000
 80045a8:	48001400 	.word	0x48001400
 80045ac:	40010400 	.word	0x40010400

080045b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
 80045bc:	4613      	mov	r3, r2
 80045be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045c0:	787b      	ldrb	r3, [r7, #1]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045c6:	887a      	ldrh	r2, [r7, #2]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045cc:	e002      	b.n	80045d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045f2:	887a      	ldrh	r2, [r7, #2]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4013      	ands	r3, r2
 80045f8:	041a      	lsls	r2, r3, #16
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	43d9      	mvns	r1, r3
 80045fe:	887b      	ldrh	r3, [r7, #2]
 8004600:	400b      	ands	r3, r1
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	619a      	str	r2, [r3, #24]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d006      	beq.n	8004638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800462a:	4a05      	ldr	r2, [pc, #20]	; (8004640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc ff86 	bl	8001544 <HAL_GPIO_EXTI_Callback>
  }
}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40010400 	.word	0x40010400

08004644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e081      	b.n	800475a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc ffb8 	bl	80015e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	; 0x24
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004694:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	e006      	b.n	80046cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d104      	bne.n	80046de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004700:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	ea42 0103 	orr.w	r1, r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69d9      	ldr	r1, [r3, #28]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b20      	cmp	r3, #32
 8004776:	d138      	bne.n	80047ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004782:	2302      	movs	r3, #2
 8004784:	e032      	b.n	80047ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2224      	movs	r2, #36	; 0x24
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0201 	bic.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6819      	ldr	r1, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	d139      	bne.n	8004882 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004818:	2302      	movs	r3, #2
 800481a:	e033      	b.n	8004884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800484a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0201 	orr.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d141      	bne.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800489e:	4b4b      	ldr	r3, [pc, #300]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048aa:	d131      	bne.n	8004910 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048ac:	4b47      	ldr	r3, [pc, #284]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b2:	4a46      	ldr	r2, [pc, #280]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048bc:	4b43      	ldr	r3, [pc, #268]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048c4:	4a41      	ldr	r2, [pc, #260]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048cc:	4b40      	ldr	r3, [pc, #256]	; (80049d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2232      	movs	r2, #50	; 0x32
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	4a3f      	ldr	r2, [pc, #252]	; (80049d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	0c9b      	lsrs	r3, r3, #18
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e2:	e002      	b.n	80048ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ea:	4b38      	ldr	r3, [pc, #224]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f6:	d102      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f2      	bne.n	80048e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048fe:	4b33      	ldr	r3, [pc, #204]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490a:	d158      	bne.n	80049be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e057      	b.n	80049c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004910:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004916:	4a2d      	ldr	r2, [pc, #180]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800491c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004920:	e04d      	b.n	80049be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004928:	d141      	bne.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800492a:	4b28      	ldr	r3, [pc, #160]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004936:	d131      	bne.n	800499c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004938:	4b24      	ldr	r3, [pc, #144]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493e:	4a23      	ldr	r2, [pc, #140]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004948:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004950:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004956:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004958:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2232      	movs	r2, #50	; 0x32
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	0c9b      	lsrs	r3, r3, #18
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800496e:	e002      	b.n	8004976 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3b01      	subs	r3, #1
 8004974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004982:	d102      	bne.n	800498a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f2      	bne.n	8004970 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800498a:	4b10      	ldr	r3, [pc, #64]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004996:	d112      	bne.n	80049be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e011      	b.n	80049c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049ac:	e007      	b.n	80049be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049b6:	4a05      	ldr	r2, [pc, #20]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40007000 	.word	0x40007000
 80049d0:	20000000 	.word	0x20000000
 80049d4:	431bde83 	.word	0x431bde83

080049d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049e6:	6093      	str	r3, [r2, #8]
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40007000 	.word	0x40007000

080049f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e308      	b.n	800501c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d075      	beq.n	8004b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a16:	4ba3      	ldr	r3, [pc, #652]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a20:	4ba0      	ldr	r3, [pc, #640]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b0c      	cmp	r3, #12
 8004a2e:	d102      	bne.n	8004a36 <HAL_RCC_OscConfig+0x3e>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d002      	beq.n	8004a3c <HAL_RCC_OscConfig+0x44>
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	4b99      	ldr	r3, [pc, #612]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d05b      	beq.n	8004b00 <HAL_RCC_OscConfig+0x108>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d157      	bne.n	8004b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e2e3      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d106      	bne.n	8004a6c <HAL_RCC_OscConfig+0x74>
 8004a5e:	4b91      	ldr	r3, [pc, #580]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a90      	ldr	r2, [pc, #576]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e01d      	b.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x98>
 8004a76:	4b8b      	ldr	r3, [pc, #556]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a8a      	ldr	r2, [pc, #552]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b88      	ldr	r3, [pc, #544]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a87      	ldr	r2, [pc, #540]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
 8004a90:	4b84      	ldr	r3, [pc, #528]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a83      	ldr	r2, [pc, #524]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b81      	ldr	r3, [pc, #516]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a80      	ldr	r2, [pc, #512]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fd faf8 	bl	80020a4 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fd faf4 	bl	80020a4 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e2a8      	b.n	800501c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aca:	4b76      	ldr	r3, [pc, #472]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xc0>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fd fae4 	bl	80020a4 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fd fae0 	bl	80020a4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e294      	b.n	800501c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004af2:	4b6c      	ldr	r3, [pc, #432]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0xe8>
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d075      	beq.n	8004bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0e:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b18:	4b62      	ldr	r3, [pc, #392]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	d102      	bne.n	8004b2e <HAL_RCC_OscConfig+0x136>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d002      	beq.n	8004b34 <HAL_RCC_OscConfig+0x13c>
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d11f      	bne.n	8004b74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b34:	4b5b      	ldr	r3, [pc, #364]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_OscConfig+0x154>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e267      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4c:	4b55      	ldr	r3, [pc, #340]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	4952      	ldr	r1, [pc, #328]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b60:	4b51      	ldr	r3, [pc, #324]	; (8004ca8 <HAL_RCC_OscConfig+0x2b0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fd fa51 	bl	800200c <HAL_InitTick>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d043      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e253      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d023      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b7c:	4b49      	ldr	r3, [pc, #292]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a48      	ldr	r2, [pc, #288]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fd fa8c 	bl	80020a4 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b90:	f7fd fa88 	bl	80020a4 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e23c      	b.n	800501c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba2:	4b40      	ldr	r3, [pc, #256]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bae:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	061b      	lsls	r3, r3, #24
 8004bbc:	4939      	ldr	r1, [pc, #228]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
 8004bc2:	e01a      	b.n	8004bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc4:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a36      	ldr	r2, [pc, #216]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fd fa68 	bl	80020a4 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd8:	f7fd fa64 	bl	80020a4 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e218      	b.n	800501c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bea:	4b2e      	ldr	r3, [pc, #184]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x1e0>
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d03c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c0e:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c14:	4a23      	ldr	r2, [pc, #140]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1e:	f7fd fa41 	bl	80020a4 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c26:	f7fd fa3d 	bl	80020a4 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e1f1      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ef      	beq.n	8004c26 <HAL_RCC_OscConfig+0x22e>
 8004c46:	e01b      	b.n	8004c80 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c48:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fd fa24 	bl	80020a4 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c60:	f7fd fa20 	bl	80020a4 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e1d4      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1ef      	bne.n	8004c60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80ab 	beq.w	8004de4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c92:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_RCC_OscConfig+0x2b4>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e005      	b.n	8004cae <HAL_RCC_OscConfig+0x2b6>
 8004ca2:	bf00      	nop
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	20000004 	.word	0x20000004
 8004cac:	2300      	movs	r3, #0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00d      	beq.n	8004cce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	4baf      	ldr	r3, [pc, #700]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	4aae      	ldr	r2, [pc, #696]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cbe:	4bac      	ldr	r3, [pc, #688]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cce:	4ba9      	ldr	r3, [pc, #676]	; (8004f74 <HAL_RCC_OscConfig+0x57c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d118      	bne.n	8004d0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cda:	4ba6      	ldr	r3, [pc, #664]	; (8004f74 <HAL_RCC_OscConfig+0x57c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4aa5      	ldr	r2, [pc, #660]	; (8004f74 <HAL_RCC_OscConfig+0x57c>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce6:	f7fd f9dd 	bl	80020a4 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fd f9d9 	bl	80020a4 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e18d      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d00:	4b9c      	ldr	r3, [pc, #624]	; (8004f74 <HAL_RCC_OscConfig+0x57c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d108      	bne.n	8004d26 <HAL_RCC_OscConfig+0x32e>
 8004d14:	4b96      	ldr	r3, [pc, #600]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	4a95      	ldr	r2, [pc, #596]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d24:	e024      	b.n	8004d70 <HAL_RCC_OscConfig+0x378>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	d110      	bne.n	8004d50 <HAL_RCC_OscConfig+0x358>
 8004d2e:	4b90      	ldr	r3, [pc, #576]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	4a8e      	ldr	r2, [pc, #568]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d36:	f043 0304 	orr.w	r3, r3, #4
 8004d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d3e:	4b8c      	ldr	r3, [pc, #560]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	4a8a      	ldr	r2, [pc, #552]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d4e:	e00f      	b.n	8004d70 <HAL_RCC_OscConfig+0x378>
 8004d50:	4b87      	ldr	r3, [pc, #540]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	4a86      	ldr	r2, [pc, #536]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d60:	4b83      	ldr	r3, [pc, #524]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	4a82      	ldr	r2, [pc, #520]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d68:	f023 0304 	bic.w	r3, r3, #4
 8004d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d016      	beq.n	8004da6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fd f994 	bl	80020a4 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7fd f990 	bl	80020a4 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e142      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d96:	4b76      	ldr	r3, [pc, #472]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ed      	beq.n	8004d80 <HAL_RCC_OscConfig+0x388>
 8004da4:	e015      	b.n	8004dd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da6:	f7fd f97d 	bl	80020a4 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fd f979 	bl	80020a4 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e12b      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dc4:	4b6a      	ldr	r3, [pc, #424]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ed      	bne.n	8004dae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd2:	7ffb      	ldrb	r3, [r7, #31]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd8:	4b65      	ldr	r3, [pc, #404]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	4a64      	ldr	r2, [pc, #400]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d03c      	beq.n	8004e6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01c      	beq.n	8004e32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004df8:	4b5d      	ldr	r3, [pc, #372]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dfe:	4a5c      	ldr	r2, [pc, #368]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fd f94c 	bl	80020a4 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e10:	f7fd f948 	bl	80020a4 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0fc      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e22:	4b53      	ldr	r3, [pc, #332]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ef      	beq.n	8004e10 <HAL_RCC_OscConfig+0x418>
 8004e30:	e01b      	b.n	8004e6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e32:	4b4f      	ldr	r3, [pc, #316]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e38:	4a4d      	ldr	r2, [pc, #308]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fd f92f 	bl	80020a4 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e4a:	f7fd f92b 	bl	80020a4 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e0df      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e5c:	4b44      	ldr	r3, [pc, #272]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1ef      	bne.n	8004e4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 80d3 	beq.w	800501a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e74:	4b3e      	ldr	r3, [pc, #248]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	f000 808d 	beq.w	8004f9c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d15a      	bne.n	8004f40 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8a:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a38      	ldr	r2, [pc, #224]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e96:	f7fd f905 	bl	80020a4 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9e:	f7fd f901 	bl	80020a4 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e0b5      	b.n	800501c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb0:	4b2f      	ldr	r3, [pc, #188]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebc:	4b2c      	ldr	r3, [pc, #176]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <HAL_RCC_OscConfig+0x580>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6a11      	ldr	r1, [r2, #32]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	0112      	lsls	r2, r2, #4
 8004ed0:	4311      	orrs	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ed6:	0212      	lsls	r2, r2, #8
 8004ed8:	4311      	orrs	r1, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ede:	0852      	lsrs	r2, r2, #1
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	0552      	lsls	r2, r2, #21
 8004ee4:	4311      	orrs	r1, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eea:	0852      	lsrs	r2, r2, #1
 8004eec:	3a01      	subs	r2, #1
 8004eee:	0652      	lsls	r2, r2, #25
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ef6:	06d2      	lsls	r2, r2, #27
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	491d      	ldr	r1, [pc, #116]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd f8c4 	bl	80020a4 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fd f8c0 	bl	80020a4 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e074      	b.n	800501c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x528>
 8004f3e:	e06c      	b.n	800501a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <HAL_RCC_OscConfig+0x578>)
 8004f5e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f68:	f7fd f89c 	bl	80020a4 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f6e:	e00e      	b.n	8004f8e <HAL_RCC_OscConfig+0x596>
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40007000 	.word	0x40007000
 8004f78:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fd f892 	bl	80020a4 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e046      	b.n	800501c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f8e:	4b25      	ldr	r3, [pc, #148]	; (8005024 <HAL_RCC_OscConfig+0x62c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x584>
 8004f9a:	e03e      	b.n	800501a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e039      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <HAL_RCC_OscConfig+0x62c>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f003 0203 	and.w	r2, r3, #3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d12c      	bne.n	8005016 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d123      	bne.n	8005016 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d11b      	bne.n	8005016 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d113      	bne.n	8005016 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d109      	bne.n	8005016 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	3b01      	subs	r3, #1
 8005010:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005012:	429a      	cmp	r2, r3
 8005014:	d001      	beq.n	800501a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40021000 	.word	0x40021000

08005028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e11e      	b.n	800527e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b91      	ldr	r3, [pc, #580]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d910      	bls.n	8005070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b8e      	ldr	r3, [pc, #568]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 020f 	bic.w	r2, r3, #15
 8005056:	498c      	ldr	r1, [pc, #560]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b8a      	ldr	r3, [pc, #552]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e106      	b.n	800527e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d073      	beq.n	8005164 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d129      	bne.n	80050d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005084:	4b81      	ldr	r3, [pc, #516]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0f4      	b.n	800527e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005094:	f000 f966 	bl	8005364 <RCC_GetSysClockFreqFromPLLSource>
 8005098:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4a7c      	ldr	r2, [pc, #496]	; (8005290 <HAL_RCC_ClockConfig+0x268>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d93f      	bls.n	8005122 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050a2:	4b7a      	ldr	r3, [pc, #488]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d033      	beq.n	8005122 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d12f      	bne.n	8005122 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050c2:	4b72      	ldr	r3, [pc, #456]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ca:	4a70      	ldr	r2, [pc, #448]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80050cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e024      	b.n	8005122 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d107      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e0:	4b6a      	ldr	r3, [pc, #424]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0c6      	b.n	800527e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f0:	4b66      	ldr	r3, [pc, #408]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0be      	b.n	800527e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005100:	f000 f8ce 	bl	80052a0 <HAL_RCC_GetSysClockFreq>
 8005104:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4a61      	ldr	r2, [pc, #388]	; (8005290 <HAL_RCC_ClockConfig+0x268>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d909      	bls.n	8005122 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800510e:	4b5f      	ldr	r3, [pc, #380]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005116:	4a5d      	ldr	r2, [pc, #372]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005122:	4b5a      	ldr	r3, [pc, #360]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f023 0203 	bic.w	r2, r3, #3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4957      	ldr	r1, [pc, #348]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005130:	4313      	orrs	r3, r2
 8005132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005134:	f7fc ffb6 	bl	80020a4 <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	e00a      	b.n	8005152 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513c:	f7fc ffb2 	bl	80020a4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	; 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e095      	b.n	800527e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	4b4e      	ldr	r3, [pc, #312]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 020c 	and.w	r2, r3, #12
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	429a      	cmp	r2, r3
 8005162:	d1eb      	bne.n	800513c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d023      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800517c:	4b43      	ldr	r3, [pc, #268]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4a42      	ldr	r2, [pc, #264]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005186:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005194:	4b3d      	ldr	r3, [pc, #244]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800519c:	4a3b      	ldr	r2, [pc, #236]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 800519e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a4:	4b39      	ldr	r3, [pc, #228]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4936      	ldr	r1, [pc, #216]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
 80051b6:	e008      	b.n	80051ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d105      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051be:	4b33      	ldr	r3, [pc, #204]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	4a32      	ldr	r2, [pc, #200]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80051c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ca:	4b2f      	ldr	r3, [pc, #188]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d21d      	bcs.n	8005214 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d8:	4b2b      	ldr	r3, [pc, #172]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 020f 	bic.w	r2, r3, #15
 80051e0:	4929      	ldr	r1, [pc, #164]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051e8:	f7fc ff5c 	bl	80020a4 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f0:	f7fc ff58 	bl	80020a4 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e03b      	b.n	800527e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d1ed      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005220:	4b1a      	ldr	r3, [pc, #104]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4917      	ldr	r1, [pc, #92]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	490f      	ldr	r1, [pc, #60]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005252:	f000 f825 	bl	80052a0 <HAL_RCC_GetSysClockFreq>
 8005256:	4602      	mov	r2, r0
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	091b      	lsrs	r3, r3, #4
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	490c      	ldr	r1, [pc, #48]	; (8005294 <HAL_RCC_ClockConfig+0x26c>)
 8005264:	5ccb      	ldrb	r3, [r1, r3]
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	fa22 f303 	lsr.w	r3, r2, r3
 800526e:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <HAL_RCC_ClockConfig+0x270>)
 8005270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <HAL_RCC_ClockConfig+0x274>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fc fec8 	bl	800200c <HAL_InitTick>
 800527c:	4603      	mov	r3, r0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40022000 	.word	0x40022000
 800528c:	40021000 	.word	0x40021000
 8005290:	04c4b400 	.word	0x04c4b400
 8005294:	08009168 	.word	0x08009168
 8005298:	20000000 	.word	0x20000000
 800529c:	20000004 	.word	0x20000004

080052a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052a6:	4b2c      	ldr	r3, [pc, #176]	; (8005358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d102      	bne.n	80052b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052b2:	4b2a      	ldr	r3, [pc, #168]	; (800535c <HAL_RCC_GetSysClockFreq+0xbc>)
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	e047      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052b8:	4b27      	ldr	r3, [pc, #156]	; (8005358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 030c 	and.w	r3, r3, #12
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052c4:	4b26      	ldr	r3, [pc, #152]	; (8005360 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	e03e      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052ca:	4b23      	ldr	r3, [pc, #140]	; (8005358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b0c      	cmp	r3, #12
 80052d4:	d136      	bne.n	8005344 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052d6:	4b20      	ldr	r3, [pc, #128]	; (8005358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	3301      	adds	r3, #1
 80052ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d10c      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052f4:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	4a16      	ldr	r2, [pc, #88]	; (8005358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052fe:	68d2      	ldr	r2, [r2, #12]
 8005300:	0a12      	lsrs	r2, r2, #8
 8005302:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	617b      	str	r3, [r7, #20]
      break;
 800530c:	e00c      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	4a10      	ldr	r2, [pc, #64]	; (8005358 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005318:	68d2      	ldr	r2, [r2, #12]
 800531a:	0a12      	lsrs	r2, r2, #8
 800531c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005320:	fb02 f303 	mul.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
      break;
 8005326:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_GetSysClockFreq+0xb8>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	0e5b      	lsrs	r3, r3, #25
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	3301      	adds	r3, #1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	e001      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005348:	693b      	ldr	r3, [r7, #16]
}
 800534a:	4618      	mov	r0, r3
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40021000 	.word	0x40021000
 800535c:	00f42400 	.word	0x00f42400
 8005360:	016e3600 	.word	0x016e3600

08005364 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800536a:	4b1e      	ldr	r3, [pc, #120]	; (80053e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005374:	4b1b      	ldr	r3, [pc, #108]	; (80053e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b03      	cmp	r3, #3
 8005386:	d10c      	bne.n	80053a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005388:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005392:	68d2      	ldr	r2, [r2, #12]
 8005394:	0a12      	lsrs	r2, r2, #8
 8005396:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	617b      	str	r3, [r7, #20]
    break;
 80053a0:	e00c      	b.n	80053bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053a2:	4a12      	ldr	r2, [pc, #72]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	4a0e      	ldr	r2, [pc, #56]	; (80053e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ac:	68d2      	ldr	r2, [r2, #12]
 80053ae:	0a12      	lsrs	r2, r2, #8
 80053b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053b4:	fb02 f303 	mul.w	r3, r2, r3
 80053b8:	617b      	str	r3, [r7, #20]
    break;
 80053ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	0e5b      	lsrs	r3, r3, #25
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	3301      	adds	r3, #1
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053d6:	687b      	ldr	r3, [r7, #4]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40021000 	.word	0x40021000
 80053e8:	016e3600 	.word	0x016e3600
 80053ec:	00f42400 	.word	0x00f42400

080053f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053f8:	2300      	movs	r3, #0
 80053fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053fc:	2300      	movs	r3, #0
 80053fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8098 	beq.w	800553e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005412:	4b43      	ldr	r3, [pc, #268]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10d      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800541e:	4b40      	ldr	r3, [pc, #256]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	4a3f      	ldr	r2, [pc, #252]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005428:	6593      	str	r3, [r2, #88]	; 0x58
 800542a:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005436:	2301      	movs	r3, #1
 8005438:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800543a:	4b3a      	ldr	r3, [pc, #232]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a39      	ldr	r2, [pc, #228]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005446:	f7fc fe2d 	bl	80020a4 <HAL_GetTick>
 800544a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800544c:	e009      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800544e:	f7fc fe29 	bl	80020a4 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d902      	bls.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	74fb      	strb	r3, [r7, #19]
        break;
 8005460:	e005      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005462:	4b30      	ldr	r3, [pc, #192]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0ef      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800546e:	7cfb      	ldrb	r3, [r7, #19]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d159      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005474:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01e      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	429a      	cmp	r2, r3
 800548e:	d019      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005490:	4b23      	ldr	r3, [pc, #140]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800549c:	4b20      	ldr	r3, [pc, #128]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054ac:	4b1c      	ldr	r3, [pc, #112]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b2:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054bc:	4a18      	ldr	r2, [pc, #96]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d016      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fc fde9 	bl	80020a4 <HAL_GetTick>
 80054d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d4:	e00b      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d6:	f7fc fde5 	bl	80020a4 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d902      	bls.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	74fb      	strb	r3, [r7, #19]
            break;
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0ec      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054fc:	7cfb      	ldrb	r3, [r7, #19]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005502:	4b07      	ldr	r3, [pc, #28]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005510:	4903      	ldr	r1, [pc, #12]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005518:	e008      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800551a:	7cfb      	ldrb	r3, [r7, #19]
 800551c:	74bb      	strb	r3, [r7, #18]
 800551e:	e005      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005520:	40021000 	.word	0x40021000
 8005524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800552c:	7c7b      	ldrb	r3, [r7, #17]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d105      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005532:	4baf      	ldr	r3, [pc, #700]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	4aae      	ldr	r2, [pc, #696]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800553c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800554a:	4ba9      	ldr	r3, [pc, #676]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f023 0203 	bic.w	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	49a5      	ldr	r1, [pc, #660]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800556c:	4ba0      	ldr	r3, [pc, #640]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f023 020c 	bic.w	r2, r3, #12
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	499d      	ldr	r1, [pc, #628]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800558e:	4b98      	ldr	r3, [pc, #608]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005594:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4994      	ldr	r1, [pc, #592]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055b0:	4b8f      	ldr	r3, [pc, #572]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	498c      	ldr	r1, [pc, #560]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055d2:	4b87      	ldr	r3, [pc, #540]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	4983      	ldr	r1, [pc, #524]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055f4:	4b7e      	ldr	r3, [pc, #504]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	497b      	ldr	r1, [pc, #492]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005616:	4b76      	ldr	r3, [pc, #472]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	4972      	ldr	r1, [pc, #456]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005638:	4b6d      	ldr	r3, [pc, #436]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	496a      	ldr	r1, [pc, #424]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800565a:	4b65      	ldr	r3, [pc, #404]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	4961      	ldr	r1, [pc, #388]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800567c:	4b5c      	ldr	r3, [pc, #368]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800567e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005682:	f023 0203 	bic.w	r2, r3, #3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	4959      	ldr	r1, [pc, #356]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800569e:	4b54      	ldr	r3, [pc, #336]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	4950      	ldr	r1, [pc, #320]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d015      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056c0:	4b4b      	ldr	r3, [pc, #300]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	4948      	ldr	r1, [pc, #288]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056de:	d105      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e0:	4b43      	ldr	r3, [pc, #268]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a42      	ldr	r2, [pc, #264]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d015      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056f8:	4b3d      	ldr	r3, [pc, #244]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	493a      	ldr	r1, [pc, #232]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005716:	d105      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005718:	4b35      	ldr	r3, [pc, #212]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a34      	ldr	r2, [pc, #208]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005722:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d015      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005730:	4b2f      	ldr	r3, [pc, #188]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	492c      	ldr	r1, [pc, #176]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800574e:	d105      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005750:	4b27      	ldr	r3, [pc, #156]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a26      	ldr	r2, [pc, #152]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800575a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d015      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005768:	4b21      	ldr	r3, [pc, #132]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005776:	491e      	ldr	r1, [pc, #120]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005786:	d105      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005788:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800578e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005792:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d015      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a0:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	4910      	ldr	r1, [pc, #64]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057be:	d105      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d018      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	4902      	ldr	r1, [pc, #8]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057ee:	e001      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80057f0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fc:	d105      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057fe:	4b21      	ldr	r3, [pc, #132]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4a20      	ldr	r2, [pc, #128]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005808:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d015      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005816:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005824:	4917      	ldr	r1, [pc, #92]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005834:	d105      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005836:	4b13      	ldr	r3, [pc, #76]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4a12      	ldr	r2, [pc, #72]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800583c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005840:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d015      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005850:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	4909      	ldr	r1, [pc, #36]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800586c:	d105      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	4a04      	ldr	r2, [pc, #16]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005878:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800587a:	7cbb      	ldrb	r3, [r7, #18]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40021000 	.word	0x40021000

08005888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e049      	b.n	800592e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc fb06 	bl	8001ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f000 fb68 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d001      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e054      	b.n	80059fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <HAL_TIM_Base_Start_IT+0xd0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d022      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597a:	d01d      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <HAL_TIM_Base_Start_IT+0xd4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d018      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <HAL_TIM_Base_Start_IT+0xd8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <HAL_TIM_Base_Start_IT+0xdc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00e      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <HAL_TIM_Base_Start_IT+0xe0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d009      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <HAL_TIM_Base_Start_IT+0xe4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <HAL_TIM_Base_Start_IT+0xe8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d115      	bne.n	80059e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <HAL_TIM_Base_Start_IT+0xec>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d015      	beq.n	80059f6 <HAL_TIM_Base_Start_IT+0xbe>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d0:	d011      	beq.n	80059f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	e008      	b.n	80059f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e000      	b.n	80059f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40015000 	.word	0x40015000
 8005a24:	00010007 	.word	0x00010007

08005a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d122      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d11b      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0202 	mvn.w	r2, #2
 8005a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa78 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa6a 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fa7b 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d122      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d11b      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0204 	mvn.w	r2, #4
 8005aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa4e 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005ac4:	e005      	b.n	8005ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa40 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fa51 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d122      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d11b      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0208 	mvn.w	r2, #8
 8005afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2204      	movs	r2, #4
 8005b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa24 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e005      	b.n	8005b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa16 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fa27 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d122      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d11b      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0210 	mvn.w	r2, #16
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2208      	movs	r2, #8
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f9fa 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f9ec 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f9fd 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d10e      	bne.n	8005bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d107      	bne.n	8005bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0201 	mvn.w	r2, #1
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc f9ca 	bl	8001f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b80      	cmp	r3, #128	; 0x80
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d107      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fbc6 	bl	8006364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be6:	d10e      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	d107      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fbb9 	bl	8006378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d10e      	bne.n	8005c32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d107      	bne.n	8005c32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9ab 	bl	8005f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d10e      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d107      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f06f 0220 	mvn.w	r2, #32
 8005c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fb79 	bl	8006350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c6c:	d10f      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c7c:	d107      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fb7f 	bl	800638c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c9c:	d10f      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cac:	d107      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fb71 	bl	80063a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ccc:	d10f      	bne.n	8005cee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cdc:	d107      	bne.n	8005cee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fb63 	bl	80063b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cfc:	d10f      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d0c:	d107      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fb55 	bl	80063c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIM_ConfigClockSource+0x18>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e0f5      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x204>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a6e      	ldr	r2, [pc, #440]	; (8005f34 <HAL_TIM_ConfigClockSource+0x20c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	f000 80c1 	beq.w	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005d80:	4a6c      	ldr	r2, [pc, #432]	; (8005f34 <HAL_TIM_ConfigClockSource+0x20c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	f200 80c6 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005d88:	4a6b      	ldr	r2, [pc, #428]	; (8005f38 <HAL_TIM_ConfigClockSource+0x210>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	f000 80b9 	beq.w	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005d90:	4a69      	ldr	r2, [pc, #420]	; (8005f38 <HAL_TIM_ConfigClockSource+0x210>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	f200 80be 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005d98:	4a68      	ldr	r2, [pc, #416]	; (8005f3c <HAL_TIM_ConfigClockSource+0x214>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	f000 80b1 	beq.w	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005da0:	4a66      	ldr	r2, [pc, #408]	; (8005f3c <HAL_TIM_ConfigClockSource+0x214>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f200 80b6 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005da8:	4a65      	ldr	r2, [pc, #404]	; (8005f40 <HAL_TIM_ConfigClockSource+0x218>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f000 80a9 	beq.w	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005db0:	4a63      	ldr	r2, [pc, #396]	; (8005f40 <HAL_TIM_ConfigClockSource+0x218>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	f200 80ae 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005db8:	4a62      	ldr	r2, [pc, #392]	; (8005f44 <HAL_TIM_ConfigClockSource+0x21c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f000 80a1 	beq.w	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005dc0:	4a60      	ldr	r2, [pc, #384]	; (8005f44 <HAL_TIM_ConfigClockSource+0x21c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	f200 80a6 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005dc8:	4a5f      	ldr	r2, [pc, #380]	; (8005f48 <HAL_TIM_ConfigClockSource+0x220>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	f000 8099 	beq.w	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005dd0:	4a5d      	ldr	r2, [pc, #372]	; (8005f48 <HAL_TIM_ConfigClockSource+0x220>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f200 809e 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005dd8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ddc:	f000 8091 	beq.w	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005de0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005de4:	f200 8096 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dec:	f000 8089 	beq.w	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df4:	f200 808e 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfc:	d03e      	beq.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
 8005dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e02:	f200 8087 	bhi.w	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0a:	f000 8085 	beq.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	d87f      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005e14:	2b70      	cmp	r3, #112	; 0x70
 8005e16:	d01a      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x126>
 8005e18:	2b70      	cmp	r3, #112	; 0x70
 8005e1a:	d87b      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005e1c:	2b60      	cmp	r3, #96	; 0x60
 8005e1e:	d050      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x19a>
 8005e20:	2b60      	cmp	r3, #96	; 0x60
 8005e22:	d877      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005e24:	2b50      	cmp	r3, #80	; 0x50
 8005e26:	d03c      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0x17a>
 8005e28:	2b50      	cmp	r3, #80	; 0x50
 8005e2a:	d873      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d058      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x1ba>
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d86f      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d064      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005e38:	2b30      	cmp	r3, #48	; 0x30
 8005e3a:	d86b      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d060      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d867      	bhi.n	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d05c      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d05a      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e4c:	e062      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6899      	ldr	r1, [r3, #8]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f000 f9c1 	bl	80061e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	609a      	str	r2, [r3, #8]
      break;
 8005e7a:	e04e      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6899      	ldr	r1, [r3, #8]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f000 f9aa 	bl	80061e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e9e:	609a      	str	r2, [r3, #8]
      break;
 8005ea0:	e03b      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 f91c 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2150      	movs	r1, #80	; 0x50
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f975 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e02b      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f000 f93b 	bl	800614a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2160      	movs	r1, #96	; 0x60
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f965 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005ee0:	e01b      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6859      	ldr	r1, [r3, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f000 f8fc 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2140      	movs	r1, #64	; 0x40
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f955 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005f00:	e00b      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f000 f94c 	bl	80061aa <TIM_ITRx_SetConfig>
        break;
 8005f12:	e002      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005f18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	00100070 	.word	0x00100070
 8005f38:	00100060 	.word	0x00100060
 8005f3c:	00100050 	.word	0x00100050
 8005f40:	00100040 	.word	0x00100040
 8005f44:	00100030 	.word	0x00100030
 8005f48:	00100020 	.word	0x00100020

08005f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a46      	ldr	r2, [pc, #280]	; (80060c8 <TIM_Base_SetConfig+0x12c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d017      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d013      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a43      	ldr	r2, [pc, #268]	; (80060cc <TIM_Base_SetConfig+0x130>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a42      	ldr	r2, [pc, #264]	; (80060d0 <TIM_Base_SetConfig+0x134>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a41      	ldr	r2, [pc, #260]	; (80060d4 <TIM_Base_SetConfig+0x138>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a40      	ldr	r2, [pc, #256]	; (80060d8 <TIM_Base_SetConfig+0x13c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a3f      	ldr	r2, [pc, #252]	; (80060dc <TIM_Base_SetConfig+0x140>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a33      	ldr	r2, [pc, #204]	; (80060c8 <TIM_Base_SetConfig+0x12c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d023      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006004:	d01f      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a30      	ldr	r2, [pc, #192]	; (80060cc <TIM_Base_SetConfig+0x130>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01b      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2f      	ldr	r2, [pc, #188]	; (80060d0 <TIM_Base_SetConfig+0x134>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d017      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2e      	ldr	r2, [pc, #184]	; (80060d4 <TIM_Base_SetConfig+0x138>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2d      	ldr	r2, [pc, #180]	; (80060d8 <TIM_Base_SetConfig+0x13c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00f      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2d      	ldr	r2, [pc, #180]	; (80060e0 <TIM_Base_SetConfig+0x144>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00b      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2c      	ldr	r2, [pc, #176]	; (80060e4 <TIM_Base_SetConfig+0x148>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d007      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2b      	ldr	r2, [pc, #172]	; (80060e8 <TIM_Base_SetConfig+0x14c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a26      	ldr	r2, [pc, #152]	; (80060dc <TIM_Base_SetConfig+0x140>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <TIM_Base_SetConfig+0x12c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <TIM_Base_SetConfig+0x13c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00f      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a14      	ldr	r2, [pc, #80]	; (80060e0 <TIM_Base_SetConfig+0x144>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a13      	ldr	r2, [pc, #76]	; (80060e4 <TIM_Base_SetConfig+0x148>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <TIM_Base_SetConfig+0x14c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <TIM_Base_SetConfig+0x140>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d103      	bne.n	80060b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	615a      	str	r2, [r3, #20]
}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	40013400 	.word	0x40013400
 80060dc:	40015000 	.word	0x40015000
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40014400 	.word	0x40014400
 80060e8:	40014800 	.word	0x40014800

080060ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 030a 	bic.w	r3, r3, #10
 8006128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614a:	b480      	push	{r7}
 800614c:	b087      	sub	sp, #28
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0210 	bic.w	r2, r3, #16
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	031b      	lsls	r3, r3, #12
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006186:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f043 0307 	orr.w	r3, r3, #7
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	609a      	str	r2, [r3, #8]
}
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	021a      	lsls	r2, r3, #8
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	431a      	orrs	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4313      	orrs	r3, r2
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006238:	2302      	movs	r3, #2
 800623a:	e074      	b.n	8006326 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a34      	ldr	r2, [pc, #208]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a33      	ldr	r2, [pc, #204]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a31      	ldr	r2, [pc, #196]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d108      	bne.n	800628c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a21      	ldr	r2, [pc, #132]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d022      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062bc:	d01d      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1f      	ldr	r2, [pc, #124]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d018      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00e      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a15      	ldr	r2, [pc, #84]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d009      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a18      	ldr	r2, [pc, #96]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a11      	ldr	r2, [pc, #68]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d10c      	bne.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	4313      	orrs	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40012c00 	.word	0x40012c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40015000 	.word	0x40015000
 8006340:	40000400 	.word	0x40000400
 8006344:	40000800 	.word	0x40000800
 8006348:	40000c00 	.word	0x40000c00
 800634c:	40014000 	.word	0x40014000

08006350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <__errno>:
 80063dc:	4b01      	ldr	r3, [pc, #4]	; (80063e4 <__errno+0x8>)
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000000c 	.word	0x2000000c

080063e8 <__libc_init_array>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4d0d      	ldr	r5, [pc, #52]	; (8006420 <__libc_init_array+0x38>)
 80063ec:	4c0d      	ldr	r4, [pc, #52]	; (8006424 <__libc_init_array+0x3c>)
 80063ee:	1b64      	subs	r4, r4, r5
 80063f0:	10a4      	asrs	r4, r4, #2
 80063f2:	2600      	movs	r6, #0
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	d109      	bne.n	800640c <__libc_init_array+0x24>
 80063f8:	4d0b      	ldr	r5, [pc, #44]	; (8006428 <__libc_init_array+0x40>)
 80063fa:	4c0c      	ldr	r4, [pc, #48]	; (800642c <__libc_init_array+0x44>)
 80063fc:	f002 fdda 	bl	8008fb4 <_init>
 8006400:	1b64      	subs	r4, r4, r5
 8006402:	10a4      	asrs	r4, r4, #2
 8006404:	2600      	movs	r6, #0
 8006406:	42a6      	cmp	r6, r4
 8006408:	d105      	bne.n	8006416 <__libc_init_array+0x2e>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006410:	4798      	blx	r3
 8006412:	3601      	adds	r6, #1
 8006414:	e7ee      	b.n	80063f4 <__libc_init_array+0xc>
 8006416:	f855 3b04 	ldr.w	r3, [r5], #4
 800641a:	4798      	blx	r3
 800641c:	3601      	adds	r6, #1
 800641e:	e7f2      	b.n	8006406 <__libc_init_array+0x1e>
 8006420:	0800955c 	.word	0x0800955c
 8006424:	0800955c 	.word	0x0800955c
 8006428:	0800955c 	.word	0x0800955c
 800642c:	08009560 	.word	0x08009560

08006430 <malloc>:
 8006430:	4b02      	ldr	r3, [pc, #8]	; (800643c <malloc+0xc>)
 8006432:	4601      	mov	r1, r0
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	f000 b85b 	b.w	80064f0 <_malloc_r>
 800643a:	bf00      	nop
 800643c:	2000000c 	.word	0x2000000c

08006440 <memset>:
 8006440:	4402      	add	r2, r0
 8006442:	4603      	mov	r3, r0
 8006444:	4293      	cmp	r3, r2
 8006446:	d100      	bne.n	800644a <memset+0xa>
 8006448:	4770      	bx	lr
 800644a:	f803 1b01 	strb.w	r1, [r3], #1
 800644e:	e7f9      	b.n	8006444 <memset+0x4>

08006450 <_free_r>:
 8006450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006452:	2900      	cmp	r1, #0
 8006454:	d048      	beq.n	80064e8 <_free_r+0x98>
 8006456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800645a:	9001      	str	r0, [sp, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f1a1 0404 	sub.w	r4, r1, #4
 8006462:	bfb8      	it	lt
 8006464:	18e4      	addlt	r4, r4, r3
 8006466:	f001 ff25 	bl	80082b4 <__malloc_lock>
 800646a:	4a20      	ldr	r2, [pc, #128]	; (80064ec <_free_r+0x9c>)
 800646c:	9801      	ldr	r0, [sp, #4]
 800646e:	6813      	ldr	r3, [r2, #0]
 8006470:	4615      	mov	r5, r2
 8006472:	b933      	cbnz	r3, 8006482 <_free_r+0x32>
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	6014      	str	r4, [r2, #0]
 8006478:	b003      	add	sp, #12
 800647a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800647e:	f001 bf1f 	b.w	80082c0 <__malloc_unlock>
 8006482:	42a3      	cmp	r3, r4
 8006484:	d90b      	bls.n	800649e <_free_r+0x4e>
 8006486:	6821      	ldr	r1, [r4, #0]
 8006488:	1862      	adds	r2, r4, r1
 800648a:	4293      	cmp	r3, r2
 800648c:	bf04      	itt	eq
 800648e:	681a      	ldreq	r2, [r3, #0]
 8006490:	685b      	ldreq	r3, [r3, #4]
 8006492:	6063      	str	r3, [r4, #4]
 8006494:	bf04      	itt	eq
 8006496:	1852      	addeq	r2, r2, r1
 8006498:	6022      	streq	r2, [r4, #0]
 800649a:	602c      	str	r4, [r5, #0]
 800649c:	e7ec      	b.n	8006478 <_free_r+0x28>
 800649e:	461a      	mov	r2, r3
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	b10b      	cbz	r3, 80064a8 <_free_r+0x58>
 80064a4:	42a3      	cmp	r3, r4
 80064a6:	d9fa      	bls.n	800649e <_free_r+0x4e>
 80064a8:	6811      	ldr	r1, [r2, #0]
 80064aa:	1855      	adds	r5, r2, r1
 80064ac:	42a5      	cmp	r5, r4
 80064ae:	d10b      	bne.n	80064c8 <_free_r+0x78>
 80064b0:	6824      	ldr	r4, [r4, #0]
 80064b2:	4421      	add	r1, r4
 80064b4:	1854      	adds	r4, r2, r1
 80064b6:	42a3      	cmp	r3, r4
 80064b8:	6011      	str	r1, [r2, #0]
 80064ba:	d1dd      	bne.n	8006478 <_free_r+0x28>
 80064bc:	681c      	ldr	r4, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	6053      	str	r3, [r2, #4]
 80064c2:	4421      	add	r1, r4
 80064c4:	6011      	str	r1, [r2, #0]
 80064c6:	e7d7      	b.n	8006478 <_free_r+0x28>
 80064c8:	d902      	bls.n	80064d0 <_free_r+0x80>
 80064ca:	230c      	movs	r3, #12
 80064cc:	6003      	str	r3, [r0, #0]
 80064ce:	e7d3      	b.n	8006478 <_free_r+0x28>
 80064d0:	6825      	ldr	r5, [r4, #0]
 80064d2:	1961      	adds	r1, r4, r5
 80064d4:	428b      	cmp	r3, r1
 80064d6:	bf04      	itt	eq
 80064d8:	6819      	ldreq	r1, [r3, #0]
 80064da:	685b      	ldreq	r3, [r3, #4]
 80064dc:	6063      	str	r3, [r4, #4]
 80064de:	bf04      	itt	eq
 80064e0:	1949      	addeq	r1, r1, r5
 80064e2:	6021      	streq	r1, [r4, #0]
 80064e4:	6054      	str	r4, [r2, #4]
 80064e6:	e7c7      	b.n	8006478 <_free_r+0x28>
 80064e8:	b003      	add	sp, #12
 80064ea:	bd30      	pop	{r4, r5, pc}
 80064ec:	20000200 	.word	0x20000200

080064f0 <_malloc_r>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	1ccd      	adds	r5, r1, #3
 80064f4:	f025 0503 	bic.w	r5, r5, #3
 80064f8:	3508      	adds	r5, #8
 80064fa:	2d0c      	cmp	r5, #12
 80064fc:	bf38      	it	cc
 80064fe:	250c      	movcc	r5, #12
 8006500:	2d00      	cmp	r5, #0
 8006502:	4606      	mov	r6, r0
 8006504:	db01      	blt.n	800650a <_malloc_r+0x1a>
 8006506:	42a9      	cmp	r1, r5
 8006508:	d903      	bls.n	8006512 <_malloc_r+0x22>
 800650a:	230c      	movs	r3, #12
 800650c:	6033      	str	r3, [r6, #0]
 800650e:	2000      	movs	r0, #0
 8006510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006512:	f001 fecf 	bl	80082b4 <__malloc_lock>
 8006516:	4921      	ldr	r1, [pc, #132]	; (800659c <_malloc_r+0xac>)
 8006518:	680a      	ldr	r2, [r1, #0]
 800651a:	4614      	mov	r4, r2
 800651c:	b99c      	cbnz	r4, 8006546 <_malloc_r+0x56>
 800651e:	4f20      	ldr	r7, [pc, #128]	; (80065a0 <_malloc_r+0xb0>)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	b923      	cbnz	r3, 800652e <_malloc_r+0x3e>
 8006524:	4621      	mov	r1, r4
 8006526:	4630      	mov	r0, r6
 8006528:	f000 fd4a 	bl	8006fc0 <_sbrk_r>
 800652c:	6038      	str	r0, [r7, #0]
 800652e:	4629      	mov	r1, r5
 8006530:	4630      	mov	r0, r6
 8006532:	f000 fd45 	bl	8006fc0 <_sbrk_r>
 8006536:	1c43      	adds	r3, r0, #1
 8006538:	d123      	bne.n	8006582 <_malloc_r+0x92>
 800653a:	230c      	movs	r3, #12
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	4630      	mov	r0, r6
 8006540:	f001 febe 	bl	80082c0 <__malloc_unlock>
 8006544:	e7e3      	b.n	800650e <_malloc_r+0x1e>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	1b5b      	subs	r3, r3, r5
 800654a:	d417      	bmi.n	800657c <_malloc_r+0x8c>
 800654c:	2b0b      	cmp	r3, #11
 800654e:	d903      	bls.n	8006558 <_malloc_r+0x68>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	441c      	add	r4, r3
 8006554:	6025      	str	r5, [r4, #0]
 8006556:	e004      	b.n	8006562 <_malloc_r+0x72>
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	42a2      	cmp	r2, r4
 800655c:	bf0c      	ite	eq
 800655e:	600b      	streq	r3, [r1, #0]
 8006560:	6053      	strne	r3, [r2, #4]
 8006562:	4630      	mov	r0, r6
 8006564:	f001 feac 	bl	80082c0 <__malloc_unlock>
 8006568:	f104 000b 	add.w	r0, r4, #11
 800656c:	1d23      	adds	r3, r4, #4
 800656e:	f020 0007 	bic.w	r0, r0, #7
 8006572:	1ac2      	subs	r2, r0, r3
 8006574:	d0cc      	beq.n	8006510 <_malloc_r+0x20>
 8006576:	1a1b      	subs	r3, r3, r0
 8006578:	50a3      	str	r3, [r4, r2]
 800657a:	e7c9      	b.n	8006510 <_malloc_r+0x20>
 800657c:	4622      	mov	r2, r4
 800657e:	6864      	ldr	r4, [r4, #4]
 8006580:	e7cc      	b.n	800651c <_malloc_r+0x2c>
 8006582:	1cc4      	adds	r4, r0, #3
 8006584:	f024 0403 	bic.w	r4, r4, #3
 8006588:	42a0      	cmp	r0, r4
 800658a:	d0e3      	beq.n	8006554 <_malloc_r+0x64>
 800658c:	1a21      	subs	r1, r4, r0
 800658e:	4630      	mov	r0, r6
 8006590:	f000 fd16 	bl	8006fc0 <_sbrk_r>
 8006594:	3001      	adds	r0, #1
 8006596:	d1dd      	bne.n	8006554 <_malloc_r+0x64>
 8006598:	e7cf      	b.n	800653a <_malloc_r+0x4a>
 800659a:	bf00      	nop
 800659c:	20000200 	.word	0x20000200
 80065a0:	20000204 	.word	0x20000204

080065a4 <__cvt>:
 80065a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065a8:	ec55 4b10 	vmov	r4, r5, d0
 80065ac:	2d00      	cmp	r5, #0
 80065ae:	460e      	mov	r6, r1
 80065b0:	4619      	mov	r1, r3
 80065b2:	462b      	mov	r3, r5
 80065b4:	bfbb      	ittet	lt
 80065b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065ba:	461d      	movlt	r5, r3
 80065bc:	2300      	movge	r3, #0
 80065be:	232d      	movlt	r3, #45	; 0x2d
 80065c0:	700b      	strb	r3, [r1, #0]
 80065c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065c8:	4691      	mov	r9, r2
 80065ca:	f023 0820 	bic.w	r8, r3, #32
 80065ce:	bfbc      	itt	lt
 80065d0:	4622      	movlt	r2, r4
 80065d2:	4614      	movlt	r4, r2
 80065d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065d8:	d005      	beq.n	80065e6 <__cvt+0x42>
 80065da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065de:	d100      	bne.n	80065e2 <__cvt+0x3e>
 80065e0:	3601      	adds	r6, #1
 80065e2:	2102      	movs	r1, #2
 80065e4:	e000      	b.n	80065e8 <__cvt+0x44>
 80065e6:	2103      	movs	r1, #3
 80065e8:	ab03      	add	r3, sp, #12
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	ab02      	add	r3, sp, #8
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	ec45 4b10 	vmov	d0, r4, r5
 80065f4:	4653      	mov	r3, sl
 80065f6:	4632      	mov	r2, r6
 80065f8:	f000 fe3e 	bl	8007278 <_dtoa_r>
 80065fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006600:	4607      	mov	r7, r0
 8006602:	d102      	bne.n	800660a <__cvt+0x66>
 8006604:	f019 0f01 	tst.w	r9, #1
 8006608:	d022      	beq.n	8006650 <__cvt+0xac>
 800660a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800660e:	eb07 0906 	add.w	r9, r7, r6
 8006612:	d110      	bne.n	8006636 <__cvt+0x92>
 8006614:	783b      	ldrb	r3, [r7, #0]
 8006616:	2b30      	cmp	r3, #48	; 0x30
 8006618:	d10a      	bne.n	8006630 <__cvt+0x8c>
 800661a:	2200      	movs	r2, #0
 800661c:	2300      	movs	r3, #0
 800661e:	4620      	mov	r0, r4
 8006620:	4629      	mov	r1, r5
 8006622:	f7fa fa79 	bl	8000b18 <__aeabi_dcmpeq>
 8006626:	b918      	cbnz	r0, 8006630 <__cvt+0x8c>
 8006628:	f1c6 0601 	rsb	r6, r6, #1
 800662c:	f8ca 6000 	str.w	r6, [sl]
 8006630:	f8da 3000 	ldr.w	r3, [sl]
 8006634:	4499      	add	r9, r3
 8006636:	2200      	movs	r2, #0
 8006638:	2300      	movs	r3, #0
 800663a:	4620      	mov	r0, r4
 800663c:	4629      	mov	r1, r5
 800663e:	f7fa fa6b 	bl	8000b18 <__aeabi_dcmpeq>
 8006642:	b108      	cbz	r0, 8006648 <__cvt+0xa4>
 8006644:	f8cd 900c 	str.w	r9, [sp, #12]
 8006648:	2230      	movs	r2, #48	; 0x30
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	454b      	cmp	r3, r9
 800664e:	d307      	bcc.n	8006660 <__cvt+0xbc>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006654:	1bdb      	subs	r3, r3, r7
 8006656:	4638      	mov	r0, r7
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	b004      	add	sp, #16
 800665c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006660:	1c59      	adds	r1, r3, #1
 8006662:	9103      	str	r1, [sp, #12]
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	e7f0      	b.n	800664a <__cvt+0xa6>

08006668 <__exponent>:
 8006668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800666a:	4603      	mov	r3, r0
 800666c:	2900      	cmp	r1, #0
 800666e:	bfb8      	it	lt
 8006670:	4249      	neglt	r1, r1
 8006672:	f803 2b02 	strb.w	r2, [r3], #2
 8006676:	bfb4      	ite	lt
 8006678:	222d      	movlt	r2, #45	; 0x2d
 800667a:	222b      	movge	r2, #43	; 0x2b
 800667c:	2909      	cmp	r1, #9
 800667e:	7042      	strb	r2, [r0, #1]
 8006680:	dd2a      	ble.n	80066d8 <__exponent+0x70>
 8006682:	f10d 0407 	add.w	r4, sp, #7
 8006686:	46a4      	mov	ip, r4
 8006688:	270a      	movs	r7, #10
 800668a:	46a6      	mov	lr, r4
 800668c:	460a      	mov	r2, r1
 800668e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006692:	fb07 1516 	mls	r5, r7, r6, r1
 8006696:	3530      	adds	r5, #48	; 0x30
 8006698:	2a63      	cmp	r2, #99	; 0x63
 800669a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800669e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066a2:	4631      	mov	r1, r6
 80066a4:	dcf1      	bgt.n	800668a <__exponent+0x22>
 80066a6:	3130      	adds	r1, #48	; 0x30
 80066a8:	f1ae 0502 	sub.w	r5, lr, #2
 80066ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066b0:	1c44      	adds	r4, r0, #1
 80066b2:	4629      	mov	r1, r5
 80066b4:	4561      	cmp	r1, ip
 80066b6:	d30a      	bcc.n	80066ce <__exponent+0x66>
 80066b8:	f10d 0209 	add.w	r2, sp, #9
 80066bc:	eba2 020e 	sub.w	r2, r2, lr
 80066c0:	4565      	cmp	r5, ip
 80066c2:	bf88      	it	hi
 80066c4:	2200      	movhi	r2, #0
 80066c6:	4413      	add	r3, r2
 80066c8:	1a18      	subs	r0, r3, r0
 80066ca:	b003      	add	sp, #12
 80066cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066d6:	e7ed      	b.n	80066b4 <__exponent+0x4c>
 80066d8:	2330      	movs	r3, #48	; 0x30
 80066da:	3130      	adds	r1, #48	; 0x30
 80066dc:	7083      	strb	r3, [r0, #2]
 80066de:	70c1      	strb	r1, [r0, #3]
 80066e0:	1d03      	adds	r3, r0, #4
 80066e2:	e7f1      	b.n	80066c8 <__exponent+0x60>

080066e4 <_printf_float>:
 80066e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	ed2d 8b02 	vpush	{d8}
 80066ec:	b08d      	sub	sp, #52	; 0x34
 80066ee:	460c      	mov	r4, r1
 80066f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066f4:	4616      	mov	r6, r2
 80066f6:	461f      	mov	r7, r3
 80066f8:	4605      	mov	r5, r0
 80066fa:	f001 fd61 	bl	80081c0 <_localeconv_r>
 80066fe:	f8d0 a000 	ldr.w	sl, [r0]
 8006702:	4650      	mov	r0, sl
 8006704:	f7f9 fd8c 	bl	8000220 <strlen>
 8006708:	2300      	movs	r3, #0
 800670a:	930a      	str	r3, [sp, #40]	; 0x28
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	9305      	str	r3, [sp, #20]
 8006710:	f8d8 3000 	ldr.w	r3, [r8]
 8006714:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006718:	3307      	adds	r3, #7
 800671a:	f023 0307 	bic.w	r3, r3, #7
 800671e:	f103 0208 	add.w	r2, r3, #8
 8006722:	f8c8 2000 	str.w	r2, [r8]
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800672e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006732:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	f8cd 8018 	str.w	r8, [sp, #24]
 800673c:	ee08 0a10 	vmov	s16, r0
 8006740:	4b9f      	ldr	r3, [pc, #636]	; (80069c0 <_printf_float+0x2dc>)
 8006742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800674a:	f7fa fa17 	bl	8000b7c <__aeabi_dcmpun>
 800674e:	bb88      	cbnz	r0, 80067b4 <_printf_float+0xd0>
 8006750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006754:	4b9a      	ldr	r3, [pc, #616]	; (80069c0 <_printf_float+0x2dc>)
 8006756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800675a:	f7fa f9f1 	bl	8000b40 <__aeabi_dcmple>
 800675e:	bb48      	cbnz	r0, 80067b4 <_printf_float+0xd0>
 8006760:	2200      	movs	r2, #0
 8006762:	2300      	movs	r3, #0
 8006764:	4640      	mov	r0, r8
 8006766:	4649      	mov	r1, r9
 8006768:	f7fa f9e0 	bl	8000b2c <__aeabi_dcmplt>
 800676c:	b110      	cbz	r0, 8006774 <_printf_float+0x90>
 800676e:	232d      	movs	r3, #45	; 0x2d
 8006770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006774:	4b93      	ldr	r3, [pc, #588]	; (80069c4 <_printf_float+0x2e0>)
 8006776:	4894      	ldr	r0, [pc, #592]	; (80069c8 <_printf_float+0x2e4>)
 8006778:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800677c:	bf94      	ite	ls
 800677e:	4698      	movls	r8, r3
 8006780:	4680      	movhi	r8, r0
 8006782:	2303      	movs	r3, #3
 8006784:	6123      	str	r3, [r4, #16]
 8006786:	9b05      	ldr	r3, [sp, #20]
 8006788:	f023 0204 	bic.w	r2, r3, #4
 800678c:	6022      	str	r2, [r4, #0]
 800678e:	f04f 0900 	mov.w	r9, #0
 8006792:	9700      	str	r7, [sp, #0]
 8006794:	4633      	mov	r3, r6
 8006796:	aa0b      	add	r2, sp, #44	; 0x2c
 8006798:	4621      	mov	r1, r4
 800679a:	4628      	mov	r0, r5
 800679c:	f000 f9d8 	bl	8006b50 <_printf_common>
 80067a0:	3001      	adds	r0, #1
 80067a2:	f040 8090 	bne.w	80068c6 <_printf_float+0x1e2>
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067aa:	b00d      	add	sp, #52	; 0x34
 80067ac:	ecbd 8b02 	vpop	{d8}
 80067b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	f7fa f9de 	bl	8000b7c <__aeabi_dcmpun>
 80067c0:	b140      	cbz	r0, 80067d4 <_printf_float+0xf0>
 80067c2:	464b      	mov	r3, r9
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfbc      	itt	lt
 80067c8:	232d      	movlt	r3, #45	; 0x2d
 80067ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067ce:	487f      	ldr	r0, [pc, #508]	; (80069cc <_printf_float+0x2e8>)
 80067d0:	4b7f      	ldr	r3, [pc, #508]	; (80069d0 <_printf_float+0x2ec>)
 80067d2:	e7d1      	b.n	8006778 <_printf_float+0x94>
 80067d4:	6863      	ldr	r3, [r4, #4]
 80067d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067da:	9206      	str	r2, [sp, #24]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	d13f      	bne.n	8006860 <_printf_float+0x17c>
 80067e0:	2306      	movs	r3, #6
 80067e2:	6063      	str	r3, [r4, #4]
 80067e4:	9b05      	ldr	r3, [sp, #20]
 80067e6:	6861      	ldr	r1, [r4, #4]
 80067e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067ec:	2300      	movs	r3, #0
 80067ee:	9303      	str	r3, [sp, #12]
 80067f0:	ab0a      	add	r3, sp, #40	; 0x28
 80067f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067f6:	ab09      	add	r3, sp, #36	; 0x24
 80067f8:	ec49 8b10 	vmov	d0, r8, r9
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006804:	4628      	mov	r0, r5
 8006806:	f7ff fecd 	bl	80065a4 <__cvt>
 800680a:	9b06      	ldr	r3, [sp, #24]
 800680c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800680e:	2b47      	cmp	r3, #71	; 0x47
 8006810:	4680      	mov	r8, r0
 8006812:	d108      	bne.n	8006826 <_printf_float+0x142>
 8006814:	1cc8      	adds	r0, r1, #3
 8006816:	db02      	blt.n	800681e <_printf_float+0x13a>
 8006818:	6863      	ldr	r3, [r4, #4]
 800681a:	4299      	cmp	r1, r3
 800681c:	dd41      	ble.n	80068a2 <_printf_float+0x1be>
 800681e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006822:	fa5f fb8b 	uxtb.w	fp, fp
 8006826:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800682a:	d820      	bhi.n	800686e <_printf_float+0x18a>
 800682c:	3901      	subs	r1, #1
 800682e:	465a      	mov	r2, fp
 8006830:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006834:	9109      	str	r1, [sp, #36]	; 0x24
 8006836:	f7ff ff17 	bl	8006668 <__exponent>
 800683a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800683c:	1813      	adds	r3, r2, r0
 800683e:	2a01      	cmp	r2, #1
 8006840:	4681      	mov	r9, r0
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	dc02      	bgt.n	800684c <_printf_float+0x168>
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	07d2      	lsls	r2, r2, #31
 800684a:	d501      	bpl.n	8006850 <_printf_float+0x16c>
 800684c:	3301      	adds	r3, #1
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006854:	2b00      	cmp	r3, #0
 8006856:	d09c      	beq.n	8006792 <_printf_float+0xae>
 8006858:	232d      	movs	r3, #45	; 0x2d
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685e:	e798      	b.n	8006792 <_printf_float+0xae>
 8006860:	9a06      	ldr	r2, [sp, #24]
 8006862:	2a47      	cmp	r2, #71	; 0x47
 8006864:	d1be      	bne.n	80067e4 <_printf_float+0x100>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1bc      	bne.n	80067e4 <_printf_float+0x100>
 800686a:	2301      	movs	r3, #1
 800686c:	e7b9      	b.n	80067e2 <_printf_float+0xfe>
 800686e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006872:	d118      	bne.n	80068a6 <_printf_float+0x1c2>
 8006874:	2900      	cmp	r1, #0
 8006876:	6863      	ldr	r3, [r4, #4]
 8006878:	dd0b      	ble.n	8006892 <_printf_float+0x1ae>
 800687a:	6121      	str	r1, [r4, #16]
 800687c:	b913      	cbnz	r3, 8006884 <_printf_float+0x1a0>
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	07d0      	lsls	r0, r2, #31
 8006882:	d502      	bpl.n	800688a <_printf_float+0x1a6>
 8006884:	3301      	adds	r3, #1
 8006886:	440b      	add	r3, r1
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	65a1      	str	r1, [r4, #88]	; 0x58
 800688c:	f04f 0900 	mov.w	r9, #0
 8006890:	e7de      	b.n	8006850 <_printf_float+0x16c>
 8006892:	b913      	cbnz	r3, 800689a <_printf_float+0x1b6>
 8006894:	6822      	ldr	r2, [r4, #0]
 8006896:	07d2      	lsls	r2, r2, #31
 8006898:	d501      	bpl.n	800689e <_printf_float+0x1ba>
 800689a:	3302      	adds	r3, #2
 800689c:	e7f4      	b.n	8006888 <_printf_float+0x1a4>
 800689e:	2301      	movs	r3, #1
 80068a0:	e7f2      	b.n	8006888 <_printf_float+0x1a4>
 80068a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a8:	4299      	cmp	r1, r3
 80068aa:	db05      	blt.n	80068b8 <_printf_float+0x1d4>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	6121      	str	r1, [r4, #16]
 80068b0:	07d8      	lsls	r0, r3, #31
 80068b2:	d5ea      	bpl.n	800688a <_printf_float+0x1a6>
 80068b4:	1c4b      	adds	r3, r1, #1
 80068b6:	e7e7      	b.n	8006888 <_printf_float+0x1a4>
 80068b8:	2900      	cmp	r1, #0
 80068ba:	bfd4      	ite	le
 80068bc:	f1c1 0202 	rsble	r2, r1, #2
 80068c0:	2201      	movgt	r2, #1
 80068c2:	4413      	add	r3, r2
 80068c4:	e7e0      	b.n	8006888 <_printf_float+0x1a4>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	055a      	lsls	r2, r3, #21
 80068ca:	d407      	bmi.n	80068dc <_printf_float+0x1f8>
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	4642      	mov	r2, r8
 80068d0:	4631      	mov	r1, r6
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	d12c      	bne.n	8006934 <_printf_float+0x250>
 80068da:	e764      	b.n	80067a6 <_printf_float+0xc2>
 80068dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068e0:	f240 80e0 	bls.w	8006aa4 <_printf_float+0x3c0>
 80068e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068e8:	2200      	movs	r2, #0
 80068ea:	2300      	movs	r3, #0
 80068ec:	f7fa f914 	bl	8000b18 <__aeabi_dcmpeq>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d034      	beq.n	800695e <_printf_float+0x27a>
 80068f4:	4a37      	ldr	r2, [pc, #220]	; (80069d4 <_printf_float+0x2f0>)
 80068f6:	2301      	movs	r3, #1
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	f43f af51 	beq.w	80067a6 <_printf_float+0xc2>
 8006904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006908:	429a      	cmp	r2, r3
 800690a:	db02      	blt.n	8006912 <_printf_float+0x22e>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	07d8      	lsls	r0, r3, #31
 8006910:	d510      	bpl.n	8006934 <_printf_float+0x250>
 8006912:	ee18 3a10 	vmov	r3, s16
 8006916:	4652      	mov	r2, sl
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	f43f af41 	beq.w	80067a6 <_printf_float+0xc2>
 8006924:	f04f 0800 	mov.w	r8, #0
 8006928:	f104 091a 	add.w	r9, r4, #26
 800692c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692e:	3b01      	subs	r3, #1
 8006930:	4543      	cmp	r3, r8
 8006932:	dc09      	bgt.n	8006948 <_printf_float+0x264>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	079b      	lsls	r3, r3, #30
 8006938:	f100 8105 	bmi.w	8006b46 <_printf_float+0x462>
 800693c:	68e0      	ldr	r0, [r4, #12]
 800693e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006940:	4298      	cmp	r0, r3
 8006942:	bfb8      	it	lt
 8006944:	4618      	movlt	r0, r3
 8006946:	e730      	b.n	80067aa <_printf_float+0xc6>
 8006948:	2301      	movs	r3, #1
 800694a:	464a      	mov	r2, r9
 800694c:	4631      	mov	r1, r6
 800694e:	4628      	mov	r0, r5
 8006950:	47b8      	blx	r7
 8006952:	3001      	adds	r0, #1
 8006954:	f43f af27 	beq.w	80067a6 <_printf_float+0xc2>
 8006958:	f108 0801 	add.w	r8, r8, #1
 800695c:	e7e6      	b.n	800692c <_printf_float+0x248>
 800695e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006960:	2b00      	cmp	r3, #0
 8006962:	dc39      	bgt.n	80069d8 <_printf_float+0x2f4>
 8006964:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <_printf_float+0x2f0>)
 8006966:	2301      	movs	r3, #1
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af19 	beq.w	80067a6 <_printf_float+0xc2>
 8006974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006978:	4313      	orrs	r3, r2
 800697a:	d102      	bne.n	8006982 <_printf_float+0x29e>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	07d9      	lsls	r1, r3, #31
 8006980:	d5d8      	bpl.n	8006934 <_printf_float+0x250>
 8006982:	ee18 3a10 	vmov	r3, s16
 8006986:	4652      	mov	r2, sl
 8006988:	4631      	mov	r1, r6
 800698a:	4628      	mov	r0, r5
 800698c:	47b8      	blx	r7
 800698e:	3001      	adds	r0, #1
 8006990:	f43f af09 	beq.w	80067a6 <_printf_float+0xc2>
 8006994:	f04f 0900 	mov.w	r9, #0
 8006998:	f104 0a1a 	add.w	sl, r4, #26
 800699c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699e:	425b      	negs	r3, r3
 80069a0:	454b      	cmp	r3, r9
 80069a2:	dc01      	bgt.n	80069a8 <_printf_float+0x2c4>
 80069a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a6:	e792      	b.n	80068ce <_printf_float+0x1ea>
 80069a8:	2301      	movs	r3, #1
 80069aa:	4652      	mov	r2, sl
 80069ac:	4631      	mov	r1, r6
 80069ae:	4628      	mov	r0, r5
 80069b0:	47b8      	blx	r7
 80069b2:	3001      	adds	r0, #1
 80069b4:	f43f aef7 	beq.w	80067a6 <_printf_float+0xc2>
 80069b8:	f109 0901 	add.w	r9, r9, #1
 80069bc:	e7ee      	b.n	800699c <_printf_float+0x2b8>
 80069be:	bf00      	nop
 80069c0:	7fefffff 	.word	0x7fefffff
 80069c4:	0800917c 	.word	0x0800917c
 80069c8:	08009180 	.word	0x08009180
 80069cc:	08009188 	.word	0x08009188
 80069d0:	08009184 	.word	0x08009184
 80069d4:	0800918c 	.word	0x0800918c
 80069d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069dc:	429a      	cmp	r2, r3
 80069de:	bfa8      	it	ge
 80069e0:	461a      	movge	r2, r3
 80069e2:	2a00      	cmp	r2, #0
 80069e4:	4691      	mov	r9, r2
 80069e6:	dc37      	bgt.n	8006a58 <_printf_float+0x374>
 80069e8:	f04f 0b00 	mov.w	fp, #0
 80069ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069f0:	f104 021a 	add.w	r2, r4, #26
 80069f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069f6:	9305      	str	r3, [sp, #20]
 80069f8:	eba3 0309 	sub.w	r3, r3, r9
 80069fc:	455b      	cmp	r3, fp
 80069fe:	dc33      	bgt.n	8006a68 <_printf_float+0x384>
 8006a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a04:	429a      	cmp	r2, r3
 8006a06:	db3b      	blt.n	8006a80 <_printf_float+0x39c>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	07da      	lsls	r2, r3, #31
 8006a0c:	d438      	bmi.n	8006a80 <_printf_float+0x39c>
 8006a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a10:	9b05      	ldr	r3, [sp, #20]
 8006a12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	eba2 0901 	sub.w	r9, r2, r1
 8006a1a:	4599      	cmp	r9, r3
 8006a1c:	bfa8      	it	ge
 8006a1e:	4699      	movge	r9, r3
 8006a20:	f1b9 0f00 	cmp.w	r9, #0
 8006a24:	dc35      	bgt.n	8006a92 <_printf_float+0x3ae>
 8006a26:	f04f 0800 	mov.w	r8, #0
 8006a2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a2e:	f104 0a1a 	add.w	sl, r4, #26
 8006a32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	eba3 0309 	sub.w	r3, r3, r9
 8006a3c:	4543      	cmp	r3, r8
 8006a3e:	f77f af79 	ble.w	8006934 <_printf_float+0x250>
 8006a42:	2301      	movs	r3, #1
 8006a44:	4652      	mov	r2, sl
 8006a46:	4631      	mov	r1, r6
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	f43f aeaa 	beq.w	80067a6 <_printf_float+0xc2>
 8006a52:	f108 0801 	add.w	r8, r8, #1
 8006a56:	e7ec      	b.n	8006a32 <_printf_float+0x34e>
 8006a58:	4613      	mov	r3, r2
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47b8      	blx	r7
 8006a62:	3001      	adds	r0, #1
 8006a64:	d1c0      	bne.n	80069e8 <_printf_float+0x304>
 8006a66:	e69e      	b.n	80067a6 <_printf_float+0xc2>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	9205      	str	r2, [sp, #20]
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	f43f ae97 	beq.w	80067a6 <_printf_float+0xc2>
 8006a78:	9a05      	ldr	r2, [sp, #20]
 8006a7a:	f10b 0b01 	add.w	fp, fp, #1
 8006a7e:	e7b9      	b.n	80069f4 <_printf_float+0x310>
 8006a80:	ee18 3a10 	vmov	r3, s16
 8006a84:	4652      	mov	r2, sl
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d1be      	bne.n	8006a0e <_printf_float+0x32a>
 8006a90:	e689      	b.n	80067a6 <_printf_float+0xc2>
 8006a92:	9a05      	ldr	r2, [sp, #20]
 8006a94:	464b      	mov	r3, r9
 8006a96:	4442      	add	r2, r8
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d1c1      	bne.n	8006a26 <_printf_float+0x342>
 8006aa2:	e680      	b.n	80067a6 <_printf_float+0xc2>
 8006aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa6:	2a01      	cmp	r2, #1
 8006aa8:	dc01      	bgt.n	8006aae <_printf_float+0x3ca>
 8006aaa:	07db      	lsls	r3, r3, #31
 8006aac:	d538      	bpl.n	8006b20 <_printf_float+0x43c>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f ae74 	beq.w	80067a6 <_printf_float+0xc2>
 8006abe:	ee18 3a10 	vmov	r3, s16
 8006ac2:	4652      	mov	r2, sl
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	f43f ae6b 	beq.w	80067a6 <_printf_float+0xc2>
 8006ad0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f7fa f81e 	bl	8000b18 <__aeabi_dcmpeq>
 8006adc:	b9d8      	cbnz	r0, 8006b16 <_printf_float+0x432>
 8006ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae0:	f108 0201 	add.w	r2, r8, #1
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4628      	mov	r0, r5
 8006aea:	47b8      	blx	r7
 8006aec:	3001      	adds	r0, #1
 8006aee:	d10e      	bne.n	8006b0e <_printf_float+0x42a>
 8006af0:	e659      	b.n	80067a6 <_printf_float+0xc2>
 8006af2:	2301      	movs	r3, #1
 8006af4:	4652      	mov	r2, sl
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f ae52 	beq.w	80067a6 <_printf_float+0xc2>
 8006b02:	f108 0801 	add.w	r8, r8, #1
 8006b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	4543      	cmp	r3, r8
 8006b0c:	dcf1      	bgt.n	8006af2 <_printf_float+0x40e>
 8006b0e:	464b      	mov	r3, r9
 8006b10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b14:	e6dc      	b.n	80068d0 <_printf_float+0x1ec>
 8006b16:	f04f 0800 	mov.w	r8, #0
 8006b1a:	f104 0a1a 	add.w	sl, r4, #26
 8006b1e:	e7f2      	b.n	8006b06 <_printf_float+0x422>
 8006b20:	2301      	movs	r3, #1
 8006b22:	4642      	mov	r2, r8
 8006b24:	e7df      	b.n	8006ae6 <_printf_float+0x402>
 8006b26:	2301      	movs	r3, #1
 8006b28:	464a      	mov	r2, r9
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	f43f ae38 	beq.w	80067a6 <_printf_float+0xc2>
 8006b36:	f108 0801 	add.w	r8, r8, #1
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b3e:	1a5b      	subs	r3, r3, r1
 8006b40:	4543      	cmp	r3, r8
 8006b42:	dcf0      	bgt.n	8006b26 <_printf_float+0x442>
 8006b44:	e6fa      	b.n	800693c <_printf_float+0x258>
 8006b46:	f04f 0800 	mov.w	r8, #0
 8006b4a:	f104 0919 	add.w	r9, r4, #25
 8006b4e:	e7f4      	b.n	8006b3a <_printf_float+0x456>

08006b50 <_printf_common>:
 8006b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b54:	4616      	mov	r6, r2
 8006b56:	4699      	mov	r9, r3
 8006b58:	688a      	ldr	r2, [r1, #8]
 8006b5a:	690b      	ldr	r3, [r1, #16]
 8006b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	bfb8      	it	lt
 8006b64:	4613      	movlt	r3, r2
 8006b66:	6033      	str	r3, [r6, #0]
 8006b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	b10a      	cbz	r2, 8006b76 <_printf_common+0x26>
 8006b72:	3301      	adds	r3, #1
 8006b74:	6033      	str	r3, [r6, #0]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	0699      	lsls	r1, r3, #26
 8006b7a:	bf42      	ittt	mi
 8006b7c:	6833      	ldrmi	r3, [r6, #0]
 8006b7e:	3302      	addmi	r3, #2
 8006b80:	6033      	strmi	r3, [r6, #0]
 8006b82:	6825      	ldr	r5, [r4, #0]
 8006b84:	f015 0506 	ands.w	r5, r5, #6
 8006b88:	d106      	bne.n	8006b98 <_printf_common+0x48>
 8006b8a:	f104 0a19 	add.w	sl, r4, #25
 8006b8e:	68e3      	ldr	r3, [r4, #12]
 8006b90:	6832      	ldr	r2, [r6, #0]
 8006b92:	1a9b      	subs	r3, r3, r2
 8006b94:	42ab      	cmp	r3, r5
 8006b96:	dc26      	bgt.n	8006be6 <_printf_common+0x96>
 8006b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b9c:	1e13      	subs	r3, r2, #0
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	bf18      	it	ne
 8006ba2:	2301      	movne	r3, #1
 8006ba4:	0692      	lsls	r2, r2, #26
 8006ba6:	d42b      	bmi.n	8006c00 <_printf_common+0xb0>
 8006ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bac:	4649      	mov	r1, r9
 8006bae:	4638      	mov	r0, r7
 8006bb0:	47c0      	blx	r8
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d01e      	beq.n	8006bf4 <_printf_common+0xa4>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	68e5      	ldr	r5, [r4, #12]
 8006bba:	6832      	ldr	r2, [r6, #0]
 8006bbc:	f003 0306 	and.w	r3, r3, #6
 8006bc0:	2b04      	cmp	r3, #4
 8006bc2:	bf08      	it	eq
 8006bc4:	1aad      	subeq	r5, r5, r2
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	6922      	ldr	r2, [r4, #16]
 8006bca:	bf0c      	ite	eq
 8006bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bd0:	2500      	movne	r5, #0
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	bfc4      	itt	gt
 8006bd6:	1a9b      	subgt	r3, r3, r2
 8006bd8:	18ed      	addgt	r5, r5, r3
 8006bda:	2600      	movs	r6, #0
 8006bdc:	341a      	adds	r4, #26
 8006bde:	42b5      	cmp	r5, r6
 8006be0:	d11a      	bne.n	8006c18 <_printf_common+0xc8>
 8006be2:	2000      	movs	r0, #0
 8006be4:	e008      	b.n	8006bf8 <_printf_common+0xa8>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4652      	mov	r2, sl
 8006bea:	4649      	mov	r1, r9
 8006bec:	4638      	mov	r0, r7
 8006bee:	47c0      	blx	r8
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d103      	bne.n	8006bfc <_printf_common+0xac>
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfc:	3501      	adds	r5, #1
 8006bfe:	e7c6      	b.n	8006b8e <_printf_common+0x3e>
 8006c00:	18e1      	adds	r1, r4, r3
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	2030      	movs	r0, #48	; 0x30
 8006c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c0a:	4422      	add	r2, r4
 8006c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c14:	3302      	adds	r3, #2
 8006c16:	e7c7      	b.n	8006ba8 <_printf_common+0x58>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	4649      	mov	r1, r9
 8006c1e:	4638      	mov	r0, r7
 8006c20:	47c0      	blx	r8
 8006c22:	3001      	adds	r0, #1
 8006c24:	d0e6      	beq.n	8006bf4 <_printf_common+0xa4>
 8006c26:	3601      	adds	r6, #1
 8006c28:	e7d9      	b.n	8006bde <_printf_common+0x8e>
	...

08006c2c <_printf_i>:
 8006c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	460c      	mov	r4, r1
 8006c32:	4691      	mov	r9, r2
 8006c34:	7e27      	ldrb	r7, [r4, #24]
 8006c36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c38:	2f78      	cmp	r7, #120	; 0x78
 8006c3a:	4680      	mov	r8, r0
 8006c3c:	469a      	mov	sl, r3
 8006c3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c42:	d807      	bhi.n	8006c54 <_printf_i+0x28>
 8006c44:	2f62      	cmp	r7, #98	; 0x62
 8006c46:	d80a      	bhi.n	8006c5e <_printf_i+0x32>
 8006c48:	2f00      	cmp	r7, #0
 8006c4a:	f000 80d8 	beq.w	8006dfe <_printf_i+0x1d2>
 8006c4e:	2f58      	cmp	r7, #88	; 0x58
 8006c50:	f000 80a3 	beq.w	8006d9a <_printf_i+0x16e>
 8006c54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c5c:	e03a      	b.n	8006cd4 <_printf_i+0xa8>
 8006c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c62:	2b15      	cmp	r3, #21
 8006c64:	d8f6      	bhi.n	8006c54 <_printf_i+0x28>
 8006c66:	a001      	add	r0, pc, #4	; (adr r0, 8006c6c <_printf_i+0x40>)
 8006c68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c6c:	08006cc5 	.word	0x08006cc5
 8006c70:	08006cd9 	.word	0x08006cd9
 8006c74:	08006c55 	.word	0x08006c55
 8006c78:	08006c55 	.word	0x08006c55
 8006c7c:	08006c55 	.word	0x08006c55
 8006c80:	08006c55 	.word	0x08006c55
 8006c84:	08006cd9 	.word	0x08006cd9
 8006c88:	08006c55 	.word	0x08006c55
 8006c8c:	08006c55 	.word	0x08006c55
 8006c90:	08006c55 	.word	0x08006c55
 8006c94:	08006c55 	.word	0x08006c55
 8006c98:	08006de5 	.word	0x08006de5
 8006c9c:	08006d09 	.word	0x08006d09
 8006ca0:	08006dc7 	.word	0x08006dc7
 8006ca4:	08006c55 	.word	0x08006c55
 8006ca8:	08006c55 	.word	0x08006c55
 8006cac:	08006e07 	.word	0x08006e07
 8006cb0:	08006c55 	.word	0x08006c55
 8006cb4:	08006d09 	.word	0x08006d09
 8006cb8:	08006c55 	.word	0x08006c55
 8006cbc:	08006c55 	.word	0x08006c55
 8006cc0:	08006dcf 	.word	0x08006dcf
 8006cc4:	680b      	ldr	r3, [r1, #0]
 8006cc6:	1d1a      	adds	r2, r3, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	600a      	str	r2, [r1, #0]
 8006ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0a3      	b.n	8006e20 <_printf_i+0x1f4>
 8006cd8:	6825      	ldr	r5, [r4, #0]
 8006cda:	6808      	ldr	r0, [r1, #0]
 8006cdc:	062e      	lsls	r6, r5, #24
 8006cde:	f100 0304 	add.w	r3, r0, #4
 8006ce2:	d50a      	bpl.n	8006cfa <_printf_i+0xce>
 8006ce4:	6805      	ldr	r5, [r0, #0]
 8006ce6:	600b      	str	r3, [r1, #0]
 8006ce8:	2d00      	cmp	r5, #0
 8006cea:	da03      	bge.n	8006cf4 <_printf_i+0xc8>
 8006cec:	232d      	movs	r3, #45	; 0x2d
 8006cee:	426d      	negs	r5, r5
 8006cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf4:	485e      	ldr	r0, [pc, #376]	; (8006e70 <_printf_i+0x244>)
 8006cf6:	230a      	movs	r3, #10
 8006cf8:	e019      	b.n	8006d2e <_printf_i+0x102>
 8006cfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cfe:	6805      	ldr	r5, [r0, #0]
 8006d00:	600b      	str	r3, [r1, #0]
 8006d02:	bf18      	it	ne
 8006d04:	b22d      	sxthne	r5, r5
 8006d06:	e7ef      	b.n	8006ce8 <_printf_i+0xbc>
 8006d08:	680b      	ldr	r3, [r1, #0]
 8006d0a:	6825      	ldr	r5, [r4, #0]
 8006d0c:	1d18      	adds	r0, r3, #4
 8006d0e:	6008      	str	r0, [r1, #0]
 8006d10:	0628      	lsls	r0, r5, #24
 8006d12:	d501      	bpl.n	8006d18 <_printf_i+0xec>
 8006d14:	681d      	ldr	r5, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <_printf_i+0xf2>
 8006d18:	0669      	lsls	r1, r5, #25
 8006d1a:	d5fb      	bpl.n	8006d14 <_printf_i+0xe8>
 8006d1c:	881d      	ldrh	r5, [r3, #0]
 8006d1e:	4854      	ldr	r0, [pc, #336]	; (8006e70 <_printf_i+0x244>)
 8006d20:	2f6f      	cmp	r7, #111	; 0x6f
 8006d22:	bf0c      	ite	eq
 8006d24:	2308      	moveq	r3, #8
 8006d26:	230a      	movne	r3, #10
 8006d28:	2100      	movs	r1, #0
 8006d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d2e:	6866      	ldr	r6, [r4, #4]
 8006d30:	60a6      	str	r6, [r4, #8]
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	bfa2      	ittt	ge
 8006d36:	6821      	ldrge	r1, [r4, #0]
 8006d38:	f021 0104 	bicge.w	r1, r1, #4
 8006d3c:	6021      	strge	r1, [r4, #0]
 8006d3e:	b90d      	cbnz	r5, 8006d44 <_printf_i+0x118>
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	d04d      	beq.n	8006de0 <_printf_i+0x1b4>
 8006d44:	4616      	mov	r6, r2
 8006d46:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d4a:	fb03 5711 	mls	r7, r3, r1, r5
 8006d4e:	5dc7      	ldrb	r7, [r0, r7]
 8006d50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d54:	462f      	mov	r7, r5
 8006d56:	42bb      	cmp	r3, r7
 8006d58:	460d      	mov	r5, r1
 8006d5a:	d9f4      	bls.n	8006d46 <_printf_i+0x11a>
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d10b      	bne.n	8006d78 <_printf_i+0x14c>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	07df      	lsls	r7, r3, #31
 8006d64:	d508      	bpl.n	8006d78 <_printf_i+0x14c>
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	6861      	ldr	r1, [r4, #4]
 8006d6a:	4299      	cmp	r1, r3
 8006d6c:	bfde      	ittt	le
 8006d6e:	2330      	movle	r3, #48	; 0x30
 8006d70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d74:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006d78:	1b92      	subs	r2, r2, r6
 8006d7a:	6122      	str	r2, [r4, #16]
 8006d7c:	f8cd a000 	str.w	sl, [sp]
 8006d80:	464b      	mov	r3, r9
 8006d82:	aa03      	add	r2, sp, #12
 8006d84:	4621      	mov	r1, r4
 8006d86:	4640      	mov	r0, r8
 8006d88:	f7ff fee2 	bl	8006b50 <_printf_common>
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d14c      	bne.n	8006e2a <_printf_i+0x1fe>
 8006d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d94:	b004      	add	sp, #16
 8006d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9a:	4835      	ldr	r0, [pc, #212]	; (8006e70 <_printf_i+0x244>)
 8006d9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	680e      	ldr	r6, [r1, #0]
 8006da4:	061f      	lsls	r7, r3, #24
 8006da6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006daa:	600e      	str	r6, [r1, #0]
 8006dac:	d514      	bpl.n	8006dd8 <_printf_i+0x1ac>
 8006dae:	07d9      	lsls	r1, r3, #31
 8006db0:	bf44      	itt	mi
 8006db2:	f043 0320 	orrmi.w	r3, r3, #32
 8006db6:	6023      	strmi	r3, [r4, #0]
 8006db8:	b91d      	cbnz	r5, 8006dc2 <_printf_i+0x196>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	f023 0320 	bic.w	r3, r3, #32
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	e7b0      	b.n	8006d28 <_printf_i+0xfc>
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	f043 0320 	orr.w	r3, r3, #32
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	2378      	movs	r3, #120	; 0x78
 8006dd0:	4828      	ldr	r0, [pc, #160]	; (8006e74 <_printf_i+0x248>)
 8006dd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dd6:	e7e3      	b.n	8006da0 <_printf_i+0x174>
 8006dd8:	065e      	lsls	r6, r3, #25
 8006dda:	bf48      	it	mi
 8006ddc:	b2ad      	uxthmi	r5, r5
 8006dde:	e7e6      	b.n	8006dae <_printf_i+0x182>
 8006de0:	4616      	mov	r6, r2
 8006de2:	e7bb      	b.n	8006d5c <_printf_i+0x130>
 8006de4:	680b      	ldr	r3, [r1, #0]
 8006de6:	6826      	ldr	r6, [r4, #0]
 8006de8:	6960      	ldr	r0, [r4, #20]
 8006dea:	1d1d      	adds	r5, r3, #4
 8006dec:	600d      	str	r5, [r1, #0]
 8006dee:	0635      	lsls	r5, r6, #24
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	d501      	bpl.n	8006df8 <_printf_i+0x1cc>
 8006df4:	6018      	str	r0, [r3, #0]
 8006df6:	e002      	b.n	8006dfe <_printf_i+0x1d2>
 8006df8:	0671      	lsls	r1, r6, #25
 8006dfa:	d5fb      	bpl.n	8006df4 <_printf_i+0x1c8>
 8006dfc:	8018      	strh	r0, [r3, #0]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6123      	str	r3, [r4, #16]
 8006e02:	4616      	mov	r6, r2
 8006e04:	e7ba      	b.n	8006d7c <_printf_i+0x150>
 8006e06:	680b      	ldr	r3, [r1, #0]
 8006e08:	1d1a      	adds	r2, r3, #4
 8006e0a:	600a      	str	r2, [r1, #0]
 8006e0c:	681e      	ldr	r6, [r3, #0]
 8006e0e:	6862      	ldr	r2, [r4, #4]
 8006e10:	2100      	movs	r1, #0
 8006e12:	4630      	mov	r0, r6
 8006e14:	f7f9 fa0c 	bl	8000230 <memchr>
 8006e18:	b108      	cbz	r0, 8006e1e <_printf_i+0x1f2>
 8006e1a:	1b80      	subs	r0, r0, r6
 8006e1c:	6060      	str	r0, [r4, #4]
 8006e1e:	6863      	ldr	r3, [r4, #4]
 8006e20:	6123      	str	r3, [r4, #16]
 8006e22:	2300      	movs	r3, #0
 8006e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e28:	e7a8      	b.n	8006d7c <_printf_i+0x150>
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	4649      	mov	r1, r9
 8006e30:	4640      	mov	r0, r8
 8006e32:	47d0      	blx	sl
 8006e34:	3001      	adds	r0, #1
 8006e36:	d0ab      	beq.n	8006d90 <_printf_i+0x164>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	079b      	lsls	r3, r3, #30
 8006e3c:	d413      	bmi.n	8006e66 <_printf_i+0x23a>
 8006e3e:	68e0      	ldr	r0, [r4, #12]
 8006e40:	9b03      	ldr	r3, [sp, #12]
 8006e42:	4298      	cmp	r0, r3
 8006e44:	bfb8      	it	lt
 8006e46:	4618      	movlt	r0, r3
 8006e48:	e7a4      	b.n	8006d94 <_printf_i+0x168>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4632      	mov	r2, r6
 8006e4e:	4649      	mov	r1, r9
 8006e50:	4640      	mov	r0, r8
 8006e52:	47d0      	blx	sl
 8006e54:	3001      	adds	r0, #1
 8006e56:	d09b      	beq.n	8006d90 <_printf_i+0x164>
 8006e58:	3501      	adds	r5, #1
 8006e5a:	68e3      	ldr	r3, [r4, #12]
 8006e5c:	9903      	ldr	r1, [sp, #12]
 8006e5e:	1a5b      	subs	r3, r3, r1
 8006e60:	42ab      	cmp	r3, r5
 8006e62:	dcf2      	bgt.n	8006e4a <_printf_i+0x21e>
 8006e64:	e7eb      	b.n	8006e3e <_printf_i+0x212>
 8006e66:	2500      	movs	r5, #0
 8006e68:	f104 0619 	add.w	r6, r4, #25
 8006e6c:	e7f5      	b.n	8006e5a <_printf_i+0x22e>
 8006e6e:	bf00      	nop
 8006e70:	0800918e 	.word	0x0800918e
 8006e74:	0800919f 	.word	0x0800919f

08006e78 <iprintf>:
 8006e78:	b40f      	push	{r0, r1, r2, r3}
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <iprintf+0x2c>)
 8006e7c:	b513      	push	{r0, r1, r4, lr}
 8006e7e:	681c      	ldr	r4, [r3, #0]
 8006e80:	b124      	cbz	r4, 8006e8c <iprintf+0x14>
 8006e82:	69a3      	ldr	r3, [r4, #24]
 8006e84:	b913      	cbnz	r3, 8006e8c <iprintf+0x14>
 8006e86:	4620      	mov	r0, r4
 8006e88:	f001 f8fc 	bl	8008084 <__sinit>
 8006e8c:	ab05      	add	r3, sp, #20
 8006e8e:	9a04      	ldr	r2, [sp, #16]
 8006e90:	68a1      	ldr	r1, [r4, #8]
 8006e92:	9301      	str	r3, [sp, #4]
 8006e94:	4620      	mov	r0, r4
 8006e96:	f001 fdcf 	bl	8008a38 <_vfiprintf_r>
 8006e9a:	b002      	add	sp, #8
 8006e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea0:	b004      	add	sp, #16
 8006ea2:	4770      	bx	lr
 8006ea4:	2000000c 	.word	0x2000000c

08006ea8 <putchar>:
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <putchar+0x28>)
 8006eaa:	b513      	push	{r0, r1, r4, lr}
 8006eac:	681c      	ldr	r4, [r3, #0]
 8006eae:	4601      	mov	r1, r0
 8006eb0:	b134      	cbz	r4, 8006ec0 <putchar+0x18>
 8006eb2:	69a3      	ldr	r3, [r4, #24]
 8006eb4:	b923      	cbnz	r3, 8006ec0 <putchar+0x18>
 8006eb6:	9001      	str	r0, [sp, #4]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f001 f8e3 	bl	8008084 <__sinit>
 8006ebe:	9901      	ldr	r1, [sp, #4]
 8006ec0:	68a2      	ldr	r2, [r4, #8]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	b002      	add	sp, #8
 8006ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eca:	f001 bee5 	b.w	8008c98 <_putc_r>
 8006ece:	bf00      	nop
 8006ed0:	2000000c 	.word	0x2000000c

08006ed4 <_puts_r>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	460e      	mov	r6, r1
 8006ed8:	4605      	mov	r5, r0
 8006eda:	b118      	cbz	r0, 8006ee4 <_puts_r+0x10>
 8006edc:	6983      	ldr	r3, [r0, #24]
 8006ede:	b90b      	cbnz	r3, 8006ee4 <_puts_r+0x10>
 8006ee0:	f001 f8d0 	bl	8008084 <__sinit>
 8006ee4:	69ab      	ldr	r3, [r5, #24]
 8006ee6:	68ac      	ldr	r4, [r5, #8]
 8006ee8:	b913      	cbnz	r3, 8006ef0 <_puts_r+0x1c>
 8006eea:	4628      	mov	r0, r5
 8006eec:	f001 f8ca 	bl	8008084 <__sinit>
 8006ef0:	4b2c      	ldr	r3, [pc, #176]	; (8006fa4 <_puts_r+0xd0>)
 8006ef2:	429c      	cmp	r4, r3
 8006ef4:	d120      	bne.n	8006f38 <_puts_r+0x64>
 8006ef6:	686c      	ldr	r4, [r5, #4]
 8006ef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006efa:	07db      	lsls	r3, r3, #31
 8006efc:	d405      	bmi.n	8006f0a <_puts_r+0x36>
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	0598      	lsls	r0, r3, #22
 8006f02:	d402      	bmi.n	8006f0a <_puts_r+0x36>
 8006f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f06:	f001 f960 	bl	80081ca <__retarget_lock_acquire_recursive>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	0719      	lsls	r1, r3, #28
 8006f0e:	d51d      	bpl.n	8006f4c <_puts_r+0x78>
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	b1db      	cbz	r3, 8006f4c <_puts_r+0x78>
 8006f14:	3e01      	subs	r6, #1
 8006f16:	68a3      	ldr	r3, [r4, #8]
 8006f18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	60a3      	str	r3, [r4, #8]
 8006f20:	bb39      	cbnz	r1, 8006f72 <_puts_r+0x9e>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da38      	bge.n	8006f98 <_puts_r+0xc4>
 8006f26:	4622      	mov	r2, r4
 8006f28:	210a      	movs	r1, #10
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 f858 	bl	8006fe0 <__swbuf_r>
 8006f30:	3001      	adds	r0, #1
 8006f32:	d011      	beq.n	8006f58 <_puts_r+0x84>
 8006f34:	250a      	movs	r5, #10
 8006f36:	e011      	b.n	8006f5c <_puts_r+0x88>
 8006f38:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <_puts_r+0xd4>)
 8006f3a:	429c      	cmp	r4, r3
 8006f3c:	d101      	bne.n	8006f42 <_puts_r+0x6e>
 8006f3e:	68ac      	ldr	r4, [r5, #8]
 8006f40:	e7da      	b.n	8006ef8 <_puts_r+0x24>
 8006f42:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <_puts_r+0xd8>)
 8006f44:	429c      	cmp	r4, r3
 8006f46:	bf08      	it	eq
 8006f48:	68ec      	ldreq	r4, [r5, #12]
 8006f4a:	e7d5      	b.n	8006ef8 <_puts_r+0x24>
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 f898 	bl	8007084 <__swsetup_r>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d0dd      	beq.n	8006f14 <_puts_r+0x40>
 8006f58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f5e:	07da      	lsls	r2, r3, #31
 8006f60:	d405      	bmi.n	8006f6e <_puts_r+0x9a>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	059b      	lsls	r3, r3, #22
 8006f66:	d402      	bmi.n	8006f6e <_puts_r+0x9a>
 8006f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f6a:	f001 f92f 	bl	80081cc <__retarget_lock_release_recursive>
 8006f6e:	4628      	mov	r0, r5
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da04      	bge.n	8006f80 <_puts_r+0xac>
 8006f76:	69a2      	ldr	r2, [r4, #24]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	dc06      	bgt.n	8006f8a <_puts_r+0xb6>
 8006f7c:	290a      	cmp	r1, #10
 8006f7e:	d004      	beq.n	8006f8a <_puts_r+0xb6>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	6022      	str	r2, [r4, #0]
 8006f86:	7019      	strb	r1, [r3, #0]
 8006f88:	e7c5      	b.n	8006f16 <_puts_r+0x42>
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f000 f827 	bl	8006fe0 <__swbuf_r>
 8006f92:	3001      	adds	r0, #1
 8006f94:	d1bf      	bne.n	8006f16 <_puts_r+0x42>
 8006f96:	e7df      	b.n	8006f58 <_puts_r+0x84>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	250a      	movs	r5, #10
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	6022      	str	r2, [r4, #0]
 8006fa0:	701d      	strb	r5, [r3, #0]
 8006fa2:	e7db      	b.n	8006f5c <_puts_r+0x88>
 8006fa4:	08009264 	.word	0x08009264
 8006fa8:	08009284 	.word	0x08009284
 8006fac:	08009244 	.word	0x08009244

08006fb0 <puts>:
 8006fb0:	4b02      	ldr	r3, [pc, #8]	; (8006fbc <puts+0xc>)
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	f7ff bf8d 	b.w	8006ed4 <_puts_r>
 8006fba:	bf00      	nop
 8006fbc:	2000000c 	.word	0x2000000c

08006fc0 <_sbrk_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d06      	ldr	r5, [pc, #24]	; (8006fdc <_sbrk_r+0x1c>)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	602b      	str	r3, [r5, #0]
 8006fcc:	f7fa fe8e 	bl	8001cec <_sbrk>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_sbrk_r+0x1a>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_sbrk_r+0x1a>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	20000454 	.word	0x20000454

08006fe0 <__swbuf_r>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	460e      	mov	r6, r1
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	b118      	cbz	r0, 8006ff2 <__swbuf_r+0x12>
 8006fea:	6983      	ldr	r3, [r0, #24]
 8006fec:	b90b      	cbnz	r3, 8006ff2 <__swbuf_r+0x12>
 8006fee:	f001 f849 	bl	8008084 <__sinit>
 8006ff2:	4b21      	ldr	r3, [pc, #132]	; (8007078 <__swbuf_r+0x98>)
 8006ff4:	429c      	cmp	r4, r3
 8006ff6:	d12b      	bne.n	8007050 <__swbuf_r+0x70>
 8006ff8:	686c      	ldr	r4, [r5, #4]
 8006ffa:	69a3      	ldr	r3, [r4, #24]
 8006ffc:	60a3      	str	r3, [r4, #8]
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	071a      	lsls	r2, r3, #28
 8007002:	d52f      	bpl.n	8007064 <__swbuf_r+0x84>
 8007004:	6923      	ldr	r3, [r4, #16]
 8007006:	b36b      	cbz	r3, 8007064 <__swbuf_r+0x84>
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	6820      	ldr	r0, [r4, #0]
 800700c:	1ac0      	subs	r0, r0, r3
 800700e:	6963      	ldr	r3, [r4, #20]
 8007010:	b2f6      	uxtb	r6, r6
 8007012:	4283      	cmp	r3, r0
 8007014:	4637      	mov	r7, r6
 8007016:	dc04      	bgt.n	8007022 <__swbuf_r+0x42>
 8007018:	4621      	mov	r1, r4
 800701a:	4628      	mov	r0, r5
 800701c:	f000 ff9e 	bl	8007f5c <_fflush_r>
 8007020:	bb30      	cbnz	r0, 8007070 <__swbuf_r+0x90>
 8007022:	68a3      	ldr	r3, [r4, #8]
 8007024:	3b01      	subs	r3, #1
 8007026:	60a3      	str	r3, [r4, #8]
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	6022      	str	r2, [r4, #0]
 800702e:	701e      	strb	r6, [r3, #0]
 8007030:	6963      	ldr	r3, [r4, #20]
 8007032:	3001      	adds	r0, #1
 8007034:	4283      	cmp	r3, r0
 8007036:	d004      	beq.n	8007042 <__swbuf_r+0x62>
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	07db      	lsls	r3, r3, #31
 800703c:	d506      	bpl.n	800704c <__swbuf_r+0x6c>
 800703e:	2e0a      	cmp	r6, #10
 8007040:	d104      	bne.n	800704c <__swbuf_r+0x6c>
 8007042:	4621      	mov	r1, r4
 8007044:	4628      	mov	r0, r5
 8007046:	f000 ff89 	bl	8007f5c <_fflush_r>
 800704a:	b988      	cbnz	r0, 8007070 <__swbuf_r+0x90>
 800704c:	4638      	mov	r0, r7
 800704e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <__swbuf_r+0x9c>)
 8007052:	429c      	cmp	r4, r3
 8007054:	d101      	bne.n	800705a <__swbuf_r+0x7a>
 8007056:	68ac      	ldr	r4, [r5, #8]
 8007058:	e7cf      	b.n	8006ffa <__swbuf_r+0x1a>
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <__swbuf_r+0xa0>)
 800705c:	429c      	cmp	r4, r3
 800705e:	bf08      	it	eq
 8007060:	68ec      	ldreq	r4, [r5, #12]
 8007062:	e7ca      	b.n	8006ffa <__swbuf_r+0x1a>
 8007064:	4621      	mov	r1, r4
 8007066:	4628      	mov	r0, r5
 8007068:	f000 f80c 	bl	8007084 <__swsetup_r>
 800706c:	2800      	cmp	r0, #0
 800706e:	d0cb      	beq.n	8007008 <__swbuf_r+0x28>
 8007070:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007074:	e7ea      	b.n	800704c <__swbuf_r+0x6c>
 8007076:	bf00      	nop
 8007078:	08009264 	.word	0x08009264
 800707c:	08009284 	.word	0x08009284
 8007080:	08009244 	.word	0x08009244

08007084 <__swsetup_r>:
 8007084:	4b32      	ldr	r3, [pc, #200]	; (8007150 <__swsetup_r+0xcc>)
 8007086:	b570      	push	{r4, r5, r6, lr}
 8007088:	681d      	ldr	r5, [r3, #0]
 800708a:	4606      	mov	r6, r0
 800708c:	460c      	mov	r4, r1
 800708e:	b125      	cbz	r5, 800709a <__swsetup_r+0x16>
 8007090:	69ab      	ldr	r3, [r5, #24]
 8007092:	b913      	cbnz	r3, 800709a <__swsetup_r+0x16>
 8007094:	4628      	mov	r0, r5
 8007096:	f000 fff5 	bl	8008084 <__sinit>
 800709a:	4b2e      	ldr	r3, [pc, #184]	; (8007154 <__swsetup_r+0xd0>)
 800709c:	429c      	cmp	r4, r3
 800709e:	d10f      	bne.n	80070c0 <__swsetup_r+0x3c>
 80070a0:	686c      	ldr	r4, [r5, #4]
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070a8:	0719      	lsls	r1, r3, #28
 80070aa:	d42c      	bmi.n	8007106 <__swsetup_r+0x82>
 80070ac:	06dd      	lsls	r5, r3, #27
 80070ae:	d411      	bmi.n	80070d4 <__swsetup_r+0x50>
 80070b0:	2309      	movs	r3, #9
 80070b2:	6033      	str	r3, [r6, #0]
 80070b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070b8:	81a3      	strh	r3, [r4, #12]
 80070ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070be:	e03e      	b.n	800713e <__swsetup_r+0xba>
 80070c0:	4b25      	ldr	r3, [pc, #148]	; (8007158 <__swsetup_r+0xd4>)
 80070c2:	429c      	cmp	r4, r3
 80070c4:	d101      	bne.n	80070ca <__swsetup_r+0x46>
 80070c6:	68ac      	ldr	r4, [r5, #8]
 80070c8:	e7eb      	b.n	80070a2 <__swsetup_r+0x1e>
 80070ca:	4b24      	ldr	r3, [pc, #144]	; (800715c <__swsetup_r+0xd8>)
 80070cc:	429c      	cmp	r4, r3
 80070ce:	bf08      	it	eq
 80070d0:	68ec      	ldreq	r4, [r5, #12]
 80070d2:	e7e6      	b.n	80070a2 <__swsetup_r+0x1e>
 80070d4:	0758      	lsls	r0, r3, #29
 80070d6:	d512      	bpl.n	80070fe <__swsetup_r+0x7a>
 80070d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070da:	b141      	cbz	r1, 80070ee <__swsetup_r+0x6a>
 80070dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070e0:	4299      	cmp	r1, r3
 80070e2:	d002      	beq.n	80070ea <__swsetup_r+0x66>
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff f9b3 	bl	8006450 <_free_r>
 80070ea:	2300      	movs	r3, #0
 80070ec:	6363      	str	r3, [r4, #52]	; 0x34
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	2300      	movs	r3, #0
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f043 0308 	orr.w	r3, r3, #8
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	b94b      	cbnz	r3, 800711e <__swsetup_r+0x9a>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007114:	d003      	beq.n	800711e <__swsetup_r+0x9a>
 8007116:	4621      	mov	r1, r4
 8007118:	4630      	mov	r0, r6
 800711a:	f001 f87d 	bl	8008218 <__smakebuf_r>
 800711e:	89a0      	ldrh	r0, [r4, #12]
 8007120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007124:	f010 0301 	ands.w	r3, r0, #1
 8007128:	d00a      	beq.n	8007140 <__swsetup_r+0xbc>
 800712a:	2300      	movs	r3, #0
 800712c:	60a3      	str	r3, [r4, #8]
 800712e:	6963      	ldr	r3, [r4, #20]
 8007130:	425b      	negs	r3, r3
 8007132:	61a3      	str	r3, [r4, #24]
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	b943      	cbnz	r3, 800714a <__swsetup_r+0xc6>
 8007138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800713c:	d1ba      	bne.n	80070b4 <__swsetup_r+0x30>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	0781      	lsls	r1, r0, #30
 8007142:	bf58      	it	pl
 8007144:	6963      	ldrpl	r3, [r4, #20]
 8007146:	60a3      	str	r3, [r4, #8]
 8007148:	e7f4      	b.n	8007134 <__swsetup_r+0xb0>
 800714a:	2000      	movs	r0, #0
 800714c:	e7f7      	b.n	800713e <__swsetup_r+0xba>
 800714e:	bf00      	nop
 8007150:	2000000c 	.word	0x2000000c
 8007154:	08009264 	.word	0x08009264
 8007158:	08009284 	.word	0x08009284
 800715c:	08009244 	.word	0x08009244

08007160 <quorem>:
 8007160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	6903      	ldr	r3, [r0, #16]
 8007166:	690c      	ldr	r4, [r1, #16]
 8007168:	42a3      	cmp	r3, r4
 800716a:	4607      	mov	r7, r0
 800716c:	f2c0 8081 	blt.w	8007272 <quorem+0x112>
 8007170:	3c01      	subs	r4, #1
 8007172:	f101 0814 	add.w	r8, r1, #20
 8007176:	f100 0514 	add.w	r5, r0, #20
 800717a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007188:	3301      	adds	r3, #1
 800718a:	429a      	cmp	r2, r3
 800718c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007190:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007194:	fbb2 f6f3 	udiv	r6, r2, r3
 8007198:	d331      	bcc.n	80071fe <quorem+0x9e>
 800719a:	f04f 0e00 	mov.w	lr, #0
 800719e:	4640      	mov	r0, r8
 80071a0:	46ac      	mov	ip, r5
 80071a2:	46f2      	mov	sl, lr
 80071a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80071a8:	b293      	uxth	r3, r2
 80071aa:	fb06 e303 	mla	r3, r6, r3, lr
 80071ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	ebaa 0303 	sub.w	r3, sl, r3
 80071b8:	0c12      	lsrs	r2, r2, #16
 80071ba:	f8dc a000 	ldr.w	sl, [ip]
 80071be:	fb06 e202 	mla	r2, r6, r2, lr
 80071c2:	fa13 f38a 	uxtah	r3, r3, sl
 80071c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071ca:	fa1f fa82 	uxth.w	sl, r2
 80071ce:	f8dc 2000 	ldr.w	r2, [ip]
 80071d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80071d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071e0:	4581      	cmp	r9, r0
 80071e2:	f84c 3b04 	str.w	r3, [ip], #4
 80071e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071ea:	d2db      	bcs.n	80071a4 <quorem+0x44>
 80071ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80071f0:	b92b      	cbnz	r3, 80071fe <quorem+0x9e>
 80071f2:	9b01      	ldr	r3, [sp, #4]
 80071f4:	3b04      	subs	r3, #4
 80071f6:	429d      	cmp	r5, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	d32e      	bcc.n	800725a <quorem+0xfa>
 80071fc:	613c      	str	r4, [r7, #16]
 80071fe:	4638      	mov	r0, r7
 8007200:	f001 fae2 	bl	80087c8 <__mcmp>
 8007204:	2800      	cmp	r0, #0
 8007206:	db24      	blt.n	8007252 <quorem+0xf2>
 8007208:	3601      	adds	r6, #1
 800720a:	4628      	mov	r0, r5
 800720c:	f04f 0c00 	mov.w	ip, #0
 8007210:	f858 2b04 	ldr.w	r2, [r8], #4
 8007214:	f8d0 e000 	ldr.w	lr, [r0]
 8007218:	b293      	uxth	r3, r2
 800721a:	ebac 0303 	sub.w	r3, ip, r3
 800721e:	0c12      	lsrs	r2, r2, #16
 8007220:	fa13 f38e 	uxtah	r3, r3, lr
 8007224:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800722c:	b29b      	uxth	r3, r3
 800722e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007232:	45c1      	cmp	r9, r8
 8007234:	f840 3b04 	str.w	r3, [r0], #4
 8007238:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800723c:	d2e8      	bcs.n	8007210 <quorem+0xb0>
 800723e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007246:	b922      	cbnz	r2, 8007252 <quorem+0xf2>
 8007248:	3b04      	subs	r3, #4
 800724a:	429d      	cmp	r5, r3
 800724c:	461a      	mov	r2, r3
 800724e:	d30a      	bcc.n	8007266 <quorem+0x106>
 8007250:	613c      	str	r4, [r7, #16]
 8007252:	4630      	mov	r0, r6
 8007254:	b003      	add	sp, #12
 8007256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725a:	6812      	ldr	r2, [r2, #0]
 800725c:	3b04      	subs	r3, #4
 800725e:	2a00      	cmp	r2, #0
 8007260:	d1cc      	bne.n	80071fc <quorem+0x9c>
 8007262:	3c01      	subs	r4, #1
 8007264:	e7c7      	b.n	80071f6 <quorem+0x96>
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	3b04      	subs	r3, #4
 800726a:	2a00      	cmp	r2, #0
 800726c:	d1f0      	bne.n	8007250 <quorem+0xf0>
 800726e:	3c01      	subs	r4, #1
 8007270:	e7eb      	b.n	800724a <quorem+0xea>
 8007272:	2000      	movs	r0, #0
 8007274:	e7ee      	b.n	8007254 <quorem+0xf4>
	...

08007278 <_dtoa_r>:
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	ed2d 8b02 	vpush	{d8}
 8007280:	ec57 6b10 	vmov	r6, r7, d0
 8007284:	b095      	sub	sp, #84	; 0x54
 8007286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800728c:	9105      	str	r1, [sp, #20]
 800728e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007292:	4604      	mov	r4, r0
 8007294:	9209      	str	r2, [sp, #36]	; 0x24
 8007296:	930f      	str	r3, [sp, #60]	; 0x3c
 8007298:	b975      	cbnz	r5, 80072b8 <_dtoa_r+0x40>
 800729a:	2010      	movs	r0, #16
 800729c:	f7ff f8c8 	bl	8006430 <malloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6260      	str	r0, [r4, #36]	; 0x24
 80072a4:	b920      	cbnz	r0, 80072b0 <_dtoa_r+0x38>
 80072a6:	4bb2      	ldr	r3, [pc, #712]	; (8007570 <_dtoa_r+0x2f8>)
 80072a8:	21ea      	movs	r1, #234	; 0xea
 80072aa:	48b2      	ldr	r0, [pc, #712]	; (8007574 <_dtoa_r+0x2fc>)
 80072ac:	f001 fd92 	bl	8008dd4 <__assert_func>
 80072b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072b4:	6005      	str	r5, [r0, #0]
 80072b6:	60c5      	str	r5, [r0, #12]
 80072b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ba:	6819      	ldr	r1, [r3, #0]
 80072bc:	b151      	cbz	r1, 80072d4 <_dtoa_r+0x5c>
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	604a      	str	r2, [r1, #4]
 80072c2:	2301      	movs	r3, #1
 80072c4:	4093      	lsls	r3, r2
 80072c6:	608b      	str	r3, [r1, #8]
 80072c8:	4620      	mov	r0, r4
 80072ca:	f001 f83f 	bl	800834c <_Bfree>
 80072ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072d0:	2200      	movs	r2, #0
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	1e3b      	subs	r3, r7, #0
 80072d6:	bfb9      	ittee	lt
 80072d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072dc:	9303      	strlt	r3, [sp, #12]
 80072de:	2300      	movge	r3, #0
 80072e0:	f8c8 3000 	strge.w	r3, [r8]
 80072e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80072e8:	4ba3      	ldr	r3, [pc, #652]	; (8007578 <_dtoa_r+0x300>)
 80072ea:	bfbc      	itt	lt
 80072ec:	2201      	movlt	r2, #1
 80072ee:	f8c8 2000 	strlt.w	r2, [r8]
 80072f2:	ea33 0309 	bics.w	r3, r3, r9
 80072f6:	d11b      	bne.n	8007330 <_dtoa_r+0xb8>
 80072f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007304:	4333      	orrs	r3, r6
 8007306:	f000 857a 	beq.w	8007dfe <_dtoa_r+0xb86>
 800730a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800730c:	b963      	cbnz	r3, 8007328 <_dtoa_r+0xb0>
 800730e:	4b9b      	ldr	r3, [pc, #620]	; (800757c <_dtoa_r+0x304>)
 8007310:	e024      	b.n	800735c <_dtoa_r+0xe4>
 8007312:	4b9b      	ldr	r3, [pc, #620]	; (8007580 <_dtoa_r+0x308>)
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	9800      	ldr	r0, [sp, #0]
 800731e:	b015      	add	sp, #84	; 0x54
 8007320:	ecbd 8b02 	vpop	{d8}
 8007324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007328:	4b94      	ldr	r3, [pc, #592]	; (800757c <_dtoa_r+0x304>)
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	3303      	adds	r3, #3
 800732e:	e7f3      	b.n	8007318 <_dtoa_r+0xa0>
 8007330:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007334:	2200      	movs	r2, #0
 8007336:	ec51 0b17 	vmov	r0, r1, d7
 800733a:	2300      	movs	r3, #0
 800733c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007340:	f7f9 fbea 	bl	8000b18 <__aeabi_dcmpeq>
 8007344:	4680      	mov	r8, r0
 8007346:	b158      	cbz	r0, 8007360 <_dtoa_r+0xe8>
 8007348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800734a:	2301      	movs	r3, #1
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8551 	beq.w	8007df8 <_dtoa_r+0xb80>
 8007356:	488b      	ldr	r0, [pc, #556]	; (8007584 <_dtoa_r+0x30c>)
 8007358:	6018      	str	r0, [r3, #0]
 800735a:	1e43      	subs	r3, r0, #1
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	e7dd      	b.n	800731c <_dtoa_r+0xa4>
 8007360:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007364:	aa12      	add	r2, sp, #72	; 0x48
 8007366:	a913      	add	r1, sp, #76	; 0x4c
 8007368:	4620      	mov	r0, r4
 800736a:	f001 fad1 	bl	8008910 <__d2b>
 800736e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007372:	4683      	mov	fp, r0
 8007374:	2d00      	cmp	r5, #0
 8007376:	d07c      	beq.n	8007472 <_dtoa_r+0x1fa>
 8007378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800737a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800737e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007382:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007386:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800738a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800738e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007392:	4b7d      	ldr	r3, [pc, #500]	; (8007588 <_dtoa_r+0x310>)
 8007394:	2200      	movs	r2, #0
 8007396:	4630      	mov	r0, r6
 8007398:	4639      	mov	r1, r7
 800739a:	f7f8 ff9d 	bl	80002d8 <__aeabi_dsub>
 800739e:	a36e      	add	r3, pc, #440	; (adr r3, 8007558 <_dtoa_r+0x2e0>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f9 f950 	bl	8000648 <__aeabi_dmul>
 80073a8:	a36d      	add	r3, pc, #436	; (adr r3, 8007560 <_dtoa_r+0x2e8>)
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f7f8 ff95 	bl	80002dc <__adddf3>
 80073b2:	4606      	mov	r6, r0
 80073b4:	4628      	mov	r0, r5
 80073b6:	460f      	mov	r7, r1
 80073b8:	f7f9 f8dc 	bl	8000574 <__aeabi_i2d>
 80073bc:	a36a      	add	r3, pc, #424	; (adr r3, 8007568 <_dtoa_r+0x2f0>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f9 f941 	bl	8000648 <__aeabi_dmul>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4630      	mov	r0, r6
 80073cc:	4639      	mov	r1, r7
 80073ce:	f7f8 ff85 	bl	80002dc <__adddf3>
 80073d2:	4606      	mov	r6, r0
 80073d4:	460f      	mov	r7, r1
 80073d6:	f7f9 fbe7 	bl	8000ba8 <__aeabi_d2iz>
 80073da:	2200      	movs	r2, #0
 80073dc:	4682      	mov	sl, r0
 80073de:	2300      	movs	r3, #0
 80073e0:	4630      	mov	r0, r6
 80073e2:	4639      	mov	r1, r7
 80073e4:	f7f9 fba2 	bl	8000b2c <__aeabi_dcmplt>
 80073e8:	b148      	cbz	r0, 80073fe <_dtoa_r+0x186>
 80073ea:	4650      	mov	r0, sl
 80073ec:	f7f9 f8c2 	bl	8000574 <__aeabi_i2d>
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	f7f9 fb90 	bl	8000b18 <__aeabi_dcmpeq>
 80073f8:	b908      	cbnz	r0, 80073fe <_dtoa_r+0x186>
 80073fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80073fe:	f1ba 0f16 	cmp.w	sl, #22
 8007402:	d854      	bhi.n	80074ae <_dtoa_r+0x236>
 8007404:	4b61      	ldr	r3, [pc, #388]	; (800758c <_dtoa_r+0x314>)
 8007406:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007412:	f7f9 fb8b 	bl	8000b2c <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	d04b      	beq.n	80074b2 <_dtoa_r+0x23a>
 800741a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800741e:	2300      	movs	r3, #0
 8007420:	930e      	str	r3, [sp, #56]	; 0x38
 8007422:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007424:	1b5d      	subs	r5, r3, r5
 8007426:	1e6b      	subs	r3, r5, #1
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	bf43      	ittte	mi
 800742c:	2300      	movmi	r3, #0
 800742e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007432:	9304      	strmi	r3, [sp, #16]
 8007434:	f04f 0800 	movpl.w	r8, #0
 8007438:	f1ba 0f00 	cmp.w	sl, #0
 800743c:	db3b      	blt.n	80074b6 <_dtoa_r+0x23e>
 800743e:	9b04      	ldr	r3, [sp, #16]
 8007440:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007444:	4453      	add	r3, sl
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	2300      	movs	r3, #0
 800744a:	9306      	str	r3, [sp, #24]
 800744c:	9b05      	ldr	r3, [sp, #20]
 800744e:	2b09      	cmp	r3, #9
 8007450:	d869      	bhi.n	8007526 <_dtoa_r+0x2ae>
 8007452:	2b05      	cmp	r3, #5
 8007454:	bfc4      	itt	gt
 8007456:	3b04      	subgt	r3, #4
 8007458:	9305      	strgt	r3, [sp, #20]
 800745a:	9b05      	ldr	r3, [sp, #20]
 800745c:	f1a3 0302 	sub.w	r3, r3, #2
 8007460:	bfcc      	ite	gt
 8007462:	2500      	movgt	r5, #0
 8007464:	2501      	movle	r5, #1
 8007466:	2b03      	cmp	r3, #3
 8007468:	d869      	bhi.n	800753e <_dtoa_r+0x2c6>
 800746a:	e8df f003 	tbb	[pc, r3]
 800746e:	4e2c      	.short	0x4e2c
 8007470:	5a4c      	.short	0x5a4c
 8007472:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007476:	441d      	add	r5, r3
 8007478:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800747c:	2b20      	cmp	r3, #32
 800747e:	bfc1      	itttt	gt
 8007480:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007484:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007488:	fa09 f303 	lslgt.w	r3, r9, r3
 800748c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007490:	bfda      	itte	le
 8007492:	f1c3 0320 	rsble	r3, r3, #32
 8007496:	fa06 f003 	lslle.w	r0, r6, r3
 800749a:	4318      	orrgt	r0, r3
 800749c:	f7f9 f85a 	bl	8000554 <__aeabi_ui2d>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4606      	mov	r6, r0
 80074a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80074a8:	3d01      	subs	r5, #1
 80074aa:	9310      	str	r3, [sp, #64]	; 0x40
 80074ac:	e771      	b.n	8007392 <_dtoa_r+0x11a>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e7b6      	b.n	8007420 <_dtoa_r+0x1a8>
 80074b2:	900e      	str	r0, [sp, #56]	; 0x38
 80074b4:	e7b5      	b.n	8007422 <_dtoa_r+0x1aa>
 80074b6:	f1ca 0300 	rsb	r3, sl, #0
 80074ba:	9306      	str	r3, [sp, #24]
 80074bc:	2300      	movs	r3, #0
 80074be:	eba8 080a 	sub.w	r8, r8, sl
 80074c2:	930d      	str	r3, [sp, #52]	; 0x34
 80074c4:	e7c2      	b.n	800744c <_dtoa_r+0x1d4>
 80074c6:	2300      	movs	r3, #0
 80074c8:	9308      	str	r3, [sp, #32]
 80074ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dc39      	bgt.n	8007544 <_dtoa_r+0x2cc>
 80074d0:	f04f 0901 	mov.w	r9, #1
 80074d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80074d8:	464b      	mov	r3, r9
 80074da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80074de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80074e0:	2200      	movs	r2, #0
 80074e2:	6042      	str	r2, [r0, #4]
 80074e4:	2204      	movs	r2, #4
 80074e6:	f102 0614 	add.w	r6, r2, #20
 80074ea:	429e      	cmp	r6, r3
 80074ec:	6841      	ldr	r1, [r0, #4]
 80074ee:	d92f      	bls.n	8007550 <_dtoa_r+0x2d8>
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 feeb 	bl	80082cc <_Balloc>
 80074f6:	9000      	str	r0, [sp, #0]
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d14b      	bne.n	8007594 <_dtoa_r+0x31c>
 80074fc:	4b24      	ldr	r3, [pc, #144]	; (8007590 <_dtoa_r+0x318>)
 80074fe:	4602      	mov	r2, r0
 8007500:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007504:	e6d1      	b.n	80072aa <_dtoa_r+0x32>
 8007506:	2301      	movs	r3, #1
 8007508:	e7de      	b.n	80074c8 <_dtoa_r+0x250>
 800750a:	2300      	movs	r3, #0
 800750c:	9308      	str	r3, [sp, #32]
 800750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007510:	eb0a 0903 	add.w	r9, sl, r3
 8007514:	f109 0301 	add.w	r3, r9, #1
 8007518:	2b01      	cmp	r3, #1
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	bfb8      	it	lt
 800751e:	2301      	movlt	r3, #1
 8007520:	e7dd      	b.n	80074de <_dtoa_r+0x266>
 8007522:	2301      	movs	r3, #1
 8007524:	e7f2      	b.n	800750c <_dtoa_r+0x294>
 8007526:	2501      	movs	r5, #1
 8007528:	2300      	movs	r3, #0
 800752a:	9305      	str	r3, [sp, #20]
 800752c:	9508      	str	r5, [sp, #32]
 800752e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007532:	2200      	movs	r2, #0
 8007534:	f8cd 9004 	str.w	r9, [sp, #4]
 8007538:	2312      	movs	r3, #18
 800753a:	9209      	str	r2, [sp, #36]	; 0x24
 800753c:	e7cf      	b.n	80074de <_dtoa_r+0x266>
 800753e:	2301      	movs	r3, #1
 8007540:	9308      	str	r3, [sp, #32]
 8007542:	e7f4      	b.n	800752e <_dtoa_r+0x2b6>
 8007544:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007548:	f8cd 9004 	str.w	r9, [sp, #4]
 800754c:	464b      	mov	r3, r9
 800754e:	e7c6      	b.n	80074de <_dtoa_r+0x266>
 8007550:	3101      	adds	r1, #1
 8007552:	6041      	str	r1, [r0, #4]
 8007554:	0052      	lsls	r2, r2, #1
 8007556:	e7c6      	b.n	80074e6 <_dtoa_r+0x26e>
 8007558:	636f4361 	.word	0x636f4361
 800755c:	3fd287a7 	.word	0x3fd287a7
 8007560:	8b60c8b3 	.word	0x8b60c8b3
 8007564:	3fc68a28 	.word	0x3fc68a28
 8007568:	509f79fb 	.word	0x509f79fb
 800756c:	3fd34413 	.word	0x3fd34413
 8007570:	080091bd 	.word	0x080091bd
 8007574:	080091d4 	.word	0x080091d4
 8007578:	7ff00000 	.word	0x7ff00000
 800757c:	080091b9 	.word	0x080091b9
 8007580:	080091b0 	.word	0x080091b0
 8007584:	0800918d 	.word	0x0800918d
 8007588:	3ff80000 	.word	0x3ff80000
 800758c:	08009330 	.word	0x08009330
 8007590:	08009233 	.word	0x08009233
 8007594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007596:	9a00      	ldr	r2, [sp, #0]
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	9b01      	ldr	r3, [sp, #4]
 800759c:	2b0e      	cmp	r3, #14
 800759e:	f200 80ad 	bhi.w	80076fc <_dtoa_r+0x484>
 80075a2:	2d00      	cmp	r5, #0
 80075a4:	f000 80aa 	beq.w	80076fc <_dtoa_r+0x484>
 80075a8:	f1ba 0f00 	cmp.w	sl, #0
 80075ac:	dd36      	ble.n	800761c <_dtoa_r+0x3a4>
 80075ae:	4ac3      	ldr	r2, [pc, #780]	; (80078bc <_dtoa_r+0x644>)
 80075b0:	f00a 030f 	and.w	r3, sl, #15
 80075b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075b8:	ed93 7b00 	vldr	d7, [r3]
 80075bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80075c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80075c4:	eeb0 8a47 	vmov.f32	s16, s14
 80075c8:	eef0 8a67 	vmov.f32	s17, s15
 80075cc:	d016      	beq.n	80075fc <_dtoa_r+0x384>
 80075ce:	4bbc      	ldr	r3, [pc, #752]	; (80078c0 <_dtoa_r+0x648>)
 80075d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075d8:	f7f9 f960 	bl	800089c <__aeabi_ddiv>
 80075dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e0:	f007 070f 	and.w	r7, r7, #15
 80075e4:	2503      	movs	r5, #3
 80075e6:	4eb6      	ldr	r6, [pc, #728]	; (80078c0 <_dtoa_r+0x648>)
 80075e8:	b957      	cbnz	r7, 8007600 <_dtoa_r+0x388>
 80075ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ee:	ec53 2b18 	vmov	r2, r3, d8
 80075f2:	f7f9 f953 	bl	800089c <__aeabi_ddiv>
 80075f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075fa:	e029      	b.n	8007650 <_dtoa_r+0x3d8>
 80075fc:	2502      	movs	r5, #2
 80075fe:	e7f2      	b.n	80075e6 <_dtoa_r+0x36e>
 8007600:	07f9      	lsls	r1, r7, #31
 8007602:	d508      	bpl.n	8007616 <_dtoa_r+0x39e>
 8007604:	ec51 0b18 	vmov	r0, r1, d8
 8007608:	e9d6 2300 	ldrd	r2, r3, [r6]
 800760c:	f7f9 f81c 	bl	8000648 <__aeabi_dmul>
 8007610:	ec41 0b18 	vmov	d8, r0, r1
 8007614:	3501      	adds	r5, #1
 8007616:	107f      	asrs	r7, r7, #1
 8007618:	3608      	adds	r6, #8
 800761a:	e7e5      	b.n	80075e8 <_dtoa_r+0x370>
 800761c:	f000 80a6 	beq.w	800776c <_dtoa_r+0x4f4>
 8007620:	f1ca 0600 	rsb	r6, sl, #0
 8007624:	4ba5      	ldr	r3, [pc, #660]	; (80078bc <_dtoa_r+0x644>)
 8007626:	4fa6      	ldr	r7, [pc, #664]	; (80078c0 <_dtoa_r+0x648>)
 8007628:	f006 020f 	and.w	r2, r6, #15
 800762c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007638:	f7f9 f806 	bl	8000648 <__aeabi_dmul>
 800763c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007640:	1136      	asrs	r6, r6, #4
 8007642:	2300      	movs	r3, #0
 8007644:	2502      	movs	r5, #2
 8007646:	2e00      	cmp	r6, #0
 8007648:	f040 8085 	bne.w	8007756 <_dtoa_r+0x4de>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1d2      	bne.n	80075f6 <_dtoa_r+0x37e>
 8007650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 808c 	beq.w	8007770 <_dtoa_r+0x4f8>
 8007658:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800765c:	4b99      	ldr	r3, [pc, #612]	; (80078c4 <_dtoa_r+0x64c>)
 800765e:	2200      	movs	r2, #0
 8007660:	4630      	mov	r0, r6
 8007662:	4639      	mov	r1, r7
 8007664:	f7f9 fa62 	bl	8000b2c <__aeabi_dcmplt>
 8007668:	2800      	cmp	r0, #0
 800766a:	f000 8081 	beq.w	8007770 <_dtoa_r+0x4f8>
 800766e:	9b01      	ldr	r3, [sp, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d07d      	beq.n	8007770 <_dtoa_r+0x4f8>
 8007674:	f1b9 0f00 	cmp.w	r9, #0
 8007678:	dd3c      	ble.n	80076f4 <_dtoa_r+0x47c>
 800767a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	2200      	movs	r2, #0
 8007682:	4b91      	ldr	r3, [pc, #580]	; (80078c8 <_dtoa_r+0x650>)
 8007684:	4630      	mov	r0, r6
 8007686:	4639      	mov	r1, r7
 8007688:	f7f8 ffde 	bl	8000648 <__aeabi_dmul>
 800768c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007690:	3501      	adds	r5, #1
 8007692:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007696:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800769a:	4628      	mov	r0, r5
 800769c:	f7f8 ff6a 	bl	8000574 <__aeabi_i2d>
 80076a0:	4632      	mov	r2, r6
 80076a2:	463b      	mov	r3, r7
 80076a4:	f7f8 ffd0 	bl	8000648 <__aeabi_dmul>
 80076a8:	4b88      	ldr	r3, [pc, #544]	; (80078cc <_dtoa_r+0x654>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	f7f8 fe16 	bl	80002dc <__adddf3>
 80076b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80076b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076b8:	9303      	str	r3, [sp, #12]
 80076ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d15c      	bne.n	800777a <_dtoa_r+0x502>
 80076c0:	4b83      	ldr	r3, [pc, #524]	; (80078d0 <_dtoa_r+0x658>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	4630      	mov	r0, r6
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f8 fe06 	bl	80002d8 <__aeabi_dsub>
 80076cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076d0:	4606      	mov	r6, r0
 80076d2:	460f      	mov	r7, r1
 80076d4:	f7f9 fa48 	bl	8000b68 <__aeabi_dcmpgt>
 80076d8:	2800      	cmp	r0, #0
 80076da:	f040 8296 	bne.w	8007c0a <_dtoa_r+0x992>
 80076de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80076e2:	4630      	mov	r0, r6
 80076e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076e8:	4639      	mov	r1, r7
 80076ea:	f7f9 fa1f 	bl	8000b2c <__aeabi_dcmplt>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f040 8288 	bne.w	8007c04 <_dtoa_r+0x98c>
 80076f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f2c0 8158 	blt.w	80079b4 <_dtoa_r+0x73c>
 8007704:	f1ba 0f0e 	cmp.w	sl, #14
 8007708:	f300 8154 	bgt.w	80079b4 <_dtoa_r+0x73c>
 800770c:	4b6b      	ldr	r3, [pc, #428]	; (80078bc <_dtoa_r+0x644>)
 800770e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007712:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	f280 80e3 	bge.w	80078e4 <_dtoa_r+0x66c>
 800771e:	9b01      	ldr	r3, [sp, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f300 80df 	bgt.w	80078e4 <_dtoa_r+0x66c>
 8007726:	f040 826d 	bne.w	8007c04 <_dtoa_r+0x98c>
 800772a:	4b69      	ldr	r3, [pc, #420]	; (80078d0 <_dtoa_r+0x658>)
 800772c:	2200      	movs	r2, #0
 800772e:	4640      	mov	r0, r8
 8007730:	4649      	mov	r1, r9
 8007732:	f7f8 ff89 	bl	8000648 <__aeabi_dmul>
 8007736:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800773a:	f7f9 fa0b 	bl	8000b54 <__aeabi_dcmpge>
 800773e:	9e01      	ldr	r6, [sp, #4]
 8007740:	4637      	mov	r7, r6
 8007742:	2800      	cmp	r0, #0
 8007744:	f040 8243 	bne.w	8007bce <_dtoa_r+0x956>
 8007748:	9d00      	ldr	r5, [sp, #0]
 800774a:	2331      	movs	r3, #49	; 0x31
 800774c:	f805 3b01 	strb.w	r3, [r5], #1
 8007750:	f10a 0a01 	add.w	sl, sl, #1
 8007754:	e23f      	b.n	8007bd6 <_dtoa_r+0x95e>
 8007756:	07f2      	lsls	r2, r6, #31
 8007758:	d505      	bpl.n	8007766 <_dtoa_r+0x4ee>
 800775a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800775e:	f7f8 ff73 	bl	8000648 <__aeabi_dmul>
 8007762:	3501      	adds	r5, #1
 8007764:	2301      	movs	r3, #1
 8007766:	1076      	asrs	r6, r6, #1
 8007768:	3708      	adds	r7, #8
 800776a:	e76c      	b.n	8007646 <_dtoa_r+0x3ce>
 800776c:	2502      	movs	r5, #2
 800776e:	e76f      	b.n	8007650 <_dtoa_r+0x3d8>
 8007770:	9b01      	ldr	r3, [sp, #4]
 8007772:	f8cd a01c 	str.w	sl, [sp, #28]
 8007776:	930c      	str	r3, [sp, #48]	; 0x30
 8007778:	e78d      	b.n	8007696 <_dtoa_r+0x41e>
 800777a:	9900      	ldr	r1, [sp, #0]
 800777c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800777e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007780:	4b4e      	ldr	r3, [pc, #312]	; (80078bc <_dtoa_r+0x644>)
 8007782:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007786:	4401      	add	r1, r0
 8007788:	9102      	str	r1, [sp, #8]
 800778a:	9908      	ldr	r1, [sp, #32]
 800778c:	eeb0 8a47 	vmov.f32	s16, s14
 8007790:	eef0 8a67 	vmov.f32	s17, s15
 8007794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007798:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800779c:	2900      	cmp	r1, #0
 800779e:	d045      	beq.n	800782c <_dtoa_r+0x5b4>
 80077a0:	494c      	ldr	r1, [pc, #304]	; (80078d4 <_dtoa_r+0x65c>)
 80077a2:	2000      	movs	r0, #0
 80077a4:	f7f9 f87a 	bl	800089c <__aeabi_ddiv>
 80077a8:	ec53 2b18 	vmov	r2, r3, d8
 80077ac:	f7f8 fd94 	bl	80002d8 <__aeabi_dsub>
 80077b0:	9d00      	ldr	r5, [sp, #0]
 80077b2:	ec41 0b18 	vmov	d8, r0, r1
 80077b6:	4639      	mov	r1, r7
 80077b8:	4630      	mov	r0, r6
 80077ba:	f7f9 f9f5 	bl	8000ba8 <__aeabi_d2iz>
 80077be:	900c      	str	r0, [sp, #48]	; 0x30
 80077c0:	f7f8 fed8 	bl	8000574 <__aeabi_i2d>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f8 fd84 	bl	80002d8 <__aeabi_dsub>
 80077d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d2:	3330      	adds	r3, #48	; 0x30
 80077d4:	f805 3b01 	strb.w	r3, [r5], #1
 80077d8:	ec53 2b18 	vmov	r2, r3, d8
 80077dc:	4606      	mov	r6, r0
 80077de:	460f      	mov	r7, r1
 80077e0:	f7f9 f9a4 	bl	8000b2c <__aeabi_dcmplt>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d165      	bne.n	80078b4 <_dtoa_r+0x63c>
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	4935      	ldr	r1, [pc, #212]	; (80078c4 <_dtoa_r+0x64c>)
 80077ee:	2000      	movs	r0, #0
 80077f0:	f7f8 fd72 	bl	80002d8 <__aeabi_dsub>
 80077f4:	ec53 2b18 	vmov	r2, r3, d8
 80077f8:	f7f9 f998 	bl	8000b2c <__aeabi_dcmplt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f040 80b9 	bne.w	8007974 <_dtoa_r+0x6fc>
 8007802:	9b02      	ldr	r3, [sp, #8]
 8007804:	429d      	cmp	r5, r3
 8007806:	f43f af75 	beq.w	80076f4 <_dtoa_r+0x47c>
 800780a:	4b2f      	ldr	r3, [pc, #188]	; (80078c8 <_dtoa_r+0x650>)
 800780c:	ec51 0b18 	vmov	r0, r1, d8
 8007810:	2200      	movs	r2, #0
 8007812:	f7f8 ff19 	bl	8000648 <__aeabi_dmul>
 8007816:	4b2c      	ldr	r3, [pc, #176]	; (80078c8 <_dtoa_r+0x650>)
 8007818:	ec41 0b18 	vmov	d8, r0, r1
 800781c:	2200      	movs	r2, #0
 800781e:	4630      	mov	r0, r6
 8007820:	4639      	mov	r1, r7
 8007822:	f7f8 ff11 	bl	8000648 <__aeabi_dmul>
 8007826:	4606      	mov	r6, r0
 8007828:	460f      	mov	r7, r1
 800782a:	e7c4      	b.n	80077b6 <_dtoa_r+0x53e>
 800782c:	ec51 0b17 	vmov	r0, r1, d7
 8007830:	f7f8 ff0a 	bl	8000648 <__aeabi_dmul>
 8007834:	9b02      	ldr	r3, [sp, #8]
 8007836:	9d00      	ldr	r5, [sp, #0]
 8007838:	930c      	str	r3, [sp, #48]	; 0x30
 800783a:	ec41 0b18 	vmov	d8, r0, r1
 800783e:	4639      	mov	r1, r7
 8007840:	4630      	mov	r0, r6
 8007842:	f7f9 f9b1 	bl	8000ba8 <__aeabi_d2iz>
 8007846:	9011      	str	r0, [sp, #68]	; 0x44
 8007848:	f7f8 fe94 	bl	8000574 <__aeabi_i2d>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	f7f8 fd40 	bl	80002d8 <__aeabi_dsub>
 8007858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800785a:	3330      	adds	r3, #48	; 0x30
 800785c:	f805 3b01 	strb.w	r3, [r5], #1
 8007860:	9b02      	ldr	r3, [sp, #8]
 8007862:	429d      	cmp	r5, r3
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	d134      	bne.n	80078d8 <_dtoa_r+0x660>
 800786e:	4b19      	ldr	r3, [pc, #100]	; (80078d4 <_dtoa_r+0x65c>)
 8007870:	ec51 0b18 	vmov	r0, r1, d8
 8007874:	f7f8 fd32 	bl	80002dc <__adddf3>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4630      	mov	r0, r6
 800787e:	4639      	mov	r1, r7
 8007880:	f7f9 f972 	bl	8000b68 <__aeabi_dcmpgt>
 8007884:	2800      	cmp	r0, #0
 8007886:	d175      	bne.n	8007974 <_dtoa_r+0x6fc>
 8007888:	ec53 2b18 	vmov	r2, r3, d8
 800788c:	4911      	ldr	r1, [pc, #68]	; (80078d4 <_dtoa_r+0x65c>)
 800788e:	2000      	movs	r0, #0
 8007890:	f7f8 fd22 	bl	80002d8 <__aeabi_dsub>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f9 f946 	bl	8000b2c <__aeabi_dcmplt>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	f43f af27 	beq.w	80076f4 <_dtoa_r+0x47c>
 80078a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078a8:	1e6b      	subs	r3, r5, #1
 80078aa:	930c      	str	r3, [sp, #48]	; 0x30
 80078ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078b0:	2b30      	cmp	r3, #48	; 0x30
 80078b2:	d0f8      	beq.n	80078a6 <_dtoa_r+0x62e>
 80078b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80078b8:	e04a      	b.n	8007950 <_dtoa_r+0x6d8>
 80078ba:	bf00      	nop
 80078bc:	08009330 	.word	0x08009330
 80078c0:	08009308 	.word	0x08009308
 80078c4:	3ff00000 	.word	0x3ff00000
 80078c8:	40240000 	.word	0x40240000
 80078cc:	401c0000 	.word	0x401c0000
 80078d0:	40140000 	.word	0x40140000
 80078d4:	3fe00000 	.word	0x3fe00000
 80078d8:	4baf      	ldr	r3, [pc, #700]	; (8007b98 <_dtoa_r+0x920>)
 80078da:	f7f8 feb5 	bl	8000648 <__aeabi_dmul>
 80078de:	4606      	mov	r6, r0
 80078e0:	460f      	mov	r7, r1
 80078e2:	e7ac      	b.n	800783e <_dtoa_r+0x5c6>
 80078e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078e8:	9d00      	ldr	r5, [sp, #0]
 80078ea:	4642      	mov	r2, r8
 80078ec:	464b      	mov	r3, r9
 80078ee:	4630      	mov	r0, r6
 80078f0:	4639      	mov	r1, r7
 80078f2:	f7f8 ffd3 	bl	800089c <__aeabi_ddiv>
 80078f6:	f7f9 f957 	bl	8000ba8 <__aeabi_d2iz>
 80078fa:	9002      	str	r0, [sp, #8]
 80078fc:	f7f8 fe3a 	bl	8000574 <__aeabi_i2d>
 8007900:	4642      	mov	r2, r8
 8007902:	464b      	mov	r3, r9
 8007904:	f7f8 fea0 	bl	8000648 <__aeabi_dmul>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4630      	mov	r0, r6
 800790e:	4639      	mov	r1, r7
 8007910:	f7f8 fce2 	bl	80002d8 <__aeabi_dsub>
 8007914:	9e02      	ldr	r6, [sp, #8]
 8007916:	9f01      	ldr	r7, [sp, #4]
 8007918:	3630      	adds	r6, #48	; 0x30
 800791a:	f805 6b01 	strb.w	r6, [r5], #1
 800791e:	9e00      	ldr	r6, [sp, #0]
 8007920:	1bae      	subs	r6, r5, r6
 8007922:	42b7      	cmp	r7, r6
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	d137      	bne.n	800799a <_dtoa_r+0x722>
 800792a:	f7f8 fcd7 	bl	80002dc <__adddf3>
 800792e:	4642      	mov	r2, r8
 8007930:	464b      	mov	r3, r9
 8007932:	4606      	mov	r6, r0
 8007934:	460f      	mov	r7, r1
 8007936:	f7f9 f917 	bl	8000b68 <__aeabi_dcmpgt>
 800793a:	b9c8      	cbnz	r0, 8007970 <_dtoa_r+0x6f8>
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	4630      	mov	r0, r6
 8007942:	4639      	mov	r1, r7
 8007944:	f7f9 f8e8 	bl	8000b18 <__aeabi_dcmpeq>
 8007948:	b110      	cbz	r0, 8007950 <_dtoa_r+0x6d8>
 800794a:	9b02      	ldr	r3, [sp, #8]
 800794c:	07d9      	lsls	r1, r3, #31
 800794e:	d40f      	bmi.n	8007970 <_dtoa_r+0x6f8>
 8007950:	4620      	mov	r0, r4
 8007952:	4659      	mov	r1, fp
 8007954:	f000 fcfa 	bl	800834c <_Bfree>
 8007958:	2300      	movs	r3, #0
 800795a:	702b      	strb	r3, [r5, #0]
 800795c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800795e:	f10a 0001 	add.w	r0, sl, #1
 8007962:	6018      	str	r0, [r3, #0]
 8007964:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007966:	2b00      	cmp	r3, #0
 8007968:	f43f acd8 	beq.w	800731c <_dtoa_r+0xa4>
 800796c:	601d      	str	r5, [r3, #0]
 800796e:	e4d5      	b.n	800731c <_dtoa_r+0xa4>
 8007970:	f8cd a01c 	str.w	sl, [sp, #28]
 8007974:	462b      	mov	r3, r5
 8007976:	461d      	mov	r5, r3
 8007978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800797c:	2a39      	cmp	r2, #57	; 0x39
 800797e:	d108      	bne.n	8007992 <_dtoa_r+0x71a>
 8007980:	9a00      	ldr	r2, [sp, #0]
 8007982:	429a      	cmp	r2, r3
 8007984:	d1f7      	bne.n	8007976 <_dtoa_r+0x6fe>
 8007986:	9a07      	ldr	r2, [sp, #28]
 8007988:	9900      	ldr	r1, [sp, #0]
 800798a:	3201      	adds	r2, #1
 800798c:	9207      	str	r2, [sp, #28]
 800798e:	2230      	movs	r2, #48	; 0x30
 8007990:	700a      	strb	r2, [r1, #0]
 8007992:	781a      	ldrb	r2, [r3, #0]
 8007994:	3201      	adds	r2, #1
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	e78c      	b.n	80078b4 <_dtoa_r+0x63c>
 800799a:	4b7f      	ldr	r3, [pc, #508]	; (8007b98 <_dtoa_r+0x920>)
 800799c:	2200      	movs	r2, #0
 800799e:	f7f8 fe53 	bl	8000648 <__aeabi_dmul>
 80079a2:	2200      	movs	r2, #0
 80079a4:	2300      	movs	r3, #0
 80079a6:	4606      	mov	r6, r0
 80079a8:	460f      	mov	r7, r1
 80079aa:	f7f9 f8b5 	bl	8000b18 <__aeabi_dcmpeq>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d09b      	beq.n	80078ea <_dtoa_r+0x672>
 80079b2:	e7cd      	b.n	8007950 <_dtoa_r+0x6d8>
 80079b4:	9a08      	ldr	r2, [sp, #32]
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	f000 80c4 	beq.w	8007b44 <_dtoa_r+0x8cc>
 80079bc:	9a05      	ldr	r2, [sp, #20]
 80079be:	2a01      	cmp	r2, #1
 80079c0:	f300 80a8 	bgt.w	8007b14 <_dtoa_r+0x89c>
 80079c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	f000 80a0 	beq.w	8007b0c <_dtoa_r+0x894>
 80079cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079d0:	9e06      	ldr	r6, [sp, #24]
 80079d2:	4645      	mov	r5, r8
 80079d4:	9a04      	ldr	r2, [sp, #16]
 80079d6:	2101      	movs	r1, #1
 80079d8:	441a      	add	r2, r3
 80079da:	4620      	mov	r0, r4
 80079dc:	4498      	add	r8, r3
 80079de:	9204      	str	r2, [sp, #16]
 80079e0:	f000 fd70 	bl	80084c4 <__i2b>
 80079e4:	4607      	mov	r7, r0
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	dd0b      	ble.n	8007a02 <_dtoa_r+0x78a>
 80079ea:	9b04      	ldr	r3, [sp, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dd08      	ble.n	8007a02 <_dtoa_r+0x78a>
 80079f0:	42ab      	cmp	r3, r5
 80079f2:	9a04      	ldr	r2, [sp, #16]
 80079f4:	bfa8      	it	ge
 80079f6:	462b      	movge	r3, r5
 80079f8:	eba8 0803 	sub.w	r8, r8, r3
 80079fc:	1aed      	subs	r5, r5, r3
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	9b06      	ldr	r3, [sp, #24]
 8007a04:	b1fb      	cbz	r3, 8007a46 <_dtoa_r+0x7ce>
 8007a06:	9b08      	ldr	r3, [sp, #32]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 809f 	beq.w	8007b4c <_dtoa_r+0x8d4>
 8007a0e:	2e00      	cmp	r6, #0
 8007a10:	dd11      	ble.n	8007a36 <_dtoa_r+0x7be>
 8007a12:	4639      	mov	r1, r7
 8007a14:	4632      	mov	r2, r6
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fe10 	bl	800863c <__pow5mult>
 8007a1c:	465a      	mov	r2, fp
 8007a1e:	4601      	mov	r1, r0
 8007a20:	4607      	mov	r7, r0
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 fd64 	bl	80084f0 <__multiply>
 8007a28:	4659      	mov	r1, fp
 8007a2a:	9007      	str	r0, [sp, #28]
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fc8d 	bl	800834c <_Bfree>
 8007a32:	9b07      	ldr	r3, [sp, #28]
 8007a34:	469b      	mov	fp, r3
 8007a36:	9b06      	ldr	r3, [sp, #24]
 8007a38:	1b9a      	subs	r2, r3, r6
 8007a3a:	d004      	beq.n	8007a46 <_dtoa_r+0x7ce>
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fdfc 	bl	800863c <__pow5mult>
 8007a44:	4683      	mov	fp, r0
 8007a46:	2101      	movs	r1, #1
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fd3b 	bl	80084c4 <__i2b>
 8007a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	4606      	mov	r6, r0
 8007a54:	dd7c      	ble.n	8007b50 <_dtoa_r+0x8d8>
 8007a56:	461a      	mov	r2, r3
 8007a58:	4601      	mov	r1, r0
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fdee 	bl	800863c <__pow5mult>
 8007a60:	9b05      	ldr	r3, [sp, #20]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	4606      	mov	r6, r0
 8007a66:	dd76      	ble.n	8007b56 <_dtoa_r+0x8de>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9306      	str	r3, [sp, #24]
 8007a6c:	6933      	ldr	r3, [r6, #16]
 8007a6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a72:	6918      	ldr	r0, [r3, #16]
 8007a74:	f000 fcd6 	bl	8008424 <__hi0bits>
 8007a78:	f1c0 0020 	rsb	r0, r0, #32
 8007a7c:	9b04      	ldr	r3, [sp, #16]
 8007a7e:	4418      	add	r0, r3
 8007a80:	f010 001f 	ands.w	r0, r0, #31
 8007a84:	f000 8086 	beq.w	8007b94 <_dtoa_r+0x91c>
 8007a88:	f1c0 0320 	rsb	r3, r0, #32
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	dd7f      	ble.n	8007b90 <_dtoa_r+0x918>
 8007a90:	f1c0 001c 	rsb	r0, r0, #28
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	4403      	add	r3, r0
 8007a98:	4480      	add	r8, r0
 8007a9a:	4405      	add	r5, r0
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	f1b8 0f00 	cmp.w	r8, #0
 8007aa2:	dd05      	ble.n	8007ab0 <_dtoa_r+0x838>
 8007aa4:	4659      	mov	r1, fp
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 fe21 	bl	80086f0 <__lshift>
 8007aae:	4683      	mov	fp, r0
 8007ab0:	9b04      	ldr	r3, [sp, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dd05      	ble.n	8007ac2 <_dtoa_r+0x84a>
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fe18 	bl	80086f0 <__lshift>
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d069      	beq.n	8007b9c <_dtoa_r+0x924>
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 fe7c 	bl	80087c8 <__mcmp>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	da63      	bge.n	8007b9c <_dtoa_r+0x924>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4659      	mov	r1, fp
 8007ad8:	220a      	movs	r2, #10
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 fc58 	bl	8008390 <__multadd>
 8007ae0:	9b08      	ldr	r3, [sp, #32]
 8007ae2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007ae6:	4683      	mov	fp, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 818f 	beq.w	8007e0c <_dtoa_r+0xb94>
 8007aee:	4639      	mov	r1, r7
 8007af0:	2300      	movs	r3, #0
 8007af2:	220a      	movs	r2, #10
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 fc4b 	bl	8008390 <__multadd>
 8007afa:	f1b9 0f00 	cmp.w	r9, #0
 8007afe:	4607      	mov	r7, r0
 8007b00:	f300 808e 	bgt.w	8007c20 <_dtoa_r+0x9a8>
 8007b04:	9b05      	ldr	r3, [sp, #20]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	dc50      	bgt.n	8007bac <_dtoa_r+0x934>
 8007b0a:	e089      	b.n	8007c20 <_dtoa_r+0x9a8>
 8007b0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b12:	e75d      	b.n	80079d0 <_dtoa_r+0x758>
 8007b14:	9b01      	ldr	r3, [sp, #4]
 8007b16:	1e5e      	subs	r6, r3, #1
 8007b18:	9b06      	ldr	r3, [sp, #24]
 8007b1a:	42b3      	cmp	r3, r6
 8007b1c:	bfbf      	itttt	lt
 8007b1e:	9b06      	ldrlt	r3, [sp, #24]
 8007b20:	9606      	strlt	r6, [sp, #24]
 8007b22:	1af2      	sublt	r2, r6, r3
 8007b24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007b26:	bfb6      	itet	lt
 8007b28:	189b      	addlt	r3, r3, r2
 8007b2a:	1b9e      	subge	r6, r3, r6
 8007b2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007b2e:	9b01      	ldr	r3, [sp, #4]
 8007b30:	bfb8      	it	lt
 8007b32:	2600      	movlt	r6, #0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bfb5      	itete	lt
 8007b38:	eba8 0503 	sublt.w	r5, r8, r3
 8007b3c:	9b01      	ldrge	r3, [sp, #4]
 8007b3e:	2300      	movlt	r3, #0
 8007b40:	4645      	movge	r5, r8
 8007b42:	e747      	b.n	80079d4 <_dtoa_r+0x75c>
 8007b44:	9e06      	ldr	r6, [sp, #24]
 8007b46:	9f08      	ldr	r7, [sp, #32]
 8007b48:	4645      	mov	r5, r8
 8007b4a:	e74c      	b.n	80079e6 <_dtoa_r+0x76e>
 8007b4c:	9a06      	ldr	r2, [sp, #24]
 8007b4e:	e775      	b.n	8007a3c <_dtoa_r+0x7c4>
 8007b50:	9b05      	ldr	r3, [sp, #20]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	dc18      	bgt.n	8007b88 <_dtoa_r+0x910>
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	b9b3      	cbnz	r3, 8007b88 <_dtoa_r+0x910>
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b60:	b9a3      	cbnz	r3, 8007b8c <_dtoa_r+0x914>
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b68:	0d1b      	lsrs	r3, r3, #20
 8007b6a:	051b      	lsls	r3, r3, #20
 8007b6c:	b12b      	cbz	r3, 8007b7a <_dtoa_r+0x902>
 8007b6e:	9b04      	ldr	r3, [sp, #16]
 8007b70:	3301      	adds	r3, #1
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	f108 0801 	add.w	r8, r8, #1
 8007b78:	2301      	movs	r3, #1
 8007b7a:	9306      	str	r3, [sp, #24]
 8007b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f47f af74 	bne.w	8007a6c <_dtoa_r+0x7f4>
 8007b84:	2001      	movs	r0, #1
 8007b86:	e779      	b.n	8007a7c <_dtoa_r+0x804>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e7f6      	b.n	8007b7a <_dtoa_r+0x902>
 8007b8c:	9b02      	ldr	r3, [sp, #8]
 8007b8e:	e7f4      	b.n	8007b7a <_dtoa_r+0x902>
 8007b90:	d085      	beq.n	8007a9e <_dtoa_r+0x826>
 8007b92:	4618      	mov	r0, r3
 8007b94:	301c      	adds	r0, #28
 8007b96:	e77d      	b.n	8007a94 <_dtoa_r+0x81c>
 8007b98:	40240000 	.word	0x40240000
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dc38      	bgt.n	8007c14 <_dtoa_r+0x99c>
 8007ba2:	9b05      	ldr	r3, [sp, #20]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	dd35      	ble.n	8007c14 <_dtoa_r+0x99c>
 8007ba8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007bac:	f1b9 0f00 	cmp.w	r9, #0
 8007bb0:	d10d      	bne.n	8007bce <_dtoa_r+0x956>
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	464b      	mov	r3, r9
 8007bb6:	2205      	movs	r2, #5
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fbe9 	bl	8008390 <__multadd>
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	4658      	mov	r0, fp
 8007bc4:	f000 fe00 	bl	80087c8 <__mcmp>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	f73f adbd 	bgt.w	8007748 <_dtoa_r+0x4d0>
 8007bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd0:	9d00      	ldr	r5, [sp, #0]
 8007bd2:	ea6f 0a03 	mvn.w	sl, r3
 8007bd6:	f04f 0800 	mov.w	r8, #0
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 fbb5 	bl	800834c <_Bfree>
 8007be2:	2f00      	cmp	r7, #0
 8007be4:	f43f aeb4 	beq.w	8007950 <_dtoa_r+0x6d8>
 8007be8:	f1b8 0f00 	cmp.w	r8, #0
 8007bec:	d005      	beq.n	8007bfa <_dtoa_r+0x982>
 8007bee:	45b8      	cmp	r8, r7
 8007bf0:	d003      	beq.n	8007bfa <_dtoa_r+0x982>
 8007bf2:	4641      	mov	r1, r8
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f000 fba9 	bl	800834c <_Bfree>
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 fba5 	bl	800834c <_Bfree>
 8007c02:	e6a5      	b.n	8007950 <_dtoa_r+0x6d8>
 8007c04:	2600      	movs	r6, #0
 8007c06:	4637      	mov	r7, r6
 8007c08:	e7e1      	b.n	8007bce <_dtoa_r+0x956>
 8007c0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007c0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007c10:	4637      	mov	r7, r6
 8007c12:	e599      	b.n	8007748 <_dtoa_r+0x4d0>
 8007c14:	9b08      	ldr	r3, [sp, #32]
 8007c16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80fd 	beq.w	8007e1a <_dtoa_r+0xba2>
 8007c20:	2d00      	cmp	r5, #0
 8007c22:	dd05      	ble.n	8007c30 <_dtoa_r+0x9b8>
 8007c24:	4639      	mov	r1, r7
 8007c26:	462a      	mov	r2, r5
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fd61 	bl	80086f0 <__lshift>
 8007c2e:	4607      	mov	r7, r0
 8007c30:	9b06      	ldr	r3, [sp, #24]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d05c      	beq.n	8007cf0 <_dtoa_r+0xa78>
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fb47 	bl	80082cc <_Balloc>
 8007c3e:	4605      	mov	r5, r0
 8007c40:	b928      	cbnz	r0, 8007c4e <_dtoa_r+0x9d6>
 8007c42:	4b80      	ldr	r3, [pc, #512]	; (8007e44 <_dtoa_r+0xbcc>)
 8007c44:	4602      	mov	r2, r0
 8007c46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c4a:	f7ff bb2e 	b.w	80072aa <_dtoa_r+0x32>
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	3202      	adds	r2, #2
 8007c52:	0092      	lsls	r2, r2, #2
 8007c54:	f107 010c 	add.w	r1, r7, #12
 8007c58:	300c      	adds	r0, #12
 8007c5a:	f000 fb1d 	bl	8008298 <memcpy>
 8007c5e:	2201      	movs	r2, #1
 8007c60:	4629      	mov	r1, r5
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 fd44 	bl	80086f0 <__lshift>
 8007c68:	9b00      	ldr	r3, [sp, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	9b00      	ldr	r3, [sp, #0]
 8007c70:	444b      	add	r3, r9
 8007c72:	9307      	str	r3, [sp, #28]
 8007c74:	9b02      	ldr	r3, [sp, #8]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	46b8      	mov	r8, r7
 8007c7c:	9306      	str	r3, [sp, #24]
 8007c7e:	4607      	mov	r7, r0
 8007c80:	9b01      	ldr	r3, [sp, #4]
 8007c82:	4631      	mov	r1, r6
 8007c84:	3b01      	subs	r3, #1
 8007c86:	4658      	mov	r0, fp
 8007c88:	9302      	str	r3, [sp, #8]
 8007c8a:	f7ff fa69 	bl	8007160 <quorem>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	3330      	adds	r3, #48	; 0x30
 8007c92:	9004      	str	r0, [sp, #16]
 8007c94:	4641      	mov	r1, r8
 8007c96:	4658      	mov	r0, fp
 8007c98:	9308      	str	r3, [sp, #32]
 8007c9a:	f000 fd95 	bl	80087c8 <__mcmp>
 8007c9e:	463a      	mov	r2, r7
 8007ca0:	4681      	mov	r9, r0
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 fdab 	bl	8008800 <__mdiff>
 8007caa:	68c2      	ldr	r2, [r0, #12]
 8007cac:	9b08      	ldr	r3, [sp, #32]
 8007cae:	4605      	mov	r5, r0
 8007cb0:	bb02      	cbnz	r2, 8007cf4 <_dtoa_r+0xa7c>
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	4658      	mov	r0, fp
 8007cb6:	f000 fd87 	bl	80087c8 <__mcmp>
 8007cba:	9b08      	ldr	r3, [sp, #32]
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007cc6:	f000 fb41 	bl	800834c <_Bfree>
 8007cca:	9b05      	ldr	r3, [sp, #20]
 8007ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cce:	9d01      	ldr	r5, [sp, #4]
 8007cd0:	ea43 0102 	orr.w	r1, r3, r2
 8007cd4:	9b06      	ldr	r3, [sp, #24]
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	9b08      	ldr	r3, [sp, #32]
 8007cda:	d10d      	bne.n	8007cf8 <_dtoa_r+0xa80>
 8007cdc:	2b39      	cmp	r3, #57	; 0x39
 8007cde:	d029      	beq.n	8007d34 <_dtoa_r+0xabc>
 8007ce0:	f1b9 0f00 	cmp.w	r9, #0
 8007ce4:	dd01      	ble.n	8007cea <_dtoa_r+0xa72>
 8007ce6:	9b04      	ldr	r3, [sp, #16]
 8007ce8:	3331      	adds	r3, #49	; 0x31
 8007cea:	9a02      	ldr	r2, [sp, #8]
 8007cec:	7013      	strb	r3, [r2, #0]
 8007cee:	e774      	b.n	8007bda <_dtoa_r+0x962>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	e7b9      	b.n	8007c68 <_dtoa_r+0x9f0>
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	e7e2      	b.n	8007cbe <_dtoa_r+0xa46>
 8007cf8:	f1b9 0f00 	cmp.w	r9, #0
 8007cfc:	db06      	blt.n	8007d0c <_dtoa_r+0xa94>
 8007cfe:	9905      	ldr	r1, [sp, #20]
 8007d00:	ea41 0909 	orr.w	r9, r1, r9
 8007d04:	9906      	ldr	r1, [sp, #24]
 8007d06:	ea59 0101 	orrs.w	r1, r9, r1
 8007d0a:	d120      	bne.n	8007d4e <_dtoa_r+0xad6>
 8007d0c:	2a00      	cmp	r2, #0
 8007d0e:	ddec      	ble.n	8007cea <_dtoa_r+0xa72>
 8007d10:	4659      	mov	r1, fp
 8007d12:	2201      	movs	r2, #1
 8007d14:	4620      	mov	r0, r4
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	f000 fcea 	bl	80086f0 <__lshift>
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4683      	mov	fp, r0
 8007d20:	f000 fd52 	bl	80087c8 <__mcmp>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	dc02      	bgt.n	8007d30 <_dtoa_r+0xab8>
 8007d2a:	d1de      	bne.n	8007cea <_dtoa_r+0xa72>
 8007d2c:	07da      	lsls	r2, r3, #31
 8007d2e:	d5dc      	bpl.n	8007cea <_dtoa_r+0xa72>
 8007d30:	2b39      	cmp	r3, #57	; 0x39
 8007d32:	d1d8      	bne.n	8007ce6 <_dtoa_r+0xa6e>
 8007d34:	9a02      	ldr	r2, [sp, #8]
 8007d36:	2339      	movs	r3, #57	; 0x39
 8007d38:	7013      	strb	r3, [r2, #0]
 8007d3a:	462b      	mov	r3, r5
 8007d3c:	461d      	mov	r5, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d44:	2a39      	cmp	r2, #57	; 0x39
 8007d46:	d050      	beq.n	8007dea <_dtoa_r+0xb72>
 8007d48:	3201      	adds	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	e745      	b.n	8007bda <_dtoa_r+0x962>
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	dd03      	ble.n	8007d5a <_dtoa_r+0xae2>
 8007d52:	2b39      	cmp	r3, #57	; 0x39
 8007d54:	d0ee      	beq.n	8007d34 <_dtoa_r+0xabc>
 8007d56:	3301      	adds	r3, #1
 8007d58:	e7c7      	b.n	8007cea <_dtoa_r+0xa72>
 8007d5a:	9a01      	ldr	r2, [sp, #4]
 8007d5c:	9907      	ldr	r1, [sp, #28]
 8007d5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d62:	428a      	cmp	r2, r1
 8007d64:	d02a      	beq.n	8007dbc <_dtoa_r+0xb44>
 8007d66:	4659      	mov	r1, fp
 8007d68:	2300      	movs	r3, #0
 8007d6a:	220a      	movs	r2, #10
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 fb0f 	bl	8008390 <__multadd>
 8007d72:	45b8      	cmp	r8, r7
 8007d74:	4683      	mov	fp, r0
 8007d76:	f04f 0300 	mov.w	r3, #0
 8007d7a:	f04f 020a 	mov.w	r2, #10
 8007d7e:	4641      	mov	r1, r8
 8007d80:	4620      	mov	r0, r4
 8007d82:	d107      	bne.n	8007d94 <_dtoa_r+0xb1c>
 8007d84:	f000 fb04 	bl	8008390 <__multadd>
 8007d88:	4680      	mov	r8, r0
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	e775      	b.n	8007c80 <_dtoa_r+0xa08>
 8007d94:	f000 fafc 	bl	8008390 <__multadd>
 8007d98:	4639      	mov	r1, r7
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	220a      	movs	r2, #10
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 faf5 	bl	8008390 <__multadd>
 8007da6:	4607      	mov	r7, r0
 8007da8:	e7f0      	b.n	8007d8c <_dtoa_r+0xb14>
 8007daa:	f1b9 0f00 	cmp.w	r9, #0
 8007dae:	9a00      	ldr	r2, [sp, #0]
 8007db0:	bfcc      	ite	gt
 8007db2:	464d      	movgt	r5, r9
 8007db4:	2501      	movle	r5, #1
 8007db6:	4415      	add	r5, r2
 8007db8:	f04f 0800 	mov.w	r8, #0
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	f000 fc94 	bl	80086f0 <__lshift>
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4683      	mov	fp, r0
 8007dcc:	f000 fcfc 	bl	80087c8 <__mcmp>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	dcb2      	bgt.n	8007d3a <_dtoa_r+0xac2>
 8007dd4:	d102      	bne.n	8007ddc <_dtoa_r+0xb64>
 8007dd6:	9b01      	ldr	r3, [sp, #4]
 8007dd8:	07db      	lsls	r3, r3, #31
 8007dda:	d4ae      	bmi.n	8007d3a <_dtoa_r+0xac2>
 8007ddc:	462b      	mov	r3, r5
 8007dde:	461d      	mov	r5, r3
 8007de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007de4:	2a30      	cmp	r2, #48	; 0x30
 8007de6:	d0fa      	beq.n	8007dde <_dtoa_r+0xb66>
 8007de8:	e6f7      	b.n	8007bda <_dtoa_r+0x962>
 8007dea:	9a00      	ldr	r2, [sp, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d1a5      	bne.n	8007d3c <_dtoa_r+0xac4>
 8007df0:	f10a 0a01 	add.w	sl, sl, #1
 8007df4:	2331      	movs	r3, #49	; 0x31
 8007df6:	e779      	b.n	8007cec <_dtoa_r+0xa74>
 8007df8:	4b13      	ldr	r3, [pc, #76]	; (8007e48 <_dtoa_r+0xbd0>)
 8007dfa:	f7ff baaf 	b.w	800735c <_dtoa_r+0xe4>
 8007dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f47f aa86 	bne.w	8007312 <_dtoa_r+0x9a>
 8007e06:	4b11      	ldr	r3, [pc, #68]	; (8007e4c <_dtoa_r+0xbd4>)
 8007e08:	f7ff baa8 	b.w	800735c <_dtoa_r+0xe4>
 8007e0c:	f1b9 0f00 	cmp.w	r9, #0
 8007e10:	dc03      	bgt.n	8007e1a <_dtoa_r+0xba2>
 8007e12:	9b05      	ldr	r3, [sp, #20]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	f73f aec9 	bgt.w	8007bac <_dtoa_r+0x934>
 8007e1a:	9d00      	ldr	r5, [sp, #0]
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4658      	mov	r0, fp
 8007e20:	f7ff f99e 	bl	8007160 <quorem>
 8007e24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e28:	f805 3b01 	strb.w	r3, [r5], #1
 8007e2c:	9a00      	ldr	r2, [sp, #0]
 8007e2e:	1aaa      	subs	r2, r5, r2
 8007e30:	4591      	cmp	r9, r2
 8007e32:	ddba      	ble.n	8007daa <_dtoa_r+0xb32>
 8007e34:	4659      	mov	r1, fp
 8007e36:	2300      	movs	r3, #0
 8007e38:	220a      	movs	r2, #10
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 faa8 	bl	8008390 <__multadd>
 8007e40:	4683      	mov	fp, r0
 8007e42:	e7eb      	b.n	8007e1c <_dtoa_r+0xba4>
 8007e44:	08009233 	.word	0x08009233
 8007e48:	0800918c 	.word	0x0800918c
 8007e4c:	080091b0 	.word	0x080091b0

08007e50 <__sflush_r>:
 8007e50:	898a      	ldrh	r2, [r1, #12]
 8007e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e56:	4605      	mov	r5, r0
 8007e58:	0710      	lsls	r0, r2, #28
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	d458      	bmi.n	8007f10 <__sflush_r+0xc0>
 8007e5e:	684b      	ldr	r3, [r1, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dc05      	bgt.n	8007e70 <__sflush_r+0x20>
 8007e64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dc02      	bgt.n	8007e70 <__sflush_r+0x20>
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e72:	2e00      	cmp	r6, #0
 8007e74:	d0f9      	beq.n	8007e6a <__sflush_r+0x1a>
 8007e76:	2300      	movs	r3, #0
 8007e78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e7c:	682f      	ldr	r7, [r5, #0]
 8007e7e:	602b      	str	r3, [r5, #0]
 8007e80:	d032      	beq.n	8007ee8 <__sflush_r+0x98>
 8007e82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	075a      	lsls	r2, r3, #29
 8007e88:	d505      	bpl.n	8007e96 <__sflush_r+0x46>
 8007e8a:	6863      	ldr	r3, [r4, #4]
 8007e8c:	1ac0      	subs	r0, r0, r3
 8007e8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e90:	b10b      	cbz	r3, 8007e96 <__sflush_r+0x46>
 8007e92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e94:	1ac0      	subs	r0, r0, r3
 8007e96:	2300      	movs	r3, #0
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e9c:	6a21      	ldr	r1, [r4, #32]
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	47b0      	blx	r6
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	d106      	bne.n	8007eb6 <__sflush_r+0x66>
 8007ea8:	6829      	ldr	r1, [r5, #0]
 8007eaa:	291d      	cmp	r1, #29
 8007eac:	d82c      	bhi.n	8007f08 <__sflush_r+0xb8>
 8007eae:	4a2a      	ldr	r2, [pc, #168]	; (8007f58 <__sflush_r+0x108>)
 8007eb0:	40ca      	lsrs	r2, r1
 8007eb2:	07d6      	lsls	r6, r2, #31
 8007eb4:	d528      	bpl.n	8007f08 <__sflush_r+0xb8>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	6062      	str	r2, [r4, #4]
 8007eba:	04d9      	lsls	r1, r3, #19
 8007ebc:	6922      	ldr	r2, [r4, #16]
 8007ebe:	6022      	str	r2, [r4, #0]
 8007ec0:	d504      	bpl.n	8007ecc <__sflush_r+0x7c>
 8007ec2:	1c42      	adds	r2, r0, #1
 8007ec4:	d101      	bne.n	8007eca <__sflush_r+0x7a>
 8007ec6:	682b      	ldr	r3, [r5, #0]
 8007ec8:	b903      	cbnz	r3, 8007ecc <__sflush_r+0x7c>
 8007eca:	6560      	str	r0, [r4, #84]	; 0x54
 8007ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ece:	602f      	str	r7, [r5, #0]
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	d0ca      	beq.n	8007e6a <__sflush_r+0x1a>
 8007ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ed8:	4299      	cmp	r1, r3
 8007eda:	d002      	beq.n	8007ee2 <__sflush_r+0x92>
 8007edc:	4628      	mov	r0, r5
 8007ede:	f7fe fab7 	bl	8006450 <_free_r>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ee6:	e7c1      	b.n	8007e6c <__sflush_r+0x1c>
 8007ee8:	6a21      	ldr	r1, [r4, #32]
 8007eea:	2301      	movs	r3, #1
 8007eec:	4628      	mov	r0, r5
 8007eee:	47b0      	blx	r6
 8007ef0:	1c41      	adds	r1, r0, #1
 8007ef2:	d1c7      	bne.n	8007e84 <__sflush_r+0x34>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0c4      	beq.n	8007e84 <__sflush_r+0x34>
 8007efa:	2b1d      	cmp	r3, #29
 8007efc:	d001      	beq.n	8007f02 <__sflush_r+0xb2>
 8007efe:	2b16      	cmp	r3, #22
 8007f00:	d101      	bne.n	8007f06 <__sflush_r+0xb6>
 8007f02:	602f      	str	r7, [r5, #0]
 8007f04:	e7b1      	b.n	8007e6a <__sflush_r+0x1a>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f0c:	81a3      	strh	r3, [r4, #12]
 8007f0e:	e7ad      	b.n	8007e6c <__sflush_r+0x1c>
 8007f10:	690f      	ldr	r7, [r1, #16]
 8007f12:	2f00      	cmp	r7, #0
 8007f14:	d0a9      	beq.n	8007e6a <__sflush_r+0x1a>
 8007f16:	0793      	lsls	r3, r2, #30
 8007f18:	680e      	ldr	r6, [r1, #0]
 8007f1a:	bf08      	it	eq
 8007f1c:	694b      	ldreq	r3, [r1, #20]
 8007f1e:	600f      	str	r7, [r1, #0]
 8007f20:	bf18      	it	ne
 8007f22:	2300      	movne	r3, #0
 8007f24:	eba6 0807 	sub.w	r8, r6, r7
 8007f28:	608b      	str	r3, [r1, #8]
 8007f2a:	f1b8 0f00 	cmp.w	r8, #0
 8007f2e:	dd9c      	ble.n	8007e6a <__sflush_r+0x1a>
 8007f30:	6a21      	ldr	r1, [r4, #32]
 8007f32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f34:	4643      	mov	r3, r8
 8007f36:	463a      	mov	r2, r7
 8007f38:	4628      	mov	r0, r5
 8007f3a:	47b0      	blx	r6
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	dc06      	bgt.n	8007f4e <__sflush_r+0xfe>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f46:	81a3      	strh	r3, [r4, #12]
 8007f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f4c:	e78e      	b.n	8007e6c <__sflush_r+0x1c>
 8007f4e:	4407      	add	r7, r0
 8007f50:	eba8 0800 	sub.w	r8, r8, r0
 8007f54:	e7e9      	b.n	8007f2a <__sflush_r+0xda>
 8007f56:	bf00      	nop
 8007f58:	20400001 	.word	0x20400001

08007f5c <_fflush_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	690b      	ldr	r3, [r1, #16]
 8007f60:	4605      	mov	r5, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	b913      	cbnz	r3, 8007f6c <_fflush_r+0x10>
 8007f66:	2500      	movs	r5, #0
 8007f68:	4628      	mov	r0, r5
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	b118      	cbz	r0, 8007f76 <_fflush_r+0x1a>
 8007f6e:	6983      	ldr	r3, [r0, #24]
 8007f70:	b90b      	cbnz	r3, 8007f76 <_fflush_r+0x1a>
 8007f72:	f000 f887 	bl	8008084 <__sinit>
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <_fflush_r+0x6c>)
 8007f78:	429c      	cmp	r4, r3
 8007f7a:	d11b      	bne.n	8007fb4 <_fflush_r+0x58>
 8007f7c:	686c      	ldr	r4, [r5, #4]
 8007f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0ef      	beq.n	8007f66 <_fflush_r+0xa>
 8007f86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f88:	07d0      	lsls	r0, r2, #31
 8007f8a:	d404      	bmi.n	8007f96 <_fflush_r+0x3a>
 8007f8c:	0599      	lsls	r1, r3, #22
 8007f8e:	d402      	bmi.n	8007f96 <_fflush_r+0x3a>
 8007f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f92:	f000 f91a 	bl	80081ca <__retarget_lock_acquire_recursive>
 8007f96:	4628      	mov	r0, r5
 8007f98:	4621      	mov	r1, r4
 8007f9a:	f7ff ff59 	bl	8007e50 <__sflush_r>
 8007f9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fa0:	07da      	lsls	r2, r3, #31
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	d4e0      	bmi.n	8007f68 <_fflush_r+0xc>
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	059b      	lsls	r3, r3, #22
 8007faa:	d4dd      	bmi.n	8007f68 <_fflush_r+0xc>
 8007fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fae:	f000 f90d 	bl	80081cc <__retarget_lock_release_recursive>
 8007fb2:	e7d9      	b.n	8007f68 <_fflush_r+0xc>
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <_fflush_r+0x70>)
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	d101      	bne.n	8007fbe <_fflush_r+0x62>
 8007fba:	68ac      	ldr	r4, [r5, #8]
 8007fbc:	e7df      	b.n	8007f7e <_fflush_r+0x22>
 8007fbe:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <_fflush_r+0x74>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	bf08      	it	eq
 8007fc4:	68ec      	ldreq	r4, [r5, #12]
 8007fc6:	e7da      	b.n	8007f7e <_fflush_r+0x22>
 8007fc8:	08009264 	.word	0x08009264
 8007fcc:	08009284 	.word	0x08009284
 8007fd0:	08009244 	.word	0x08009244

08007fd4 <std>:
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	4604      	mov	r4, r0
 8007fda:	e9c0 3300 	strd	r3, r3, [r0]
 8007fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fe2:	6083      	str	r3, [r0, #8]
 8007fe4:	8181      	strh	r1, [r0, #12]
 8007fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8007fe8:	81c2      	strh	r2, [r0, #14]
 8007fea:	6183      	str	r3, [r0, #24]
 8007fec:	4619      	mov	r1, r3
 8007fee:	2208      	movs	r2, #8
 8007ff0:	305c      	adds	r0, #92	; 0x5c
 8007ff2:	f7fe fa25 	bl	8006440 <memset>
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <std+0x38>)
 8007ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <std+0x3c>)
 8007ffc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <std+0x40>)
 8008000:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <std+0x44>)
 8008004:	6224      	str	r4, [r4, #32]
 8008006:	6323      	str	r3, [r4, #48]	; 0x30
 8008008:	bd10      	pop	{r4, pc}
 800800a:	bf00      	nop
 800800c:	08008d29 	.word	0x08008d29
 8008010:	08008d4b 	.word	0x08008d4b
 8008014:	08008d83 	.word	0x08008d83
 8008018:	08008da7 	.word	0x08008da7

0800801c <_cleanup_r>:
 800801c:	4901      	ldr	r1, [pc, #4]	; (8008024 <_cleanup_r+0x8>)
 800801e:	f000 b8af 	b.w	8008180 <_fwalk_reent>
 8008022:	bf00      	nop
 8008024:	08007f5d 	.word	0x08007f5d

08008028 <__sfmoreglue>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	1e4a      	subs	r2, r1, #1
 800802c:	2568      	movs	r5, #104	; 0x68
 800802e:	4355      	muls	r5, r2
 8008030:	460e      	mov	r6, r1
 8008032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008036:	f7fe fa5b 	bl	80064f0 <_malloc_r>
 800803a:	4604      	mov	r4, r0
 800803c:	b140      	cbz	r0, 8008050 <__sfmoreglue+0x28>
 800803e:	2100      	movs	r1, #0
 8008040:	e9c0 1600 	strd	r1, r6, [r0]
 8008044:	300c      	adds	r0, #12
 8008046:	60a0      	str	r0, [r4, #8]
 8008048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800804c:	f7fe f9f8 	bl	8006440 <memset>
 8008050:	4620      	mov	r0, r4
 8008052:	bd70      	pop	{r4, r5, r6, pc}

08008054 <__sfp_lock_acquire>:
 8008054:	4801      	ldr	r0, [pc, #4]	; (800805c <__sfp_lock_acquire+0x8>)
 8008056:	f000 b8b8 	b.w	80081ca <__retarget_lock_acquire_recursive>
 800805a:	bf00      	nop
 800805c:	20000450 	.word	0x20000450

08008060 <__sfp_lock_release>:
 8008060:	4801      	ldr	r0, [pc, #4]	; (8008068 <__sfp_lock_release+0x8>)
 8008062:	f000 b8b3 	b.w	80081cc <__retarget_lock_release_recursive>
 8008066:	bf00      	nop
 8008068:	20000450 	.word	0x20000450

0800806c <__sinit_lock_acquire>:
 800806c:	4801      	ldr	r0, [pc, #4]	; (8008074 <__sinit_lock_acquire+0x8>)
 800806e:	f000 b8ac 	b.w	80081ca <__retarget_lock_acquire_recursive>
 8008072:	bf00      	nop
 8008074:	2000044b 	.word	0x2000044b

08008078 <__sinit_lock_release>:
 8008078:	4801      	ldr	r0, [pc, #4]	; (8008080 <__sinit_lock_release+0x8>)
 800807a:	f000 b8a7 	b.w	80081cc <__retarget_lock_release_recursive>
 800807e:	bf00      	nop
 8008080:	2000044b 	.word	0x2000044b

08008084 <__sinit>:
 8008084:	b510      	push	{r4, lr}
 8008086:	4604      	mov	r4, r0
 8008088:	f7ff fff0 	bl	800806c <__sinit_lock_acquire>
 800808c:	69a3      	ldr	r3, [r4, #24]
 800808e:	b11b      	cbz	r3, 8008098 <__sinit+0x14>
 8008090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008094:	f7ff bff0 	b.w	8008078 <__sinit_lock_release>
 8008098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800809c:	6523      	str	r3, [r4, #80]	; 0x50
 800809e:	4b13      	ldr	r3, [pc, #76]	; (80080ec <__sinit+0x68>)
 80080a0:	4a13      	ldr	r2, [pc, #76]	; (80080f0 <__sinit+0x6c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80080a6:	42a3      	cmp	r3, r4
 80080a8:	bf04      	itt	eq
 80080aa:	2301      	moveq	r3, #1
 80080ac:	61a3      	streq	r3, [r4, #24]
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f820 	bl	80080f4 <__sfp>
 80080b4:	6060      	str	r0, [r4, #4]
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 f81c 	bl	80080f4 <__sfp>
 80080bc:	60a0      	str	r0, [r4, #8]
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 f818 	bl	80080f4 <__sfp>
 80080c4:	2200      	movs	r2, #0
 80080c6:	60e0      	str	r0, [r4, #12]
 80080c8:	2104      	movs	r1, #4
 80080ca:	6860      	ldr	r0, [r4, #4]
 80080cc:	f7ff ff82 	bl	8007fd4 <std>
 80080d0:	68a0      	ldr	r0, [r4, #8]
 80080d2:	2201      	movs	r2, #1
 80080d4:	2109      	movs	r1, #9
 80080d6:	f7ff ff7d 	bl	8007fd4 <std>
 80080da:	68e0      	ldr	r0, [r4, #12]
 80080dc:	2202      	movs	r2, #2
 80080de:	2112      	movs	r1, #18
 80080e0:	f7ff ff78 	bl	8007fd4 <std>
 80080e4:	2301      	movs	r3, #1
 80080e6:	61a3      	str	r3, [r4, #24]
 80080e8:	e7d2      	b.n	8008090 <__sinit+0xc>
 80080ea:	bf00      	nop
 80080ec:	08009178 	.word	0x08009178
 80080f0:	0800801d 	.word	0x0800801d

080080f4 <__sfp>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	4607      	mov	r7, r0
 80080f8:	f7ff ffac 	bl	8008054 <__sfp_lock_acquire>
 80080fc:	4b1e      	ldr	r3, [pc, #120]	; (8008178 <__sfp+0x84>)
 80080fe:	681e      	ldr	r6, [r3, #0]
 8008100:	69b3      	ldr	r3, [r6, #24]
 8008102:	b913      	cbnz	r3, 800810a <__sfp+0x16>
 8008104:	4630      	mov	r0, r6
 8008106:	f7ff ffbd 	bl	8008084 <__sinit>
 800810a:	3648      	adds	r6, #72	; 0x48
 800810c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008110:	3b01      	subs	r3, #1
 8008112:	d503      	bpl.n	800811c <__sfp+0x28>
 8008114:	6833      	ldr	r3, [r6, #0]
 8008116:	b30b      	cbz	r3, 800815c <__sfp+0x68>
 8008118:	6836      	ldr	r6, [r6, #0]
 800811a:	e7f7      	b.n	800810c <__sfp+0x18>
 800811c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008120:	b9d5      	cbnz	r5, 8008158 <__sfp+0x64>
 8008122:	4b16      	ldr	r3, [pc, #88]	; (800817c <__sfp+0x88>)
 8008124:	60e3      	str	r3, [r4, #12]
 8008126:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800812a:	6665      	str	r5, [r4, #100]	; 0x64
 800812c:	f000 f84c 	bl	80081c8 <__retarget_lock_init_recursive>
 8008130:	f7ff ff96 	bl	8008060 <__sfp_lock_release>
 8008134:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008138:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800813c:	6025      	str	r5, [r4, #0]
 800813e:	61a5      	str	r5, [r4, #24]
 8008140:	2208      	movs	r2, #8
 8008142:	4629      	mov	r1, r5
 8008144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008148:	f7fe f97a 	bl	8006440 <memset>
 800814c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008154:	4620      	mov	r0, r4
 8008156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008158:	3468      	adds	r4, #104	; 0x68
 800815a:	e7d9      	b.n	8008110 <__sfp+0x1c>
 800815c:	2104      	movs	r1, #4
 800815e:	4638      	mov	r0, r7
 8008160:	f7ff ff62 	bl	8008028 <__sfmoreglue>
 8008164:	4604      	mov	r4, r0
 8008166:	6030      	str	r0, [r6, #0]
 8008168:	2800      	cmp	r0, #0
 800816a:	d1d5      	bne.n	8008118 <__sfp+0x24>
 800816c:	f7ff ff78 	bl	8008060 <__sfp_lock_release>
 8008170:	230c      	movs	r3, #12
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	e7ee      	b.n	8008154 <__sfp+0x60>
 8008176:	bf00      	nop
 8008178:	08009178 	.word	0x08009178
 800817c:	ffff0001 	.word	0xffff0001

08008180 <_fwalk_reent>:
 8008180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008184:	4606      	mov	r6, r0
 8008186:	4688      	mov	r8, r1
 8008188:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800818c:	2700      	movs	r7, #0
 800818e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008192:	f1b9 0901 	subs.w	r9, r9, #1
 8008196:	d505      	bpl.n	80081a4 <_fwalk_reent+0x24>
 8008198:	6824      	ldr	r4, [r4, #0]
 800819a:	2c00      	cmp	r4, #0
 800819c:	d1f7      	bne.n	800818e <_fwalk_reent+0xe>
 800819e:	4638      	mov	r0, r7
 80081a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081a4:	89ab      	ldrh	r3, [r5, #12]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d907      	bls.n	80081ba <_fwalk_reent+0x3a>
 80081aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081ae:	3301      	adds	r3, #1
 80081b0:	d003      	beq.n	80081ba <_fwalk_reent+0x3a>
 80081b2:	4629      	mov	r1, r5
 80081b4:	4630      	mov	r0, r6
 80081b6:	47c0      	blx	r8
 80081b8:	4307      	orrs	r7, r0
 80081ba:	3568      	adds	r5, #104	; 0x68
 80081bc:	e7e9      	b.n	8008192 <_fwalk_reent+0x12>
	...

080081c0 <_localeconv_r>:
 80081c0:	4800      	ldr	r0, [pc, #0]	; (80081c4 <_localeconv_r+0x4>)
 80081c2:	4770      	bx	lr
 80081c4:	20000160 	.word	0x20000160

080081c8 <__retarget_lock_init_recursive>:
 80081c8:	4770      	bx	lr

080081ca <__retarget_lock_acquire_recursive>:
 80081ca:	4770      	bx	lr

080081cc <__retarget_lock_release_recursive>:
 80081cc:	4770      	bx	lr

080081ce <__swhatbuf_r>:
 80081ce:	b570      	push	{r4, r5, r6, lr}
 80081d0:	460e      	mov	r6, r1
 80081d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d6:	2900      	cmp	r1, #0
 80081d8:	b096      	sub	sp, #88	; 0x58
 80081da:	4614      	mov	r4, r2
 80081dc:	461d      	mov	r5, r3
 80081de:	da07      	bge.n	80081f0 <__swhatbuf_r+0x22>
 80081e0:	2300      	movs	r3, #0
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	89b3      	ldrh	r3, [r6, #12]
 80081e6:	061a      	lsls	r2, r3, #24
 80081e8:	d410      	bmi.n	800820c <__swhatbuf_r+0x3e>
 80081ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ee:	e00e      	b.n	800820e <__swhatbuf_r+0x40>
 80081f0:	466a      	mov	r2, sp
 80081f2:	f000 fe2f 	bl	8008e54 <_fstat_r>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	dbf2      	blt.n	80081e0 <__swhatbuf_r+0x12>
 80081fa:	9a01      	ldr	r2, [sp, #4]
 80081fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008200:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008204:	425a      	negs	r2, r3
 8008206:	415a      	adcs	r2, r3
 8008208:	602a      	str	r2, [r5, #0]
 800820a:	e7ee      	b.n	80081ea <__swhatbuf_r+0x1c>
 800820c:	2340      	movs	r3, #64	; 0x40
 800820e:	2000      	movs	r0, #0
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	b016      	add	sp, #88	; 0x58
 8008214:	bd70      	pop	{r4, r5, r6, pc}
	...

08008218 <__smakebuf_r>:
 8008218:	898b      	ldrh	r3, [r1, #12]
 800821a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800821c:	079d      	lsls	r5, r3, #30
 800821e:	4606      	mov	r6, r0
 8008220:	460c      	mov	r4, r1
 8008222:	d507      	bpl.n	8008234 <__smakebuf_r+0x1c>
 8008224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	6123      	str	r3, [r4, #16]
 800822c:	2301      	movs	r3, #1
 800822e:	6163      	str	r3, [r4, #20]
 8008230:	b002      	add	sp, #8
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	ab01      	add	r3, sp, #4
 8008236:	466a      	mov	r2, sp
 8008238:	f7ff ffc9 	bl	80081ce <__swhatbuf_r>
 800823c:	9900      	ldr	r1, [sp, #0]
 800823e:	4605      	mov	r5, r0
 8008240:	4630      	mov	r0, r6
 8008242:	f7fe f955 	bl	80064f0 <_malloc_r>
 8008246:	b948      	cbnz	r0, 800825c <__smakebuf_r+0x44>
 8008248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824c:	059a      	lsls	r2, r3, #22
 800824e:	d4ef      	bmi.n	8008230 <__smakebuf_r+0x18>
 8008250:	f023 0303 	bic.w	r3, r3, #3
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	e7e3      	b.n	8008224 <__smakebuf_r+0xc>
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <__smakebuf_r+0x7c>)
 800825e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	6020      	str	r0, [r4, #0]
 8008264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	9b00      	ldr	r3, [sp, #0]
 800826c:	6163      	str	r3, [r4, #20]
 800826e:	9b01      	ldr	r3, [sp, #4]
 8008270:	6120      	str	r0, [r4, #16]
 8008272:	b15b      	cbz	r3, 800828c <__smakebuf_r+0x74>
 8008274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008278:	4630      	mov	r0, r6
 800827a:	f000 fdfd 	bl	8008e78 <_isatty_r>
 800827e:	b128      	cbz	r0, 800828c <__smakebuf_r+0x74>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	f043 0301 	orr.w	r3, r3, #1
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	89a0      	ldrh	r0, [r4, #12]
 800828e:	4305      	orrs	r5, r0
 8008290:	81a5      	strh	r5, [r4, #12]
 8008292:	e7cd      	b.n	8008230 <__smakebuf_r+0x18>
 8008294:	0800801d 	.word	0x0800801d

08008298 <memcpy>:
 8008298:	440a      	add	r2, r1
 800829a:	4291      	cmp	r1, r2
 800829c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80082a0:	d100      	bne.n	80082a4 <memcpy+0xc>
 80082a2:	4770      	bx	lr
 80082a4:	b510      	push	{r4, lr}
 80082a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ae:	4291      	cmp	r1, r2
 80082b0:	d1f9      	bne.n	80082a6 <memcpy+0xe>
 80082b2:	bd10      	pop	{r4, pc}

080082b4 <__malloc_lock>:
 80082b4:	4801      	ldr	r0, [pc, #4]	; (80082bc <__malloc_lock+0x8>)
 80082b6:	f7ff bf88 	b.w	80081ca <__retarget_lock_acquire_recursive>
 80082ba:	bf00      	nop
 80082bc:	2000044c 	.word	0x2000044c

080082c0 <__malloc_unlock>:
 80082c0:	4801      	ldr	r0, [pc, #4]	; (80082c8 <__malloc_unlock+0x8>)
 80082c2:	f7ff bf83 	b.w	80081cc <__retarget_lock_release_recursive>
 80082c6:	bf00      	nop
 80082c8:	2000044c 	.word	0x2000044c

080082cc <_Balloc>:
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082d0:	4604      	mov	r4, r0
 80082d2:	460d      	mov	r5, r1
 80082d4:	b976      	cbnz	r6, 80082f4 <_Balloc+0x28>
 80082d6:	2010      	movs	r0, #16
 80082d8:	f7fe f8aa 	bl	8006430 <malloc>
 80082dc:	4602      	mov	r2, r0
 80082de:	6260      	str	r0, [r4, #36]	; 0x24
 80082e0:	b920      	cbnz	r0, 80082ec <_Balloc+0x20>
 80082e2:	4b18      	ldr	r3, [pc, #96]	; (8008344 <_Balloc+0x78>)
 80082e4:	4818      	ldr	r0, [pc, #96]	; (8008348 <_Balloc+0x7c>)
 80082e6:	2166      	movs	r1, #102	; 0x66
 80082e8:	f000 fd74 	bl	8008dd4 <__assert_func>
 80082ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082f0:	6006      	str	r6, [r0, #0]
 80082f2:	60c6      	str	r6, [r0, #12]
 80082f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082f6:	68f3      	ldr	r3, [r6, #12]
 80082f8:	b183      	cbz	r3, 800831c <_Balloc+0x50>
 80082fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008302:	b9b8      	cbnz	r0, 8008334 <_Balloc+0x68>
 8008304:	2101      	movs	r1, #1
 8008306:	fa01 f605 	lsl.w	r6, r1, r5
 800830a:	1d72      	adds	r2, r6, #5
 800830c:	0092      	lsls	r2, r2, #2
 800830e:	4620      	mov	r0, r4
 8008310:	f000 fb5a 	bl	80089c8 <_calloc_r>
 8008314:	b160      	cbz	r0, 8008330 <_Balloc+0x64>
 8008316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800831a:	e00e      	b.n	800833a <_Balloc+0x6e>
 800831c:	2221      	movs	r2, #33	; 0x21
 800831e:	2104      	movs	r1, #4
 8008320:	4620      	mov	r0, r4
 8008322:	f000 fb51 	bl	80089c8 <_calloc_r>
 8008326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008328:	60f0      	str	r0, [r6, #12]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e4      	bne.n	80082fa <_Balloc+0x2e>
 8008330:	2000      	movs	r0, #0
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	6802      	ldr	r2, [r0, #0]
 8008336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800833a:	2300      	movs	r3, #0
 800833c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008340:	e7f7      	b.n	8008332 <_Balloc+0x66>
 8008342:	bf00      	nop
 8008344:	080091bd 	.word	0x080091bd
 8008348:	080092a4 	.word	0x080092a4

0800834c <_Bfree>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008350:	4605      	mov	r5, r0
 8008352:	460c      	mov	r4, r1
 8008354:	b976      	cbnz	r6, 8008374 <_Bfree+0x28>
 8008356:	2010      	movs	r0, #16
 8008358:	f7fe f86a 	bl	8006430 <malloc>
 800835c:	4602      	mov	r2, r0
 800835e:	6268      	str	r0, [r5, #36]	; 0x24
 8008360:	b920      	cbnz	r0, 800836c <_Bfree+0x20>
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <_Bfree+0x3c>)
 8008364:	4809      	ldr	r0, [pc, #36]	; (800838c <_Bfree+0x40>)
 8008366:	218a      	movs	r1, #138	; 0x8a
 8008368:	f000 fd34 	bl	8008dd4 <__assert_func>
 800836c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008370:	6006      	str	r6, [r0, #0]
 8008372:	60c6      	str	r6, [r0, #12]
 8008374:	b13c      	cbz	r4, 8008386 <_Bfree+0x3a>
 8008376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008378:	6862      	ldr	r2, [r4, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008380:	6021      	str	r1, [r4, #0]
 8008382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	080091bd 	.word	0x080091bd
 800838c:	080092a4 	.word	0x080092a4

08008390 <__multadd>:
 8008390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008394:	690e      	ldr	r6, [r1, #16]
 8008396:	4607      	mov	r7, r0
 8008398:	4698      	mov	r8, r3
 800839a:	460c      	mov	r4, r1
 800839c:	f101 0014 	add.w	r0, r1, #20
 80083a0:	2300      	movs	r3, #0
 80083a2:	6805      	ldr	r5, [r0, #0]
 80083a4:	b2a9      	uxth	r1, r5
 80083a6:	fb02 8101 	mla	r1, r2, r1, r8
 80083aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80083ae:	0c2d      	lsrs	r5, r5, #16
 80083b0:	fb02 c505 	mla	r5, r2, r5, ip
 80083b4:	b289      	uxth	r1, r1
 80083b6:	3301      	adds	r3, #1
 80083b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80083bc:	429e      	cmp	r6, r3
 80083be:	f840 1b04 	str.w	r1, [r0], #4
 80083c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80083c6:	dcec      	bgt.n	80083a2 <__multadd+0x12>
 80083c8:	f1b8 0f00 	cmp.w	r8, #0
 80083cc:	d022      	beq.n	8008414 <__multadd+0x84>
 80083ce:	68a3      	ldr	r3, [r4, #8]
 80083d0:	42b3      	cmp	r3, r6
 80083d2:	dc19      	bgt.n	8008408 <__multadd+0x78>
 80083d4:	6861      	ldr	r1, [r4, #4]
 80083d6:	4638      	mov	r0, r7
 80083d8:	3101      	adds	r1, #1
 80083da:	f7ff ff77 	bl	80082cc <_Balloc>
 80083de:	4605      	mov	r5, r0
 80083e0:	b928      	cbnz	r0, 80083ee <__multadd+0x5e>
 80083e2:	4602      	mov	r2, r0
 80083e4:	4b0d      	ldr	r3, [pc, #52]	; (800841c <__multadd+0x8c>)
 80083e6:	480e      	ldr	r0, [pc, #56]	; (8008420 <__multadd+0x90>)
 80083e8:	21b5      	movs	r1, #181	; 0xb5
 80083ea:	f000 fcf3 	bl	8008dd4 <__assert_func>
 80083ee:	6922      	ldr	r2, [r4, #16]
 80083f0:	3202      	adds	r2, #2
 80083f2:	f104 010c 	add.w	r1, r4, #12
 80083f6:	0092      	lsls	r2, r2, #2
 80083f8:	300c      	adds	r0, #12
 80083fa:	f7ff ff4d 	bl	8008298 <memcpy>
 80083fe:	4621      	mov	r1, r4
 8008400:	4638      	mov	r0, r7
 8008402:	f7ff ffa3 	bl	800834c <_Bfree>
 8008406:	462c      	mov	r4, r5
 8008408:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800840c:	3601      	adds	r6, #1
 800840e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008412:	6126      	str	r6, [r4, #16]
 8008414:	4620      	mov	r0, r4
 8008416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800841a:	bf00      	nop
 800841c:	08009233 	.word	0x08009233
 8008420:	080092a4 	.word	0x080092a4

08008424 <__hi0bits>:
 8008424:	0c03      	lsrs	r3, r0, #16
 8008426:	041b      	lsls	r3, r3, #16
 8008428:	b9d3      	cbnz	r3, 8008460 <__hi0bits+0x3c>
 800842a:	0400      	lsls	r0, r0, #16
 800842c:	2310      	movs	r3, #16
 800842e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008432:	bf04      	itt	eq
 8008434:	0200      	lsleq	r0, r0, #8
 8008436:	3308      	addeq	r3, #8
 8008438:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800843c:	bf04      	itt	eq
 800843e:	0100      	lsleq	r0, r0, #4
 8008440:	3304      	addeq	r3, #4
 8008442:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008446:	bf04      	itt	eq
 8008448:	0080      	lsleq	r0, r0, #2
 800844a:	3302      	addeq	r3, #2
 800844c:	2800      	cmp	r0, #0
 800844e:	db05      	blt.n	800845c <__hi0bits+0x38>
 8008450:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008454:	f103 0301 	add.w	r3, r3, #1
 8008458:	bf08      	it	eq
 800845a:	2320      	moveq	r3, #32
 800845c:	4618      	mov	r0, r3
 800845e:	4770      	bx	lr
 8008460:	2300      	movs	r3, #0
 8008462:	e7e4      	b.n	800842e <__hi0bits+0xa>

08008464 <__lo0bits>:
 8008464:	6803      	ldr	r3, [r0, #0]
 8008466:	f013 0207 	ands.w	r2, r3, #7
 800846a:	4601      	mov	r1, r0
 800846c:	d00b      	beq.n	8008486 <__lo0bits+0x22>
 800846e:	07da      	lsls	r2, r3, #31
 8008470:	d424      	bmi.n	80084bc <__lo0bits+0x58>
 8008472:	0798      	lsls	r0, r3, #30
 8008474:	bf49      	itett	mi
 8008476:	085b      	lsrmi	r3, r3, #1
 8008478:	089b      	lsrpl	r3, r3, #2
 800847a:	2001      	movmi	r0, #1
 800847c:	600b      	strmi	r3, [r1, #0]
 800847e:	bf5c      	itt	pl
 8008480:	600b      	strpl	r3, [r1, #0]
 8008482:	2002      	movpl	r0, #2
 8008484:	4770      	bx	lr
 8008486:	b298      	uxth	r0, r3
 8008488:	b9b0      	cbnz	r0, 80084b8 <__lo0bits+0x54>
 800848a:	0c1b      	lsrs	r3, r3, #16
 800848c:	2010      	movs	r0, #16
 800848e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008492:	bf04      	itt	eq
 8008494:	0a1b      	lsreq	r3, r3, #8
 8008496:	3008      	addeq	r0, #8
 8008498:	071a      	lsls	r2, r3, #28
 800849a:	bf04      	itt	eq
 800849c:	091b      	lsreq	r3, r3, #4
 800849e:	3004      	addeq	r0, #4
 80084a0:	079a      	lsls	r2, r3, #30
 80084a2:	bf04      	itt	eq
 80084a4:	089b      	lsreq	r3, r3, #2
 80084a6:	3002      	addeq	r0, #2
 80084a8:	07da      	lsls	r2, r3, #31
 80084aa:	d403      	bmi.n	80084b4 <__lo0bits+0x50>
 80084ac:	085b      	lsrs	r3, r3, #1
 80084ae:	f100 0001 	add.w	r0, r0, #1
 80084b2:	d005      	beq.n	80084c0 <__lo0bits+0x5c>
 80084b4:	600b      	str	r3, [r1, #0]
 80084b6:	4770      	bx	lr
 80084b8:	4610      	mov	r0, r2
 80084ba:	e7e8      	b.n	800848e <__lo0bits+0x2a>
 80084bc:	2000      	movs	r0, #0
 80084be:	4770      	bx	lr
 80084c0:	2020      	movs	r0, #32
 80084c2:	4770      	bx	lr

080084c4 <__i2b>:
 80084c4:	b510      	push	{r4, lr}
 80084c6:	460c      	mov	r4, r1
 80084c8:	2101      	movs	r1, #1
 80084ca:	f7ff feff 	bl	80082cc <_Balloc>
 80084ce:	4602      	mov	r2, r0
 80084d0:	b928      	cbnz	r0, 80084de <__i2b+0x1a>
 80084d2:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <__i2b+0x24>)
 80084d4:	4805      	ldr	r0, [pc, #20]	; (80084ec <__i2b+0x28>)
 80084d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084da:	f000 fc7b 	bl	8008dd4 <__assert_func>
 80084de:	2301      	movs	r3, #1
 80084e0:	6144      	str	r4, [r0, #20]
 80084e2:	6103      	str	r3, [r0, #16]
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	bf00      	nop
 80084e8:	08009233 	.word	0x08009233
 80084ec:	080092a4 	.word	0x080092a4

080084f0 <__multiply>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	4614      	mov	r4, r2
 80084f6:	690a      	ldr	r2, [r1, #16]
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	bfb8      	it	lt
 80084fe:	460b      	movlt	r3, r1
 8008500:	460d      	mov	r5, r1
 8008502:	bfbc      	itt	lt
 8008504:	4625      	movlt	r5, r4
 8008506:	461c      	movlt	r4, r3
 8008508:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800850c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008510:	68ab      	ldr	r3, [r5, #8]
 8008512:	6869      	ldr	r1, [r5, #4]
 8008514:	eb0a 0709 	add.w	r7, sl, r9
 8008518:	42bb      	cmp	r3, r7
 800851a:	b085      	sub	sp, #20
 800851c:	bfb8      	it	lt
 800851e:	3101      	addlt	r1, #1
 8008520:	f7ff fed4 	bl	80082cc <_Balloc>
 8008524:	b930      	cbnz	r0, 8008534 <__multiply+0x44>
 8008526:	4602      	mov	r2, r0
 8008528:	4b42      	ldr	r3, [pc, #264]	; (8008634 <__multiply+0x144>)
 800852a:	4843      	ldr	r0, [pc, #268]	; (8008638 <__multiply+0x148>)
 800852c:	f240 115d 	movw	r1, #349	; 0x15d
 8008530:	f000 fc50 	bl	8008dd4 <__assert_func>
 8008534:	f100 0614 	add.w	r6, r0, #20
 8008538:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800853c:	4633      	mov	r3, r6
 800853e:	2200      	movs	r2, #0
 8008540:	4543      	cmp	r3, r8
 8008542:	d31e      	bcc.n	8008582 <__multiply+0x92>
 8008544:	f105 0c14 	add.w	ip, r5, #20
 8008548:	f104 0314 	add.w	r3, r4, #20
 800854c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008550:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008554:	9202      	str	r2, [sp, #8]
 8008556:	ebac 0205 	sub.w	r2, ip, r5
 800855a:	3a15      	subs	r2, #21
 800855c:	f022 0203 	bic.w	r2, r2, #3
 8008560:	3204      	adds	r2, #4
 8008562:	f105 0115 	add.w	r1, r5, #21
 8008566:	458c      	cmp	ip, r1
 8008568:	bf38      	it	cc
 800856a:	2204      	movcc	r2, #4
 800856c:	9201      	str	r2, [sp, #4]
 800856e:	9a02      	ldr	r2, [sp, #8]
 8008570:	9303      	str	r3, [sp, #12]
 8008572:	429a      	cmp	r2, r3
 8008574:	d808      	bhi.n	8008588 <__multiply+0x98>
 8008576:	2f00      	cmp	r7, #0
 8008578:	dc55      	bgt.n	8008626 <__multiply+0x136>
 800857a:	6107      	str	r7, [r0, #16]
 800857c:	b005      	add	sp, #20
 800857e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008582:	f843 2b04 	str.w	r2, [r3], #4
 8008586:	e7db      	b.n	8008540 <__multiply+0x50>
 8008588:	f8b3 a000 	ldrh.w	sl, [r3]
 800858c:	f1ba 0f00 	cmp.w	sl, #0
 8008590:	d020      	beq.n	80085d4 <__multiply+0xe4>
 8008592:	f105 0e14 	add.w	lr, r5, #20
 8008596:	46b1      	mov	r9, r6
 8008598:	2200      	movs	r2, #0
 800859a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800859e:	f8d9 b000 	ldr.w	fp, [r9]
 80085a2:	b2a1      	uxth	r1, r4
 80085a4:	fa1f fb8b 	uxth.w	fp, fp
 80085a8:	fb0a b101 	mla	r1, sl, r1, fp
 80085ac:	4411      	add	r1, r2
 80085ae:	f8d9 2000 	ldr.w	r2, [r9]
 80085b2:	0c24      	lsrs	r4, r4, #16
 80085b4:	0c12      	lsrs	r2, r2, #16
 80085b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80085ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80085be:	b289      	uxth	r1, r1
 80085c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80085c4:	45f4      	cmp	ip, lr
 80085c6:	f849 1b04 	str.w	r1, [r9], #4
 80085ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80085ce:	d8e4      	bhi.n	800859a <__multiply+0xaa>
 80085d0:	9901      	ldr	r1, [sp, #4]
 80085d2:	5072      	str	r2, [r6, r1]
 80085d4:	9a03      	ldr	r2, [sp, #12]
 80085d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085da:	3304      	adds	r3, #4
 80085dc:	f1b9 0f00 	cmp.w	r9, #0
 80085e0:	d01f      	beq.n	8008622 <__multiply+0x132>
 80085e2:	6834      	ldr	r4, [r6, #0]
 80085e4:	f105 0114 	add.w	r1, r5, #20
 80085e8:	46b6      	mov	lr, r6
 80085ea:	f04f 0a00 	mov.w	sl, #0
 80085ee:	880a      	ldrh	r2, [r1, #0]
 80085f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80085f4:	fb09 b202 	mla	r2, r9, r2, fp
 80085f8:	4492      	add	sl, r2
 80085fa:	b2a4      	uxth	r4, r4
 80085fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008600:	f84e 4b04 	str.w	r4, [lr], #4
 8008604:	f851 4b04 	ldr.w	r4, [r1], #4
 8008608:	f8be 2000 	ldrh.w	r2, [lr]
 800860c:	0c24      	lsrs	r4, r4, #16
 800860e:	fb09 2404 	mla	r4, r9, r4, r2
 8008612:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008616:	458c      	cmp	ip, r1
 8008618:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800861c:	d8e7      	bhi.n	80085ee <__multiply+0xfe>
 800861e:	9a01      	ldr	r2, [sp, #4]
 8008620:	50b4      	str	r4, [r6, r2]
 8008622:	3604      	adds	r6, #4
 8008624:	e7a3      	b.n	800856e <__multiply+0x7e>
 8008626:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1a5      	bne.n	800857a <__multiply+0x8a>
 800862e:	3f01      	subs	r7, #1
 8008630:	e7a1      	b.n	8008576 <__multiply+0x86>
 8008632:	bf00      	nop
 8008634:	08009233 	.word	0x08009233
 8008638:	080092a4 	.word	0x080092a4

0800863c <__pow5mult>:
 800863c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008640:	4615      	mov	r5, r2
 8008642:	f012 0203 	ands.w	r2, r2, #3
 8008646:	4606      	mov	r6, r0
 8008648:	460f      	mov	r7, r1
 800864a:	d007      	beq.n	800865c <__pow5mult+0x20>
 800864c:	4c25      	ldr	r4, [pc, #148]	; (80086e4 <__pow5mult+0xa8>)
 800864e:	3a01      	subs	r2, #1
 8008650:	2300      	movs	r3, #0
 8008652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008656:	f7ff fe9b 	bl	8008390 <__multadd>
 800865a:	4607      	mov	r7, r0
 800865c:	10ad      	asrs	r5, r5, #2
 800865e:	d03d      	beq.n	80086dc <__pow5mult+0xa0>
 8008660:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008662:	b97c      	cbnz	r4, 8008684 <__pow5mult+0x48>
 8008664:	2010      	movs	r0, #16
 8008666:	f7fd fee3 	bl	8006430 <malloc>
 800866a:	4602      	mov	r2, r0
 800866c:	6270      	str	r0, [r6, #36]	; 0x24
 800866e:	b928      	cbnz	r0, 800867c <__pow5mult+0x40>
 8008670:	4b1d      	ldr	r3, [pc, #116]	; (80086e8 <__pow5mult+0xac>)
 8008672:	481e      	ldr	r0, [pc, #120]	; (80086ec <__pow5mult+0xb0>)
 8008674:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008678:	f000 fbac 	bl	8008dd4 <__assert_func>
 800867c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008680:	6004      	str	r4, [r0, #0]
 8008682:	60c4      	str	r4, [r0, #12]
 8008684:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800868c:	b94c      	cbnz	r4, 80086a2 <__pow5mult+0x66>
 800868e:	f240 2171 	movw	r1, #625	; 0x271
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff ff16 	bl	80084c4 <__i2b>
 8008698:	2300      	movs	r3, #0
 800869a:	f8c8 0008 	str.w	r0, [r8, #8]
 800869e:	4604      	mov	r4, r0
 80086a0:	6003      	str	r3, [r0, #0]
 80086a2:	f04f 0900 	mov.w	r9, #0
 80086a6:	07eb      	lsls	r3, r5, #31
 80086a8:	d50a      	bpl.n	80086c0 <__pow5mult+0x84>
 80086aa:	4639      	mov	r1, r7
 80086ac:	4622      	mov	r2, r4
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7ff ff1e 	bl	80084f0 <__multiply>
 80086b4:	4639      	mov	r1, r7
 80086b6:	4680      	mov	r8, r0
 80086b8:	4630      	mov	r0, r6
 80086ba:	f7ff fe47 	bl	800834c <_Bfree>
 80086be:	4647      	mov	r7, r8
 80086c0:	106d      	asrs	r5, r5, #1
 80086c2:	d00b      	beq.n	80086dc <__pow5mult+0xa0>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	b938      	cbnz	r0, 80086d8 <__pow5mult+0x9c>
 80086c8:	4622      	mov	r2, r4
 80086ca:	4621      	mov	r1, r4
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7ff ff0f 	bl	80084f0 <__multiply>
 80086d2:	6020      	str	r0, [r4, #0]
 80086d4:	f8c0 9000 	str.w	r9, [r0]
 80086d8:	4604      	mov	r4, r0
 80086da:	e7e4      	b.n	80086a6 <__pow5mult+0x6a>
 80086dc:	4638      	mov	r0, r7
 80086de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e2:	bf00      	nop
 80086e4:	080093f8 	.word	0x080093f8
 80086e8:	080091bd 	.word	0x080091bd
 80086ec:	080092a4 	.word	0x080092a4

080086f0 <__lshift>:
 80086f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	460c      	mov	r4, r1
 80086f6:	6849      	ldr	r1, [r1, #4]
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086fe:	68a3      	ldr	r3, [r4, #8]
 8008700:	4607      	mov	r7, r0
 8008702:	4691      	mov	r9, r2
 8008704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008708:	f108 0601 	add.w	r6, r8, #1
 800870c:	42b3      	cmp	r3, r6
 800870e:	db0b      	blt.n	8008728 <__lshift+0x38>
 8008710:	4638      	mov	r0, r7
 8008712:	f7ff fddb 	bl	80082cc <_Balloc>
 8008716:	4605      	mov	r5, r0
 8008718:	b948      	cbnz	r0, 800872e <__lshift+0x3e>
 800871a:	4602      	mov	r2, r0
 800871c:	4b28      	ldr	r3, [pc, #160]	; (80087c0 <__lshift+0xd0>)
 800871e:	4829      	ldr	r0, [pc, #164]	; (80087c4 <__lshift+0xd4>)
 8008720:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008724:	f000 fb56 	bl	8008dd4 <__assert_func>
 8008728:	3101      	adds	r1, #1
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	e7ee      	b.n	800870c <__lshift+0x1c>
 800872e:	2300      	movs	r3, #0
 8008730:	f100 0114 	add.w	r1, r0, #20
 8008734:	f100 0210 	add.w	r2, r0, #16
 8008738:	4618      	mov	r0, r3
 800873a:	4553      	cmp	r3, sl
 800873c:	db33      	blt.n	80087a6 <__lshift+0xb6>
 800873e:	6920      	ldr	r0, [r4, #16]
 8008740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008744:	f104 0314 	add.w	r3, r4, #20
 8008748:	f019 091f 	ands.w	r9, r9, #31
 800874c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008750:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008754:	d02b      	beq.n	80087ae <__lshift+0xbe>
 8008756:	f1c9 0e20 	rsb	lr, r9, #32
 800875a:	468a      	mov	sl, r1
 800875c:	2200      	movs	r2, #0
 800875e:	6818      	ldr	r0, [r3, #0]
 8008760:	fa00 f009 	lsl.w	r0, r0, r9
 8008764:	4302      	orrs	r2, r0
 8008766:	f84a 2b04 	str.w	r2, [sl], #4
 800876a:	f853 2b04 	ldr.w	r2, [r3], #4
 800876e:	459c      	cmp	ip, r3
 8008770:	fa22 f20e 	lsr.w	r2, r2, lr
 8008774:	d8f3      	bhi.n	800875e <__lshift+0x6e>
 8008776:	ebac 0304 	sub.w	r3, ip, r4
 800877a:	3b15      	subs	r3, #21
 800877c:	f023 0303 	bic.w	r3, r3, #3
 8008780:	3304      	adds	r3, #4
 8008782:	f104 0015 	add.w	r0, r4, #21
 8008786:	4584      	cmp	ip, r0
 8008788:	bf38      	it	cc
 800878a:	2304      	movcc	r3, #4
 800878c:	50ca      	str	r2, [r1, r3]
 800878e:	b10a      	cbz	r2, 8008794 <__lshift+0xa4>
 8008790:	f108 0602 	add.w	r6, r8, #2
 8008794:	3e01      	subs	r6, #1
 8008796:	4638      	mov	r0, r7
 8008798:	612e      	str	r6, [r5, #16]
 800879a:	4621      	mov	r1, r4
 800879c:	f7ff fdd6 	bl	800834c <_Bfree>
 80087a0:	4628      	mov	r0, r5
 80087a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80087aa:	3301      	adds	r3, #1
 80087ac:	e7c5      	b.n	800873a <__lshift+0x4a>
 80087ae:	3904      	subs	r1, #4
 80087b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80087b8:	459c      	cmp	ip, r3
 80087ba:	d8f9      	bhi.n	80087b0 <__lshift+0xc0>
 80087bc:	e7ea      	b.n	8008794 <__lshift+0xa4>
 80087be:	bf00      	nop
 80087c0:	08009233 	.word	0x08009233
 80087c4:	080092a4 	.word	0x080092a4

080087c8 <__mcmp>:
 80087c8:	b530      	push	{r4, r5, lr}
 80087ca:	6902      	ldr	r2, [r0, #16]
 80087cc:	690c      	ldr	r4, [r1, #16]
 80087ce:	1b12      	subs	r2, r2, r4
 80087d0:	d10e      	bne.n	80087f0 <__mcmp+0x28>
 80087d2:	f100 0314 	add.w	r3, r0, #20
 80087d6:	3114      	adds	r1, #20
 80087d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087e8:	42a5      	cmp	r5, r4
 80087ea:	d003      	beq.n	80087f4 <__mcmp+0x2c>
 80087ec:	d305      	bcc.n	80087fa <__mcmp+0x32>
 80087ee:	2201      	movs	r2, #1
 80087f0:	4610      	mov	r0, r2
 80087f2:	bd30      	pop	{r4, r5, pc}
 80087f4:	4283      	cmp	r3, r0
 80087f6:	d3f3      	bcc.n	80087e0 <__mcmp+0x18>
 80087f8:	e7fa      	b.n	80087f0 <__mcmp+0x28>
 80087fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087fe:	e7f7      	b.n	80087f0 <__mcmp+0x28>

08008800 <__mdiff>:
 8008800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	460c      	mov	r4, r1
 8008806:	4606      	mov	r6, r0
 8008808:	4611      	mov	r1, r2
 800880a:	4620      	mov	r0, r4
 800880c:	4617      	mov	r7, r2
 800880e:	f7ff ffdb 	bl	80087c8 <__mcmp>
 8008812:	1e05      	subs	r5, r0, #0
 8008814:	d110      	bne.n	8008838 <__mdiff+0x38>
 8008816:	4629      	mov	r1, r5
 8008818:	4630      	mov	r0, r6
 800881a:	f7ff fd57 	bl	80082cc <_Balloc>
 800881e:	b930      	cbnz	r0, 800882e <__mdiff+0x2e>
 8008820:	4b39      	ldr	r3, [pc, #228]	; (8008908 <__mdiff+0x108>)
 8008822:	4602      	mov	r2, r0
 8008824:	f240 2132 	movw	r1, #562	; 0x232
 8008828:	4838      	ldr	r0, [pc, #224]	; (800890c <__mdiff+0x10c>)
 800882a:	f000 fad3 	bl	8008dd4 <__assert_func>
 800882e:	2301      	movs	r3, #1
 8008830:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008838:	bfa4      	itt	ge
 800883a:	463b      	movge	r3, r7
 800883c:	4627      	movge	r7, r4
 800883e:	4630      	mov	r0, r6
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	bfa6      	itte	ge
 8008844:	461c      	movge	r4, r3
 8008846:	2500      	movge	r5, #0
 8008848:	2501      	movlt	r5, #1
 800884a:	f7ff fd3f 	bl	80082cc <_Balloc>
 800884e:	b920      	cbnz	r0, 800885a <__mdiff+0x5a>
 8008850:	4b2d      	ldr	r3, [pc, #180]	; (8008908 <__mdiff+0x108>)
 8008852:	4602      	mov	r2, r0
 8008854:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008858:	e7e6      	b.n	8008828 <__mdiff+0x28>
 800885a:	693e      	ldr	r6, [r7, #16]
 800885c:	60c5      	str	r5, [r0, #12]
 800885e:	6925      	ldr	r5, [r4, #16]
 8008860:	f107 0114 	add.w	r1, r7, #20
 8008864:	f104 0914 	add.w	r9, r4, #20
 8008868:	f100 0e14 	add.w	lr, r0, #20
 800886c:	f107 0210 	add.w	r2, r7, #16
 8008870:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008874:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008878:	46f2      	mov	sl, lr
 800887a:	2700      	movs	r7, #0
 800887c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008884:	fa1f f883 	uxth.w	r8, r3
 8008888:	fa17 f78b 	uxtah	r7, r7, fp
 800888c:	0c1b      	lsrs	r3, r3, #16
 800888e:	eba7 0808 	sub.w	r8, r7, r8
 8008892:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008896:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800889a:	fa1f f888 	uxth.w	r8, r8
 800889e:	141f      	asrs	r7, r3, #16
 80088a0:	454d      	cmp	r5, r9
 80088a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088a6:	f84a 3b04 	str.w	r3, [sl], #4
 80088aa:	d8e7      	bhi.n	800887c <__mdiff+0x7c>
 80088ac:	1b2b      	subs	r3, r5, r4
 80088ae:	3b15      	subs	r3, #21
 80088b0:	f023 0303 	bic.w	r3, r3, #3
 80088b4:	3304      	adds	r3, #4
 80088b6:	3415      	adds	r4, #21
 80088b8:	42a5      	cmp	r5, r4
 80088ba:	bf38      	it	cc
 80088bc:	2304      	movcc	r3, #4
 80088be:	4419      	add	r1, r3
 80088c0:	4473      	add	r3, lr
 80088c2:	469e      	mov	lr, r3
 80088c4:	460d      	mov	r5, r1
 80088c6:	4565      	cmp	r5, ip
 80088c8:	d30e      	bcc.n	80088e8 <__mdiff+0xe8>
 80088ca:	f10c 0203 	add.w	r2, ip, #3
 80088ce:	1a52      	subs	r2, r2, r1
 80088d0:	f022 0203 	bic.w	r2, r2, #3
 80088d4:	3903      	subs	r1, #3
 80088d6:	458c      	cmp	ip, r1
 80088d8:	bf38      	it	cc
 80088da:	2200      	movcc	r2, #0
 80088dc:	441a      	add	r2, r3
 80088de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088e2:	b17b      	cbz	r3, 8008904 <__mdiff+0x104>
 80088e4:	6106      	str	r6, [r0, #16]
 80088e6:	e7a5      	b.n	8008834 <__mdiff+0x34>
 80088e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80088ec:	fa17 f488 	uxtah	r4, r7, r8
 80088f0:	1422      	asrs	r2, r4, #16
 80088f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80088f6:	b2a4      	uxth	r4, r4
 80088f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80088fc:	f84e 4b04 	str.w	r4, [lr], #4
 8008900:	1417      	asrs	r7, r2, #16
 8008902:	e7e0      	b.n	80088c6 <__mdiff+0xc6>
 8008904:	3e01      	subs	r6, #1
 8008906:	e7ea      	b.n	80088de <__mdiff+0xde>
 8008908:	08009233 	.word	0x08009233
 800890c:	080092a4 	.word	0x080092a4

08008910 <__d2b>:
 8008910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008914:	4689      	mov	r9, r1
 8008916:	2101      	movs	r1, #1
 8008918:	ec57 6b10 	vmov	r6, r7, d0
 800891c:	4690      	mov	r8, r2
 800891e:	f7ff fcd5 	bl	80082cc <_Balloc>
 8008922:	4604      	mov	r4, r0
 8008924:	b930      	cbnz	r0, 8008934 <__d2b+0x24>
 8008926:	4602      	mov	r2, r0
 8008928:	4b25      	ldr	r3, [pc, #148]	; (80089c0 <__d2b+0xb0>)
 800892a:	4826      	ldr	r0, [pc, #152]	; (80089c4 <__d2b+0xb4>)
 800892c:	f240 310a 	movw	r1, #778	; 0x30a
 8008930:	f000 fa50 	bl	8008dd4 <__assert_func>
 8008934:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800893c:	bb35      	cbnz	r5, 800898c <__d2b+0x7c>
 800893e:	2e00      	cmp	r6, #0
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	d028      	beq.n	8008996 <__d2b+0x86>
 8008944:	4668      	mov	r0, sp
 8008946:	9600      	str	r6, [sp, #0]
 8008948:	f7ff fd8c 	bl	8008464 <__lo0bits>
 800894c:	9900      	ldr	r1, [sp, #0]
 800894e:	b300      	cbz	r0, 8008992 <__d2b+0x82>
 8008950:	9a01      	ldr	r2, [sp, #4]
 8008952:	f1c0 0320 	rsb	r3, r0, #32
 8008956:	fa02 f303 	lsl.w	r3, r2, r3
 800895a:	430b      	orrs	r3, r1
 800895c:	40c2      	lsrs	r2, r0
 800895e:	6163      	str	r3, [r4, #20]
 8008960:	9201      	str	r2, [sp, #4]
 8008962:	9b01      	ldr	r3, [sp, #4]
 8008964:	61a3      	str	r3, [r4, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	bf14      	ite	ne
 800896a:	2202      	movne	r2, #2
 800896c:	2201      	moveq	r2, #1
 800896e:	6122      	str	r2, [r4, #16]
 8008970:	b1d5      	cbz	r5, 80089a8 <__d2b+0x98>
 8008972:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008976:	4405      	add	r5, r0
 8008978:	f8c9 5000 	str.w	r5, [r9]
 800897c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008980:	f8c8 0000 	str.w	r0, [r8]
 8008984:	4620      	mov	r0, r4
 8008986:	b003      	add	sp, #12
 8008988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800898c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008990:	e7d5      	b.n	800893e <__d2b+0x2e>
 8008992:	6161      	str	r1, [r4, #20]
 8008994:	e7e5      	b.n	8008962 <__d2b+0x52>
 8008996:	a801      	add	r0, sp, #4
 8008998:	f7ff fd64 	bl	8008464 <__lo0bits>
 800899c:	9b01      	ldr	r3, [sp, #4]
 800899e:	6163      	str	r3, [r4, #20]
 80089a0:	2201      	movs	r2, #1
 80089a2:	6122      	str	r2, [r4, #16]
 80089a4:	3020      	adds	r0, #32
 80089a6:	e7e3      	b.n	8008970 <__d2b+0x60>
 80089a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089b0:	f8c9 0000 	str.w	r0, [r9]
 80089b4:	6918      	ldr	r0, [r3, #16]
 80089b6:	f7ff fd35 	bl	8008424 <__hi0bits>
 80089ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089be:	e7df      	b.n	8008980 <__d2b+0x70>
 80089c0:	08009233 	.word	0x08009233
 80089c4:	080092a4 	.word	0x080092a4

080089c8 <_calloc_r>:
 80089c8:	b513      	push	{r0, r1, r4, lr}
 80089ca:	434a      	muls	r2, r1
 80089cc:	4611      	mov	r1, r2
 80089ce:	9201      	str	r2, [sp, #4]
 80089d0:	f7fd fd8e 	bl	80064f0 <_malloc_r>
 80089d4:	4604      	mov	r4, r0
 80089d6:	b118      	cbz	r0, 80089e0 <_calloc_r+0x18>
 80089d8:	9a01      	ldr	r2, [sp, #4]
 80089da:	2100      	movs	r1, #0
 80089dc:	f7fd fd30 	bl	8006440 <memset>
 80089e0:	4620      	mov	r0, r4
 80089e2:	b002      	add	sp, #8
 80089e4:	bd10      	pop	{r4, pc}

080089e6 <__sfputc_r>:
 80089e6:	6893      	ldr	r3, [r2, #8]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	b410      	push	{r4}
 80089ee:	6093      	str	r3, [r2, #8]
 80089f0:	da08      	bge.n	8008a04 <__sfputc_r+0x1e>
 80089f2:	6994      	ldr	r4, [r2, #24]
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	db01      	blt.n	80089fc <__sfputc_r+0x16>
 80089f8:	290a      	cmp	r1, #10
 80089fa:	d103      	bne.n	8008a04 <__sfputc_r+0x1e>
 80089fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a00:	f7fe baee 	b.w	8006fe0 <__swbuf_r>
 8008a04:	6813      	ldr	r3, [r2, #0]
 8008a06:	1c58      	adds	r0, r3, #1
 8008a08:	6010      	str	r0, [r2, #0]
 8008a0a:	7019      	strb	r1, [r3, #0]
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <__sfputs_r>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	4614      	mov	r4, r2
 8008a1c:	18d5      	adds	r5, r2, r3
 8008a1e:	42ac      	cmp	r4, r5
 8008a20:	d101      	bne.n	8008a26 <__sfputs_r+0x12>
 8008a22:	2000      	movs	r0, #0
 8008a24:	e007      	b.n	8008a36 <__sfputs_r+0x22>
 8008a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f7ff ffda 	bl	80089e6 <__sfputc_r>
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d1f3      	bne.n	8008a1e <__sfputs_r+0xa>
 8008a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a38 <_vfiprintf_r>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	460d      	mov	r5, r1
 8008a3e:	b09d      	sub	sp, #116	; 0x74
 8008a40:	4614      	mov	r4, r2
 8008a42:	4698      	mov	r8, r3
 8008a44:	4606      	mov	r6, r0
 8008a46:	b118      	cbz	r0, 8008a50 <_vfiprintf_r+0x18>
 8008a48:	6983      	ldr	r3, [r0, #24]
 8008a4a:	b90b      	cbnz	r3, 8008a50 <_vfiprintf_r+0x18>
 8008a4c:	f7ff fb1a 	bl	8008084 <__sinit>
 8008a50:	4b89      	ldr	r3, [pc, #548]	; (8008c78 <_vfiprintf_r+0x240>)
 8008a52:	429d      	cmp	r5, r3
 8008a54:	d11b      	bne.n	8008a8e <_vfiprintf_r+0x56>
 8008a56:	6875      	ldr	r5, [r6, #4]
 8008a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a5a:	07d9      	lsls	r1, r3, #31
 8008a5c:	d405      	bmi.n	8008a6a <_vfiprintf_r+0x32>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	059a      	lsls	r2, r3, #22
 8008a62:	d402      	bmi.n	8008a6a <_vfiprintf_r+0x32>
 8008a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a66:	f7ff fbb0 	bl	80081ca <__retarget_lock_acquire_recursive>
 8008a6a:	89ab      	ldrh	r3, [r5, #12]
 8008a6c:	071b      	lsls	r3, r3, #28
 8008a6e:	d501      	bpl.n	8008a74 <_vfiprintf_r+0x3c>
 8008a70:	692b      	ldr	r3, [r5, #16]
 8008a72:	b9eb      	cbnz	r3, 8008ab0 <_vfiprintf_r+0x78>
 8008a74:	4629      	mov	r1, r5
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7fe fb04 	bl	8007084 <__swsetup_r>
 8008a7c:	b1c0      	cbz	r0, 8008ab0 <_vfiprintf_r+0x78>
 8008a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a80:	07dc      	lsls	r4, r3, #31
 8008a82:	d50e      	bpl.n	8008aa2 <_vfiprintf_r+0x6a>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a88:	b01d      	add	sp, #116	; 0x74
 8008a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8e:	4b7b      	ldr	r3, [pc, #492]	; (8008c7c <_vfiprintf_r+0x244>)
 8008a90:	429d      	cmp	r5, r3
 8008a92:	d101      	bne.n	8008a98 <_vfiprintf_r+0x60>
 8008a94:	68b5      	ldr	r5, [r6, #8]
 8008a96:	e7df      	b.n	8008a58 <_vfiprintf_r+0x20>
 8008a98:	4b79      	ldr	r3, [pc, #484]	; (8008c80 <_vfiprintf_r+0x248>)
 8008a9a:	429d      	cmp	r5, r3
 8008a9c:	bf08      	it	eq
 8008a9e:	68f5      	ldreq	r5, [r6, #12]
 8008aa0:	e7da      	b.n	8008a58 <_vfiprintf_r+0x20>
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	0598      	lsls	r0, r3, #22
 8008aa6:	d4ed      	bmi.n	8008a84 <_vfiprintf_r+0x4c>
 8008aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aaa:	f7ff fb8f 	bl	80081cc <__retarget_lock_release_recursive>
 8008aae:	e7e9      	b.n	8008a84 <_vfiprintf_r+0x4c>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008abe:	2330      	movs	r3, #48	; 0x30
 8008ac0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c84 <_vfiprintf_r+0x24c>
 8008ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ac8:	f04f 0901 	mov.w	r9, #1
 8008acc:	4623      	mov	r3, r4
 8008ace:	469a      	mov	sl, r3
 8008ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad4:	b10a      	cbz	r2, 8008ada <_vfiprintf_r+0xa2>
 8008ad6:	2a25      	cmp	r2, #37	; 0x25
 8008ad8:	d1f9      	bne.n	8008ace <_vfiprintf_r+0x96>
 8008ada:	ebba 0b04 	subs.w	fp, sl, r4
 8008ade:	d00b      	beq.n	8008af8 <_vfiprintf_r+0xc0>
 8008ae0:	465b      	mov	r3, fp
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7ff ff94 	bl	8008a14 <__sfputs_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	f000 80aa 	beq.w	8008c46 <_vfiprintf_r+0x20e>
 8008af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af4:	445a      	add	r2, fp
 8008af6:	9209      	str	r2, [sp, #36]	; 0x24
 8008af8:	f89a 3000 	ldrb.w	r3, [sl]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 80a2 	beq.w	8008c46 <_vfiprintf_r+0x20e>
 8008b02:	2300      	movs	r3, #0
 8008b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b0c:	f10a 0a01 	add.w	sl, sl, #1
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	9307      	str	r3, [sp, #28]
 8008b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b18:	931a      	str	r3, [sp, #104]	; 0x68
 8008b1a:	4654      	mov	r4, sl
 8008b1c:	2205      	movs	r2, #5
 8008b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b22:	4858      	ldr	r0, [pc, #352]	; (8008c84 <_vfiprintf_r+0x24c>)
 8008b24:	f7f7 fb84 	bl	8000230 <memchr>
 8008b28:	9a04      	ldr	r2, [sp, #16]
 8008b2a:	b9d8      	cbnz	r0, 8008b64 <_vfiprintf_r+0x12c>
 8008b2c:	06d1      	lsls	r1, r2, #27
 8008b2e:	bf44      	itt	mi
 8008b30:	2320      	movmi	r3, #32
 8008b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b36:	0713      	lsls	r3, r2, #28
 8008b38:	bf44      	itt	mi
 8008b3a:	232b      	movmi	r3, #43	; 0x2b
 8008b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b40:	f89a 3000 	ldrb.w	r3, [sl]
 8008b44:	2b2a      	cmp	r3, #42	; 0x2a
 8008b46:	d015      	beq.n	8008b74 <_vfiprintf_r+0x13c>
 8008b48:	9a07      	ldr	r2, [sp, #28]
 8008b4a:	4654      	mov	r4, sl
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	f04f 0c0a 	mov.w	ip, #10
 8008b52:	4621      	mov	r1, r4
 8008b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b58:	3b30      	subs	r3, #48	; 0x30
 8008b5a:	2b09      	cmp	r3, #9
 8008b5c:	d94e      	bls.n	8008bfc <_vfiprintf_r+0x1c4>
 8008b5e:	b1b0      	cbz	r0, 8008b8e <_vfiprintf_r+0x156>
 8008b60:	9207      	str	r2, [sp, #28]
 8008b62:	e014      	b.n	8008b8e <_vfiprintf_r+0x156>
 8008b64:	eba0 0308 	sub.w	r3, r0, r8
 8008b68:	fa09 f303 	lsl.w	r3, r9, r3
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	46a2      	mov	sl, r4
 8008b72:	e7d2      	b.n	8008b1a <_vfiprintf_r+0xe2>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	1d19      	adds	r1, r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	9103      	str	r1, [sp, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	bfbb      	ittet	lt
 8008b80:	425b      	neglt	r3, r3
 8008b82:	f042 0202 	orrlt.w	r2, r2, #2
 8008b86:	9307      	strge	r3, [sp, #28]
 8008b88:	9307      	strlt	r3, [sp, #28]
 8008b8a:	bfb8      	it	lt
 8008b8c:	9204      	strlt	r2, [sp, #16]
 8008b8e:	7823      	ldrb	r3, [r4, #0]
 8008b90:	2b2e      	cmp	r3, #46	; 0x2e
 8008b92:	d10c      	bne.n	8008bae <_vfiprintf_r+0x176>
 8008b94:	7863      	ldrb	r3, [r4, #1]
 8008b96:	2b2a      	cmp	r3, #42	; 0x2a
 8008b98:	d135      	bne.n	8008c06 <_vfiprintf_r+0x1ce>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	1d1a      	adds	r2, r3, #4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	9203      	str	r2, [sp, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bfb8      	it	lt
 8008ba6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008baa:	3402      	adds	r4, #2
 8008bac:	9305      	str	r3, [sp, #20]
 8008bae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c94 <_vfiprintf_r+0x25c>
 8008bb2:	7821      	ldrb	r1, [r4, #0]
 8008bb4:	2203      	movs	r2, #3
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	f7f7 fb3a 	bl	8000230 <memchr>
 8008bbc:	b140      	cbz	r0, 8008bd0 <_vfiprintf_r+0x198>
 8008bbe:	2340      	movs	r3, #64	; 0x40
 8008bc0:	eba0 000a 	sub.w	r0, r0, sl
 8008bc4:	fa03 f000 	lsl.w	r0, r3, r0
 8008bc8:	9b04      	ldr	r3, [sp, #16]
 8008bca:	4303      	orrs	r3, r0
 8008bcc:	3401      	adds	r4, #1
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd4:	482c      	ldr	r0, [pc, #176]	; (8008c88 <_vfiprintf_r+0x250>)
 8008bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bda:	2206      	movs	r2, #6
 8008bdc:	f7f7 fb28 	bl	8000230 <memchr>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d03f      	beq.n	8008c64 <_vfiprintf_r+0x22c>
 8008be4:	4b29      	ldr	r3, [pc, #164]	; (8008c8c <_vfiprintf_r+0x254>)
 8008be6:	bb1b      	cbnz	r3, 8008c30 <_vfiprintf_r+0x1f8>
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	3307      	adds	r3, #7
 8008bec:	f023 0307 	bic.w	r3, r3, #7
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	9303      	str	r3, [sp, #12]
 8008bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf6:	443b      	add	r3, r7
 8008bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfa:	e767      	b.n	8008acc <_vfiprintf_r+0x94>
 8008bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c00:	460c      	mov	r4, r1
 8008c02:	2001      	movs	r0, #1
 8008c04:	e7a5      	b.n	8008b52 <_vfiprintf_r+0x11a>
 8008c06:	2300      	movs	r3, #0
 8008c08:	3401      	adds	r4, #1
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	f04f 0c0a 	mov.w	ip, #10
 8008c12:	4620      	mov	r0, r4
 8008c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c18:	3a30      	subs	r2, #48	; 0x30
 8008c1a:	2a09      	cmp	r2, #9
 8008c1c:	d903      	bls.n	8008c26 <_vfiprintf_r+0x1ee>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0c5      	beq.n	8008bae <_vfiprintf_r+0x176>
 8008c22:	9105      	str	r1, [sp, #20]
 8008c24:	e7c3      	b.n	8008bae <_vfiprintf_r+0x176>
 8008c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e7f0      	b.n	8008c12 <_vfiprintf_r+0x1da>
 8008c30:	ab03      	add	r3, sp, #12
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	462a      	mov	r2, r5
 8008c36:	4b16      	ldr	r3, [pc, #88]	; (8008c90 <_vfiprintf_r+0x258>)
 8008c38:	a904      	add	r1, sp, #16
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7fd fd52 	bl	80066e4 <_printf_float>
 8008c40:	4607      	mov	r7, r0
 8008c42:	1c78      	adds	r0, r7, #1
 8008c44:	d1d6      	bne.n	8008bf4 <_vfiprintf_r+0x1bc>
 8008c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c48:	07d9      	lsls	r1, r3, #31
 8008c4a:	d405      	bmi.n	8008c58 <_vfiprintf_r+0x220>
 8008c4c:	89ab      	ldrh	r3, [r5, #12]
 8008c4e:	059a      	lsls	r2, r3, #22
 8008c50:	d402      	bmi.n	8008c58 <_vfiprintf_r+0x220>
 8008c52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c54:	f7ff faba 	bl	80081cc <__retarget_lock_release_recursive>
 8008c58:	89ab      	ldrh	r3, [r5, #12]
 8008c5a:	065b      	lsls	r3, r3, #25
 8008c5c:	f53f af12 	bmi.w	8008a84 <_vfiprintf_r+0x4c>
 8008c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c62:	e711      	b.n	8008a88 <_vfiprintf_r+0x50>
 8008c64:	ab03      	add	r3, sp, #12
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	462a      	mov	r2, r5
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <_vfiprintf_r+0x258>)
 8008c6c:	a904      	add	r1, sp, #16
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f7fd ffdc 	bl	8006c2c <_printf_i>
 8008c74:	e7e4      	b.n	8008c40 <_vfiprintf_r+0x208>
 8008c76:	bf00      	nop
 8008c78:	08009264 	.word	0x08009264
 8008c7c:	08009284 	.word	0x08009284
 8008c80:	08009244 	.word	0x08009244
 8008c84:	08009404 	.word	0x08009404
 8008c88:	0800940e 	.word	0x0800940e
 8008c8c:	080066e5 	.word	0x080066e5
 8008c90:	08008a15 	.word	0x08008a15
 8008c94:	0800940a 	.word	0x0800940a

08008c98 <_putc_r>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	b118      	cbz	r0, 8008caa <_putc_r+0x12>
 8008ca2:	6983      	ldr	r3, [r0, #24]
 8008ca4:	b90b      	cbnz	r3, 8008caa <_putc_r+0x12>
 8008ca6:	f7ff f9ed 	bl	8008084 <__sinit>
 8008caa:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <_putc_r+0x84>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	d124      	bne.n	8008cfa <_putc_r+0x62>
 8008cb0:	6874      	ldr	r4, [r6, #4]
 8008cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cb4:	07d8      	lsls	r0, r3, #31
 8008cb6:	d405      	bmi.n	8008cc4 <_putc_r+0x2c>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	0599      	lsls	r1, r3, #22
 8008cbc:	d402      	bmi.n	8008cc4 <_putc_r+0x2c>
 8008cbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cc0:	f7ff fa83 	bl	80081ca <__retarget_lock_acquire_recursive>
 8008cc4:	68a3      	ldr	r3, [r4, #8]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	60a3      	str	r3, [r4, #8]
 8008ccc:	da05      	bge.n	8008cda <_putc_r+0x42>
 8008cce:	69a2      	ldr	r2, [r4, #24]
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	db1c      	blt.n	8008d0e <_putc_r+0x76>
 8008cd4:	b2eb      	uxtb	r3, r5
 8008cd6:	2b0a      	cmp	r3, #10
 8008cd8:	d019      	beq.n	8008d0e <_putc_r+0x76>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	6022      	str	r2, [r4, #0]
 8008ce0:	701d      	strb	r5, [r3, #0]
 8008ce2:	b2ed      	uxtb	r5, r5
 8008ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ce6:	07da      	lsls	r2, r3, #31
 8008ce8:	d405      	bmi.n	8008cf6 <_putc_r+0x5e>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	059b      	lsls	r3, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <_putc_r+0x5e>
 8008cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cf2:	f7ff fa6b 	bl	80081cc <__retarget_lock_release_recursive>
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	bd70      	pop	{r4, r5, r6, pc}
 8008cfa:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <_putc_r+0x88>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	d101      	bne.n	8008d04 <_putc_r+0x6c>
 8008d00:	68b4      	ldr	r4, [r6, #8]
 8008d02:	e7d6      	b.n	8008cb2 <_putc_r+0x1a>
 8008d04:	4b07      	ldr	r3, [pc, #28]	; (8008d24 <_putc_r+0x8c>)
 8008d06:	429c      	cmp	r4, r3
 8008d08:	bf08      	it	eq
 8008d0a:	68f4      	ldreq	r4, [r6, #12]
 8008d0c:	e7d1      	b.n	8008cb2 <_putc_r+0x1a>
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4622      	mov	r2, r4
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7fe f964 	bl	8006fe0 <__swbuf_r>
 8008d18:	4605      	mov	r5, r0
 8008d1a:	e7e3      	b.n	8008ce4 <_putc_r+0x4c>
 8008d1c:	08009264 	.word	0x08009264
 8008d20:	08009284 	.word	0x08009284
 8008d24:	08009244 	.word	0x08009244

08008d28 <__sread>:
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d30:	f000 f8d6 	bl	8008ee0 <_read_r>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	bfab      	itete	ge
 8008d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d3c:	181b      	addge	r3, r3, r0
 8008d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d42:	bfac      	ite	ge
 8008d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d46:	81a3      	strhlt	r3, [r4, #12]
 8008d48:	bd10      	pop	{r4, pc}

08008d4a <__swrite>:
 8008d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4e:	461f      	mov	r7, r3
 8008d50:	898b      	ldrh	r3, [r1, #12]
 8008d52:	05db      	lsls	r3, r3, #23
 8008d54:	4605      	mov	r5, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	4616      	mov	r6, r2
 8008d5a:	d505      	bpl.n	8008d68 <__swrite+0x1e>
 8008d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d60:	2302      	movs	r3, #2
 8008d62:	2200      	movs	r2, #0
 8008d64:	f000 f898 	bl	8008e98 <_lseek_r>
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d72:	81a3      	strh	r3, [r4, #12]
 8008d74:	4632      	mov	r2, r6
 8008d76:	463b      	mov	r3, r7
 8008d78:	4628      	mov	r0, r5
 8008d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7e:	f000 b817 	b.w	8008db0 <_write_r>

08008d82 <__sseek>:
 8008d82:	b510      	push	{r4, lr}
 8008d84:	460c      	mov	r4, r1
 8008d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8a:	f000 f885 	bl	8008e98 <_lseek_r>
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	bf15      	itete	ne
 8008d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d9e:	81a3      	strheq	r3, [r4, #12]
 8008da0:	bf18      	it	ne
 8008da2:	81a3      	strhne	r3, [r4, #12]
 8008da4:	bd10      	pop	{r4, pc}

08008da6 <__sclose>:
 8008da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008daa:	f000 b831 	b.w	8008e10 <_close_r>
	...

08008db0 <_write_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d07      	ldr	r5, [pc, #28]	; (8008dd0 <_write_r+0x20>)
 8008db4:	4604      	mov	r4, r0
 8008db6:	4608      	mov	r0, r1
 8008db8:	4611      	mov	r1, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	602a      	str	r2, [r5, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f7f8 fc79 	bl	80016b6 <_write>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_write_r+0x1e>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_write_r+0x1e>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	20000454 	.word	0x20000454

08008dd4 <__assert_func>:
 8008dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dd6:	4614      	mov	r4, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <__assert_func+0x2c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4605      	mov	r5, r0
 8008de0:	68d8      	ldr	r0, [r3, #12]
 8008de2:	b14c      	cbz	r4, 8008df8 <__assert_func+0x24>
 8008de4:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <__assert_func+0x30>)
 8008de6:	9100      	str	r1, [sp, #0]
 8008de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dec:	4906      	ldr	r1, [pc, #24]	; (8008e08 <__assert_func+0x34>)
 8008dee:	462b      	mov	r3, r5
 8008df0:	f000 f81e 	bl	8008e30 <fiprintf>
 8008df4:	f000 f893 	bl	8008f1e <abort>
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <__assert_func+0x38>)
 8008dfa:	461c      	mov	r4, r3
 8008dfc:	e7f3      	b.n	8008de6 <__assert_func+0x12>
 8008dfe:	bf00      	nop
 8008e00:	2000000c 	.word	0x2000000c
 8008e04:	08009415 	.word	0x08009415
 8008e08:	08009422 	.word	0x08009422
 8008e0c:	08009450 	.word	0x08009450

08008e10 <_close_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d06      	ldr	r5, [pc, #24]	; (8008e2c <_close_r+0x1c>)
 8008e14:	2300      	movs	r3, #0
 8008e16:	4604      	mov	r4, r0
 8008e18:	4608      	mov	r0, r1
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	f7f8 ff31 	bl	8001c82 <_close>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_close_r+0x1a>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_close_r+0x1a>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20000454 	.word	0x20000454

08008e30 <fiprintf>:
 8008e30:	b40e      	push	{r1, r2, r3}
 8008e32:	b503      	push	{r0, r1, lr}
 8008e34:	4601      	mov	r1, r0
 8008e36:	ab03      	add	r3, sp, #12
 8008e38:	4805      	ldr	r0, [pc, #20]	; (8008e50 <fiprintf+0x20>)
 8008e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3e:	6800      	ldr	r0, [r0, #0]
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	f7ff fdf9 	bl	8008a38 <_vfiprintf_r>
 8008e46:	b002      	add	sp, #8
 8008e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e4c:	b003      	add	sp, #12
 8008e4e:	4770      	bx	lr
 8008e50:	2000000c 	.word	0x2000000c

08008e54 <_fstat_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d07      	ldr	r5, [pc, #28]	; (8008e74 <_fstat_r+0x20>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	4611      	mov	r1, r2
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	f7f8 ff1a 	bl	8001c9a <_fstat>
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	d102      	bne.n	8008e70 <_fstat_r+0x1c>
 8008e6a:	682b      	ldr	r3, [r5, #0]
 8008e6c:	b103      	cbz	r3, 8008e70 <_fstat_r+0x1c>
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	bd38      	pop	{r3, r4, r5, pc}
 8008e72:	bf00      	nop
 8008e74:	20000454 	.word	0x20000454

08008e78 <_isatty_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	; (8008e94 <_isatty_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f8 ff19 	bl	8001cba <_isatty>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_isatty_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_isatty_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20000454 	.word	0x20000454

08008e98 <_lseek_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	4d07      	ldr	r5, [pc, #28]	; (8008eb8 <_lseek_r+0x20>)
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	4608      	mov	r0, r1
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	602a      	str	r2, [r5, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f7f8 ff12 	bl	8001cd0 <_lseek>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	d102      	bne.n	8008eb6 <_lseek_r+0x1e>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	b103      	cbz	r3, 8008eb6 <_lseek_r+0x1e>
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	20000454 	.word	0x20000454

08008ebc <__ascii_mbtowc>:
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	b901      	cbnz	r1, 8008ec2 <__ascii_mbtowc+0x6>
 8008ec0:	a901      	add	r1, sp, #4
 8008ec2:	b142      	cbz	r2, 8008ed6 <__ascii_mbtowc+0x1a>
 8008ec4:	b14b      	cbz	r3, 8008eda <__ascii_mbtowc+0x1e>
 8008ec6:	7813      	ldrb	r3, [r2, #0]
 8008ec8:	600b      	str	r3, [r1, #0]
 8008eca:	7812      	ldrb	r2, [r2, #0]
 8008ecc:	1e10      	subs	r0, r2, #0
 8008ece:	bf18      	it	ne
 8008ed0:	2001      	movne	r0, #1
 8008ed2:	b002      	add	sp, #8
 8008ed4:	4770      	bx	lr
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	e7fb      	b.n	8008ed2 <__ascii_mbtowc+0x16>
 8008eda:	f06f 0001 	mvn.w	r0, #1
 8008ede:	e7f8      	b.n	8008ed2 <__ascii_mbtowc+0x16>

08008ee0 <_read_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d07      	ldr	r5, [pc, #28]	; (8008f00 <_read_r+0x20>)
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	4611      	mov	r1, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	602a      	str	r2, [r5, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f7f8 feaa 	bl	8001c48 <_read>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d102      	bne.n	8008efe <_read_r+0x1e>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	b103      	cbz	r3, 8008efe <_read_r+0x1e>
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	20000454 	.word	0x20000454

08008f04 <__ascii_wctomb>:
 8008f04:	b149      	cbz	r1, 8008f1a <__ascii_wctomb+0x16>
 8008f06:	2aff      	cmp	r2, #255	; 0xff
 8008f08:	bf85      	ittet	hi
 8008f0a:	238a      	movhi	r3, #138	; 0x8a
 8008f0c:	6003      	strhi	r3, [r0, #0]
 8008f0e:	700a      	strbls	r2, [r1, #0]
 8008f10:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008f14:	bf98      	it	ls
 8008f16:	2001      	movls	r0, #1
 8008f18:	4770      	bx	lr
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	4770      	bx	lr

08008f1e <abort>:
 8008f1e:	b508      	push	{r3, lr}
 8008f20:	2006      	movs	r0, #6
 8008f22:	f000 f82b 	bl	8008f7c <raise>
 8008f26:	2001      	movs	r0, #1
 8008f28:	f7f8 fe84 	bl	8001c34 <_exit>

08008f2c <_raise_r>:
 8008f2c:	291f      	cmp	r1, #31
 8008f2e:	b538      	push	{r3, r4, r5, lr}
 8008f30:	4604      	mov	r4, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	d904      	bls.n	8008f40 <_raise_r+0x14>
 8008f36:	2316      	movs	r3, #22
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f42:	b112      	cbz	r2, 8008f4a <_raise_r+0x1e>
 8008f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f48:	b94b      	cbnz	r3, 8008f5e <_raise_r+0x32>
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 f830 	bl	8008fb0 <_getpid_r>
 8008f50:	462a      	mov	r2, r5
 8008f52:	4601      	mov	r1, r0
 8008f54:	4620      	mov	r0, r4
 8008f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f5a:	f000 b817 	b.w	8008f8c <_kill_r>
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d00a      	beq.n	8008f78 <_raise_r+0x4c>
 8008f62:	1c59      	adds	r1, r3, #1
 8008f64:	d103      	bne.n	8008f6e <_raise_r+0x42>
 8008f66:	2316      	movs	r3, #22
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	e7e7      	b.n	8008f3e <_raise_r+0x12>
 8008f6e:	2400      	movs	r4, #0
 8008f70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f74:	4628      	mov	r0, r5
 8008f76:	4798      	blx	r3
 8008f78:	2000      	movs	r0, #0
 8008f7a:	e7e0      	b.n	8008f3e <_raise_r+0x12>

08008f7c <raise>:
 8008f7c:	4b02      	ldr	r3, [pc, #8]	; (8008f88 <raise+0xc>)
 8008f7e:	4601      	mov	r1, r0
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f7ff bfd3 	b.w	8008f2c <_raise_r>
 8008f86:	bf00      	nop
 8008f88:	2000000c 	.word	0x2000000c

08008f8c <_kill_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d07      	ldr	r5, [pc, #28]	; (8008fac <_kill_r+0x20>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	4611      	mov	r1, r2
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	f7f8 fe3b 	bl	8001c14 <_kill>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d102      	bne.n	8008fa8 <_kill_r+0x1c>
 8008fa2:	682b      	ldr	r3, [r5, #0]
 8008fa4:	b103      	cbz	r3, 8008fa8 <_kill_r+0x1c>
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
 8008faa:	bf00      	nop
 8008fac:	20000454 	.word	0x20000454

08008fb0 <_getpid_r>:
 8008fb0:	f7f8 be28 	b.w	8001c04 <_getpid>

08008fb4 <_init>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr

08008fc0 <_fini>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	bf00      	nop
 8008fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc6:	bc08      	pop	{r3}
 8008fc8:	469e      	mov	lr, r3
 8008fca:	4770      	bx	lr
